{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/folder.ini","path":"folder.ini","modified":0,"renderable":0},{"_id":"source/about/folder.ini","path":"about/folder.ini","modified":0,"renderable":0},{"_id":"source/tags/folder.ini","path":"tags/folder.ini","modified":0,"renderable":0},{"_id":"source/uploads/avatar1.png","path":"uploads/avatar1.png","modified":0,"renderable":0},{"_id":"themes/material-z/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/material-z/source/style.less","path":"style.less","modified":0,"renderable":1},{"_id":"source/uploads/avatar.png","path":"uploads/avatar.png","modified":0,"renderable":0},{"_id":"themes/material-z/source/fonts/icomoon.eot","path":"fonts/icomoon.eot","modified":0,"renderable":1},{"_id":"themes/material-z/source/fonts/icomoon.ttf","path":"fonts/icomoon.ttf","modified":0,"renderable":1},{"_id":"themes/material-z/source/fonts/icomoon.woff","path":"fonts/icomoon.woff","modified":0,"renderable":1},{"_id":"themes/material-z/source/fonts/quill.png","path":"fonts/quill.png","modified":0,"renderable":1},{"_id":"themes/material-z/source/fonts/quill.svg","path":"fonts/quill.svg","modified":0,"renderable":1},{"_id":"themes/material-z/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/material-z/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"themes/material-z/source/js/jquery.fitvids.js","path":"js/jquery.fitvids.js","modified":0,"renderable":1},{"_id":"themes/material-z/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/material-z/source/fonts/icomoon.svg","path":"fonts/icomoon.svg","modified":0,"renderable":1},{"_id":"themes/material-z/source/fonts/selection.json","path":"fonts/selection.json","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"11b1ff932d6f63771e15e89cf25d596f3213793d","modified":1542370491789},{"_id":"source/folder.ini","hash":"39361c4c00ee21840f00eaf470bee16ce758a8d3","modified":1542370492177},{"_id":"themes/material-z/LICENSE","hash":"44409ab0bcd7853e2ac93faad84e57299711e6bf","modified":1542418121403},{"_id":"themes/material-z/_config.yml","hash":"7587c2daf45f51a332ab7c113834135e45cdfc70","modified":1542418121414},{"_id":"themes/material-z/README.md","hash":"903881fb2ee13f713059adf425bb072e5a7d743f","modified":1542418121408},{"_id":"source/_drafts/http.md","hash":"05fc9a3890ae0824b7e471d686c9707c60fa46ff","modified":1542370491799},{"_id":"source/_drafts/js-react.md","hash":"1b729b841c66ca448c73ab915deb03076e42c769","modified":1542370491808},{"_id":"source/_drafts/movie-llqj.md","hash":"7b26196a38e8602cc356e313646afa0ef2e4969e","modified":1542370491813},{"_id":"source/_drafts/movie-tbszr.md","hash":"8e32c83363bb427f09c928d734fee254076652d9","modified":1542370491818},{"_id":"source/_drafts/mysql-performance-architecture.md","hash":"ca0e16e2cab583ebc11fe523939658e5f238763a","modified":1542370491826},{"_id":"source/_posts/docker-base.md","hash":"975ab5e2da7bc98020ba52c3757856563b445a78","modified":1557676038271},{"_id":"source/_posts/algorithm-permutation.md","hash":"f7ede3630994463a22094588c68026eb17f80dbc","modified":1557676490728},{"_id":"source/_posts/docker-devops.md","hash":"dcb10933162d4ab5ac02f943074cbb110e3833a8","modified":1557676410763},{"_id":"source/_posts/docker-install.md","hash":"b4c99e891ce6d6f4243d81957c9ab562d85629be","modified":1557676038245},{"_id":"source/_posts/docker-mirrors.md","hash":"43a2a90f723e13b80410eee65b8fff703e7f1b33","modified":1557676038192},{"_id":"source/_posts/git-modify-commit-message.md","hash":"1307cec339c790c7e49e871c83cceb0f14db1203","modified":1557676038192},{"_id":"source/_posts/git-remote-add.md","hash":"e275e5a58f9b013e0021cf69e57ea31b00dd776e","modified":1557676038193},{"_id":"source/_posts/git.md","hash":"3c40c87068fb945a89bf51a07909b111f6a8b6a9","modified":1557676038295},{"_id":"source/_posts/http-ouath.md","hash":"1a34108efde4c1e06323c60766ecfe2ae7079ebb","modified":1557676114254},{"_id":"source/_posts/http.md","hash":"597daff9c20502f493f96e1e9ff98e3e32ad7d80","modified":1557676114254},{"_id":"source/_posts/interview-bfwl.md","hash":"a7ae9fd99f8f9720df709bd929bf65208756e64a","modified":1557676490728},{"_id":"source/_posts/js-hexo.md","hash":"9faefd6e3e837c9ea0e53ba5a96f4c38ae5c98b3","modified":1557676410763},{"_id":"source/_posts/js-react.md","hash":"31345d22e5020375c3871e36d1d09033972e7e4c","modified":1557676374454},{"_id":"source/_posts/linixx-web-goserver.md","hash":"ef5614a4425c571353894e847593901b1b59463a","modified":1557676258544},{"_id":"source/_posts/linux-crontab.md","hash":"ac2d488e6777f7331bfcc176786b7619137891a5","modified":1557676192666},{"_id":"source/_posts/linux-ssh.md","hash":"9829988b2df4049c78483514b6081f0e8f11b1c7","modified":1557676208046},{"_id":"source/_posts/linux-yum源.md","hash":"2cc36ad9fad2d17d89794a75794f19af731d5c7e","modified":1557676221569},{"_id":"source/_posts/movie-llqj.md","hash":"f80c6ae8b01a51037a1e11eacf208309eb3c557a","modified":1557676298070},{"_id":"source/_posts/movie-tbszr.md","hash":"38d56af7a03466b16092f3f6c7130818aa6723fa","modified":1557676311062},{"_id":"source/_posts/movie-wxsnr.md","hash":"5c7b60123bbc6df2ea62ac960dbaa66171961a8c","modified":1557676311084},{"_id":"source/_posts/mysql-compare.md","hash":"35eff871c6507f60f25850d8b6f9719ce8cc2717","modified":1557676505612},{"_id":"source/_posts/mysql-index.md","hash":"f0e611151213177ee4c02c125dfb2692a1916b88","modified":1557677513865},{"_id":"source/_posts/pattern-adapter.md","hash":"879d8cec06a8797b82c8d547b8101133127ec7de","modified":1557677325944},{"_id":"source/_posts/pattern-observer.md","hash":"943b6156e3ef315892decd27f0447eb2692b1338","modified":1557677327463},{"_id":"source/_posts/php-booklist.md","hash":"359a3d017b0e4a37531541bc7afa213a58a97a8f","modified":1557676541403},{"_id":"source/_posts/php-composer-image.md","hash":"48e5e4fc76c72149b01df554778ec7d5bbddb333","modified":1557676421955},{"_id":"source/_posts/php-curl.md","hash":"4e414e72cb8802ebdedfec5fc9ff0cc5c8d18559","modified":1557676541403},{"_id":"source/_posts/php-email.md","hash":"7368483e7d9794cab77c0abf6c0e7d214f741889","modified":1557676541403},{"_id":"source/_posts/php-optimize.md","hash":"f0a76e562d5fea0c14d12134034ef7cb77cf0b95","modified":1557676541403},{"_id":"source/_posts/php-practice-wx-tp5-1.md","hash":"cbfd389532b36cb60369fb142c50797da7eb824b","modified":1557676137864},{"_id":"source/_posts/php-practice-wx-tp5-2.md","hash":"6bf9078952b6857f4cb0fae51d190d57f144e617","modified":1557676160251},{"_id":"source/_posts/php-practice-wx-tp5-3.md","hash":"4c26a79c46f31ea0254aa956e46c6e160afac976","modified":1557676160251},{"_id":"source/_posts/php-route.md","hash":"20dfe463651cfcf3b02836c48555eab63ca56170","modified":1557676619741},{"_id":"source/_posts/php-sphinx-windows.md","hash":"2b29ddc70a7eaeea9e15107776a0b5201e4730c1","modified":1557676619742},{"_id":"source/_posts/php-tp5-controller3.md","hash":"0e39b3dd45c7f631440e5f72b542d6b1d5da6808","modified":1557677836640},{"_id":"source/_posts/php-无限级分类.md","hash":"4bcb78d863cc013ad92502fb15d862d05d64a4f8","modified":1557676619741},{"_id":"source/_posts/phpstorm-xdebug.md","hash":"078a02c55d87d92b10e86171ac2d4f81aca56d4b","modified":1557676619741},{"_id":"source/_posts/python-base.md","hash":"8d72b84602ffafe889b6d91fcd8bdd105ef0ccc7","modified":1557676872501},{"_id":"source/_posts/redis-base.md","hash":"4968b0488e8a8e0a603bef8f713f55affdb350ef","modified":1557678058408},{"_id":"source/_posts/summary-monthly2.md","hash":"8072a99640c8b7fd40081675824fa0afd4e7df88","modified":1557676340391},{"_id":"source/_posts/summary-monthly4.md","hash":"256c7fb183a81977a1374ccb7443c93ec945c606","modified":1557676340391},{"_id":"source/_posts/summary-yearly-1.md","hash":"48395467e1faf626d43efbab1fc2480c1453e39d","modified":1557676340391},{"_id":"source/_posts/vscode-background.md","hash":"f03ea88a0a56fb7840df1fa025f27b43a25c2686","modified":1557677802403},{"_id":"source/_posts/vscode-xdebug.md","hash":"b6f9f3d8ee013280eb1383546673f54e03f2f0f6","modified":1557677686893},{"_id":"source/_posts/windows-tool.md","hash":"2543b0a776bb4ec1e981689adc26b1a649618ad8","modified":1557677804690},{"_id":"source/about/folder.ini","hash":"39361c4c00ee21840f00eaf470bee16ce758a8d3","modified":1542370492168},{"_id":"source/about/index-1.md","hash":"0525abbdea2b3fa4f120207f4067f44b33cfb7fb","modified":1527393195685},{"_id":"source/about/index.md","hash":"706681f41cafda6905c5a76e5882b0714fa30e4d","modified":1542370492175},{"_id":"source/categories/index.md","hash":"555a7ee13bc398e00d0b5bcc136cb4c9311d0e63","modified":1542370462997},{"_id":"source/comment/index.md","hash":"7467de997fde86031a7e300c026f85933d58d7b2","modified":1542370463006},{"_id":"source/server/index.md","hash":"25049bb9df4e535f66e74fe2c20cba07ff2c1bdd","modified":1527393195688},{"_id":"source/tags/folder.ini","hash":"39361c4c00ee21840f00eaf470bee16ce758a8d3","modified":1542370492251},{"_id":"source/tags/index.md","hash":"7b74772fb4996ac3bfb4ccab638f4bb3ca025786","modified":1542370463099},{"_id":"source/tool/index.md","hash":"a402b05f52c9e0e3e705b48840587636f8323aee","modified":1527393195691},{"_id":"source/uploads/avatar1.png","hash":"c6d7f41e7add4f3680485c58188d13bd416ec078","modified":1542370492263},{"_id":"source/web/index.md","hash":"69386b0f3feb60885dc69f35f4b983ab9c034c61","modified":1527393195693},{"_id":"source/work/index.md","hash":"07ab7cb8012c4609a8883dd1877e72ede7302425","modified":1542370463124},{"_id":"source/work/为什么要学习Linux.md","hash":"20b472ab21a4e07031ef9f170ccd55b8cd984ac7","modified":1542370463127},{"_id":"themes/material-z/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1542418121357},{"_id":"themes/material-z/.git/config","hash":"15eba479a5645249a5c579cb110820b0b43b6626","modified":1542418121390},{"_id":"themes/material-z/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1542418114755},{"_id":"themes/material-z/.git/index","hash":"13725108e0411e1588bc9111df8c67bec0b69c91","modified":1548834582223},{"_id":"themes/material-z/.git/packed-refs","hash":"286c9835f3392ae52ec9711e47de55a117f6fb52","modified":1542418121331},{"_id":"themes/material-z/layout/archive.ejs","hash":"a2365311b7876fd5b6920d5483d4bf5c24369fce","modified":1542418121627},{"_id":"themes/material-z/layout/category.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1542418121632},{"_id":"themes/material-z/layout/index.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1542418121634},{"_id":"themes/material-z/layout/layout.ejs","hash":"610601ed732f1ce6fbb812fe4d6f2ae77a078de6","modified":1542418121643},{"_id":"themes/material-z/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1542418121648},{"_id":"themes/material-z/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1542418121649},{"_id":"themes/material-z/layout/tag.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1542418121651},{"_id":"themes/material-z/source/favicon.ico","hash":"b7e8bc9e1ec7ab04319e2721441ab74d4beee1ce","modified":1542418121668},{"_id":"themes/material-z/source/style.less","hash":"f4d2b7063efc3b01770817d3afdd369802805455","modified":1542418121857},{"_id":"source/uploads/avatar.png","hash":"e385dc435d0278ecbefd161c6847ad7dc242441a","modified":1542370492260},{"_id":"source/tags/Hexo/index.html","hash":"a282df745afbc975b488215e5705764ab363fda0","modified":1542370492212},{"_id":"source/tags/Linux/index.html","hash":"8411c49696d1f23fa6ba8c56ebd324ca8bf80971","modified":1542370492248},{"_id":"themes/material-z/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1542418114759},{"_id":"themes/material-z/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1542418114761},{"_id":"themes/material-z/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1542418114764},{"_id":"themes/material-z/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1542418114766},{"_id":"themes/material-z/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1542418114768},{"_id":"themes/material-z/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1542418114770},{"_id":"themes/material-z/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1542418114773},{"_id":"themes/material-z/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1542418114775},{"_id":"themes/material-z/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1542418114781},{"_id":"themes/material-z/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1542418114783},{"_id":"themes/material-z/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1542418114786},{"_id":"themes/material-z/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1542418114790},{"_id":"themes/material-z/.git/logs/HEAD","hash":"c148d16de9e14dbec23b4ebf2227cf34ffbc8272","modified":1542418121373},{"_id":"themes/material-z/layout/_partial/archive.ejs","hash":"d2b9757cf7ce09ccda08ec3a7ec763c3e790b798","modified":1542418121434},{"_id":"themes/material-z/layout/_partial/article.ejs","hash":"892b77e7e4551bcac49723b197f6ea4fa4218e95","modified":1542418121462},{"_id":"themes/material-z/layout/_partial/categories.ejs","hash":"b9a6a4d5c002afac5873d44a47dd501535c301fa","modified":1542418121473},{"_id":"themes/material-z/layout/_partial/footer.ejs","hash":"395c2f671816b256086af07828dd6853d0119460","modified":1542418121481},{"_id":"themes/material-z/layout/_partial/gotop.ejs","hash":"c01c586b23b59a08e8bcf2c82137662346e8248f","modified":1542418121485},{"_id":"themes/material-z/layout/_partial/head.ejs","hash":"b949410e3d5106462b258f9ed9f31fe9e8b4f3c6","modified":1542418121504},{"_id":"themes/material-z/layout/_partial/header.ejs","hash":"6a6e436f682b203ca76f1ac03b338d9492cea385","modified":1542418121519},{"_id":"themes/material-z/layout/_partial/loading.ejs","hash":"9c5721d5a5cff00860f2775b12dd73fe62375201","modified":1542418121524},{"_id":"themes/material-z/layout/_partial/post.ejs","hash":"e1a7096419a284daf81dcd873de13b6e188ea028","modified":1542418121537},{"_id":"themes/material-z/layout/_partial/scripts.ejs","hash":"4934b8cd3641be5c95c4b1faa9c9ae9b71ec2064","modified":1542418121565},{"_id":"themes/material-z/layout/_partial/side.ejs","hash":"e4872c39507b4087ef9b18810a994694ce9beadb","modified":1542418121582},{"_id":"themes/material-z/layout/_widget/about.ejs","hash":"39a1665bb7b6e9448d361ec23d5f4c5960622c4f","modified":1542418121588},{"_id":"themes/material-z/layout/_widget/categories.ejs","hash":"239bc6e3fa8ccd5e1cc2258f2c235c9d9239f772","modified":1542418121595},{"_id":"themes/material-z/layout/_widget/links.ejs","hash":"2d6c7fc92b0330a7a79b8b680cf9f4286fdf0291","modified":1542418121602},{"_id":"themes/material-z/layout/_widget/tagcloud.ejs","hash":"285e4b366641a2e712feec306843afb375cd5cbe","modified":1542418121609},{"_id":"themes/material-z/snapshots/phone.png","hash":"8e78f25ee179e3ff27fff101050792184935d319","modified":1542418121665},{"_id":"themes/material-z/source/fonts/icomoon.eot","hash":"8dab0fc059d96836b4238f17dff061a30227cc8b","modified":1542418121675},{"_id":"themes/material-z/source/fonts/icomoon.ttf","hash":"2748f80f34077d39d9b7256b6ba8d25f364a0d18","modified":1542418121689},{"_id":"themes/material-z/source/fonts/icomoon.woff","hash":"e66ca26db550544ad694363efc055fa987a170dd","modified":1542418121696},{"_id":"themes/material-z/source/fonts/quill.png","hash":"e21f67b094d99c24a4a6ad45781470d40e6ce031","modified":1542418121698},{"_id":"themes/material-z/source/fonts/quill.svg","hash":"526bb43b67bc4157d8f3503cf4347867a8d8fdb7","modified":1542418121703},{"_id":"themes/material-z/source/img/favicon.ico","hash":"b7e8bc9e1ec7ab04319e2721441ab74d4beee1ce","modified":1542418121713},{"_id":"themes/material-z/source/js/app.js","hash":"881cb5cbaa121c1f2a9346be866dc039b6722a29","modified":1542418121726},{"_id":"themes/material-z/source/js/jquery.fitvids.js","hash":"57946a22c79654014eb00fb548f727d302221873","modified":1542418121736},{"_id":"themes/material-z/source/js/search.js","hash":"632ce023094442d350dcd2895ca5f948364746cb","modified":1542418121750},{"_id":"themes/material-z/source/less/_archive.less","hash":"6b7a9e971cd83574c4ec826b8fb12473499da730","modified":1542418121757},{"_id":"themes/material-z/source/less/_article.less","hash":"5f93e023ec2f685b62d42f342e9b194acee32e59","modified":1542418121763},{"_id":"themes/material-z/source/less/_base.less","hash":"95d10eaa993ad8a42171e62b0742270b4e6e231f","modified":1542418121771},{"_id":"themes/material-z/source/less/_defines.less","hash":"085a96cfa6202db2c4abbefc79dea22331a59bf7","modified":1542418121777},{"_id":"themes/material-z/source/less/_fonts.less","hash":"12bd767b8f69dcebe43e79ff1266b4714ff7153c","modified":1542418121783},{"_id":"themes/material-z/source/less/_footer.less","hash":"973b1f9c62159f345833db5c30db03c351c66c5c","modified":1542418121788},{"_id":"themes/material-z/source/less/_gotop.less","hash":"24fd550e8b40bf7a927ea3828b31eadb308cfe46","modified":1542418121794},{"_id":"themes/material-z/source/less/_header.less","hash":"e9a5c3ba32b9e17015fd17ce340e7d9e489a37b9","modified":1542418121800},{"_id":"themes/material-z/source/less/_main.less","hash":"72ce3eb1e9699cf6b34e689ed0d7982ade7198d0","modified":1542418121807},{"_id":"themes/material-z/source/less/_normalize.less","hash":"02fe53286d071637534d5aa2c57c76c168c0d521","modified":1542418121813},{"_id":"themes/material-z/source/less/_pagination.less","hash":"7cc086e6cdc3f0b940bf0573a5baae446766f816","modified":1542418121817},{"_id":"themes/material-z/source/less/_search.less","hash":"ab1e3d8fdd489adde30723c40726e5e8187a8b6c","modified":1542418121823},{"_id":"themes/material-z/source/less/_side.less","hash":"07b6b4ce81e210783a39a81a7435f6b669135251","modified":1542418121829},{"_id":"themes/material-z/source/less/_toc.less","hash":"b809d1a511976a24b10c53f3900bf149e0381389","modified":1542418121835},{"_id":"themes/material-z/source/less/_tog.less","hash":"bff0ab3b06e14a3c171ccd53061f8ccddb1e2fc2","modified":1542418121840},{"_id":"themes/material-z/source/less/_typo.less","hash":"8635fe95a08614f22833c6c159ebf6cf3d731e12","modified":1542418121845},{"_id":"themes/material-z/source/less/_widget.less","hash":"67b1074b3d88faaa94211c6cf74eed6265db38ee","modified":1542418121852},{"_id":"themes/material-z/snapshots/article.png","hash":"3f1aff6057a807b55edd2435421b59a1f4e82c40","modified":1542418121656},{"_id":"themes/material-z/.git/objects/pack/pack-2ccb47a510eb8292cc580a82840f6e5c0bd3a06b.idx","hash":"a48bbe6497da738a5a70a2ad37c214075a753bfe","modified":1542418121144},{"_id":"themes/material-z/.git/refs/heads/master","hash":"7b5b8e0bd84a5c01da5887818ef3d3265777d785","modified":1542418121371},{"_id":"themes/material-z/layout/_partial/post/recommended_posts.ejs","hash":"674006b8a3675b3d4f08934fdcffdf5d1da3301f","modified":1542418121549},{"_id":"themes/material-z/source/fonts/icomoon.svg","hash":"176f2f9e75b9174d1d8de9f10cafee9df8e650c9","modified":1542418121682},{"_id":"themes/material-z/source/fonts/selection.json","hash":"fb19f87427589458248db297baabddf4a7f2481e","modified":1542418121710},{"_id":"themes/material-z/.git/logs/refs/heads/master","hash":"c148d16de9e14dbec23b4ebf2227cf34ffbc8272","modified":1542418121378},{"_id":"themes/material-z/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1542418121354},{"_id":"themes/material-z/.git/logs/refs/remotes/origin/HEAD","hash":"c148d16de9e14dbec23b4ebf2227cf34ffbc8272","modified":1542418121351},{"_id":"themes/material-z/snapshots/index.png","hash":"a4aa937770d1573032f3e830be3cd75672a26036","modified":1542418121662},{"_id":"themes/material-z/.git/objects/pack/pack-2ccb47a510eb8292cc580a82840f6e5c0bd3a06b.pack","hash":"198cf2f4ace0a8402bf7d550f9bd5604699d2435","modified":1542418121172},{"_id":"public/atom.xml","hash":"933349bb2ccd473c136fba442e6baab20f2b4338","modified":1557678128648},{"_id":"public/content.json","hash":"a2fc5c312f998dbd92195990929bfce4554f4747","modified":1557678128648},{"_id":"public/search.xml","hash":"e172676de5c44af2ba622f6fa4853d1768c2c04c","modified":1557678130468},{"_id":"public/about/index-1.html","hash":"4ce2d5de8af298a820549735abf9570d6f7ac428","modified":1557678130533},{"_id":"public/categories/index.html","hash":"06fc50b1750e6014ddd804917cee908fff835bf8","modified":1557678130534},{"_id":"public/about/index.html","hash":"fa3362c0f54805488a7960a2145650e5d2629543","modified":1557678130547},{"_id":"public/comment/index.html","hash":"3ead3df8d476315412ad03cada5dc43a1e533d02","modified":1557678130547},{"_id":"public/server/index.html","hash":"946a2bf7bdfe39327dc211fa2064f8ecacbe7803","modified":1557678130547},{"_id":"public/tags/index.html","hash":"075b771dd6796787c26138995e88d1917e3ae3f3","modified":1557678130547},{"_id":"public/tool/index.html","hash":"627877f90e5250cfc1c9977f614d1ecbe8714305","modified":1557678130547},{"_id":"public/web/index.html","hash":"8fe0c5302ee9db8d5a88eef5288aa818ce0d45f6","modified":1557678130547},{"_id":"public/work/index.html","hash":"3a0a18620ddb9a619ba7b3e30c4c92d2c516ffd1","modified":1557678130547},{"_id":"public/2019/05/11/redis-base/index.html","hash":"0149672274e7ebab55982e6a1e679501317e1b06","modified":1557678130548},{"_id":"public/2018/07/31/docker-mirrors/index.html","hash":"9e8a47aa36c2936e9c1666b2fd1d92d9b42540b3","modified":1557678130548},{"_id":"public/2018/07/31/linux-yum源/index.html","hash":"42a5f8b12e85a7ec4df2c0e4c923b2b26336358c","modified":1557678130548},{"_id":"public/2018/05/08/movie-llqj/index.html","hash":"3c1a1cbe809e2c292ab378a693bd13df4167b515","modified":1557678130548},{"_id":"public/2018/05/01/js-hexo/index.html","hash":"c060184f9225fb5179d4ea0ed9cc6b8ffda4d476","modified":1557678130548},{"_id":"public/2018/05/01/movie-tbszr/index.html","hash":"74f8d138fd344b20a1d8cd4f8b96c6a1169efc60","modified":1557678130548},{"_id":"public/2018/04/26/php-composer-image/index.html","hash":"275908cc463977e7cf2a58480e5408e58e73c680","modified":1557678130548},{"_id":"public/2018/04/16/git-remote-add/index.html","hash":"3215c7857f0b8a36e93b44318a1acd823c27f24c","modified":1557678130548},{"_id":"public/archives/2019/03/index.html","hash":"7b3676d7795f5884262109235eee4f41157b8529","modified":1557678130548},{"_id":"public/categories/【算法】/index.html","hash":"e0907d1e317552d3086ffe42d7567d91ae3e7645","modified":1557678130548},{"_id":"public/categories/【面经】/index.html","hash":"e781076ccafce206a102b740863cd13dc22644de","modified":1557678130548},{"_id":"public/categories/【书单】/index.html","hash":"ac8662acab32b203bcbcb06b700a39f4388fded6","modified":1557678130548},{"_id":"public/categories/【Python相关】/index.html","hash":"6cb2ac6dd4ee24029cafc0f9feb59310108aa10d","modified":1557678130548},{"_id":"public/categories/【Redis相关】/index.html","hash":"ee854622aa8a775acd7ee898d0b1a2a8b95f0794","modified":1557678130548},{"_id":"public/tags/http/index.html","hash":"fbfb69f78424131d62634e20db2fc236d36ede0f","modified":1557678130549},{"_id":"public/tags/web/index.html","hash":"8723d439dd7bbb576d970d1b2ef3845017eb4b01","modified":1557678130549},{"_id":"public/tags/docker/index.html","hash":"0c7d8e8dc490406c160803a7d7d1ad8366d7ccfc","modified":1557678130549},{"_id":"public/tags/算法/index.html","hash":"89fa876af23de34aadc34fd1537162bdecd9f25f","modified":1557678130549},{"_id":"public/tags/全排列/index.html","hash":"2a4cdb090f2d28f8d3217283773a81fd59e39596","modified":1557678130549},{"_id":"public/tags/oauth/index.html","hash":"02c85aebde9fbd965cad18594f814b449cda2c37","modified":1557678130549},{"_id":"public/tags/面经/index.html","hash":"f51979745606f3e9515b9ebed07cb5c866cbb9d5","modified":1557678130549},{"_id":"public/tags/hexo/index.html","hash":"cf785691df5ad65756439afb7c11270233bf2ae8","modified":1557678130549},{"_id":"public/tags/React/index.html","hash":"ef5d25d60572859adeef4159fc7cf88fc0032b4c","modified":1557678130549},{"_id":"public/tags/上线/index.html","hash":"17bd174b0bb91d23651c9b633c003f2140e4eaa1","modified":1557678130549},{"_id":"public/tags/ssh/index.html","hash":"0ccfe0043e8369c09dcc1c28c107e7ecb40aafdf","modified":1557678130549},{"_id":"public/tags/适配器模式/index.html","hash":"2acbb6c0a342c93fcd1979952c12747680c94c2f","modified":1557678130549},{"_id":"public/tags/观察者模式/index.html","hash":"d17962b50c24259a3d5eb730ca39a6167f625690","modified":1557678130549},{"_id":"public/tags/book/index.html","hash":"79f7b7212f326dc18c2540d840d59aa7bbf9734e","modified":1557678130549},{"_id":"public/tags/composer/index.html","hash":"9eb0fd445f944b18f55022ac8efc8b4505fe5d8f","modified":1557678130550},{"_id":"public/tags/curl/index.html","hash":"1a306472ced957ba7e26bbb1a6f62496a41a995e","modified":1557678130550},{"_id":"public/tags/email/index.html","hash":"66dffb4d50240e83dd7430e05ac818b6ed9cf826","modified":1557678130550},{"_id":"public/tags/无限级分类/index.html","hash":"49397497490e0f544a5dd8ffc464e031f09d3260","modified":1557678130550},{"_id":"public/tags/phpstrom/index.html","hash":"b818caf5731980e67d7846a6408fb51ac3ae5dc2","modified":1557678130550},{"_id":"public/tags/python/index.html","hash":"6713c8402dd696f75cdff8e4d4e6cf183f5992f4","modified":1557678130550},{"_id":"public/tags/redis/index.html","hash":"c9e39826104f04bc11da2bb2736f3d4fa23f56a7","modified":1557678130550},{"_id":"public/tags/plugin/index.html","hash":"a81ab00808c9a9a71ffe7f9dbf968cf2db19a78b","modified":1557678130550},{"_id":"public/tags/tool/index.html","hash":"7faaeabeb462b3f723f2d475fb811802020fe269","modified":1557678130550},{"_id":"public/tags/Docker/index.html","hash":"b1dd0aac8497c6ae6bf42e1da33b01e15a3a1144","modified":1557678130550},{"_id":"public/tags/DevOps/index.html","hash":"70b14c281603842331d5f3718fe706bad22f902d","modified":1557678130550},{"_id":"public/tags/crontab/index.html","hash":"1eb3aa18178456ff8c079612d745d0981da87fce","modified":1557678130550},{"_id":"public/tags/optimize/index.html","hash":"2b2dafa5f66c7c749e59e8c58b79ea91c72d5ed2","modified":1557678130550},{"_id":"public/tags/sphinx/index.html","hash":"85894b16144e045c1f3ce952915599d62251395d","modified":1557678130550},{"_id":"public/work/为什么要学习Linux.html","hash":"7d5b5f99dee93d56f2949778dcbdfdd3ba134361","modified":1557678130551},{"_id":"public/tags/Hexo/index.html","hash":"a8bee9137082af433d2115644feb0e0a54f91325","modified":1557678130551},{"_id":"public/tags/Linux/index.html","hash":"90055631959bb6d2e92fce5acc031d14b9ec824f","modified":1557678130551},{"_id":"public/2019/05/07/pattern-observer/index.html","hash":"874c0039fdda4fa319900ad93c1dcf75f025479a","modified":1557678130551},{"_id":"public/2019/04/28/pattern-adapter/index.html","hash":"0feb180c46082951b7e89ef1058d5f892c54acd9","modified":1557678130551},{"_id":"public/2019/04/01/summary-yearly-1/index.html","hash":"f62c95340e5e5eb7d8a6b7ec23e62de7fec5ac81","modified":1557678130551},{"_id":"public/2019/04/01/interview-bfwl/index.html","hash":"704cf3c7f3b351b9570f1b5e58b1e7924516b22a","modified":1557678130551},{"_id":"public/2019/03/15/mysql-index/index.html","hash":"21ece945e5231e734781222d1c1da0c70c776872","modified":1557678130551},{"_id":"public/2018/12/11/docker-devops/index.html","hash":"b8cf5764f48a5bde168a2e62e9c51f85554d3e65","modified":1557678130552},{"_id":"public/2018/08/30/http/index.html","hash":"521454d63266cd24e46b6ff5376965c5273e48d6","modified":1557678130552},{"_id":"public/2018/08/13/git-modify-commit-message/index.html","hash":"2a8c27a94ed12cdc14de4426966b02ccad1ac2d1","modified":1557678130552},{"_id":"public/2018/08/08/js-react/index.html","hash":"4cfd520cbf2a391b9b1a609c95f9276462e8fbca","modified":1557678130552},{"_id":"public/2018/08/07/php-tp5-controller3/index.html","hash":"2a2b4ca6d1f37eb810ea7983e98495b424494f2c","modified":1557678130552},{"_id":"public/2018/07/31/docker-base/index.html","hash":"b0edf9c7f04ee7fadcaa2dac84ddb1a97fa95be7","modified":1557678130552},{"_id":"public/2018/07/31/docker-install/index.html","hash":"4201db8c23cad9bee50433c8a44c9372d18dd03b","modified":1557678130552},{"_id":"public/2018/07/30/python-base/index.html","hash":"78adeea03882d652c743316df1a8062527c167a6","modified":1557678130552},{"_id":"public/2018/07/30/linux-ssh/index.html","hash":"ba65a716d08707df8890c5c0100d3e603e5e4a6f","modified":1557678130552},{"_id":"public/2018/07/28/summary-monthly4/index.html","hash":"5a8f79a1b1d2760dfe64a0dd853cce245d1c915b","modified":1557678130552},{"_id":"public/2018/07/11/php-practice-wx-tp5-3/index.html","hash":"20fd49e8439acb0d0122614c9b5b3a0e5ad47207","modified":1557678130553},{"_id":"public/2018/07/09/php-optimize/index.html","hash":"21ad737ac539a5f2c4e3cbdb4644ac1749971180","modified":1557678130553},{"_id":"public/2018/07/07/linixx-web-goserver/index.html","hash":"fc79e8a6232c81aaab39462b7049b3804ad52cdb","modified":1557678130553},{"_id":"public/2018/07/06/linux-crontab/index.html","hash":"292808038048666fba00b3b458aaf413d2d4bf6d","modified":1557678130553},{"_id":"public/2018/07/05/php-practice-wx-tp5-2/index.html","hash":"02d70bf97ecc802bb885169970e6bff9d53b14e6","modified":1557678130553},{"_id":"public/2018/07/05/http-ouath/index.html","hash":"56647fefb778bd89b740621fee1c5d3c9187674d","modified":1557678130553},{"_id":"public/2018/07/01/php-practice-wx-tp5-1/index.html","hash":"0213befd61638452778302ca5621e8299a16eaab","modified":1557678130553},{"_id":"public/2018/06/29/windows-tool/index.html","hash":"7683b7733b2be34993d59b2d16ff1a82098ee94b","modified":1557678130553},{"_id":"public/2018/06/22/vscode-background/index.html","hash":"b21a11d19121abda509bdf210ba20c74c9078974","modified":1557678130553},{"_id":"public/2018/06/20/summary-monthly2/index.html","hash":"b8396f6d207f0df19e7e626afbcade1716205cee","modified":1557678130553},{"_id":"public/2018/06/09/algorithm-permutation/index.html","hash":"1a4f342c8d5a7b2cd1e4ffdef21bb4b7f1272241","modified":1557678130553},{"_id":"public/2018/06/05/mysql-compare/index.html","hash":"6293ea561fcbddf0ba4c894e01d0dd344e668498","modified":1557678130554},{"_id":"public/2018/05/16/php-无限级分类/index.html","hash":"16a1da6012f50ee476be943f5e80af5531fd9b9f","modified":1557678130554},{"_id":"public/2018/05/15/movie-wxsnr/index.html","hash":"89487fb19c378784f5fb396926f9cd5eed4bdcd4","modified":1557678130554},{"_id":"public/2018/05/14/php-sphinx-windows/index.html","hash":"91018d9d8be1241d0ee0889d95c05029f90f096c","modified":1557678130554},{"_id":"public/2018/05/09/vscode-xdebug/index.html","hash":"6332a0cc3264bbe6da82303356819db19ed0a213","modified":1557678130554},{"_id":"public/2018/05/08/php-booklist/index.html","hash":"53f80503198f899ced43121880ac116474a58b5d","modified":1557678130554},{"_id":"public/2018/05/07/php-route/index.html","hash":"01c57fc97cba4fa115b9c5fcad37cb7fe645af04","modified":1557678130554},{"_id":"public/2018/05/05/phpstorm-xdebug/index.html","hash":"05ca118473811dcbf9a8b1fb869354dc738d54a1","modified":1557678130554},{"_id":"public/2018/04/16/git/index.html","hash":"5760e279a9144a4e277040ac1934d99ccdbce9c4","modified":1557678130554},{"_id":"public/2018/04/16/php-email/index.html","hash":"6029a870ab9c809a54972aa3083b374a1db987c5","modified":1557678130554},{"_id":"public/2018/04/16/php-curl/index.html","hash":"23d4a85978b9b05dafb131fc46cf6e8cd09aa884","modified":1557678130554},{"_id":"public/archives/index.html","hash":"05be2cb797e39bcfb8cb1e3b4619117877c5ecd8","modified":1557678130554},{"_id":"public/archives/page/2/index.html","hash":"117e66183cccd33a967c866abb0740921da3b633","modified":1557678130555},{"_id":"public/archives/page/3/index.html","hash":"59625ee6e84c462f4012984acd2975ed6a2eb9e3","modified":1557678130555},{"_id":"public/archives/page/4/index.html","hash":"012debc96b7c3585716502a72fc0d5d0fc61e009","modified":1557678130555},{"_id":"public/archives/page/5/index.html","hash":"f8a9aa80dd948169ba7a55099d0d17121f849dc6","modified":1557678130555},{"_id":"public/archives/2018/index.html","hash":"117076aaca0d5660d4d5fd2ab0cd9fbd942e94cf","modified":1557678130555},{"_id":"public/archives/2018/page/2/index.html","hash":"2d71827ee2634158a0ee7594596a5f296c76c8f6","modified":1557678130555},{"_id":"public/archives/2018/page/3/index.html","hash":"46bf38cbbf22d96db28b5f8a4fbd872ece358328","modified":1557678130555},{"_id":"public/archives/2018/page/4/index.html","hash":"3bfaa3d519313051b279c1c0fb56077fbb27adea","modified":1557678130555},{"_id":"public/archives/2018/04/index.html","hash":"dba45ab71ddfac613d70f615fac89ad600d81dc5","modified":1557678130555},{"_id":"public/archives/2018/05/index.html","hash":"2e9f2b9335de5c7d8fa311d9966cf2cb981d722d","modified":1557678130555},{"_id":"public/archives/2018/06/index.html","hash":"8d01e94b7a9ab8314e8b94b266bb90b9737eac44","modified":1557678130556},{"_id":"public/archives/2018/07/index.html","hash":"532e00a14a45a5ec347204d3a4032b04789c762f","modified":1557678130556},{"_id":"public/archives/2018/07/page/2/index.html","hash":"881fb07a15c9fb936a78b8ecfcf7588d3236a8e2","modified":1557678130556},{"_id":"public/archives/2018/08/index.html","hash":"a59d99160780c522de321ccbec60a5768f0f5c09","modified":1557678130556},{"_id":"public/archives/2018/12/index.html","hash":"61bf5295ba091bf71e2c4661a2c9aedaca2cd2b0","modified":1557678130556},{"_id":"public/archives/2019/index.html","hash":"f7293479a81c534efd6157f31639754f041c43ea","modified":1557678130556},{"_id":"public/archives/2019/04/index.html","hash":"777fb0c0a7bd96b474156a4d72c8671773b83937","modified":1557678130556},{"_id":"public/archives/2019/05/index.html","hash":"58223c41c822b4e875600cb8f51ce94a3c0e589e","modified":1557678130556},{"_id":"public/categories/【Docker相关】/index.html","hash":"dba5f304c4037bf87e3799e04e018ef5a233e796","modified":1557678130556},{"_id":"public/categories/【开发工具】/index.html","hash":"6ec3fab4b644124c3e6ac9ea61df047df101a060","modified":1557678130561},{"_id":"public/categories/【HTTP相关】/index.html","hash":"6439a02ab35e5e837a7ea1c19a416eacd3a9fbdc","modified":1557678130561},{"_id":"public/categories/【前端相关】/index.html","hash":"76dc6fcc086c331dd40ba4e43d3d525230b54d75","modified":1557678130561},{"_id":"public/categories/【Linux相关】/index.html","hash":"dec8309df1d3eb0f9593137eb1896459b3c8b899","modified":1557678130561},{"_id":"public/categories/【影评感悟】/index.html","hash":"d0edc9b75c35276e4282d0e2cdba12bd447e2f97","modified":1557678130562},{"_id":"public/categories/【MySQL相关】/index.html","hash":"fbb508edf9277c8bb3197fe05f09bfead8f6de0a","modified":1557678130562},{"_id":"public/categories/【设计模式】/index.html","hash":"8f093fe13f6043a8ed7f4816f26d5cd673f83e0c","modified":1557678130562},{"_id":"public/categories/【PHP相关】/index.html","hash":"4d0fe8fc231378c62fd2f8615436abd6865108d6","modified":1557678130562},{"_id":"public/categories/【PHP框架】/index.html","hash":"3fbce77044774c68923270ba61b6b9dc3401e982","modified":1557678130562},{"_id":"public/categories/【工作总结】/index.html","hash":"4de80f9684c4a515ca7953c7c3b006bffa119a43","modified":1557678130563},{"_id":"public/page/2/index.html","hash":"6bb8cbeaa7d3d1354e090b15c44033b896334685","modified":1557678130563},{"_id":"public/index.html","hash":"e3f08fc1dbb392e32222966f434fc07c3c205762","modified":1557678130563},{"_id":"public/page/3/index.html","hash":"cbe7423e949901cb91fe422cc577c6a7d2894c2d","modified":1557678130563},{"_id":"public/page/4/index.html","hash":"34bcda6b4e09ff4d1f0126383bcf59870b2d938b","modified":1557678130563},{"_id":"public/page/5/index.html","hash":"1700f5c8d194323db68406dfb1604f32b700b417","modified":1557678130563},{"_id":"public/tags/movie/index.html","hash":"45038abacf3c32681de64eacf648e50b00a087cb","modified":1557678130563},{"_id":"public/tags/mysql/index.html","hash":"4e2f5a55c8bc3ede57ad8a035b1e997c3d647b3f","modified":1557678130563},{"_id":"public/tags/镜像/index.html","hash":"92e8a5ef5f56fa575b191e065fced49c90a1056a","modified":1557678130563},{"_id":"public/tags/git/index.html","hash":"7614a5e420295400cb07fb35855f9426411de814","modified":1557678130563},{"_id":"public/tags/github/index.html","hash":"5a8e0b706a6b13403607ebf5701e1c89c399b693","modified":1557678130563},{"_id":"public/tags/thinkphp5/index.html","hash":"6a1fd50b4d00444cf4f838671b12d929993ebdf4","modified":1557678130564},{"_id":"public/tags/微信小程序/index.html","hash":"9a9ded936f9daf2129f90b05ab676c7c62169097","modified":1557678130564},{"_id":"public/tags/xdebug/index.html","hash":"96adcae4cf588c0676d7afdfc6e80be48ef557ce","modified":1557678130564},{"_id":"public/tags/工作总结/index.html","hash":"36b52f6c11d8d61ebd3b4bff4cc560c0e51fa81b","modified":1557678130564},{"_id":"public/tags/vscoode/index.html","hash":"8767339a9008499358870808222bab432e53786c","modified":1557678130564},{"_id":"public/tags/路径/index.html","hash":"3c322e986825f8bf2dcca6d53a8d354fe0606955","modified":1557678130572},{"_id":"public/CNAME","hash":"11b1ff932d6f63771e15e89cf25d596f3213793d","modified":1557678130572},{"_id":"public/about/folder.ini","hash":"39361c4c00ee21840f00eaf470bee16ce758a8d3","modified":1557678130572},{"_id":"public/folder.ini","hash":"39361c4c00ee21840f00eaf470bee16ce758a8d3","modified":1557678130572},{"_id":"public/tags/folder.ini","hash":"39361c4c00ee21840f00eaf470bee16ce758a8d3","modified":1557678130572},{"_id":"public/favicon.ico","hash":"b7e8bc9e1ec7ab04319e2721441ab74d4beee1ce","modified":1557678130572},{"_id":"public/fonts/icomoon.eot","hash":"8dab0fc059d96836b4238f17dff061a30227cc8b","modified":1557678130572},{"_id":"public/fonts/icomoon.ttf","hash":"2748f80f34077d39d9b7256b6ba8d25f364a0d18","modified":1557678130572},{"_id":"public/fonts/icomoon.woff","hash":"e66ca26db550544ad694363efc055fa987a170dd","modified":1557678130572},{"_id":"public/fonts/quill.png","hash":"e21f67b094d99c24a4a6ad45781470d40e6ce031","modified":1557678130572},{"_id":"public/fonts/quill.svg","hash":"526bb43b67bc4157d8f3503cf4347867a8d8fdb7","modified":1557678130572},{"_id":"public/img/favicon.ico","hash":"b7e8bc9e1ec7ab04319e2721441ab74d4beee1ce","modified":1557678130572},{"_id":"public/uploads/avatar1.png","hash":"c6d7f41e7add4f3680485c58188d13bd416ec078","modified":1557678130591},{"_id":"public/uploads/avatar.png","hash":"e385dc435d0278ecbefd161c6847ad7dc242441a","modified":1557678130591},{"_id":"public/fonts/icomoon.svg","hash":"176f2f9e75b9174d1d8de9f10cafee9df8e650c9","modified":1557678130592},{"_id":"public/js/app.js","hash":"881cb5cbaa121c1f2a9346be866dc039b6722a29","modified":1557678130600},{"_id":"public/js/jquery.fitvids.js","hash":"57946a22c79654014eb00fb548f727d302221873","modified":1557678130600},{"_id":"public/js/search.js","hash":"632ce023094442d350dcd2895ca5f948364746cb","modified":1557678130612},{"_id":"public/style.css","hash":"96443f622f8c36cf525d82e89262863cd1622991","modified":1557678131033},{"_id":"public/fonts/selection.json","hash":"4abd78f4d4700edecf67949b8f3e064f06f88381","modified":1557678131077}],"Category":[{"name":"HTTP","_id":"cjvl5c3yo00042wuuwfsttl87"},{"name":"React","_id":"cjvl5c3yx000b2wuuekllq9yd"},{"name":"movie","_id":"cjvl5c3z8000k2wuui2p9yni1"},{"name":"MySQL","_id":"cjvl5c3zi000v2wuuftbfdg3b"},{"name":"【Docker相关】","_id":"cjvl5c3zm00122wuu8l0ne12a"},{"name":"【算法】","_id":"cjvl5c3zr00192wuup595mesz"},{"name":"【开发工具】","_id":"cjvl5c404001p2wuuu2ukl4ko"},{"name":"【HTTP相关】","_id":"cjvl5c40i002b2wuufyyon3a2"},{"name":"【面经】","_id":"cjvl5c40n002j2wuublm5ilk8"},{"name":"【前端相关】","_id":"cjvl5c40s002q2wuuix1z8r5h"},{"name":"【Linux相关】","_id":"cjvl5c41000332wuu9wi3ke8m"},{"name":"【影评感悟】","_id":"cjvl5c41b003j2wuu9ydgbt6o"},{"name":"【MySQL相关】","_id":"cjvl5c41i003y2wuujcpwybr7"},{"name":"【设计模式】","_id":"cjvl5c41m00462wuuj72l87j8"},{"name":"【书单】","_id":"cjvl5c41s004d2wuuyfo0kv15"},{"name":"【PHP相关】","_id":"cjvl5c41u004i2wuupljjqgv8"},{"name":"【PHP框架】","_id":"cjvl5c41z004u2wuus8t870xa"},{"name":"【Python相关】","_id":"cjvl5c42600552wuudkjwc4qy"},{"name":"【Redis相关】","_id":"cjvl5c428005a2wuuyxv1mm1z"},{"name":"【工作总结】","_id":"cjvl5c429005d2wuu3o3un86m"}],"Data":[],"Page":[{"title":"About","date":"2018-05-08T08:32:01.000Z","_content":"","source":"about/index-1.md","raw":"---\ntitle: about\ndate: 2018-05-08 16:32:01\n---\n","updated":"2018-05-27T03:53:15.685Z","path":"about/index-1.html","comments":1,"layout":"page","_id":"cjvl5c3yj00012wuugmtlz38t","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2018-05-08T08:31:54.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-05-08 16:31:54\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-11-16T12:14:22.997Z","path":"categories/index.html","layout":"page","_id":"cjvl5c3ym00032wuuwkabchsj","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"我的简历","date":"2018-05-07T08:16:11.000Z","_content":"\n## 基本信息\n\n### 周群\n\n毕业院校：安徽理工大学(本科)\n\n毕业年份：2017-7\n\n在校情况：\n\n- 三年国家励志奖学金\n- 数学思维好 [高数、线代满分]\n\n## 联系我\n\n- 谷歌邮箱：zqunor@gmail.com\n- 腾讯 QQ 邮箱：zqunor@foxmail.com\n\n## **工作经验**\n\n### 安徽竞恩文化传媒有限公司 | 2018.4 - 至今 | PHP 开发\n\n### 上海方略教育网络技术公司 | 2016.11 - 2017.4 | PHP 开发\n\n## 项目经验\n\n### 1.广告投放管理平台 （http://admin.fbtool.h2cpa.com）\n\n技术选型： thinkphp5+mysql+redis\n\n项目概述：对接 facebook 广告投放平台，实现 facebook 业务迁移\n\n完成功能：\n\n1）创建广告触发规则，设定应用对象和应用场景以及执行周期等，并同步到 facebook 平台，实现对广告业务的监控。\n\n2）实现 RBAC 权限管理功能：User-Role-Auth 三层的权限管理实现，并记录访问日志，实现管理人员操作流程的详细管理。\n\n3）同步 facebook 广告数据，，设计数据表和数据结构。\n\n### 2.商城联盟后台（http://network.extremelyads.com）\n\n技术选型：thinkphp5+mysql+sphinx\n\n项目概述：接入多个商城后台的公共管理平台\n\n完成功能：\n\n1）sphinx 大数据量的检索：对爬取的大量数据进行多表关联，配置检索配置文件，下载第三方类库，并对其调用后封装成通用方法，实现大数据量检索功能的通用。\n\n2）选品入库：爬取的大量商品作为选品，进行结构化调整，实现近十张表的关联和数据处理，从而将选品加入到联盟的商品库，供商城供货销售。\n\n3）订单系统：对订单的套餐和子订单详情进行关联和业务逻辑上的关联，并封装调用 PHPExcel 类库实现订单列表的导出功能。\n\n[博文总结：[https://blog.i2arch.tech/tags/工作总结/](https://blog.i2arch.tech/tags/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/)]\n\n### 3.门口网在线教育平台（http://menco.cn）\n\n1）优酷 Oauth 第三方登录实现视频上传\n\n2）完成创建用户的脚本业务逻辑和代码实现\n\n3）完成 course 功能权限管理的业务逻辑处理和优化\n\n### 4.大学生二手交易网站\n\n1）订单管理模块：对购买商品及商品数量数据合法性进行验证，对用户提交联系人信息合法性进行验证，以及付款前的库存量二次检测。\n\n2）历史订单管理：显示历史订单简略及详细信息，并可以指定筛选条件，根据订单金额、订单创建日期区间、订单状态进行查询；管理人员后台查看订单简略及详细信息，并可以指定检索条件，根据订单金额、订单创建时间、收货人地址、订单状态进行查询。\n\n## 技术栈\n\n1.PHP+MySQL，熟练 thinkphp5，了解 yii 和 silex\n\n2.Sphinx 全文检索的配置和封装实现\n\n3.基于 facebook 第三方功能开发\n\n4.Git 使用分支进行项目管理\n\n5.熟悉 linux 环境下的配置和开发\n\n6.正在学习：react.js、 docker、 shell 脚本编程\n\n## 自我介绍\n\n1.爱倒腾工具，能熟练日常的各种工具配置和使用\n\n2.有 Geek 热情，想成为一名更 cool 的开发者\n\n3.想要成为一名工程师（架构师）\n","source":"about/index.md","raw":"---\ntitle: 我的简历\ndate: 2018-05-07 16:16:11\n---\n\n## 基本信息\n\n### 周群\n\n毕业院校：安徽理工大学(本科)\n\n毕业年份：2017-7\n\n在校情况：\n\n- 三年国家励志奖学金\n- 数学思维好 [高数、线代满分]\n\n## 联系我\n\n- 谷歌邮箱：zqunor@gmail.com\n- 腾讯 QQ 邮箱：zqunor@foxmail.com\n\n## **工作经验**\n\n### 安徽竞恩文化传媒有限公司 | 2018.4 - 至今 | PHP 开发\n\n### 上海方略教育网络技术公司 | 2016.11 - 2017.4 | PHP 开发\n\n## 项目经验\n\n### 1.广告投放管理平台 （http://admin.fbtool.h2cpa.com）\n\n技术选型： thinkphp5+mysql+redis\n\n项目概述：对接 facebook 广告投放平台，实现 facebook 业务迁移\n\n完成功能：\n\n1）创建广告触发规则，设定应用对象和应用场景以及执行周期等，并同步到 facebook 平台，实现对广告业务的监控。\n\n2）实现 RBAC 权限管理功能：User-Role-Auth 三层的权限管理实现，并记录访问日志，实现管理人员操作流程的详细管理。\n\n3）同步 facebook 广告数据，，设计数据表和数据结构。\n\n### 2.商城联盟后台（http://network.extremelyads.com）\n\n技术选型：thinkphp5+mysql+sphinx\n\n项目概述：接入多个商城后台的公共管理平台\n\n完成功能：\n\n1）sphinx 大数据量的检索：对爬取的大量数据进行多表关联，配置检索配置文件，下载第三方类库，并对其调用后封装成通用方法，实现大数据量检索功能的通用。\n\n2）选品入库：爬取的大量商品作为选品，进行结构化调整，实现近十张表的关联和数据处理，从而将选品加入到联盟的商品库，供商城供货销售。\n\n3）订单系统：对订单的套餐和子订单详情进行关联和业务逻辑上的关联，并封装调用 PHPExcel 类库实现订单列表的导出功能。\n\n[博文总结：[https://blog.i2arch.tech/tags/工作总结/](https://blog.i2arch.tech/tags/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/)]\n\n### 3.门口网在线教育平台（http://menco.cn）\n\n1）优酷 Oauth 第三方登录实现视频上传\n\n2）完成创建用户的脚本业务逻辑和代码实现\n\n3）完成 course 功能权限管理的业务逻辑处理和优化\n\n### 4.大学生二手交易网站\n\n1）订单管理模块：对购买商品及商品数量数据合法性进行验证，对用户提交联系人信息合法性进行验证，以及付款前的库存量二次检测。\n\n2）历史订单管理：显示历史订单简略及详细信息，并可以指定筛选条件，根据订单金额、订单创建日期区间、订单状态进行查询；管理人员后台查看订单简略及详细信息，并可以指定检索条件，根据订单金额、订单创建时间、收货人地址、订单状态进行查询。\n\n## 技术栈\n\n1.PHP+MySQL，熟练 thinkphp5，了解 yii 和 silex\n\n2.Sphinx 全文检索的配置和封装实现\n\n3.基于 facebook 第三方功能开发\n\n4.Git 使用分支进行项目管理\n\n5.熟悉 linux 环境下的配置和开发\n\n6.正在学习：react.js、 docker、 shell 脚本编程\n\n## 自我介绍\n\n1.爱倒腾工具，能熟练日常的各种工具配置和使用\n\n2.有 Geek 热情，想成为一名更 cool 的开发者\n\n3.想要成为一名工程师（架构师）\n","updated":"2018-11-16T12:14:52.175Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjvl5c3yr00072wuu39qqxgzk","content":"<h2 id=\"基本信息\"><a class=\"markdownIt-Anchor\" href=\"#基本信息\"></a> 基本信息</h2>\n<h3 id=\"周群\"><a class=\"markdownIt-Anchor\" href=\"#周群\"></a> 周群</h3>\n<p>毕业院校：安徽理工大学(本科)</p>\n<p>毕业年份：2017-7</p>\n<p>在校情况：</p>\n<ul>\n<li>三年国家励志奖学金</li>\n<li>数学思维好 [高数、线代满分]</li>\n</ul>\n<h2 id=\"联系我\"><a class=\"markdownIt-Anchor\" href=\"#联系我\"></a> 联系我</h2>\n<ul>\n<li>谷歌邮箱：zqunor@gmail.com</li>\n<li>腾讯 QQ 邮箱：zqunor@foxmail.com</li>\n</ul>\n<h2 id=\"工作经验\"><a class=\"markdownIt-Anchor\" href=\"#工作经验\"></a> <strong>工作经验</strong></h2>\n<h3 id=\"安徽竞恩文化传媒有限公司-20184-至今-php-开发\"><a class=\"markdownIt-Anchor\" href=\"#安徽竞恩文化传媒有限公司-20184-至今-php-开发\"></a> 安徽竞恩文化传媒有限公司 | 2018.4 - 至今 | PHP 开发</h3>\n<h3 id=\"上海方略教育网络技术公司-201611-20174-php-开发\"><a class=\"markdownIt-Anchor\" href=\"#上海方略教育网络技术公司-201611-20174-php-开发\"></a> 上海方略教育网络技术公司 | 2016.11 - 2017.4 | PHP 开发</h3>\n<h2 id=\"项目经验\"><a class=\"markdownIt-Anchor\" href=\"#项目经验\"></a> 项目经验</h2>\n<h3 id=\"1广告投放管理平台-httpadminfbtoolh2cpacom\"><a class=\"markdownIt-Anchor\" href=\"#1广告投放管理平台-httpadminfbtoolh2cpacom\"></a> 1.广告投放管理平台 （<a href=\"http://admin.fbtool.h2cpa.com\" target=\"_blank\" rel=\"noopener\">http://admin.fbtool.h2cpa.com</a>）</h3>\n<p>技术选型： thinkphp5+mysql+redis</p>\n<p>项目概述：对接 facebook 广告投放平台，实现 facebook 业务迁移</p>\n<p>完成功能：</p>\n<p>1）创建广告触发规则，设定应用对象和应用场景以及执行周期等，并同步到 facebook 平台，实现对广告业务的监控。</p>\n<p>2）实现 RBAC 权限管理功能：User-Role-Auth 三层的权限管理实现，并记录访问日志，实现管理人员操作流程的详细管理。</p>\n<p>3）同步 facebook 广告数据，，设计数据表和数据结构。</p>\n<h3 id=\"2商城联盟后台httpnetworkextremelyadscom\"><a class=\"markdownIt-Anchor\" href=\"#2商城联盟后台httpnetworkextremelyadscom\"></a> 2.商城联盟后台（<a href=\"http://network.extremelyads.com\" target=\"_blank\" rel=\"noopener\">http://network.extremelyads.com</a>）</h3>\n<p>技术选型：thinkphp5+mysql+sphinx</p>\n<p>项目概述：接入多个商城后台的公共管理平台</p>\n<p>完成功能：</p>\n<p>1）sphinx 大数据量的检索：对爬取的大量数据进行多表关联，配置检索配置文件，下载第三方类库，并对其调用后封装成通用方法，实现大数据量检索功能的通用。</p>\n<p>2）选品入库：爬取的大量商品作为选品，进行结构化调整，实现近十张表的关联和数据处理，从而将选品加入到联盟的商品库，供商城供货销售。</p>\n<p>3）订单系统：对订单的套餐和子订单详情进行关联和业务逻辑上的关联，并封装调用 PHPExcel 类库实现订单列表的导出功能。</p>\n<p>[博文总结：<a href=\"https://blog.i2arch.tech/tags/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/\">https://blog.i2arch.tech/tags/工作总结/</a>]</p>\n<h3 id=\"3门口网在线教育平台httpmencocn\"><a class=\"markdownIt-Anchor\" href=\"#3门口网在线教育平台httpmencocn\"></a> 3.门口网在线教育平台（<a href=\"http://menco.cn\" target=\"_blank\" rel=\"noopener\">http://menco.cn</a>）</h3>\n<p>1）优酷 Oauth 第三方登录实现视频上传</p>\n<p>2）完成创建用户的脚本业务逻辑和代码实现</p>\n<p>3）完成 course 功能权限管理的业务逻辑处理和优化</p>\n<h3 id=\"4大学生二手交易网站\"><a class=\"markdownIt-Anchor\" href=\"#4大学生二手交易网站\"></a> 4.大学生二手交易网站</h3>\n<p>1）订单管理模块：对购买商品及商品数量数据合法性进行验证，对用户提交联系人信息合法性进行验证，以及付款前的库存量二次检测。</p>\n<p>2）历史订单管理：显示历史订单简略及详细信息，并可以指定筛选条件，根据订单金额、订单创建日期区间、订单状态进行查询；管理人员后台查看订单简略及详细信息，并可以指定检索条件，根据订单金额、订单创建时间、收货人地址、订单状态进行查询。</p>\n<h2 id=\"技术栈\"><a class=\"markdownIt-Anchor\" href=\"#技术栈\"></a> 技术栈</h2>\n<p>1.PHP+MySQL，熟练 thinkphp5，了解 yii 和 silex</p>\n<p>2.Sphinx 全文检索的配置和封装实现</p>\n<p>3.基于 facebook 第三方功能开发</p>\n<p>4.Git 使用分支进行项目管理</p>\n<p>5.熟悉 linux 环境下的配置和开发</p>\n<p>6.正在学习：react.js、 docker、 shell 脚本编程</p>\n<h2 id=\"自我介绍\"><a class=\"markdownIt-Anchor\" href=\"#自我介绍\"></a> 自我介绍</h2>\n<p>1.爱倒腾工具，能熟练日常的各种工具配置和使用</p>\n<p>2.有 Geek 热情，想成为一名更 cool 的开发者</p>\n<p>3.想要成为一名工程师（架构师）</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基本信息\"><a class=\"markdownIt-Anchor\" href=\"#基本信息\"></a> 基本信息</h2>\n<h3 id=\"周群\"><a class=\"markdownIt-Anchor\" href=\"#周群\"></a> 周群</h3>\n<p>毕业院校：安徽理工大学(本科)</p>\n<p>毕业年份：2017-7</p>\n<p>在校情况：</p>\n<ul>\n<li>三年国家励志奖学金</li>\n<li>数学思维好 [高数、线代满分]</li>\n</ul>\n<h2 id=\"联系我\"><a class=\"markdownIt-Anchor\" href=\"#联系我\"></a> 联系我</h2>\n<ul>\n<li>谷歌邮箱：zqunor@gmail.com</li>\n<li>腾讯 QQ 邮箱：zqunor@foxmail.com</li>\n</ul>\n<h2 id=\"工作经验\"><a class=\"markdownIt-Anchor\" href=\"#工作经验\"></a> <strong>工作经验</strong></h2>\n<h3 id=\"安徽竞恩文化传媒有限公司-20184-至今-php-开发\"><a class=\"markdownIt-Anchor\" href=\"#安徽竞恩文化传媒有限公司-20184-至今-php-开发\"></a> 安徽竞恩文化传媒有限公司 | 2018.4 - 至今 | PHP 开发</h3>\n<h3 id=\"上海方略教育网络技术公司-201611-20174-php-开发\"><a class=\"markdownIt-Anchor\" href=\"#上海方略教育网络技术公司-201611-20174-php-开发\"></a> 上海方略教育网络技术公司 | 2016.11 - 2017.4 | PHP 开发</h3>\n<h2 id=\"项目经验\"><a class=\"markdownIt-Anchor\" href=\"#项目经验\"></a> 项目经验</h2>\n<h3 id=\"1广告投放管理平台-httpadminfbtoolh2cpacom\"><a class=\"markdownIt-Anchor\" href=\"#1广告投放管理平台-httpadminfbtoolh2cpacom\"></a> 1.广告投放管理平台 （<a href=\"http://admin.fbtool.h2cpa.com\" target=\"_blank\" rel=\"noopener\">http://admin.fbtool.h2cpa.com</a>）</h3>\n<p>技术选型： thinkphp5+mysql+redis</p>\n<p>项目概述：对接 facebook 广告投放平台，实现 facebook 业务迁移</p>\n<p>完成功能：</p>\n<p>1）创建广告触发规则，设定应用对象和应用场景以及执行周期等，并同步到 facebook 平台，实现对广告业务的监控。</p>\n<p>2）实现 RBAC 权限管理功能：User-Role-Auth 三层的权限管理实现，并记录访问日志，实现管理人员操作流程的详细管理。</p>\n<p>3）同步 facebook 广告数据，，设计数据表和数据结构。</p>\n<h3 id=\"2商城联盟后台httpnetworkextremelyadscom\"><a class=\"markdownIt-Anchor\" href=\"#2商城联盟后台httpnetworkextremelyadscom\"></a> 2.商城联盟后台（<a href=\"http://network.extremelyads.com\" target=\"_blank\" rel=\"noopener\">http://network.extremelyads.com</a>）</h3>\n<p>技术选型：thinkphp5+mysql+sphinx</p>\n<p>项目概述：接入多个商城后台的公共管理平台</p>\n<p>完成功能：</p>\n<p>1）sphinx 大数据量的检索：对爬取的大量数据进行多表关联，配置检索配置文件，下载第三方类库，并对其调用后封装成通用方法，实现大数据量检索功能的通用。</p>\n<p>2）选品入库：爬取的大量商品作为选品，进行结构化调整，实现近十张表的关联和数据处理，从而将选品加入到联盟的商品库，供商城供货销售。</p>\n<p>3）订单系统：对订单的套餐和子订单详情进行关联和业务逻辑上的关联，并封装调用 PHPExcel 类库实现订单列表的导出功能。</p>\n<p>[博文总结：<a href=\"https://blog.i2arch.tech/tags/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/\">https://blog.i2arch.tech/tags/工作总结/</a>]</p>\n<h3 id=\"3门口网在线教育平台httpmencocn\"><a class=\"markdownIt-Anchor\" href=\"#3门口网在线教育平台httpmencocn\"></a> 3.门口网在线教育平台（<a href=\"http://menco.cn\" target=\"_blank\" rel=\"noopener\">http://menco.cn</a>）</h3>\n<p>1）优酷 Oauth 第三方登录实现视频上传</p>\n<p>2）完成创建用户的脚本业务逻辑和代码实现</p>\n<p>3）完成 course 功能权限管理的业务逻辑处理和优化</p>\n<h3 id=\"4大学生二手交易网站\"><a class=\"markdownIt-Anchor\" href=\"#4大学生二手交易网站\"></a> 4.大学生二手交易网站</h3>\n<p>1）订单管理模块：对购买商品及商品数量数据合法性进行验证，对用户提交联系人信息合法性进行验证，以及付款前的库存量二次检测。</p>\n<p>2）历史订单管理：显示历史订单简略及详细信息，并可以指定筛选条件，根据订单金额、订单创建日期区间、订单状态进行查询；管理人员后台查看订单简略及详细信息，并可以指定检索条件，根据订单金额、订单创建时间、收货人地址、订单状态进行查询。</p>\n<h2 id=\"技术栈\"><a class=\"markdownIt-Anchor\" href=\"#技术栈\"></a> 技术栈</h2>\n<p>1.PHP+MySQL，熟练 thinkphp5，了解 yii 和 silex</p>\n<p>2.Sphinx 全文检索的配置和封装实现</p>\n<p>3.基于 facebook 第三方功能开发</p>\n<p>4.Git 使用分支进行项目管理</p>\n<p>5.熟悉 linux 环境下的配置和开发</p>\n<p>6.正在学习：react.js、 docker、 shell 脚本编程</p>\n<h2 id=\"自我介绍\"><a class=\"markdownIt-Anchor\" href=\"#自我介绍\"></a> 自我介绍</h2>\n<p>1.爱倒腾工具，能熟练日常的各种工具配置和使用</p>\n<p>2.有 Geek 热情，想成为一名更 cool 的开发者</p>\n<p>3.想要成为一名工程师（架构师）</p>\n"},{"title":"留言","date":"2018-05-10T03:00:44.000Z","pageid":"comment","_content":"","source":"comment/index.md","raw":"---\ntitle: 留言\ndate: 2018-05-10 11:00:44\npageid: comment\n---\n","updated":"2018-11-16T12:14:23.006Z","path":"comment/index.html","comments":1,"layout":"page","_id":"cjvl5c3yu00092wuu9r51wwhv","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"后台","date":"2018-05-08T08:01:28.000Z","type":"categories","comment":false,"_content":"","source":"server/index.md","raw":"---\ntitle: 后台\ndate: 2018-05-08 16:01:28\ntype: \"categories\"\ncomment: false\n---\n","updated":"2018-05-27T03:53:15.688Z","path":"server/index.html","comments":1,"layout":"page","_id":"cjvl5c3yx000d2wuue6ujuzfd","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签云","date":"2018-05-07T08:22:03.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签云\ndate: 2018-05-07 16:22:03\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-11-16T12:14:23.099Z","path":"tags/index.html","layout":"page","_id":"cjvl5c3z2000g2wuun34e0973","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"工具","date":"2018-05-08T07:46:28.000Z","_content":"","source":"tool/index.md","raw":"---\ntitle: 工具\ndate: 2018-05-08 15:46:28\n---\n","updated":"2018-05-27T03:53:15.691Z","path":"tool/index.html","comments":1,"layout":"page","_id":"cjvl5c3z7000j2wuux97sr5g5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"前端","date":"2018-05-08T08:01:21.000Z","type":"categories","comment":false,"_content":"","source":"web/index.md","raw":"---\ntitle: 前端\ndate: 2018-05-08 16:01:21\ntype: \"categories\"\ncomment: false\n---\n","updated":"2018-05-27T03:53:15.693Z","path":"web/index.html","comments":1,"layout":"page","_id":"cjvl5c42u005z2wuur208hpj8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"作品","date":"2018-01-09T07:53:14.000Z","_content":"","source":"work/index.md","raw":"---\ntitle: 作品\ndate: 2018-01-09 15:53:14\n---\n","updated":"2018-11-16T12:14:23.124Z","path":"work/index.html","comments":1,"layout":"page","_id":"cjvl5c42w00612wuu1zghstgz","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"为什么要学习Linux","date":"2018-05-08T08:38:52.000Z","tags":["Linux"],"category":["Server","Linux"],"_content":"\n我最开始用Linux是被逼的。当时用的是一台旧的笔记本电脑，做一些文字处理的工作。跑Windows动不动就死机，无奈之下安装了Ubuntu。当时只是想找一个Windows的替代品。用Ubuntu的图形化界面很多，不怎么用命令行，所以总觉得比不上Windows。当然，基本的功能还是全的。我用那台旧电脑兼职翻译，赚了2000块的“巨款”。\n<!-- more -->\n\n后来深入使用Linux，是因为做论文时要用服务器。服务器是Debian系统，只能用ssh连接。我只能可怜巴巴的对着命令行敲字了。也是在这种情况下，我才真正发现Linux的好处。\n\n \n\n## Linux的优点\n首先，Shell编程很方便，特别是配合Linux下的各个工具，比如cat, sed, awk, grep。我经常会向服务器的任务管理器提交工作。工作太大，没有足够处理器时，就要排队等空隙。用shell编写一个小脚本，让它来替我安排工作的提交，就节省了我大量的时间。Shell编程甚至可以实现相当复杂的功能。Linux把每个小工具的功能都做强。想要实现复杂功能时，就利用文本流把它们连接在一起。这样，功能性和独立性就都兼顾了。（Linux文本流）\n\n\n其次，Linux的稳定性很好。这也是大部分服务器使用Linux的一个重要原因。我没有用过Windows的服务器版本，不好评价。但在PC上，Linux要比Windows稳定的多。由于Linux与Windows的存储方式不同，所以Linux可以长时间的持续运转，也不需要对磁盘进行碎片整理。当然，Linux的图形化界面略弱。如果用图形化界面，会时有崩溃。(为什么Linux不需要磁盘碎片整理)\n\n\n再次，Linux的源码和架构都是开放的，你可以从中学到很多操作系统原理。Linux的整个哲学体系继承自UNIX，发展的年头要比Windows长很多时间，整个设计体系已经相当稳定，并化繁为简。POSIX的标准也很普遍，Linux熟悉了之后，其它的UNIX系统也很容易上手。Windows的许多东西不透明，很复杂，又常变化，并不是一个很好的学习样例。(Linux架构)\n\n\n最后，Linux下的各种工具基本上都是免费的。更方便的，使用package manager下载编译好的版本。这和Windows下到处买光碟、找可用下载连接、找注册码的繁琐过程完全不同。如果你想要使用任何的工具，一般只需要几分钟，就能借网络搞定。Linux的开源社区也很活跃，很容易找到人讨论，或者找个项目练手。（Unix传奇(上篇)）\n\n \n\n## 个人收获\n再从我个人的角度说说吧。首先，Linux是一个很强的附加技能。Windows对于用户来说很贴心，但也意味着使用门槛低，基本上大家都会。而Linux，即使是命令行的使用，也需要一定时间熟悉。在CV上写上熟悉Linux的命令行使用，熟悉Linux配置，要比写熟悉Windows使用，加分不少。\n\n\n其次，服务器和云服务平台选用Linux的比较多。这意味着，在超越PC的战场上，Linux是一个必修技能。如果是从事IT开发的人，Linux基本上是绕不过去的一个槛。现在Linux在移动端发展的也不错。看Ubuntu最近的动作，是希望在移动端有所作为的。而安卓用的也是Linux内核。\n\n \n\n最后，Linux设备投入小，而Linux知识更新换代较慢，学习的性价比很高。学完后还可以通吃Unix和Mac。\n\n \n\n## Linux的致命弱点\n \n\n最后，说一下Linux的致命弱点。当你在一个妹子面前使用大黑屏时，妹子惊讶的眼神绝对不是看你是天才，而是看你为怪胎。\n\n当然，你还可以使用Mac。Mac和Linux是一个妈Unix生的两兄弟。如果你还是觉得Linux的大黑屏太丑，请选用Mac的大白屏。\n\n \n","source":"work/为什么要学习Linux.md","raw":"---\ntitle: 为什么要学习Linux\ndate: 2018-05-08 16:38:52\ntags:\n    - Linux\ncategory:\n    - Server\n    - Linux\n---\n\n我最开始用Linux是被逼的。当时用的是一台旧的笔记本电脑，做一些文字处理的工作。跑Windows动不动就死机，无奈之下安装了Ubuntu。当时只是想找一个Windows的替代品。用Ubuntu的图形化界面很多，不怎么用命令行，所以总觉得比不上Windows。当然，基本的功能还是全的。我用那台旧电脑兼职翻译，赚了2000块的“巨款”。\n<!-- more -->\n\n后来深入使用Linux，是因为做论文时要用服务器。服务器是Debian系统，只能用ssh连接。我只能可怜巴巴的对着命令行敲字了。也是在这种情况下，我才真正发现Linux的好处。\n\n \n\n## Linux的优点\n首先，Shell编程很方便，特别是配合Linux下的各个工具，比如cat, sed, awk, grep。我经常会向服务器的任务管理器提交工作。工作太大，没有足够处理器时，就要排队等空隙。用shell编写一个小脚本，让它来替我安排工作的提交，就节省了我大量的时间。Shell编程甚至可以实现相当复杂的功能。Linux把每个小工具的功能都做强。想要实现复杂功能时，就利用文本流把它们连接在一起。这样，功能性和独立性就都兼顾了。（Linux文本流）\n\n\n其次，Linux的稳定性很好。这也是大部分服务器使用Linux的一个重要原因。我没有用过Windows的服务器版本，不好评价。但在PC上，Linux要比Windows稳定的多。由于Linux与Windows的存储方式不同，所以Linux可以长时间的持续运转，也不需要对磁盘进行碎片整理。当然，Linux的图形化界面略弱。如果用图形化界面，会时有崩溃。(为什么Linux不需要磁盘碎片整理)\n\n\n再次，Linux的源码和架构都是开放的，你可以从中学到很多操作系统原理。Linux的整个哲学体系继承自UNIX，发展的年头要比Windows长很多时间，整个设计体系已经相当稳定，并化繁为简。POSIX的标准也很普遍，Linux熟悉了之后，其它的UNIX系统也很容易上手。Windows的许多东西不透明，很复杂，又常变化，并不是一个很好的学习样例。(Linux架构)\n\n\n最后，Linux下的各种工具基本上都是免费的。更方便的，使用package manager下载编译好的版本。这和Windows下到处买光碟、找可用下载连接、找注册码的繁琐过程完全不同。如果你想要使用任何的工具，一般只需要几分钟，就能借网络搞定。Linux的开源社区也很活跃，很容易找到人讨论，或者找个项目练手。（Unix传奇(上篇)）\n\n \n\n## 个人收获\n再从我个人的角度说说吧。首先，Linux是一个很强的附加技能。Windows对于用户来说很贴心，但也意味着使用门槛低，基本上大家都会。而Linux，即使是命令行的使用，也需要一定时间熟悉。在CV上写上熟悉Linux的命令行使用，熟悉Linux配置，要比写熟悉Windows使用，加分不少。\n\n\n其次，服务器和云服务平台选用Linux的比较多。这意味着，在超越PC的战场上，Linux是一个必修技能。如果是从事IT开发的人，Linux基本上是绕不过去的一个槛。现在Linux在移动端发展的也不错。看Ubuntu最近的动作，是希望在移动端有所作为的。而安卓用的也是Linux内核。\n\n \n\n最后，Linux设备投入小，而Linux知识更新换代较慢，学习的性价比很高。学完后还可以通吃Unix和Mac。\n\n \n\n## Linux的致命弱点\n \n\n最后，说一下Linux的致命弱点。当你在一个妹子面前使用大黑屏时，妹子惊讶的眼神绝对不是看你是天才，而是看你为怪胎。\n\n当然，你还可以使用Mac。Mac和Linux是一个妈Unix生的两兄弟。如果你还是觉得Linux的大黑屏太丑，请选用Mac的大白屏。\n\n \n","updated":"2018-11-16T12:14:23.127Z","path":"work/为什么要学习Linux.html","comments":1,"layout":"page","_id":"cjvl5c43000642wuu59j2odok","content":"<p>我最开始用Linux是被逼的。当时用的是一台旧的笔记本电脑，做一些文字处理的工作。跑Windows动不动就死机，无奈之下安装了Ubuntu。当时只是想找一个Windows的替代品。用Ubuntu的图形化界面很多，不怎么用命令行，所以总觉得比不上Windows。当然，基本的功能还是全的。我用那台旧电脑兼职翻译，赚了2000块的“巨款”。</p>\n<a id=\"more\"></a>\n<p>后来深入使用Linux，是因为做论文时要用服务器。服务器是Debian系统，只能用ssh连接。我只能可怜巴巴的对着命令行敲字了。也是在这种情况下，我才真正发现Linux的好处。</p>\n<h2 id=\"linux的优点\"><a class=\"markdownIt-Anchor\" href=\"#linux的优点\"></a> Linux的优点</h2>\n<p>首先，Shell编程很方便，特别是配合Linux下的各个工具，比如cat, sed, awk, grep。我经常会向服务器的任务管理器提交工作。工作太大，没有足够处理器时，就要排队等空隙。用shell编写一个小脚本，让它来替我安排工作的提交，就节省了我大量的时间。Shell编程甚至可以实现相当复杂的功能。Linux把每个小工具的功能都做强。想要实现复杂功能时，就利用文本流把它们连接在一起。这样，功能性和独立性就都兼顾了。（Linux文本流）</p>\n<p>其次，Linux的稳定性很好。这也是大部分服务器使用Linux的一个重要原因。我没有用过Windows的服务器版本，不好评价。但在PC上，Linux要比Windows稳定的多。由于Linux与Windows的存储方式不同，所以Linux可以长时间的持续运转，也不需要对磁盘进行碎片整理。当然，Linux的图形化界面略弱。如果用图形化界面，会时有崩溃。(为什么Linux不需要磁盘碎片整理)</p>\n<p>再次，Linux的源码和架构都是开放的，你可以从中学到很多操作系统原理。Linux的整个哲学体系继承自UNIX，发展的年头要比Windows长很多时间，整个设计体系已经相当稳定，并化繁为简。POSIX的标准也很普遍，Linux熟悉了之后，其它的UNIX系统也很容易上手。Windows的许多东西不透明，很复杂，又常变化，并不是一个很好的学习样例。(Linux架构)</p>\n<p>最后，Linux下的各种工具基本上都是免费的。更方便的，使用package manager下载编译好的版本。这和Windows下到处买光碟、找可用下载连接、找注册码的繁琐过程完全不同。如果你想要使用任何的工具，一般只需要几分钟，就能借网络搞定。Linux的开源社区也很活跃，很容易找到人讨论，或者找个项目练手。（Unix传奇(上篇)）</p>\n<h2 id=\"个人收获\"><a class=\"markdownIt-Anchor\" href=\"#个人收获\"></a> 个人收获</h2>\n<p>再从我个人的角度说说吧。首先，Linux是一个很强的附加技能。Windows对于用户来说很贴心，但也意味着使用门槛低，基本上大家都会。而Linux，即使是命令行的使用，也需要一定时间熟悉。在CV上写上熟悉Linux的命令行使用，熟悉Linux配置，要比写熟悉Windows使用，加分不少。</p>\n<p>其次，服务器和云服务平台选用Linux的比较多。这意味着，在超越PC的战场上，Linux是一个必修技能。如果是从事IT开发的人，Linux基本上是绕不过去的一个槛。现在Linux在移动端发展的也不错。看Ubuntu最近的动作，是希望在移动端有所作为的。而安卓用的也是Linux内核。</p>\n<p>最后，Linux设备投入小，而Linux知识更新换代较慢，学习的性价比很高。学完后还可以通吃Unix和Mac。</p>\n<h2 id=\"linux的致命弱点\"><a class=\"markdownIt-Anchor\" href=\"#linux的致命弱点\"></a> Linux的致命弱点</h2>\n<p>最后，说一下Linux的致命弱点。当你在一个妹子面前使用大黑屏时，妹子惊讶的眼神绝对不是看你是天才，而是看你为怪胎。</p>\n<p>当然，你还可以使用Mac。Mac和Linux是一个妈Unix生的两兄弟。如果你还是觉得Linux的大黑屏太丑，请选用Mac的大白屏。</p>\n","site":{"data":{}},"excerpt":"<p>我最开始用Linux是被逼的。当时用的是一台旧的笔记本电脑，做一些文字处理的工作。跑Windows动不动就死机，无奈之下安装了Ubuntu。当时只是想找一个Windows的替代品。用Ubuntu的图形化界面很多，不怎么用命令行，所以总觉得比不上Windows。当然，基本的功能还是全的。我用那台旧电脑兼职翻译，赚了2000块的“巨款”。</p>","more":"<p>后来深入使用Linux，是因为做论文时要用服务器。服务器是Debian系统，只能用ssh连接。我只能可怜巴巴的对着命令行敲字了。也是在这种情况下，我才真正发现Linux的好处。</p>\n<h2 id=\"linux的优点\"><a class=\"markdownIt-Anchor\" href=\"#linux的优点\"></a> Linux的优点</h2>\n<p>首先，Shell编程很方便，特别是配合Linux下的各个工具，比如cat, sed, awk, grep。我经常会向服务器的任务管理器提交工作。工作太大，没有足够处理器时，就要排队等空隙。用shell编写一个小脚本，让它来替我安排工作的提交，就节省了我大量的时间。Shell编程甚至可以实现相当复杂的功能。Linux把每个小工具的功能都做强。想要实现复杂功能时，就利用文本流把它们连接在一起。这样，功能性和独立性就都兼顾了。（Linux文本流）</p>\n<p>其次，Linux的稳定性很好。这也是大部分服务器使用Linux的一个重要原因。我没有用过Windows的服务器版本，不好评价。但在PC上，Linux要比Windows稳定的多。由于Linux与Windows的存储方式不同，所以Linux可以长时间的持续运转，也不需要对磁盘进行碎片整理。当然，Linux的图形化界面略弱。如果用图形化界面，会时有崩溃。(为什么Linux不需要磁盘碎片整理)</p>\n<p>再次，Linux的源码和架构都是开放的，你可以从中学到很多操作系统原理。Linux的整个哲学体系继承自UNIX，发展的年头要比Windows长很多时间，整个设计体系已经相当稳定，并化繁为简。POSIX的标准也很普遍，Linux熟悉了之后，其它的UNIX系统也很容易上手。Windows的许多东西不透明，很复杂，又常变化，并不是一个很好的学习样例。(Linux架构)</p>\n<p>最后，Linux下的各种工具基本上都是免费的。更方便的，使用package manager下载编译好的版本。这和Windows下到处买光碟、找可用下载连接、找注册码的繁琐过程完全不同。如果你想要使用任何的工具，一般只需要几分钟，就能借网络搞定。Linux的开源社区也很活跃，很容易找到人讨论，或者找个项目练手。（Unix传奇(上篇)）</p>\n<h2 id=\"个人收获\"><a class=\"markdownIt-Anchor\" href=\"#个人收获\"></a> 个人收获</h2>\n<p>再从我个人的角度说说吧。首先，Linux是一个很强的附加技能。Windows对于用户来说很贴心，但也意味着使用门槛低，基本上大家都会。而Linux，即使是命令行的使用，也需要一定时间熟悉。在CV上写上熟悉Linux的命令行使用，熟悉Linux配置，要比写熟悉Windows使用，加分不少。</p>\n<p>其次，服务器和云服务平台选用Linux的比较多。这意味着，在超越PC的战场上，Linux是一个必修技能。如果是从事IT开发的人，Linux基本上是绕不过去的一个槛。现在Linux在移动端发展的也不错。看Ubuntu最近的动作，是希望在移动端有所作为的。而安卓用的也是Linux内核。</p>\n<p>最后，Linux设备投入小，而Linux知识更新换代较慢，学习的性价比很高。学完后还可以通吃Unix和Mac。</p>\n<h2 id=\"linux的致命弱点\"><a class=\"markdownIt-Anchor\" href=\"#linux的致命弱点\"></a> Linux的致命弱点</h2>\n<p>最后，说一下Linux的致命弱点。当你在一个妹子面前使用大黑屏时，妹子惊讶的眼神绝对不是看你是天才，而是看你为怪胎。</p>\n<p>当然，你还可以使用Mac。Mac和Linux是一个妈Unix生的两兄弟。如果你还是觉得Linux的大黑屏太丑，请选用Mac的大白屏。</p>"},{"_content":"<!DOCTYPE html>\n\n\n\n  \n\n\n<html class=\"theme-next gemini use-motion\" lang=\"zh-Hans\">\n<head>\n  <meta charset=\"UTF-8\"/>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\"/>\n<meta name=\"theme-color\" content=\"#222\">\n\n\n\n\n\n\n  \n  \n  <link rel=\"stylesheet\" media=\"all\" href=\"/lib/Han/dist/han.min.css?v=3.3\">\n\n\n\n\n<meta http-equiv=\"Cache-Control\" content=\"no-transform\" />\n<meta http-equiv=\"Cache-Control\" content=\"no-siteapp\" />\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  <link href=\"/lib/fancybox/source/jquery.fancybox.css?v=2.1.5\" rel=\"stylesheet\" type=\"text/css\" />\n\n\n\n\n  \n  \n  \n  \n\n  \n    \n    \n  \n\n  \n    \n      \n    \n\n    \n  \n\n  \n    \n      \n    \n\n    \n  \n\n  \n    \n      \n    \n\n    \n  \n\n  \n    \n      \n    \n\n    \n  \n\n  \n    \n    \n    <link href=\"//fonts.googleapis.com/css?family=Monda:300,300italic,400,400italic,700,700italic|Roboto Slab:300,300italic,400,400italic,700,700italic|Monda:300,300italic,400,400italic,700,700italic|Lobster Two:300,300italic,400,400italic,700,700italic|PT Mono:300,300italic,400,400italic,700,700italic&subset=latin,latin-ext\" rel=\"stylesheet\" type=\"text/css\">\n  \n\n\n\n\n\n\n<link href=\"/lib/font-awesome/css/font-awesome.min.css?v=4.6.2\" rel=\"stylesheet\" type=\"text/css\" />\n\n<link href=\"/css/main.css?v=5.1.4\" rel=\"stylesheet\" type=\"text/css\" />\n\n\n  <link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/images/apple-touch-icon-next.png?v=5.1.4\">\n\n\n  <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/images/favicon-32x32-next.png?v=5.1.4\">\n\n\n  <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/images/favicon-16x16-next.png?v=5.1.4\">\n\n\n  <link rel=\"mask-icon\" href=\"/images/logo.svg?v=5.1.4\" color=\"#222\">\n\n\n\n\n\n  <meta name=\"keywords\" content=\"Hexo, NexT\" />\n\n\n\n\n\n  <link rel=\"alternate\" href=\"/atom.xml\" title=\"icoder\" type=\"application/atom+xml\" />\n\n\n\n\n\n\n<meta name=\"description\" content=\"遇见更好的自己\">\n<meta property=\"og:type\" content=\"website\">\n<meta property=\"og:title\" content=\"icoder\">\n<meta property=\"og:url\" content=\"http://www.i2arch.tech/tags/Hexo/index.html\">\n<meta property=\"og:site_name\" content=\"icoder\">\n<meta property=\"og:description\" content=\"遇见更好的自己\">\n<meta property=\"og:locale\" content=\"zh-Hans\">\n<meta name=\"twitter:card\" content=\"summary\">\n<meta name=\"twitter:title\" content=\"icoder\">\n<meta name=\"twitter:description\" content=\"遇见更好的自己\">\n\n\n\n<script type=\"text/javascript\" id=\"hexo.configurations\">\n  var NexT = window.NexT || {};\n  var CONFIG = {\n    root: '/',\n    scheme: 'Gemini',\n    version: '5.1.4',\n    sidebar: {\"position\":\"right\",\"display\":\"post\",\"offset\":12,\"b2t\":false,\"scrollpercent\":false,\"onmobile\":false},\n    fancybox: true,\n    tabs: true,\n    motion: {\"enable\":true,\"async\":false,\"transition\":{\"post_block\":\"fadeIn\",\"post_header\":\"slideDownIn\",\"post_body\":\"slideDownIn\",\"coll_header\":\"slideLeftIn\",\"sidebar\":\"slideUpIn\"}},\n    duoshuo: {\n      userId: '0',\n      author: '博主'\n    },\n    algolia: {\n      applicationID: '',\n      apiKey: '',\n      indexName: '',\n      hits: {\"per_page\":10},\n      labels: {\"input_placeholder\":\"Search for Posts\",\"hits_empty\":\"We didn't find any results for the search: ${query}\",\"hits_stats\":\"${hits} results found in ${time} ms\"}\n    }\n  };\n</script>\n\n\n\n  <link rel=\"canonical\" href=\"http://www.i2arch.tech/tags/Hexo/\"/>\n\n\n\n\n\n  <title>标签: Hexo | icoder</title>\n  \n\n\n\n\n\n\n\n\n</head>\n\n<body itemscope itemtype=\"http://schema.org/WebPage\" lang=\"zh-Hans\">\n\n  \n  \n    \n  \n\n  <div class=\"container sidebar-position-right \">\n    <div class=\"headband\"></div>\n\n    <header id=\"header\" class=\"header\" itemscope itemtype=\"http://schema.org/WPHeader\">\n      <div class=\"header-inner\"><div class=\"site-brand-wrapper\">\n  <div class=\"site-meta \">\n    \n\n    <div class=\"custom-logo-site-title\">\n      <a href=\"/\"  class=\"brand\" rel=\"start\">\n        <span class=\"logo-line-before\"><i></i></span>\n        <span class=\"site-title\">icoder</span>\n        <span class=\"logo-line-after\"><i></i></span>\n      </a>\n    </div>\n      \n        <p class=\"site-subtitle\">Just do it!</p>\n      \n  </div>\n\n  <div class=\"site-nav-toggle\">\n    <button>\n      <span class=\"btn-bar\"></span>\n      <span class=\"btn-bar\"></span>\n      <span class=\"btn-bar\"></span>\n    </button>\n  </div>\n</div>\n\n<nav class=\"site-nav\">\n  \n\n  \n    <ul id=\"menu\" class=\"menu\">\n      \n        \n        <li class=\"menu-item menu-item-home\">\n          <a href=\"/\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-home\"></i> <br />\n            \n            首页\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-archives\">\n          <a href=\"/archives/\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-archive\"></i> <br />\n            \n            归档\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-tags\">\n          <a href=\"/tag/\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-tags\"></i> <br />\n            \n            标签\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-work\">\n          <a href=\"/work/\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-tasks\"></i> <br />\n            \n            作品\n          </a>\n        </li>\n      \n\n      \n    </ul>\n  \n\n  \n</nav>\n\n\n\n </div>\n    </header>\n\n    <main id=\"main\" class=\"main\">\n      <div class=\"main-inner\">\n        <div class=\"content-wrap\">\n          <div id=\"content\" class=\"content\">\n            \n\n  \n  \n  \n  <div class=\"post-block tag\">\n\n    <div id=\"posts\" class=\"posts-collapse\">\n      <div class=\"collection-title\">\n        <h1>Hexo<small>标签</small>\n        </h1>\n      </div>\n\n      \n        \n\n  <article class=\"post post-type-normal\" itemscope itemtype=\"http://schema.org/Article\">\n    <header class=\"post-header\">\n\n      <h2 class=\"post-title\">\n        \n            <a class=\"post-title-link\" href=\"/2018/02/27/hello-world/\" itemprop=\"url\">\n              \n                <span itemprop=\"name\">Hello World</span>\n              \n            </a>\n        \n      </h2>\n\n      <div class=\"post-meta\">\n        <time class=\"post-time\" itemprop=\"dateCreated\"\n              datetime=\"2018-02-27T20:00:14+08:00\"\n              content=\"2018-02-27\" >\n          02-27\n        </time>\n      </div>\n\n    </header>\n  </article>\n\n\n      \n    </div>\n\n  </div>\n  \n  \n  \n\n  \n\n\n          </div>\n          \n\n\n          \n\n        </div>\n        \n          \n  \n  <div class=\"sidebar-toggle\">\n    <div class=\"sidebar-toggle-line-wrap\">\n      <span class=\"sidebar-toggle-line sidebar-toggle-line-first\"></span>\n      <span class=\"sidebar-toggle-line sidebar-toggle-line-middle\"></span>\n      <span class=\"sidebar-toggle-line sidebar-toggle-line-last\"></span>\n    </div>\n  </div>\n\n  <aside id=\"sidebar\" class=\"sidebar\">\n    \n    <div class=\"sidebar-inner\">\n\n      \n\n      \n\n      <section class=\"site-overview-wrap sidebar-panel sidebar-panel-active\">\n        <div class=\"site-overview\">\n          <div class=\"site-author motion-element\" itemprop=\"author\" itemscope itemtype=\"http://schema.org/Person\">\n            \n              <img class=\"site-author-image\" itemprop=\"image\"\n                src=\"/uploads/avatar.png\"\n                alt=\"zqunor\" />\n            \n              <p class=\"site-author-name\" itemprop=\"name\">zqunor</p>\n              <p class=\"site-description motion-element\" itemprop=\"description\">遇见更好的自己</p>\n          </div>\n\n          <nav class=\"site-state motion-element\">\n\n            \n              <div class=\"site-state-item site-state-posts\">\n              \n                <a href=\"/archives/\">\n              \n                  <span class=\"site-state-item-count\">2</span>\n                  <span class=\"site-state-item-name\">日志</span>\n                </a>\n              </div>\n            \n\n            \n              \n              \n              <div class=\"site-state-item site-state-categories\">\n                \n                  <span class=\"site-state-item-count\">1</span>\n                  <span class=\"site-state-item-name\">分类</span>\n                \n              </div>\n            \n\n            \n              \n              \n              <div class=\"site-state-item site-state-tags\">\n                <a href=\"/tag/index.html\">\n                  <span class=\"site-state-item-count\">2</span>\n                  <span class=\"site-state-item-name\">标签</span>\n                </a>\n              </div>\n            \n\n          </nav>\n\n          \n            <div class=\"feed-link motion-element\">\n              <a href=\"/atom.xml\" rel=\"alternate\">\n                <i class=\"fa fa-rss\"></i>\n                RSS\n              </a>\n            </div>\n          \n\n          \n            <div class=\"links-of-author motion-element\">\n                \n                  <span class=\"links-of-author-item\">\n                    <a href=\"https://github.com/zqunor\" target=\"_blank\" title=\"GitHub\">\n                      \n                        <i class=\"fa fa-fw fa-github\"></i>GitHub</a>\n                  </span>\n                \n                  <span class=\"links-of-author-item\">\n                    <a href=\"mailto:zqunor@gmail.com\" target=\"_blank\" title=\"邮箱\">\n                      \n                        <i class=\"fa fa-fw fa-envelope-square\"></i>邮箱</a>\n                  </span>\n                \n                  <span class=\"links-of-author-item\">\n                    <a href=\"http://www.zhihu.com/people/zqunor\" target=\"_blank\" title=\"知乎\">\n                      \n                        <i class=\"fa fa-fw fa-twitch\"></i>知乎</a>\n                  </span>\n                \n                  <span class=\"links-of-author-item\">\n                    <a href=\"/images/wechat.jpg\" target=\"_blank\" title=\"微信\">\n                      \n                        <i class=\"fa fa-fw fa-wechat\"></i>微信</a>\n                  </span>\n                \n            </div>\n          \n\n          \n          \n\n          \n          \n\n          \n\n        </div>\n      </section>\n\n      \n\n      \n\n    </div>\n  </aside>\n\n\n        \n      </div>\n    </main>\n\n    <footer id=\"footer\" class=\"footer\">\n      <div class=\"footer-inner\">\n        <div class=\"copyright\">&copy; <span itemprop=\"copyrightYear\">2018</span>\n  <span class=\"with-love\">\n    <i class=\"fa fa-user\"></i>\n  </span>\n  <span class=\"author\" itemprop=\"copyrightHolder\">zqunor</span>\n\n  \n</div>\n\n\n\n\n\n\n\n\n\n        \n<div class=\"busuanzi-count\">\n  <script async src=\"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n\n  \n    <span class=\"site-uv\">\n      <i class=\"fa fa-user\"></i>访问人次：\n      <span class=\"busuanzi-value\" id=\"busuanzi_value_site_uv\"></span>\n      \n    </span>\n  \n\n  \n    <span class=\"site-pv\">\n      <i class=\"fa fa-eye\"></i>访问量：\n      <span class=\"busuanzi-value\" id=\"busuanzi_value_site_pv\"></span>\n      \n    </span>\n  \n</div>\n\n\n\n\n\n\n\n\n        \n      </div>\n    </footer>\n\n    \n      <div class=\"back-to-top\">\n        <i class=\"fa fa-arrow-up\"></i>\n        \n      </div>\n    \n\n    \n\n  </div>\n\n  \n\n<script type=\"text/javascript\">\n  if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {\n    window.Promise = null;\n  }\n</script>\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/jquery/index.js?v=2.1.3\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/fastclick/lib/fastclick.min.js?v=1.0.6\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/velocity/velocity.min.js?v=1.2.1\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/velocity/velocity.ui.min.js?v=1.2.1\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5\"></script>\n  \n\n\n  \n\n\n  <script type=\"text/javascript\" src=\"/js/src/utils.js?v=5.1.4\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/motion.js?v=5.1.4\"></script>\n\n\n\n  \n  \n\n\n  <script type=\"text/javascript\" src=\"/js/src/affix.js?v=5.1.4\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/schemes/pisces.js?v=5.1.4\"></script>\n\n\n\n  \n\n  \n\n\n  <script type=\"text/javascript\" src=\"/js/src/bootstrap.js?v=5.1.4\"></script>\n\n\n\n  \n\n\n  \n\n\n\n\n\t\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n\n\n\n\n\n\n<!-- LOCAL: You can save these files to your site and update links -->\n    \n        \n        <link rel=\"stylesheet\" href=\"https://aimingoo.github.io/gitmint/style/default.css\">\n        <script src=\"https://aimingoo.github.io/gitmint/dist/gitmint.browser.js\"></script>\n    \n<!-- END LOCAL -->\n\n    \n      <style>\n        a.gitment-editor-footer-tip { display: none; }\n        .gitment-container.gitment-footer-container { display: none; }\n      </style>\n    \n\n    \n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  <script src=\"https://cdn1.lncld.net/static/js/av-core-mini-0.6.4.js\"></script>\n  <script>AV.initialize(\"pXPuAE7FBoE9NlPEb4HvTh12-gzGzoHsz\", \"IvfbUfSPuRf2BjdlOh6M5hRT\");</script>\n  <script>\n    function showTime(Counter) {\n      var query = new AV.Query(Counter);\n      var entries = [];\n      var $visitors = $(\".leancloud_visitors\");\n\n      $visitors.each(function () {\n        entries.push( $(this).attr(\"id\").trim() );\n      });\n\n      query.containedIn('url', entries);\n      query.find()\n        .done(function (results) {\n          var COUNT_CONTAINER_REF = '.leancloud-visitors-count';\n\n          if (results.length === 0) {\n            $visitors.find(COUNT_CONTAINER_REF).text(0);\n            return;\n          }\n\n          for (var i = 0; i < results.length; i++) {\n            var item = results[i];\n            var url = item.get('url');\n            var time = item.get('time');\n            var element = document.getElementById(url);\n\n            $(element).find(COUNT_CONTAINER_REF).text(time);\n          }\n          for(var i = 0; i < entries.length; i++) {\n            var url = entries[i];\n            var element = document.getElementById(url);\n            var countSpan = $(element).find(COUNT_CONTAINER_REF);\n            if( countSpan.text() == '') {\n              countSpan.text(0);\n            }\n          }\n        })\n        .fail(function (object, error) {\n          console.log(\"Error: \" + error.code + \" \" + error.message);\n        });\n    }\n\n    function addCount(Counter) {\n      var $visitors = $(\".leancloud_visitors\");\n      var url = $visitors.attr('id').trim();\n      var title = $visitors.attr('data-flag-title').trim();\n      var query = new AV.Query(Counter);\n\n      query.equalTo(\"url\", url);\n      query.find({\n        success: function(results) {\n          if (results.length > 0) {\n            var counter = results[0];\n            counter.fetchWhenSave(true);\n            counter.increment(\"time\");\n            counter.save(null, {\n              success: function(counter) {\n                var $element = $(document.getElementById(url));\n                $element.find('.leancloud-visitors-count').text(counter.get('time'));\n              },\n              error: function(counter, error) {\n                console.log('Failed to save Visitor num, with error message: ' + error.message);\n              }\n            });\n          } else {\n            var newcounter = new Counter();\n            /* Set ACL */\n            var acl = new AV.ACL();\n            acl.setPublicReadAccess(true);\n            acl.setPublicWriteAccess(true);\n            newcounter.setACL(acl);\n            /* End Set ACL */\n            newcounter.set(\"title\", title);\n            newcounter.set(\"url\", url);\n            newcounter.set(\"time\", 1);\n            newcounter.save(null, {\n              success: function(newcounter) {\n                var $element = $(document.getElementById(url));\n                $element.find('.leancloud-visitors-count').text(newcounter.get('time'));\n              },\n              error: function(newcounter, error) {\n                console.log('Failed to create');\n              }\n            });\n          }\n        },\n        error: function(error) {\n          console.log('Error:' + error.code + \" \" + error.message);\n        }\n      });\n    }\n\n    $(function() {\n      var Counter = AV.Object.extend(\"Counter\");\n      if ($('.leancloud_visitors').length == 1) {\n        addCount(Counter);\n      } else if ($('.post-title-link').length > 1) {\n        showTime(Counter);\n      }\n    });\n  </script>\n\n\n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n  \n\n</body>\n</html>\n","source":"tags/Hexo/index.html","raw":"<!DOCTYPE html>\n\n\n\n  \n\n\n<html class=\"theme-next gemini use-motion\" lang=\"zh-Hans\">\n<head>\n  <meta charset=\"UTF-8\"/>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\"/>\n<meta name=\"theme-color\" content=\"#222\">\n\n\n\n\n\n\n  \n  \n  <link rel=\"stylesheet\" media=\"all\" href=\"/lib/Han/dist/han.min.css?v=3.3\">\n\n\n\n\n<meta http-equiv=\"Cache-Control\" content=\"no-transform\" />\n<meta http-equiv=\"Cache-Control\" content=\"no-siteapp\" />\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  <link href=\"/lib/fancybox/source/jquery.fancybox.css?v=2.1.5\" rel=\"stylesheet\" type=\"text/css\" />\n\n\n\n\n  \n  \n  \n  \n\n  \n    \n    \n  \n\n  \n    \n      \n    \n\n    \n  \n\n  \n    \n      \n    \n\n    \n  \n\n  \n    \n      \n    \n\n    \n  \n\n  \n    \n      \n    \n\n    \n  \n\n  \n    \n    \n    <link href=\"//fonts.googleapis.com/css?family=Monda:300,300italic,400,400italic,700,700italic|Roboto Slab:300,300italic,400,400italic,700,700italic|Monda:300,300italic,400,400italic,700,700italic|Lobster Two:300,300italic,400,400italic,700,700italic|PT Mono:300,300italic,400,400italic,700,700italic&subset=latin,latin-ext\" rel=\"stylesheet\" type=\"text/css\">\n  \n\n\n\n\n\n\n<link href=\"/lib/font-awesome/css/font-awesome.min.css?v=4.6.2\" rel=\"stylesheet\" type=\"text/css\" />\n\n<link href=\"/css/main.css?v=5.1.4\" rel=\"stylesheet\" type=\"text/css\" />\n\n\n  <link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/images/apple-touch-icon-next.png?v=5.1.4\">\n\n\n  <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/images/favicon-32x32-next.png?v=5.1.4\">\n\n\n  <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/images/favicon-16x16-next.png?v=5.1.4\">\n\n\n  <link rel=\"mask-icon\" href=\"/images/logo.svg?v=5.1.4\" color=\"#222\">\n\n\n\n\n\n  <meta name=\"keywords\" content=\"Hexo, NexT\" />\n\n\n\n\n\n  <link rel=\"alternate\" href=\"/atom.xml\" title=\"icoder\" type=\"application/atom+xml\" />\n\n\n\n\n\n\n<meta name=\"description\" content=\"遇见更好的自己\">\n<meta property=\"og:type\" content=\"website\">\n<meta property=\"og:title\" content=\"icoder\">\n<meta property=\"og:url\" content=\"http://www.i2arch.tech/tags/Hexo/index.html\">\n<meta property=\"og:site_name\" content=\"icoder\">\n<meta property=\"og:description\" content=\"遇见更好的自己\">\n<meta property=\"og:locale\" content=\"zh-Hans\">\n<meta name=\"twitter:card\" content=\"summary\">\n<meta name=\"twitter:title\" content=\"icoder\">\n<meta name=\"twitter:description\" content=\"遇见更好的自己\">\n\n\n\n<script type=\"text/javascript\" id=\"hexo.configurations\">\n  var NexT = window.NexT || {};\n  var CONFIG = {\n    root: '/',\n    scheme: 'Gemini',\n    version: '5.1.4',\n    sidebar: {\"position\":\"right\",\"display\":\"post\",\"offset\":12,\"b2t\":false,\"scrollpercent\":false,\"onmobile\":false},\n    fancybox: true,\n    tabs: true,\n    motion: {\"enable\":true,\"async\":false,\"transition\":{\"post_block\":\"fadeIn\",\"post_header\":\"slideDownIn\",\"post_body\":\"slideDownIn\",\"coll_header\":\"slideLeftIn\",\"sidebar\":\"slideUpIn\"}},\n    duoshuo: {\n      userId: '0',\n      author: '博主'\n    },\n    algolia: {\n      applicationID: '',\n      apiKey: '',\n      indexName: '',\n      hits: {\"per_page\":10},\n      labels: {\"input_placeholder\":\"Search for Posts\",\"hits_empty\":\"We didn't find any results for the search: ${query}\",\"hits_stats\":\"${hits} results found in ${time} ms\"}\n    }\n  };\n</script>\n\n\n\n  <link rel=\"canonical\" href=\"http://www.i2arch.tech/tags/Hexo/\"/>\n\n\n\n\n\n  <title>标签: Hexo | icoder</title>\n  \n\n\n\n\n\n\n\n\n</head>\n\n<body itemscope itemtype=\"http://schema.org/WebPage\" lang=\"zh-Hans\">\n\n  \n  \n    \n  \n\n  <div class=\"container sidebar-position-right \">\n    <div class=\"headband\"></div>\n\n    <header id=\"header\" class=\"header\" itemscope itemtype=\"http://schema.org/WPHeader\">\n      <div class=\"header-inner\"><div class=\"site-brand-wrapper\">\n  <div class=\"site-meta \">\n    \n\n    <div class=\"custom-logo-site-title\">\n      <a href=\"/\"  class=\"brand\" rel=\"start\">\n        <span class=\"logo-line-before\"><i></i></span>\n        <span class=\"site-title\">icoder</span>\n        <span class=\"logo-line-after\"><i></i></span>\n      </a>\n    </div>\n      \n        <p class=\"site-subtitle\">Just do it!</p>\n      \n  </div>\n\n  <div class=\"site-nav-toggle\">\n    <button>\n      <span class=\"btn-bar\"></span>\n      <span class=\"btn-bar\"></span>\n      <span class=\"btn-bar\"></span>\n    </button>\n  </div>\n</div>\n\n<nav class=\"site-nav\">\n  \n\n  \n    <ul id=\"menu\" class=\"menu\">\n      \n        \n        <li class=\"menu-item menu-item-home\">\n          <a href=\"/\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-home\"></i> <br />\n            \n            首页\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-archives\">\n          <a href=\"/archives/\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-archive\"></i> <br />\n            \n            归档\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-tags\">\n          <a href=\"/tag/\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-tags\"></i> <br />\n            \n            标签\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-work\">\n          <a href=\"/work/\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-tasks\"></i> <br />\n            \n            作品\n          </a>\n        </li>\n      \n\n      \n    </ul>\n  \n\n  \n</nav>\n\n\n\n </div>\n    </header>\n\n    <main id=\"main\" class=\"main\">\n      <div class=\"main-inner\">\n        <div class=\"content-wrap\">\n          <div id=\"content\" class=\"content\">\n            \n\n  \n  \n  \n  <div class=\"post-block tag\">\n\n    <div id=\"posts\" class=\"posts-collapse\">\n      <div class=\"collection-title\">\n        <h1>Hexo<small>标签</small>\n        </h1>\n      </div>\n\n      \n        \n\n  <article class=\"post post-type-normal\" itemscope itemtype=\"http://schema.org/Article\">\n    <header class=\"post-header\">\n\n      <h2 class=\"post-title\">\n        \n            <a class=\"post-title-link\" href=\"/2018/02/27/hello-world/\" itemprop=\"url\">\n              \n                <span itemprop=\"name\">Hello World</span>\n              \n            </a>\n        \n      </h2>\n\n      <div class=\"post-meta\">\n        <time class=\"post-time\" itemprop=\"dateCreated\"\n              datetime=\"2018-02-27T20:00:14+08:00\"\n              content=\"2018-02-27\" >\n          02-27\n        </time>\n      </div>\n\n    </header>\n  </article>\n\n\n      \n    </div>\n\n  </div>\n  \n  \n  \n\n  \n\n\n          </div>\n          \n\n\n          \n\n        </div>\n        \n          \n  \n  <div class=\"sidebar-toggle\">\n    <div class=\"sidebar-toggle-line-wrap\">\n      <span class=\"sidebar-toggle-line sidebar-toggle-line-first\"></span>\n      <span class=\"sidebar-toggle-line sidebar-toggle-line-middle\"></span>\n      <span class=\"sidebar-toggle-line sidebar-toggle-line-last\"></span>\n    </div>\n  </div>\n\n  <aside id=\"sidebar\" class=\"sidebar\">\n    \n    <div class=\"sidebar-inner\">\n\n      \n\n      \n\n      <section class=\"site-overview-wrap sidebar-panel sidebar-panel-active\">\n        <div class=\"site-overview\">\n          <div class=\"site-author motion-element\" itemprop=\"author\" itemscope itemtype=\"http://schema.org/Person\">\n            \n              <img class=\"site-author-image\" itemprop=\"image\"\n                src=\"/uploads/avatar.png\"\n                alt=\"zqunor\" />\n            \n              <p class=\"site-author-name\" itemprop=\"name\">zqunor</p>\n              <p class=\"site-description motion-element\" itemprop=\"description\">遇见更好的自己</p>\n          </div>\n\n          <nav class=\"site-state motion-element\">\n\n            \n              <div class=\"site-state-item site-state-posts\">\n              \n                <a href=\"/archives/\">\n              \n                  <span class=\"site-state-item-count\">2</span>\n                  <span class=\"site-state-item-name\">日志</span>\n                </a>\n              </div>\n            \n\n            \n              \n              \n              <div class=\"site-state-item site-state-categories\">\n                \n                  <span class=\"site-state-item-count\">1</span>\n                  <span class=\"site-state-item-name\">分类</span>\n                \n              </div>\n            \n\n            \n              \n              \n              <div class=\"site-state-item site-state-tags\">\n                <a href=\"/tag/index.html\">\n                  <span class=\"site-state-item-count\">2</span>\n                  <span class=\"site-state-item-name\">标签</span>\n                </a>\n              </div>\n            \n\n          </nav>\n\n          \n            <div class=\"feed-link motion-element\">\n              <a href=\"/atom.xml\" rel=\"alternate\">\n                <i class=\"fa fa-rss\"></i>\n                RSS\n              </a>\n            </div>\n          \n\n          \n            <div class=\"links-of-author motion-element\">\n                \n                  <span class=\"links-of-author-item\">\n                    <a href=\"https://github.com/zqunor\" target=\"_blank\" title=\"GitHub\">\n                      \n                        <i class=\"fa fa-fw fa-github\"></i>GitHub</a>\n                  </span>\n                \n                  <span class=\"links-of-author-item\">\n                    <a href=\"mailto:zqunor@gmail.com\" target=\"_blank\" title=\"邮箱\">\n                      \n                        <i class=\"fa fa-fw fa-envelope-square\"></i>邮箱</a>\n                  </span>\n                \n                  <span class=\"links-of-author-item\">\n                    <a href=\"http://www.zhihu.com/people/zqunor\" target=\"_blank\" title=\"知乎\">\n                      \n                        <i class=\"fa fa-fw fa-twitch\"></i>知乎</a>\n                  </span>\n                \n                  <span class=\"links-of-author-item\">\n                    <a href=\"/images/wechat.jpg\" target=\"_blank\" title=\"微信\">\n                      \n                        <i class=\"fa fa-fw fa-wechat\"></i>微信</a>\n                  </span>\n                \n            </div>\n          \n\n          \n          \n\n          \n          \n\n          \n\n        </div>\n      </section>\n\n      \n\n      \n\n    </div>\n  </aside>\n\n\n        \n      </div>\n    </main>\n\n    <footer id=\"footer\" class=\"footer\">\n      <div class=\"footer-inner\">\n        <div class=\"copyright\">&copy; <span itemprop=\"copyrightYear\">2018</span>\n  <span class=\"with-love\">\n    <i class=\"fa fa-user\"></i>\n  </span>\n  <span class=\"author\" itemprop=\"copyrightHolder\">zqunor</span>\n\n  \n</div>\n\n\n\n\n\n\n\n\n\n        \n<div class=\"busuanzi-count\">\n  <script async src=\"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n\n  \n    <span class=\"site-uv\">\n      <i class=\"fa fa-user\"></i>访问人次：\n      <span class=\"busuanzi-value\" id=\"busuanzi_value_site_uv\"></span>\n      \n    </span>\n  \n\n  \n    <span class=\"site-pv\">\n      <i class=\"fa fa-eye\"></i>访问量：\n      <span class=\"busuanzi-value\" id=\"busuanzi_value_site_pv\"></span>\n      \n    </span>\n  \n</div>\n\n\n\n\n\n\n\n\n        \n      </div>\n    </footer>\n\n    \n      <div class=\"back-to-top\">\n        <i class=\"fa fa-arrow-up\"></i>\n        \n      </div>\n    \n\n    \n\n  </div>\n\n  \n\n<script type=\"text/javascript\">\n  if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {\n    window.Promise = null;\n  }\n</script>\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/jquery/index.js?v=2.1.3\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/fastclick/lib/fastclick.min.js?v=1.0.6\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/velocity/velocity.min.js?v=1.2.1\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/velocity/velocity.ui.min.js?v=1.2.1\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5\"></script>\n  \n\n\n  \n\n\n  <script type=\"text/javascript\" src=\"/js/src/utils.js?v=5.1.4\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/motion.js?v=5.1.4\"></script>\n\n\n\n  \n  \n\n\n  <script type=\"text/javascript\" src=\"/js/src/affix.js?v=5.1.4\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/schemes/pisces.js?v=5.1.4\"></script>\n\n\n\n  \n\n  \n\n\n  <script type=\"text/javascript\" src=\"/js/src/bootstrap.js?v=5.1.4\"></script>\n\n\n\n  \n\n\n  \n\n\n\n\n\t\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n\n\n\n\n\n\n<!-- LOCAL: You can save these files to your site and update links -->\n    \n        \n        <link rel=\"stylesheet\" href=\"https://aimingoo.github.io/gitmint/style/default.css\">\n        <script src=\"https://aimingoo.github.io/gitmint/dist/gitmint.browser.js\"></script>\n    \n<!-- END LOCAL -->\n\n    \n      <style>\n        a.gitment-editor-footer-tip { display: none; }\n        .gitment-container.gitment-footer-container { display: none; }\n      </style>\n    \n\n    \n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  <script src=\"https://cdn1.lncld.net/static/js/av-core-mini-0.6.4.js\"></script>\n  <script>AV.initialize(\"pXPuAE7FBoE9NlPEb4HvTh12-gzGzoHsz\", \"IvfbUfSPuRf2BjdlOh6M5hRT\");</script>\n  <script>\n    function showTime(Counter) {\n      var query = new AV.Query(Counter);\n      var entries = [];\n      var $visitors = $(\".leancloud_visitors\");\n\n      $visitors.each(function () {\n        entries.push( $(this).attr(\"id\").trim() );\n      });\n\n      query.containedIn('url', entries);\n      query.find()\n        .done(function (results) {\n          var COUNT_CONTAINER_REF = '.leancloud-visitors-count';\n\n          if (results.length === 0) {\n            $visitors.find(COUNT_CONTAINER_REF).text(0);\n            return;\n          }\n\n          for (var i = 0; i < results.length; i++) {\n            var item = results[i];\n            var url = item.get('url');\n            var time = item.get('time');\n            var element = document.getElementById(url);\n\n            $(element).find(COUNT_CONTAINER_REF).text(time);\n          }\n          for(var i = 0; i < entries.length; i++) {\n            var url = entries[i];\n            var element = document.getElementById(url);\n            var countSpan = $(element).find(COUNT_CONTAINER_REF);\n            if( countSpan.text() == '') {\n              countSpan.text(0);\n            }\n          }\n        })\n        .fail(function (object, error) {\n          console.log(\"Error: \" + error.code + \" \" + error.message);\n        });\n    }\n\n    function addCount(Counter) {\n      var $visitors = $(\".leancloud_visitors\");\n      var url = $visitors.attr('id').trim();\n      var title = $visitors.attr('data-flag-title').trim();\n      var query = new AV.Query(Counter);\n\n      query.equalTo(\"url\", url);\n      query.find({\n        success: function(results) {\n          if (results.length > 0) {\n            var counter = results[0];\n            counter.fetchWhenSave(true);\n            counter.increment(\"time\");\n            counter.save(null, {\n              success: function(counter) {\n                var $element = $(document.getElementById(url));\n                $element.find('.leancloud-visitors-count').text(counter.get('time'));\n              },\n              error: function(counter, error) {\n                console.log('Failed to save Visitor num, with error message: ' + error.message);\n              }\n            });\n          } else {\n            var newcounter = new Counter();\n            /* Set ACL */\n            var acl = new AV.ACL();\n            acl.setPublicReadAccess(true);\n            acl.setPublicWriteAccess(true);\n            newcounter.setACL(acl);\n            /* End Set ACL */\n            newcounter.set(\"title\", title);\n            newcounter.set(\"url\", url);\n            newcounter.set(\"time\", 1);\n            newcounter.save(null, {\n              success: function(newcounter) {\n                var $element = $(document.getElementById(url));\n                $element.find('.leancloud-visitors-count').text(newcounter.get('time'));\n              },\n              error: function(newcounter, error) {\n                console.log('Failed to create');\n              }\n            });\n          }\n        },\n        error: function(error) {\n          console.log('Error:' + error.code + \" \" + error.message);\n        }\n      });\n    }\n\n    $(function() {\n      var Counter = AV.Object.extend(\"Counter\");\n      if ($('.leancloud_visitors').length == 1) {\n        addCount(Counter);\n      } else if ($('.post-title-link').length > 1) {\n        showTime(Counter);\n      }\n    });\n  </script>\n\n\n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n  \n\n</body>\n</html>\n","date":"2018-11-16T12:14:52.212Z","updated":"2018-11-16T12:14:52.212Z","path":"tags/Hexo/index.html","title":"","comments":1,"layout":"page","_id":"cjvl5c44700752wuuwtqxctbk","content":"<!DOCTYPE html>\n\n\n\n  \n\n\n<html class=\"theme-next gemini use-motion\" lang=\"zh-Hans\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n  <meta charset=\"UTF-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\n<meta name=\"theme-color\" content=\"#222\">\n\n\n\n\n\n\n  \n  \n  <link rel=\"stylesheet\" media=\"all\" href=\"/lib/Han/dist/han.min.css?v=3.3\">\n\n\n\n\n<meta http-equiv=\"Cache-Control\" content=\"no-transform\">\n<meta http-equiv=\"Cache-Control\" content=\"no-siteapp\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  <link href=\"/lib/fancybox/source/jquery.fancybox.css?v=2.1.5\" rel=\"stylesheet\" type=\"text/css\">\n\n\n\n\n  \n  \n  \n  \n\n  \n    \n    \n  \n\n  \n    \n      \n    \n\n    \n  \n\n  \n    \n      \n    \n\n    \n  \n\n  \n    \n      \n    \n\n    \n  \n\n  \n    \n      \n    \n\n    \n  \n\n  \n    \n    \n    <link href=\"//fonts.googleapis.com/css?family=Monda:300,300italic,400,400italic,700,700italic|Roboto Slab:300,300italic,400,400italic,700,700italic|Monda:300,300italic,400,400italic,700,700italic|Lobster Two:300,300italic,400,400italic,700,700italic|PT Mono:300,300italic,400,400italic,700,700italic&subset=latin,latin-ext\" rel=\"stylesheet\" type=\"text/css\">\n  \n\n\n\n\n\n\n<link href=\"/lib/font-awesome/css/font-awesome.min.css?v=4.6.2\" rel=\"stylesheet\" type=\"text/css\">\n\n<link href=\"/css/main.css?v=5.1.4\" rel=\"stylesheet\" type=\"text/css\">\n\n\n  <link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/images/apple-touch-icon-next.png?v=5.1.4\">\n\n\n  <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/images/favicon-32x32-next.png?v=5.1.4\">\n\n\n  <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/images/favicon-16x16-next.png?v=5.1.4\">\n\n\n  <link rel=\"mask-icon\" href=\"/images/logo.svg?v=5.1.4\" color=\"#222\">\n\n\n\n\n\n  <meta name=\"keywords\" content=\"Hexo, NexT\">\n\n\n\n\n\n  <link rel=\"alternate\" href=\"/atom.xml\" title=\"icoder\" type=\"application/atom+xml\">\n\n\n\n\n\n\n<meta name=\"description\" content=\"遇见更好的自己\">\n<meta property=\"og:type\" content=\"website\">\n<meta property=\"og:title\" content=\"icoder\">\n<meta property=\"og:url\" content=\"http://www.i2arch.tech/tags/Hexo/index.html\">\n<meta property=\"og:site_name\" content=\"icoder\">\n<meta property=\"og:description\" content=\"遇见更好的自己\">\n<meta property=\"og:locale\" content=\"zh-Hans\">\n<meta name=\"twitter:card\" content=\"summary\">\n<meta name=\"twitter:title\" content=\"icoder\">\n<meta name=\"twitter:description\" content=\"遇见更好的自己\">\n\n\n\n<script type=\"text/javascript\" id=\"hexo.configurations\">\n  var NexT = window.NexT || {};\n  var CONFIG = {\n    root: '/',\n    scheme: 'Gemini',\n    version: '5.1.4',\n    sidebar: {\"position\":\"right\",\"display\":\"post\",\"offset\":12,\"b2t\":false,\"scrollpercent\":false,\"onmobile\":false},\n    fancybox: true,\n    tabs: true,\n    motion: {\"enable\":true,\"async\":false,\"transition\":{\"post_block\":\"fadeIn\",\"post_header\":\"slideDownIn\",\"post_body\":\"slideDownIn\",\"coll_header\":\"slideLeftIn\",\"sidebar\":\"slideUpIn\"}},\n    duoshuo: {\n      userId: '0',\n      author: '博主'\n    },\n    algolia: {\n      applicationID: '',\n      apiKey: '',\n      indexName: '',\n      hits: {\"per_page\":10},\n      labels: {\"input_placeholder\":\"Search for Posts\",\"hits_empty\":\"We didn't find any results for the search: ${query}\",\"hits_stats\":\"${hits} results found in ${time} ms\"}\n    }\n  };\n</script>\n\n\n\n  <link rel=\"canonical\" href=\"http://www.i2arch.tech/tags/Hexo/\">\n\n\n\n\n\n  <title>标签: Hexo | icoder</title>\n  \n\n\n\n\n\n\n\n\n</head>\n\n<body itemscope=\"\" itemtype=\"http://schema.org/WebPage\" lang=\"zh-Hans\">\n\n  \n  \n    \n  \n\n  <div class=\"container sidebar-position-right \">\n    <div class=\"headband\"></div>\n\n    <header id=\"header\" class=\"header\" itemscope=\"\" itemtype=\"http://schema.org/WPHeader\">\n      <div class=\"header-inner\"><div class=\"site-brand-wrapper\">\n  <div class=\"site-meta \">\n    \n\n    <div class=\"custom-logo-site-title\">\n      <a href=\"/\" class=\"brand\" rel=\"start\">\n        <span class=\"logo-line-before\"><i></i></span>\n        <span class=\"site-title\">icoder</span>\n        <span class=\"logo-line-after\"><i></i></span>\n      </a>\n    </div>\n      \n        <p class=\"site-subtitle\">Just do it!</p>\n      \n  </div>\n\n  <div class=\"site-nav-toggle\">\n    <button>\n      <span class=\"btn-bar\"></span>\n      <span class=\"btn-bar\"></span>\n      <span class=\"btn-bar\"></span>\n    </button>\n  </div>\n</div>\n\n<nav class=\"site-nav\">\n  \n\n  \n    <ul id=\"menu\" class=\"menu\">\n      \n        \n        <li class=\"menu-item menu-item-home\">\n          <a href=\"/\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-home\"></i> <br>\n            \n            首页\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-archives\">\n          <a href=\"/archives/\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-archive\"></i> <br>\n            \n            归档\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-tags\">\n          <a href=\"/tag/\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-tags\"></i> <br>\n            \n            标签\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-work\">\n          <a href=\"/work/\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-tasks\"></i> <br>\n            \n            作品\n          </a>\n        </li>\n      \n\n      \n    </ul>\n  \n\n  \n</nav>\n\n\n\n </div>\n    </header>\n\n    <main id=\"main\" class=\"main\">\n      <div class=\"main-inner\">\n        <div class=\"content-wrap\">\n          <div id=\"content\" class=\"content\">\n            \n\n  \n  \n  \n  <div class=\"post-block tag\">\n\n    <div id=\"posts\" class=\"posts-collapse\">\n      <div class=\"collection-title\">\n        <h1>Hexo<small>标签</small>\n        </h1>\n      </div>\n\n      \n        \n\n  <article class=\"post post-type-normal\" itemscope=\"\" itemtype=\"http://schema.org/Article\">\n    <header class=\"post-header\">\n\n      <h2 class=\"post-title\">\n        \n            <a class=\"post-title-link\" href=\"/2018/02/27/hello-world/\" itemprop=\"url\">\n              \n                <span itemprop=\"name\">Hello World</span>\n              \n            </a>\n        \n      </h2>\n\n      <div class=\"post-meta\">\n        <time class=\"post-time\" itemprop=\"dateCreated\" datetime=\"2018-02-27T20:00:14+08:00\" content=\"2018-02-27\">\n          02-27\n        </time>\n      </div>\n\n    </header>\n  </article>\n\n\n      \n    </div>\n\n  </div>\n  \n  \n  \n\n  \n\n\n          </div>\n          \n\n\n          \n\n        </div>\n        \n          \n  \n  <div class=\"sidebar-toggle\">\n    <div class=\"sidebar-toggle-line-wrap\">\n      <span class=\"sidebar-toggle-line sidebar-toggle-line-first\"></span>\n      <span class=\"sidebar-toggle-line sidebar-toggle-line-middle\"></span>\n      <span class=\"sidebar-toggle-line sidebar-toggle-line-last\"></span>\n    </div>\n  </div>\n\n  <aside id=\"sidebar\" class=\"sidebar\">\n    \n    <div class=\"sidebar-inner\">\n\n      \n\n      \n\n      <section class=\"site-overview-wrap sidebar-panel sidebar-panel-active\">\n        <div class=\"site-overview\">\n          <div class=\"site-author motion-element\" itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\">\n            \n              <img class=\"site-author-image\" itemprop=\"image\" src=\"/uploads/avatar.png\" alt=\"zqunor\">\n            \n              <p class=\"site-author-name\" itemprop=\"name\">zqunor</p>\n              <p class=\"site-description motion-element\" itemprop=\"description\">遇见更好的自己</p>\n          </div>\n\n          <nav class=\"site-state motion-element\">\n\n            \n              <div class=\"site-state-item site-state-posts\">\n              \n                <a href=\"/archives/\">\n              \n                  <span class=\"site-state-item-count\">2</span>\n                  <span class=\"site-state-item-name\">日志</span>\n                </a>\n              </div>\n            \n\n            \n              \n              \n              <div class=\"site-state-item site-state-categories\">\n                \n                  <span class=\"site-state-item-count\">1</span>\n                  <span class=\"site-state-item-name\">分类</span>\n                \n              </div>\n            \n\n            \n              \n              \n              <div class=\"site-state-item site-state-tags\">\n                <a href=\"/tag/index.html\">\n                  <span class=\"site-state-item-count\">2</span>\n                  <span class=\"site-state-item-name\">标签</span>\n                </a>\n              </div>\n            \n\n          </nav>\n\n          \n            <div class=\"feed-link motion-element\">\n              <a href=\"/atom.xml\" rel=\"alternate\">\n                <i class=\"fa fa-rss\"></i>\n                RSS\n              </a>\n            </div>\n          \n\n          \n            <div class=\"links-of-author motion-element\">\n                \n                  <span class=\"links-of-author-item\">\n                    <a href=\"https://github.com/zqunor\" target=\"_blank\" title=\"GitHub\">\n                      \n                        <i class=\"fa fa-fw fa-github\"></i>GitHub</a>\n                  </span>\n                \n                  <span class=\"links-of-author-item\">\n                    <a href=\"mailto:zqunor@gmail.com\" target=\"_blank\" title=\"邮箱\">\n                      \n                        <i class=\"fa fa-fw fa-envelope-square\"></i>邮箱</a>\n                  </span>\n                \n                  <span class=\"links-of-author-item\">\n                    <a href=\"http://www.zhihu.com/people/zqunor\" target=\"_blank\" title=\"知乎\">\n                      \n                        <i class=\"fa fa-fw fa-twitch\"></i>知乎</a>\n                  </span>\n                \n                  <span class=\"links-of-author-item\">\n                    <a href=\"/images/wechat.jpg\" target=\"_blank\" title=\"微信\">\n                      \n                        <i class=\"fa fa-fw fa-wechat\"></i>微信</a>\n                  </span>\n                \n            </div>\n          \n\n          \n          \n\n          \n          \n\n          \n\n        </div>\n      </section>\n\n      \n\n      \n\n    </div>\n  </aside>\n\n\n        \n      </div>\n    </main>\n\n    <footer id=\"footer\" class=\"footer\">\n      <div class=\"footer-inner\">\n        <div class=\"copyright\">&copy; <span itemprop=\"copyrightYear\">2018</span>\n  <span class=\"with-love\">\n    <i class=\"fa fa-user\"></i>\n  </span>\n  <span class=\"author\" itemprop=\"copyrightHolder\">zqunor</span>\n\n  \n</div>\n\n\n\n\n\n\n\n\n\n        \n<div class=\"busuanzi-count\">\n  <script async src=\"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n\n  \n    <span class=\"site-uv\">\n      <i class=\"fa fa-user\"></i>访问人次：\n      <span class=\"busuanzi-value\" id=\"busuanzi_value_site_uv\"></span>\n      \n    </span>\n  \n\n  \n    <span class=\"site-pv\">\n      <i class=\"fa fa-eye\"></i>访问量：\n      <span class=\"busuanzi-value\" id=\"busuanzi_value_site_pv\"></span>\n      \n    </span>\n  \n</div>\n\n\n\n\n\n\n\n\n        \n      </div>\n    </footer>\n\n    \n      <div class=\"back-to-top\">\n        <i class=\"fa fa-arrow-up\"></i>\n        \n      </div>\n    \n\n    \n\n  </div>\n\n  \n\n<script type=\"text/javascript\">\n  if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {\n    window.Promise = null;\n  }\n</script>\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/jquery/index.js?v=2.1.3\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/fastclick/lib/fastclick.min.js?v=1.0.6\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/velocity/velocity.min.js?v=1.2.1\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/velocity/velocity.ui.min.js?v=1.2.1\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5\"></script>\n  \n\n\n  \n\n\n  <script type=\"text/javascript\" src=\"/js/src/utils.js?v=5.1.4\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/motion.js?v=5.1.4\"></script>\n\n\n\n  \n  \n\n\n  <script type=\"text/javascript\" src=\"/js/src/affix.js?v=5.1.4\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/schemes/pisces.js?v=5.1.4\"></script>\n\n\n\n  \n\n  \n\n\n  <script type=\"text/javascript\" src=\"/js/src/bootstrap.js?v=5.1.4\"></script>\n\n\n\n  \n\n\n  \n\n\n\n\n\t\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n\n\n\n\n\n\n<!-- LOCAL: You can save these files to your site and update links -->\n    \n        \n        <link rel=\"stylesheet\" href=\"https://aimingoo.github.io/gitmint/style/default.css\">\n        <script src=\"https://aimingoo.github.io/gitmint/dist/gitmint.browser.js\"></script>\n    \n<!-- END LOCAL -->\n\n    \n      <style>\n        a.gitment-editor-footer-tip { display: none; }\n        .gitment-container.gitment-footer-container { display: none; }\n      </style>\n    \n\n    \n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  <script src=\"https://cdn1.lncld.net/static/js/av-core-mini-0.6.4.js\"></script>\n  <script>AV.initialize(\"pXPuAE7FBoE9NlPEb4HvTh12-gzGzoHsz\", \"IvfbUfSPuRf2BjdlOh6M5hRT\");</script>\n  <script>\n    function showTime(Counter) {\n      var query = new AV.Query(Counter);\n      var entries = [];\n      var $visitors = $(\".leancloud_visitors\");\n\n      $visitors.each(function () {\n        entries.push( $(this).attr(\"id\").trim() );\n      });\n\n      query.containedIn('url', entries);\n      query.find()\n        .done(function (results) {\n          var COUNT_CONTAINER_REF = '.leancloud-visitors-count';\n\n          if (results.length === 0) {\n            $visitors.find(COUNT_CONTAINER_REF).text(0);\n            return;\n          }\n\n          for (var i = 0; i < results.length; i++) {\n            var item = results[i];\n            var url = item.get('url');\n            var time = item.get('time');\n            var element = document.getElementById(url);\n\n            $(element).find(COUNT_CONTAINER_REF).text(time);\n          }\n          for(var i = 0; i < entries.length; i++) {\n            var url = entries[i];\n            var element = document.getElementById(url);\n            var countSpan = $(element).find(COUNT_CONTAINER_REF);\n            if( countSpan.text() == '') {\n              countSpan.text(0);\n            }\n          }\n        })\n        .fail(function (object, error) {\n          console.log(\"Error: \" + error.code + \" \" + error.message);\n        });\n    }\n\n    function addCount(Counter) {\n      var $visitors = $(\".leancloud_visitors\");\n      var url = $visitors.attr('id').trim();\n      var title = $visitors.attr('data-flag-title').trim();\n      var query = new AV.Query(Counter);\n\n      query.equalTo(\"url\", url);\n      query.find({\n        success: function(results) {\n          if (results.length > 0) {\n            var counter = results[0];\n            counter.fetchWhenSave(true);\n            counter.increment(\"time\");\n            counter.save(null, {\n              success: function(counter) {\n                var $element = $(document.getElementById(url));\n                $element.find('.leancloud-visitors-count').text(counter.get('time'));\n              },\n              error: function(counter, error) {\n                console.log('Failed to save Visitor num, with error message: ' + error.message);\n              }\n            });\n          } else {\n            var newcounter = new Counter();\n            /* Set ACL */\n            var acl = new AV.ACL();\n            acl.setPublicReadAccess(true);\n            acl.setPublicWriteAccess(true);\n            newcounter.setACL(acl);\n            /* End Set ACL */\n            newcounter.set(\"title\", title);\n            newcounter.set(\"url\", url);\n            newcounter.set(\"time\", 1);\n            newcounter.save(null, {\n              success: function(newcounter) {\n                var $element = $(document.getElementById(url));\n                $element.find('.leancloud-visitors-count').text(newcounter.get('time'));\n              },\n              error: function(newcounter, error) {\n                console.log('Failed to create');\n              }\n            });\n          }\n        },\n        error: function(error) {\n          console.log('Error:' + error.code + \" \" + error.message);\n        }\n      });\n    }\n\n    $(function() {\n      var Counter = AV.Object.extend(\"Counter\");\n      if ($('.leancloud_visitors').length == 1) {\n        addCount(Counter);\n      } else if ($('.post-title-link').length > 1) {\n        showTime(Counter);\n      }\n    });\n  </script>\n\n\n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n  \n\n</body>\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n\n\n\n  \n\n\n<html class=\"theme-next gemini use-motion\" lang=\"zh-Hans\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n  <meta charset=\"UTF-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\n<meta name=\"theme-color\" content=\"#222\">\n\n\n\n\n\n\n  \n  \n  <link rel=\"stylesheet\" media=\"all\" href=\"/lib/Han/dist/han.min.css?v=3.3\">\n\n\n\n\n<meta http-equiv=\"Cache-Control\" content=\"no-transform\">\n<meta http-equiv=\"Cache-Control\" content=\"no-siteapp\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  <link href=\"/lib/fancybox/source/jquery.fancybox.css?v=2.1.5\" rel=\"stylesheet\" type=\"text/css\">\n\n\n\n\n  \n  \n  \n  \n\n  \n    \n    \n  \n\n  \n    \n      \n    \n\n    \n  \n\n  \n    \n      \n    \n\n    \n  \n\n  \n    \n      \n    \n\n    \n  \n\n  \n    \n      \n    \n\n    \n  \n\n  \n    \n    \n    <link href=\"//fonts.googleapis.com/css?family=Monda:300,300italic,400,400italic,700,700italic|Roboto Slab:300,300italic,400,400italic,700,700italic|Monda:300,300italic,400,400italic,700,700italic|Lobster Two:300,300italic,400,400italic,700,700italic|PT Mono:300,300italic,400,400italic,700,700italic&subset=latin,latin-ext\" rel=\"stylesheet\" type=\"text/css\">\n  \n\n\n\n\n\n\n<link href=\"/lib/font-awesome/css/font-awesome.min.css?v=4.6.2\" rel=\"stylesheet\" type=\"text/css\">\n\n<link href=\"/css/main.css?v=5.1.4\" rel=\"stylesheet\" type=\"text/css\">\n\n\n  <link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/images/apple-touch-icon-next.png?v=5.1.4\">\n\n\n  <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/images/favicon-32x32-next.png?v=5.1.4\">\n\n\n  <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/images/favicon-16x16-next.png?v=5.1.4\">\n\n\n  <link rel=\"mask-icon\" href=\"/images/logo.svg?v=5.1.4\" color=\"#222\">\n\n\n\n\n\n  <meta name=\"keywords\" content=\"Hexo, NexT\">\n\n\n\n\n\n  <link rel=\"alternate\" href=\"/atom.xml\" title=\"icoder\" type=\"application/atom+xml\">\n\n\n\n\n\n\n<meta name=\"description\" content=\"遇见更好的自己\">\n<meta property=\"og:type\" content=\"website\">\n<meta property=\"og:title\" content=\"icoder\">\n<meta property=\"og:url\" content=\"http://www.i2arch.tech/tags/Hexo/index.html\">\n<meta property=\"og:site_name\" content=\"icoder\">\n<meta property=\"og:description\" content=\"遇见更好的自己\">\n<meta property=\"og:locale\" content=\"zh-Hans\">\n<meta name=\"twitter:card\" content=\"summary\">\n<meta name=\"twitter:title\" content=\"icoder\">\n<meta name=\"twitter:description\" content=\"遇见更好的自己\">\n\n\n\n<script type=\"text/javascript\" id=\"hexo.configurations\">\n  var NexT = window.NexT || {};\n  var CONFIG = {\n    root: '/',\n    scheme: 'Gemini',\n    version: '5.1.4',\n    sidebar: {\"position\":\"right\",\"display\":\"post\",\"offset\":12,\"b2t\":false,\"scrollpercent\":false,\"onmobile\":false},\n    fancybox: true,\n    tabs: true,\n    motion: {\"enable\":true,\"async\":false,\"transition\":{\"post_block\":\"fadeIn\",\"post_header\":\"slideDownIn\",\"post_body\":\"slideDownIn\",\"coll_header\":\"slideLeftIn\",\"sidebar\":\"slideUpIn\"}},\n    duoshuo: {\n      userId: '0',\n      author: '博主'\n    },\n    algolia: {\n      applicationID: '',\n      apiKey: '',\n      indexName: '',\n      hits: {\"per_page\":10},\n      labels: {\"input_placeholder\":\"Search for Posts\",\"hits_empty\":\"We didn't find any results for the search: ${query}\",\"hits_stats\":\"${hits} results found in ${time} ms\"}\n    }\n  };\n</script>\n\n\n\n  <link rel=\"canonical\" href=\"http://www.i2arch.tech/tags/Hexo/\">\n\n\n\n\n\n  <title>标签: Hexo | icoder</title>\n  \n\n\n\n\n\n\n\n\n</head>\n\n<body itemscope=\"\" itemtype=\"http://schema.org/WebPage\" lang=\"zh-Hans\">\n\n  \n  \n    \n  \n\n  <div class=\"container sidebar-position-right \">\n    <div class=\"headband\"></div>\n\n    <header id=\"header\" class=\"header\" itemscope=\"\" itemtype=\"http://schema.org/WPHeader\">\n      <div class=\"header-inner\"><div class=\"site-brand-wrapper\">\n  <div class=\"site-meta \">\n    \n\n    <div class=\"custom-logo-site-title\">\n      <a href=\"/\" class=\"brand\" rel=\"start\">\n        <span class=\"logo-line-before\"><i></i></span>\n        <span class=\"site-title\">icoder</span>\n        <span class=\"logo-line-after\"><i></i></span>\n      </a>\n    </div>\n      \n        <p class=\"site-subtitle\">Just do it!</p>\n      \n  </div>\n\n  <div class=\"site-nav-toggle\">\n    <button>\n      <span class=\"btn-bar\"></span>\n      <span class=\"btn-bar\"></span>\n      <span class=\"btn-bar\"></span>\n    </button>\n  </div>\n</div>\n\n<nav class=\"site-nav\">\n  \n\n  \n    <ul id=\"menu\" class=\"menu\">\n      \n        \n        <li class=\"menu-item menu-item-home\">\n          <a href=\"/\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-home\"></i> <br>\n            \n            首页\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-archives\">\n          <a href=\"/archives/\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-archive\"></i> <br>\n            \n            归档\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-tags\">\n          <a href=\"/tag/\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-tags\"></i> <br>\n            \n            标签\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-work\">\n          <a href=\"/work/\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-tasks\"></i> <br>\n            \n            作品\n          </a>\n        </li>\n      \n\n      \n    </ul>\n  \n\n  \n</nav>\n\n\n\n </div>\n    </header>\n\n    <main id=\"main\" class=\"main\">\n      <div class=\"main-inner\">\n        <div class=\"content-wrap\">\n          <div id=\"content\" class=\"content\">\n            \n\n  \n  \n  \n  <div class=\"post-block tag\">\n\n    <div id=\"posts\" class=\"posts-collapse\">\n      <div class=\"collection-title\">\n        <h1>Hexo<small>标签</small>\n        </h1>\n      </div>\n\n      \n        \n\n  <article class=\"post post-type-normal\" itemscope=\"\" itemtype=\"http://schema.org/Article\">\n    <header class=\"post-header\">\n\n      <h2 class=\"post-title\">\n        \n            <a class=\"post-title-link\" href=\"/2018/02/27/hello-world/\" itemprop=\"url\">\n              \n                <span itemprop=\"name\">Hello World</span>\n              \n            </a>\n        \n      </h2>\n\n      <div class=\"post-meta\">\n        <time class=\"post-time\" itemprop=\"dateCreated\" datetime=\"2018-02-27T20:00:14+08:00\" content=\"2018-02-27\">\n          02-27\n        </time>\n      </div>\n\n    </header>\n  </article>\n\n\n      \n    </div>\n\n  </div>\n  \n  \n  \n\n  \n\n\n          </div>\n          \n\n\n          \n\n        </div>\n        \n          \n  \n  <div class=\"sidebar-toggle\">\n    <div class=\"sidebar-toggle-line-wrap\">\n      <span class=\"sidebar-toggle-line sidebar-toggle-line-first\"></span>\n      <span class=\"sidebar-toggle-line sidebar-toggle-line-middle\"></span>\n      <span class=\"sidebar-toggle-line sidebar-toggle-line-last\"></span>\n    </div>\n  </div>\n\n  <aside id=\"sidebar\" class=\"sidebar\">\n    \n    <div class=\"sidebar-inner\">\n\n      \n\n      \n\n      <section class=\"site-overview-wrap sidebar-panel sidebar-panel-active\">\n        <div class=\"site-overview\">\n          <div class=\"site-author motion-element\" itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\">\n            \n              <img class=\"site-author-image\" itemprop=\"image\" src=\"/uploads/avatar.png\" alt=\"zqunor\">\n            \n              <p class=\"site-author-name\" itemprop=\"name\">zqunor</p>\n              <p class=\"site-description motion-element\" itemprop=\"description\">遇见更好的自己</p>\n          </div>\n\n          <nav class=\"site-state motion-element\">\n\n            \n              <div class=\"site-state-item site-state-posts\">\n              \n                <a href=\"/archives/\">\n              \n                  <span class=\"site-state-item-count\">2</span>\n                  <span class=\"site-state-item-name\">日志</span>\n                </a>\n              </div>\n            \n\n            \n              \n              \n              <div class=\"site-state-item site-state-categories\">\n                \n                  <span class=\"site-state-item-count\">1</span>\n                  <span class=\"site-state-item-name\">分类</span>\n                \n              </div>\n            \n\n            \n              \n              \n              <div class=\"site-state-item site-state-tags\">\n                <a href=\"/tag/index.html\">\n                  <span class=\"site-state-item-count\">2</span>\n                  <span class=\"site-state-item-name\">标签</span>\n                </a>\n              </div>\n            \n\n          </nav>\n\n          \n            <div class=\"feed-link motion-element\">\n              <a href=\"/atom.xml\" rel=\"alternate\">\n                <i class=\"fa fa-rss\"></i>\n                RSS\n              </a>\n            </div>\n          \n\n          \n            <div class=\"links-of-author motion-element\">\n                \n                  <span class=\"links-of-author-item\">\n                    <a href=\"https://github.com/zqunor\" target=\"_blank\" title=\"GitHub\">\n                      \n                        <i class=\"fa fa-fw fa-github\"></i>GitHub</a>\n                  </span>\n                \n                  <span class=\"links-of-author-item\">\n                    <a href=\"mailto:zqunor@gmail.com\" target=\"_blank\" title=\"邮箱\">\n                      \n                        <i class=\"fa fa-fw fa-envelope-square\"></i>邮箱</a>\n                  </span>\n                \n                  <span class=\"links-of-author-item\">\n                    <a href=\"http://www.zhihu.com/people/zqunor\" target=\"_blank\" title=\"知乎\">\n                      \n                        <i class=\"fa fa-fw fa-twitch\"></i>知乎</a>\n                  </span>\n                \n                  <span class=\"links-of-author-item\">\n                    <a href=\"/images/wechat.jpg\" target=\"_blank\" title=\"微信\">\n                      \n                        <i class=\"fa fa-fw fa-wechat\"></i>微信</a>\n                  </span>\n                \n            </div>\n          \n\n          \n          \n\n          \n          \n\n          \n\n        </div>\n      </section>\n\n      \n\n      \n\n    </div>\n  </aside>\n\n\n        \n      </div>\n    </main>\n\n    <footer id=\"footer\" class=\"footer\">\n      <div class=\"footer-inner\">\n        <div class=\"copyright\">&copy; <span itemprop=\"copyrightYear\">2018</span>\n  <span class=\"with-love\">\n    <i class=\"fa fa-user\"></i>\n  </span>\n  <span class=\"author\" itemprop=\"copyrightHolder\">zqunor</span>\n\n  \n</div>\n\n\n\n\n\n\n\n\n\n        \n<div class=\"busuanzi-count\">\n  <script async src=\"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n\n  \n    <span class=\"site-uv\">\n      <i class=\"fa fa-user\"></i>访问人次：\n      <span class=\"busuanzi-value\" id=\"busuanzi_value_site_uv\"></span>\n      \n    </span>\n  \n\n  \n    <span class=\"site-pv\">\n      <i class=\"fa fa-eye\"></i>访问量：\n      <span class=\"busuanzi-value\" id=\"busuanzi_value_site_pv\"></span>\n      \n    </span>\n  \n</div>\n\n\n\n\n\n\n\n\n        \n      </div>\n    </footer>\n\n    \n      <div class=\"back-to-top\">\n        <i class=\"fa fa-arrow-up\"></i>\n        \n      </div>\n    \n\n    \n\n  </div>\n\n  \n\n<script type=\"text/javascript\">\n  if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {\n    window.Promise = null;\n  }\n</script>\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/jquery/index.js?v=2.1.3\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/fastclick/lib/fastclick.min.js?v=1.0.6\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/velocity/velocity.min.js?v=1.2.1\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/velocity/velocity.ui.min.js?v=1.2.1\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5\"></script>\n  \n\n\n  \n\n\n  <script type=\"text/javascript\" src=\"/js/src/utils.js?v=5.1.4\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/motion.js?v=5.1.4\"></script>\n\n\n\n  \n  \n\n\n  <script type=\"text/javascript\" src=\"/js/src/affix.js?v=5.1.4\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/schemes/pisces.js?v=5.1.4\"></script>\n\n\n\n  \n\n  \n\n\n  <script type=\"text/javascript\" src=\"/js/src/bootstrap.js?v=5.1.4\"></script>\n\n\n\n  \n\n\n  \n\n\n\n\n\t\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n\n\n\n\n\n\n<!-- LOCAL: You can save these files to your site and update links -->\n    \n        \n        <link rel=\"stylesheet\" href=\"https://aimingoo.github.io/gitmint/style/default.css\">\n        <script src=\"https://aimingoo.github.io/gitmint/dist/gitmint.browser.js\"></script>\n    \n<!-- END LOCAL -->\n\n    \n      <style>\n        a.gitment-editor-footer-tip { display: none; }\n        .gitment-container.gitment-footer-container { display: none; }\n      </style>\n    \n\n    \n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  <script src=\"https://cdn1.lncld.net/static/js/av-core-mini-0.6.4.js\"></script>\n  <script>AV.initialize(\"pXPuAE7FBoE9NlPEb4HvTh12-gzGzoHsz\", \"IvfbUfSPuRf2BjdlOh6M5hRT\");</script>\n  <script>\n    function showTime(Counter) {\n      var query = new AV.Query(Counter);\n      var entries = [];\n      var $visitors = $(\".leancloud_visitors\");\n\n      $visitors.each(function () {\n        entries.push( $(this).attr(\"id\").trim() );\n      });\n\n      query.containedIn('url', entries);\n      query.find()\n        .done(function (results) {\n          var COUNT_CONTAINER_REF = '.leancloud-visitors-count';\n\n          if (results.length === 0) {\n            $visitors.find(COUNT_CONTAINER_REF).text(0);\n            return;\n          }\n\n          for (var i = 0; i < results.length; i++) {\n            var item = results[i];\n            var url = item.get('url');\n            var time = item.get('time');\n            var element = document.getElementById(url);\n\n            $(element).find(COUNT_CONTAINER_REF).text(time);\n          }\n          for(var i = 0; i < entries.length; i++) {\n            var url = entries[i];\n            var element = document.getElementById(url);\n            var countSpan = $(element).find(COUNT_CONTAINER_REF);\n            if( countSpan.text() == '') {\n              countSpan.text(0);\n            }\n          }\n        })\n        .fail(function (object, error) {\n          console.log(\"Error: \" + error.code + \" \" + error.message);\n        });\n    }\n\n    function addCount(Counter) {\n      var $visitors = $(\".leancloud_visitors\");\n      var url = $visitors.attr('id').trim();\n      var title = $visitors.attr('data-flag-title').trim();\n      var query = new AV.Query(Counter);\n\n      query.equalTo(\"url\", url);\n      query.find({\n        success: function(results) {\n          if (results.length > 0) {\n            var counter = results[0];\n            counter.fetchWhenSave(true);\n            counter.increment(\"time\");\n            counter.save(null, {\n              success: function(counter) {\n                var $element = $(document.getElementById(url));\n                $element.find('.leancloud-visitors-count').text(counter.get('time'));\n              },\n              error: function(counter, error) {\n                console.log('Failed to save Visitor num, with error message: ' + error.message);\n              }\n            });\n          } else {\n            var newcounter = new Counter();\n            /* Set ACL */\n            var acl = new AV.ACL();\n            acl.setPublicReadAccess(true);\n            acl.setPublicWriteAccess(true);\n            newcounter.setACL(acl);\n            /* End Set ACL */\n            newcounter.set(\"title\", title);\n            newcounter.set(\"url\", url);\n            newcounter.set(\"time\", 1);\n            newcounter.save(null, {\n              success: function(newcounter) {\n                var $element = $(document.getElementById(url));\n                $element.find('.leancloud-visitors-count').text(newcounter.get('time'));\n              },\n              error: function(newcounter, error) {\n                console.log('Failed to create');\n              }\n            });\n          }\n        },\n        error: function(error) {\n          console.log('Error:' + error.code + \" \" + error.message);\n        }\n      });\n    }\n\n    $(function() {\n      var Counter = AV.Object.extend(\"Counter\");\n      if ($('.leancloud_visitors').length == 1) {\n        addCount(Counter);\n      } else if ($('.post-title-link').length > 1) {\n        showTime(Counter);\n      }\n    });\n  </script>\n\n\n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n  \n\n</body>\n</html>\n"},{"_content":"<!DOCTYPE html>\n\n\n\n  \n\n\n<html class=\"theme-next gemini use-motion\" lang=\"zh-Hans\">\n<head>\n  <meta charset=\"UTF-8\"/>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\"/>\n<meta name=\"theme-color\" content=\"#222\">\n\n\n\n\n\n\n  \n  \n  <link rel=\"stylesheet\" media=\"all\" href=\"/lib/Han/dist/han.min.css?v=3.3\">\n\n\n\n\n<meta http-equiv=\"Cache-Control\" content=\"no-transform\" />\n<meta http-equiv=\"Cache-Control\" content=\"no-siteapp\" />\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  <link href=\"/lib/fancybox/source/jquery.fancybox.css?v=2.1.5\" rel=\"stylesheet\" type=\"text/css\" />\n\n\n\n\n  \n  \n  \n  \n\n  \n    \n    \n  \n\n  \n    \n      \n    \n\n    \n  \n\n  \n    \n      \n    \n\n    \n  \n\n  \n    \n      \n    \n\n    \n  \n\n  \n    \n      \n    \n\n    \n  \n\n  \n    \n    \n    <link href=\"//fonts.googleapis.com/css?family=Monda:300,300italic,400,400italic,700,700italic|Roboto Slab:300,300italic,400,400italic,700,700italic|Monda:300,300italic,400,400italic,700,700italic|Lobster Two:300,300italic,400,400italic,700,700italic|PT Mono:300,300italic,400,400italic,700,700italic&subset=latin,latin-ext\" rel=\"stylesheet\" type=\"text/css\">\n  \n\n\n\n\n\n\n<link href=\"/lib/font-awesome/css/font-awesome.min.css?v=4.6.2\" rel=\"stylesheet\" type=\"text/css\" />\n\n<link href=\"/css/main.css?v=5.1.4\" rel=\"stylesheet\" type=\"text/css\" />\n\n\n  <link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/images/apple-touch-icon-next.png?v=5.1.4\">\n\n\n  <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/images/favicon-32x32-next.png?v=5.1.4\">\n\n\n  <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/images/favicon-16x16-next.png?v=5.1.4\">\n\n\n  <link rel=\"mask-icon\" href=\"/images/logo.svg?v=5.1.4\" color=\"#222\">\n\n\n\n\n\n  <meta name=\"keywords\" content=\"Hexo, NexT\" />\n\n\n\n\n\n  <link rel=\"alternate\" href=\"/atom.xml\" title=\"icoder\" type=\"application/atom+xml\" />\n\n\n\n\n\n\n<meta name=\"description\" content=\"遇见更好的自己\">\n<meta property=\"og:type\" content=\"website\">\n<meta property=\"og:title\" content=\"icoder\">\n<meta property=\"og:url\" content=\"http://www.i2arch.tech/tags/Linux/index.html\">\n<meta property=\"og:site_name\" content=\"icoder\">\n<meta property=\"og:description\" content=\"遇见更好的自己\">\n<meta property=\"og:locale\" content=\"zh-Hans\">\n<meta name=\"twitter:card\" content=\"summary\">\n<meta name=\"twitter:title\" content=\"icoder\">\n<meta name=\"twitter:description\" content=\"遇见更好的自己\">\n\n\n\n<script type=\"text/javascript\" id=\"hexo.configurations\">\n  var NexT = window.NexT || {};\n  var CONFIG = {\n    root: '/',\n    scheme: 'Gemini',\n    version: '5.1.4',\n    sidebar: {\"position\":\"right\",\"display\":\"post\",\"offset\":12,\"b2t\":false,\"scrollpercent\":false,\"onmobile\":false},\n    fancybox: true,\n    tabs: true,\n    motion: {\"enable\":true,\"async\":false,\"transition\":{\"post_block\":\"fadeIn\",\"post_header\":\"slideDownIn\",\"post_body\":\"slideDownIn\",\"coll_header\":\"slideLeftIn\",\"sidebar\":\"slideUpIn\"}},\n    duoshuo: {\n      userId: '0',\n      author: '博主'\n    },\n    algolia: {\n      applicationID: '',\n      apiKey: '',\n      indexName: '',\n      hits: {\"per_page\":10},\n      labels: {\"input_placeholder\":\"Search for Posts\",\"hits_empty\":\"We didn't find any results for the search: ${query}\",\"hits_stats\":\"${hits} results found in ${time} ms\"}\n    }\n  };\n</script>\n\n\n\n  <link rel=\"canonical\" href=\"http://www.i2arch.tech/tags/Linux/\"/>\n\n\n\n\n\n  <title>标签: Linux | icoder</title>\n  \n\n\n\n\n\n\n\n\n</head>\n\n<body itemscope itemtype=\"http://schema.org/WebPage\" lang=\"zh-Hans\">\n\n  \n  \n    \n  \n\n  <div class=\"container sidebar-position-right \">\n    <div class=\"headband\"></div>\n\n    <header id=\"header\" class=\"header\" itemscope itemtype=\"http://schema.org/WPHeader\">\n      <div class=\"header-inner\"><div class=\"site-brand-wrapper\">\n  <div class=\"site-meta \">\n    \n\n    <div class=\"custom-logo-site-title\">\n      <a href=\"/\"  class=\"brand\" rel=\"start\">\n        <span class=\"logo-line-before\"><i></i></span>\n        <span class=\"site-title\">icoder</span>\n        <span class=\"logo-line-after\"><i></i></span>\n      </a>\n    </div>\n      \n        <p class=\"site-subtitle\">Just do it!</p>\n      \n  </div>\n\n  <div class=\"site-nav-toggle\">\n    <button>\n      <span class=\"btn-bar\"></span>\n      <span class=\"btn-bar\"></span>\n      <span class=\"btn-bar\"></span>\n    </button>\n  </div>\n</div>\n\n<nav class=\"site-nav\">\n  \n\n  \n    <ul id=\"menu\" class=\"menu\">\n      \n        \n        <li class=\"menu-item menu-item-home\">\n          <a href=\"/\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-home\"></i> <br />\n            \n            首页\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-archives\">\n          <a href=\"/archives/\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-archive\"></i> <br />\n            \n            归档\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-tags\">\n          <a href=\"/tag/\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-tags\"></i> <br />\n            \n            标签\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-work\">\n          <a href=\"/work/\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-tasks\"></i> <br />\n            \n            作品\n          </a>\n        </li>\n      \n\n      \n    </ul>\n  \n\n  \n</nav>\n\n\n\n </div>\n    </header>\n\n    <main id=\"main\" class=\"main\">\n      <div class=\"main-inner\">\n        <div class=\"content-wrap\">\n          <div id=\"content\" class=\"content\">\n            \n\n  \n  \n  \n  <div class=\"post-block tag\">\n\n    <div id=\"posts\" class=\"posts-collapse\">\n      <div class=\"collection-title\">\n        <h1>Linux<small>标签</small>\n        </h1>\n      </div>\n\n      \n        \n\n  <article class=\"post post-type-normal\" itemscope itemtype=\"http://schema.org/Article\">\n    <header class=\"post-header\">\n\n      <h2 class=\"post-title\">\n        \n            <a class=\"post-title-link\" href=\"/2018/02/27/test/\" itemprop=\"url\">\n              \n                <span itemprop=\"name\">Test</span>\n              \n            </a>\n        \n      </h2>\n\n      <div class=\"post-meta\">\n        <time class=\"post-time\" itemprop=\"dateCreated\"\n              datetime=\"2018-02-27T10:30:04+08:00\"\n              content=\"2018-02-27\" >\n          02-27\n        </time>\n      </div>\n\n    </header>\n  </article>\n\n\n      \n    </div>\n\n  </div>\n  \n  \n  \n\n  \n\n\n          </div>\n          \n\n\n          \n\n        </div>\n        \n          \n  \n  <div class=\"sidebar-toggle\">\n    <div class=\"sidebar-toggle-line-wrap\">\n      <span class=\"sidebar-toggle-line sidebar-toggle-line-first\"></span>\n      <span class=\"sidebar-toggle-line sidebar-toggle-line-middle\"></span>\n      <span class=\"sidebar-toggle-line sidebar-toggle-line-last\"></span>\n    </div>\n  </div>\n\n  <aside id=\"sidebar\" class=\"sidebar\">\n    \n    <div class=\"sidebar-inner\">\n\n      \n\n      \n\n      <section class=\"site-overview-wrap sidebar-panel sidebar-panel-active\">\n        <div class=\"site-overview\">\n          <div class=\"site-author motion-element\" itemprop=\"author\" itemscope itemtype=\"http://schema.org/Person\">\n            \n              <img class=\"site-author-image\" itemprop=\"image\"\n                src=\"/uploads/avatar.png\"\n                alt=\"zqunor\" />\n            \n              <p class=\"site-author-name\" itemprop=\"name\">zqunor</p>\n              <p class=\"site-description motion-element\" itemprop=\"description\">遇见更好的自己</p>\n          </div>\n\n          <nav class=\"site-state motion-element\">\n\n            \n              <div class=\"site-state-item site-state-posts\">\n              \n                <a href=\"/archives/\">\n              \n                  <span class=\"site-state-item-count\">2</span>\n                  <span class=\"site-state-item-name\">日志</span>\n                </a>\n              </div>\n            \n\n            \n              \n              \n              <div class=\"site-state-item site-state-categories\">\n                \n                  <span class=\"site-state-item-count\">1</span>\n                  <span class=\"site-state-item-name\">分类</span>\n                \n              </div>\n            \n\n            \n              \n              \n              <div class=\"site-state-item site-state-tags\">\n                <a href=\"/tag/index.html\">\n                  <span class=\"site-state-item-count\">2</span>\n                  <span class=\"site-state-item-name\">标签</span>\n                </a>\n              </div>\n            \n\n          </nav>\n\n          \n            <div class=\"feed-link motion-element\">\n              <a href=\"/atom.xml\" rel=\"alternate\">\n                <i class=\"fa fa-rss\"></i>\n                RSS\n              </a>\n            </div>\n          \n\n          \n            <div class=\"links-of-author motion-element\">\n                \n                  <span class=\"links-of-author-item\">\n                    <a href=\"https://github.com/zqunor\" target=\"_blank\" title=\"GitHub\">\n                      \n                        <i class=\"fa fa-fw fa-github\"></i>GitHub</a>\n                  </span>\n                \n                  <span class=\"links-of-author-item\">\n                    <a href=\"mailto:zqunor@gmail.com\" target=\"_blank\" title=\"邮箱\">\n                      \n                        <i class=\"fa fa-fw fa-envelope-square\"></i>邮箱</a>\n                  </span>\n                \n                  <span class=\"links-of-author-item\">\n                    <a href=\"http://www.zhihu.com/people/zqunor\" target=\"_blank\" title=\"知乎\">\n                      \n                        <i class=\"fa fa-fw fa-twitch\"></i>知乎</a>\n                  </span>\n                \n                  <span class=\"links-of-author-item\">\n                    <a href=\"/images/wechat.jpg\" target=\"_blank\" title=\"微信\">\n                      \n                        <i class=\"fa fa-fw fa-wechat\"></i>微信</a>\n                  </span>\n                \n            </div>\n          \n\n          \n          \n\n          \n          \n\n          \n\n        </div>\n      </section>\n\n      \n\n      \n\n    </div>\n  </aside>\n\n\n        \n      </div>\n    </main>\n\n    <footer id=\"footer\" class=\"footer\">\n      <div class=\"footer-inner\">\n        <div class=\"copyright\">&copy; <span itemprop=\"copyrightYear\">2018</span>\n  <span class=\"with-love\">\n    <i class=\"fa fa-user\"></i>\n  </span>\n  <span class=\"author\" itemprop=\"copyrightHolder\">zqunor</span>\n\n  \n</div>\n\n\n\n\n\n\n\n\n\n        \n<div class=\"busuanzi-count\">\n  <script async src=\"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n\n  \n    <span class=\"site-uv\">\n      <i class=\"fa fa-user\"></i>访问人次：\n      <span class=\"busuanzi-value\" id=\"busuanzi_value_site_uv\"></span>\n      \n    </span>\n  \n\n  \n    <span class=\"site-pv\">\n      <i class=\"fa fa-eye\"></i>访问量：\n      <span class=\"busuanzi-value\" id=\"busuanzi_value_site_pv\"></span>\n      \n    </span>\n  \n</div>\n\n\n\n\n\n\n\n\n        \n      </div>\n    </footer>\n\n    \n      <div class=\"back-to-top\">\n        <i class=\"fa fa-arrow-up\"></i>\n        \n      </div>\n    \n\n    \n\n  </div>\n\n  \n\n<script type=\"text/javascript\">\n  if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {\n    window.Promise = null;\n  }\n</script>\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/jquery/index.js?v=2.1.3\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/fastclick/lib/fastclick.min.js?v=1.0.6\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/velocity/velocity.min.js?v=1.2.1\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/velocity/velocity.ui.min.js?v=1.2.1\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5\"></script>\n  \n\n\n  \n\n\n  <script type=\"text/javascript\" src=\"/js/src/utils.js?v=5.1.4\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/motion.js?v=5.1.4\"></script>\n\n\n\n  \n  \n\n\n  <script type=\"text/javascript\" src=\"/js/src/affix.js?v=5.1.4\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/schemes/pisces.js?v=5.1.4\"></script>\n\n\n\n  \n\n  \n\n\n  <script type=\"text/javascript\" src=\"/js/src/bootstrap.js?v=5.1.4\"></script>\n\n\n\n  \n\n\n  \n\n\n\n\n\t\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n\n\n\n\n\n\n<!-- LOCAL: You can save these files to your site and update links -->\n    \n        \n        <link rel=\"stylesheet\" href=\"https://aimingoo.github.io/gitmint/style/default.css\">\n        <script src=\"https://aimingoo.github.io/gitmint/dist/gitmint.browser.js\"></script>\n    \n<!-- END LOCAL -->\n\n    \n      <style>\n        a.gitment-editor-footer-tip { display: none; }\n        .gitment-container.gitment-footer-container { display: none; }\n      </style>\n    \n\n    \n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  <script src=\"https://cdn1.lncld.net/static/js/av-core-mini-0.6.4.js\"></script>\n  <script>AV.initialize(\"pXPuAE7FBoE9NlPEb4HvTh12-gzGzoHsz\", \"IvfbUfSPuRf2BjdlOh6M5hRT\");</script>\n  <script>\n    function showTime(Counter) {\n      var query = new AV.Query(Counter);\n      var entries = [];\n      var $visitors = $(\".leancloud_visitors\");\n\n      $visitors.each(function () {\n        entries.push( $(this).attr(\"id\").trim() );\n      });\n\n      query.containedIn('url', entries);\n      query.find()\n        .done(function (results) {\n          var COUNT_CONTAINER_REF = '.leancloud-visitors-count';\n\n          if (results.length === 0) {\n            $visitors.find(COUNT_CONTAINER_REF).text(0);\n            return;\n          }\n\n          for (var i = 0; i < results.length; i++) {\n            var item = results[i];\n            var url = item.get('url');\n            var time = item.get('time');\n            var element = document.getElementById(url);\n\n            $(element).find(COUNT_CONTAINER_REF).text(time);\n          }\n          for(var i = 0; i < entries.length; i++) {\n            var url = entries[i];\n            var element = document.getElementById(url);\n            var countSpan = $(element).find(COUNT_CONTAINER_REF);\n            if( countSpan.text() == '') {\n              countSpan.text(0);\n            }\n          }\n        })\n        .fail(function (object, error) {\n          console.log(\"Error: \" + error.code + \" \" + error.message);\n        });\n    }\n\n    function addCount(Counter) {\n      var $visitors = $(\".leancloud_visitors\");\n      var url = $visitors.attr('id').trim();\n      var title = $visitors.attr('data-flag-title').trim();\n      var query = new AV.Query(Counter);\n\n      query.equalTo(\"url\", url);\n      query.find({\n        success: function(results) {\n          if (results.length > 0) {\n            var counter = results[0];\n            counter.fetchWhenSave(true);\n            counter.increment(\"time\");\n            counter.save(null, {\n              success: function(counter) {\n                var $element = $(document.getElementById(url));\n                $element.find('.leancloud-visitors-count').text(counter.get('time'));\n              },\n              error: function(counter, error) {\n                console.log('Failed to save Visitor num, with error message: ' + error.message);\n              }\n            });\n          } else {\n            var newcounter = new Counter();\n            /* Set ACL */\n            var acl = new AV.ACL();\n            acl.setPublicReadAccess(true);\n            acl.setPublicWriteAccess(true);\n            newcounter.setACL(acl);\n            /* End Set ACL */\n            newcounter.set(\"title\", title);\n            newcounter.set(\"url\", url);\n            newcounter.set(\"time\", 1);\n            newcounter.save(null, {\n              success: function(newcounter) {\n                var $element = $(document.getElementById(url));\n                $element.find('.leancloud-visitors-count').text(newcounter.get('time'));\n              },\n              error: function(newcounter, error) {\n                console.log('Failed to create');\n              }\n            });\n          }\n        },\n        error: function(error) {\n          console.log('Error:' + error.code + \" \" + error.message);\n        }\n      });\n    }\n\n    $(function() {\n      var Counter = AV.Object.extend(\"Counter\");\n      if ($('.leancloud_visitors').length == 1) {\n        addCount(Counter);\n      } else if ($('.post-title-link').length > 1) {\n        showTime(Counter);\n      }\n    });\n  </script>\n\n\n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n  \n\n</body>\n</html>\n","source":"tags/Linux/index.html","raw":"<!DOCTYPE html>\n\n\n\n  \n\n\n<html class=\"theme-next gemini use-motion\" lang=\"zh-Hans\">\n<head>\n  <meta charset=\"UTF-8\"/>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\"/>\n<meta name=\"theme-color\" content=\"#222\">\n\n\n\n\n\n\n  \n  \n  <link rel=\"stylesheet\" media=\"all\" href=\"/lib/Han/dist/han.min.css?v=3.3\">\n\n\n\n\n<meta http-equiv=\"Cache-Control\" content=\"no-transform\" />\n<meta http-equiv=\"Cache-Control\" content=\"no-siteapp\" />\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  <link href=\"/lib/fancybox/source/jquery.fancybox.css?v=2.1.5\" rel=\"stylesheet\" type=\"text/css\" />\n\n\n\n\n  \n  \n  \n  \n\n  \n    \n    \n  \n\n  \n    \n      \n    \n\n    \n  \n\n  \n    \n      \n    \n\n    \n  \n\n  \n    \n      \n    \n\n    \n  \n\n  \n    \n      \n    \n\n    \n  \n\n  \n    \n    \n    <link href=\"//fonts.googleapis.com/css?family=Monda:300,300italic,400,400italic,700,700italic|Roboto Slab:300,300italic,400,400italic,700,700italic|Monda:300,300italic,400,400italic,700,700italic|Lobster Two:300,300italic,400,400italic,700,700italic|PT Mono:300,300italic,400,400italic,700,700italic&subset=latin,latin-ext\" rel=\"stylesheet\" type=\"text/css\">\n  \n\n\n\n\n\n\n<link href=\"/lib/font-awesome/css/font-awesome.min.css?v=4.6.2\" rel=\"stylesheet\" type=\"text/css\" />\n\n<link href=\"/css/main.css?v=5.1.4\" rel=\"stylesheet\" type=\"text/css\" />\n\n\n  <link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/images/apple-touch-icon-next.png?v=5.1.4\">\n\n\n  <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/images/favicon-32x32-next.png?v=5.1.4\">\n\n\n  <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/images/favicon-16x16-next.png?v=5.1.4\">\n\n\n  <link rel=\"mask-icon\" href=\"/images/logo.svg?v=5.1.4\" color=\"#222\">\n\n\n\n\n\n  <meta name=\"keywords\" content=\"Hexo, NexT\" />\n\n\n\n\n\n  <link rel=\"alternate\" href=\"/atom.xml\" title=\"icoder\" type=\"application/atom+xml\" />\n\n\n\n\n\n\n<meta name=\"description\" content=\"遇见更好的自己\">\n<meta property=\"og:type\" content=\"website\">\n<meta property=\"og:title\" content=\"icoder\">\n<meta property=\"og:url\" content=\"http://www.i2arch.tech/tags/Linux/index.html\">\n<meta property=\"og:site_name\" content=\"icoder\">\n<meta property=\"og:description\" content=\"遇见更好的自己\">\n<meta property=\"og:locale\" content=\"zh-Hans\">\n<meta name=\"twitter:card\" content=\"summary\">\n<meta name=\"twitter:title\" content=\"icoder\">\n<meta name=\"twitter:description\" content=\"遇见更好的自己\">\n\n\n\n<script type=\"text/javascript\" id=\"hexo.configurations\">\n  var NexT = window.NexT || {};\n  var CONFIG = {\n    root: '/',\n    scheme: 'Gemini',\n    version: '5.1.4',\n    sidebar: {\"position\":\"right\",\"display\":\"post\",\"offset\":12,\"b2t\":false,\"scrollpercent\":false,\"onmobile\":false},\n    fancybox: true,\n    tabs: true,\n    motion: {\"enable\":true,\"async\":false,\"transition\":{\"post_block\":\"fadeIn\",\"post_header\":\"slideDownIn\",\"post_body\":\"slideDownIn\",\"coll_header\":\"slideLeftIn\",\"sidebar\":\"slideUpIn\"}},\n    duoshuo: {\n      userId: '0',\n      author: '博主'\n    },\n    algolia: {\n      applicationID: '',\n      apiKey: '',\n      indexName: '',\n      hits: {\"per_page\":10},\n      labels: {\"input_placeholder\":\"Search for Posts\",\"hits_empty\":\"We didn't find any results for the search: ${query}\",\"hits_stats\":\"${hits} results found in ${time} ms\"}\n    }\n  };\n</script>\n\n\n\n  <link rel=\"canonical\" href=\"http://www.i2arch.tech/tags/Linux/\"/>\n\n\n\n\n\n  <title>标签: Linux | icoder</title>\n  \n\n\n\n\n\n\n\n\n</head>\n\n<body itemscope itemtype=\"http://schema.org/WebPage\" lang=\"zh-Hans\">\n\n  \n  \n    \n  \n\n  <div class=\"container sidebar-position-right \">\n    <div class=\"headband\"></div>\n\n    <header id=\"header\" class=\"header\" itemscope itemtype=\"http://schema.org/WPHeader\">\n      <div class=\"header-inner\"><div class=\"site-brand-wrapper\">\n  <div class=\"site-meta \">\n    \n\n    <div class=\"custom-logo-site-title\">\n      <a href=\"/\"  class=\"brand\" rel=\"start\">\n        <span class=\"logo-line-before\"><i></i></span>\n        <span class=\"site-title\">icoder</span>\n        <span class=\"logo-line-after\"><i></i></span>\n      </a>\n    </div>\n      \n        <p class=\"site-subtitle\">Just do it!</p>\n      \n  </div>\n\n  <div class=\"site-nav-toggle\">\n    <button>\n      <span class=\"btn-bar\"></span>\n      <span class=\"btn-bar\"></span>\n      <span class=\"btn-bar\"></span>\n    </button>\n  </div>\n</div>\n\n<nav class=\"site-nav\">\n  \n\n  \n    <ul id=\"menu\" class=\"menu\">\n      \n        \n        <li class=\"menu-item menu-item-home\">\n          <a href=\"/\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-home\"></i> <br />\n            \n            首页\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-archives\">\n          <a href=\"/archives/\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-archive\"></i> <br />\n            \n            归档\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-tags\">\n          <a href=\"/tag/\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-tags\"></i> <br />\n            \n            标签\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-work\">\n          <a href=\"/work/\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-tasks\"></i> <br />\n            \n            作品\n          </a>\n        </li>\n      \n\n      \n    </ul>\n  \n\n  \n</nav>\n\n\n\n </div>\n    </header>\n\n    <main id=\"main\" class=\"main\">\n      <div class=\"main-inner\">\n        <div class=\"content-wrap\">\n          <div id=\"content\" class=\"content\">\n            \n\n  \n  \n  \n  <div class=\"post-block tag\">\n\n    <div id=\"posts\" class=\"posts-collapse\">\n      <div class=\"collection-title\">\n        <h1>Linux<small>标签</small>\n        </h1>\n      </div>\n\n      \n        \n\n  <article class=\"post post-type-normal\" itemscope itemtype=\"http://schema.org/Article\">\n    <header class=\"post-header\">\n\n      <h2 class=\"post-title\">\n        \n            <a class=\"post-title-link\" href=\"/2018/02/27/test/\" itemprop=\"url\">\n              \n                <span itemprop=\"name\">Test</span>\n              \n            </a>\n        \n      </h2>\n\n      <div class=\"post-meta\">\n        <time class=\"post-time\" itemprop=\"dateCreated\"\n              datetime=\"2018-02-27T10:30:04+08:00\"\n              content=\"2018-02-27\" >\n          02-27\n        </time>\n      </div>\n\n    </header>\n  </article>\n\n\n      \n    </div>\n\n  </div>\n  \n  \n  \n\n  \n\n\n          </div>\n          \n\n\n          \n\n        </div>\n        \n          \n  \n  <div class=\"sidebar-toggle\">\n    <div class=\"sidebar-toggle-line-wrap\">\n      <span class=\"sidebar-toggle-line sidebar-toggle-line-first\"></span>\n      <span class=\"sidebar-toggle-line sidebar-toggle-line-middle\"></span>\n      <span class=\"sidebar-toggle-line sidebar-toggle-line-last\"></span>\n    </div>\n  </div>\n\n  <aside id=\"sidebar\" class=\"sidebar\">\n    \n    <div class=\"sidebar-inner\">\n\n      \n\n      \n\n      <section class=\"site-overview-wrap sidebar-panel sidebar-panel-active\">\n        <div class=\"site-overview\">\n          <div class=\"site-author motion-element\" itemprop=\"author\" itemscope itemtype=\"http://schema.org/Person\">\n            \n              <img class=\"site-author-image\" itemprop=\"image\"\n                src=\"/uploads/avatar.png\"\n                alt=\"zqunor\" />\n            \n              <p class=\"site-author-name\" itemprop=\"name\">zqunor</p>\n              <p class=\"site-description motion-element\" itemprop=\"description\">遇见更好的自己</p>\n          </div>\n\n          <nav class=\"site-state motion-element\">\n\n            \n              <div class=\"site-state-item site-state-posts\">\n              \n                <a href=\"/archives/\">\n              \n                  <span class=\"site-state-item-count\">2</span>\n                  <span class=\"site-state-item-name\">日志</span>\n                </a>\n              </div>\n            \n\n            \n              \n              \n              <div class=\"site-state-item site-state-categories\">\n                \n                  <span class=\"site-state-item-count\">1</span>\n                  <span class=\"site-state-item-name\">分类</span>\n                \n              </div>\n            \n\n            \n              \n              \n              <div class=\"site-state-item site-state-tags\">\n                <a href=\"/tag/index.html\">\n                  <span class=\"site-state-item-count\">2</span>\n                  <span class=\"site-state-item-name\">标签</span>\n                </a>\n              </div>\n            \n\n          </nav>\n\n          \n            <div class=\"feed-link motion-element\">\n              <a href=\"/atom.xml\" rel=\"alternate\">\n                <i class=\"fa fa-rss\"></i>\n                RSS\n              </a>\n            </div>\n          \n\n          \n            <div class=\"links-of-author motion-element\">\n                \n                  <span class=\"links-of-author-item\">\n                    <a href=\"https://github.com/zqunor\" target=\"_blank\" title=\"GitHub\">\n                      \n                        <i class=\"fa fa-fw fa-github\"></i>GitHub</a>\n                  </span>\n                \n                  <span class=\"links-of-author-item\">\n                    <a href=\"mailto:zqunor@gmail.com\" target=\"_blank\" title=\"邮箱\">\n                      \n                        <i class=\"fa fa-fw fa-envelope-square\"></i>邮箱</a>\n                  </span>\n                \n                  <span class=\"links-of-author-item\">\n                    <a href=\"http://www.zhihu.com/people/zqunor\" target=\"_blank\" title=\"知乎\">\n                      \n                        <i class=\"fa fa-fw fa-twitch\"></i>知乎</a>\n                  </span>\n                \n                  <span class=\"links-of-author-item\">\n                    <a href=\"/images/wechat.jpg\" target=\"_blank\" title=\"微信\">\n                      \n                        <i class=\"fa fa-fw fa-wechat\"></i>微信</a>\n                  </span>\n                \n            </div>\n          \n\n          \n          \n\n          \n          \n\n          \n\n        </div>\n      </section>\n\n      \n\n      \n\n    </div>\n  </aside>\n\n\n        \n      </div>\n    </main>\n\n    <footer id=\"footer\" class=\"footer\">\n      <div class=\"footer-inner\">\n        <div class=\"copyright\">&copy; <span itemprop=\"copyrightYear\">2018</span>\n  <span class=\"with-love\">\n    <i class=\"fa fa-user\"></i>\n  </span>\n  <span class=\"author\" itemprop=\"copyrightHolder\">zqunor</span>\n\n  \n</div>\n\n\n\n\n\n\n\n\n\n        \n<div class=\"busuanzi-count\">\n  <script async src=\"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n\n  \n    <span class=\"site-uv\">\n      <i class=\"fa fa-user\"></i>访问人次：\n      <span class=\"busuanzi-value\" id=\"busuanzi_value_site_uv\"></span>\n      \n    </span>\n  \n\n  \n    <span class=\"site-pv\">\n      <i class=\"fa fa-eye\"></i>访问量：\n      <span class=\"busuanzi-value\" id=\"busuanzi_value_site_pv\"></span>\n      \n    </span>\n  \n</div>\n\n\n\n\n\n\n\n\n        \n      </div>\n    </footer>\n\n    \n      <div class=\"back-to-top\">\n        <i class=\"fa fa-arrow-up\"></i>\n        \n      </div>\n    \n\n    \n\n  </div>\n\n  \n\n<script type=\"text/javascript\">\n  if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {\n    window.Promise = null;\n  }\n</script>\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/jquery/index.js?v=2.1.3\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/fastclick/lib/fastclick.min.js?v=1.0.6\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/velocity/velocity.min.js?v=1.2.1\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/velocity/velocity.ui.min.js?v=1.2.1\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5\"></script>\n  \n\n\n  \n\n\n  <script type=\"text/javascript\" src=\"/js/src/utils.js?v=5.1.4\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/motion.js?v=5.1.4\"></script>\n\n\n\n  \n  \n\n\n  <script type=\"text/javascript\" src=\"/js/src/affix.js?v=5.1.4\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/schemes/pisces.js?v=5.1.4\"></script>\n\n\n\n  \n\n  \n\n\n  <script type=\"text/javascript\" src=\"/js/src/bootstrap.js?v=5.1.4\"></script>\n\n\n\n  \n\n\n  \n\n\n\n\n\t\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n\n\n\n\n\n\n<!-- LOCAL: You can save these files to your site and update links -->\n    \n        \n        <link rel=\"stylesheet\" href=\"https://aimingoo.github.io/gitmint/style/default.css\">\n        <script src=\"https://aimingoo.github.io/gitmint/dist/gitmint.browser.js\"></script>\n    \n<!-- END LOCAL -->\n\n    \n      <style>\n        a.gitment-editor-footer-tip { display: none; }\n        .gitment-container.gitment-footer-container { display: none; }\n      </style>\n    \n\n    \n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  <script src=\"https://cdn1.lncld.net/static/js/av-core-mini-0.6.4.js\"></script>\n  <script>AV.initialize(\"pXPuAE7FBoE9NlPEb4HvTh12-gzGzoHsz\", \"IvfbUfSPuRf2BjdlOh6M5hRT\");</script>\n  <script>\n    function showTime(Counter) {\n      var query = new AV.Query(Counter);\n      var entries = [];\n      var $visitors = $(\".leancloud_visitors\");\n\n      $visitors.each(function () {\n        entries.push( $(this).attr(\"id\").trim() );\n      });\n\n      query.containedIn('url', entries);\n      query.find()\n        .done(function (results) {\n          var COUNT_CONTAINER_REF = '.leancloud-visitors-count';\n\n          if (results.length === 0) {\n            $visitors.find(COUNT_CONTAINER_REF).text(0);\n            return;\n          }\n\n          for (var i = 0; i < results.length; i++) {\n            var item = results[i];\n            var url = item.get('url');\n            var time = item.get('time');\n            var element = document.getElementById(url);\n\n            $(element).find(COUNT_CONTAINER_REF).text(time);\n          }\n          for(var i = 0; i < entries.length; i++) {\n            var url = entries[i];\n            var element = document.getElementById(url);\n            var countSpan = $(element).find(COUNT_CONTAINER_REF);\n            if( countSpan.text() == '') {\n              countSpan.text(0);\n            }\n          }\n        })\n        .fail(function (object, error) {\n          console.log(\"Error: \" + error.code + \" \" + error.message);\n        });\n    }\n\n    function addCount(Counter) {\n      var $visitors = $(\".leancloud_visitors\");\n      var url = $visitors.attr('id').trim();\n      var title = $visitors.attr('data-flag-title').trim();\n      var query = new AV.Query(Counter);\n\n      query.equalTo(\"url\", url);\n      query.find({\n        success: function(results) {\n          if (results.length > 0) {\n            var counter = results[0];\n            counter.fetchWhenSave(true);\n            counter.increment(\"time\");\n            counter.save(null, {\n              success: function(counter) {\n                var $element = $(document.getElementById(url));\n                $element.find('.leancloud-visitors-count').text(counter.get('time'));\n              },\n              error: function(counter, error) {\n                console.log('Failed to save Visitor num, with error message: ' + error.message);\n              }\n            });\n          } else {\n            var newcounter = new Counter();\n            /* Set ACL */\n            var acl = new AV.ACL();\n            acl.setPublicReadAccess(true);\n            acl.setPublicWriteAccess(true);\n            newcounter.setACL(acl);\n            /* End Set ACL */\n            newcounter.set(\"title\", title);\n            newcounter.set(\"url\", url);\n            newcounter.set(\"time\", 1);\n            newcounter.save(null, {\n              success: function(newcounter) {\n                var $element = $(document.getElementById(url));\n                $element.find('.leancloud-visitors-count').text(newcounter.get('time'));\n              },\n              error: function(newcounter, error) {\n                console.log('Failed to create');\n              }\n            });\n          }\n        },\n        error: function(error) {\n          console.log('Error:' + error.code + \" \" + error.message);\n        }\n      });\n    }\n\n    $(function() {\n      var Counter = AV.Object.extend(\"Counter\");\n      if ($('.leancloud_visitors').length == 1) {\n        addCount(Counter);\n      } else if ($('.post-title-link').length > 1) {\n        showTime(Counter);\n      }\n    });\n  </script>\n\n\n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n  \n\n</body>\n</html>\n","date":"2018-11-16T12:14:52.248Z","updated":"2018-11-16T12:14:52.248Z","path":"tags/Linux/index.html","title":"","comments":1,"layout":"page","_id":"cjvl5c44900762wuuq465lnlj","content":"<!DOCTYPE html>\n\n\n\n  \n\n\n<html class=\"theme-next gemini use-motion\" lang=\"zh-Hans\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n  <meta charset=\"UTF-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\n<meta name=\"theme-color\" content=\"#222\">\n\n\n\n\n\n\n  \n  \n  <link rel=\"stylesheet\" media=\"all\" href=\"/lib/Han/dist/han.min.css?v=3.3\">\n\n\n\n\n<meta http-equiv=\"Cache-Control\" content=\"no-transform\">\n<meta http-equiv=\"Cache-Control\" content=\"no-siteapp\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  <link href=\"/lib/fancybox/source/jquery.fancybox.css?v=2.1.5\" rel=\"stylesheet\" type=\"text/css\">\n\n\n\n\n  \n  \n  \n  \n\n  \n    \n    \n  \n\n  \n    \n      \n    \n\n    \n  \n\n  \n    \n      \n    \n\n    \n  \n\n  \n    \n      \n    \n\n    \n  \n\n  \n    \n      \n    \n\n    \n  \n\n  \n    \n    \n    <link href=\"//fonts.googleapis.com/css?family=Monda:300,300italic,400,400italic,700,700italic|Roboto Slab:300,300italic,400,400italic,700,700italic|Monda:300,300italic,400,400italic,700,700italic|Lobster Two:300,300italic,400,400italic,700,700italic|PT Mono:300,300italic,400,400italic,700,700italic&subset=latin,latin-ext\" rel=\"stylesheet\" type=\"text/css\">\n  \n\n\n\n\n\n\n<link href=\"/lib/font-awesome/css/font-awesome.min.css?v=4.6.2\" rel=\"stylesheet\" type=\"text/css\">\n\n<link href=\"/css/main.css?v=5.1.4\" rel=\"stylesheet\" type=\"text/css\">\n\n\n  <link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/images/apple-touch-icon-next.png?v=5.1.4\">\n\n\n  <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/images/favicon-32x32-next.png?v=5.1.4\">\n\n\n  <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/images/favicon-16x16-next.png?v=5.1.4\">\n\n\n  <link rel=\"mask-icon\" href=\"/images/logo.svg?v=5.1.4\" color=\"#222\">\n\n\n\n\n\n  <meta name=\"keywords\" content=\"Hexo, NexT\">\n\n\n\n\n\n  <link rel=\"alternate\" href=\"/atom.xml\" title=\"icoder\" type=\"application/atom+xml\">\n\n\n\n\n\n\n<meta name=\"description\" content=\"遇见更好的自己\">\n<meta property=\"og:type\" content=\"website\">\n<meta property=\"og:title\" content=\"icoder\">\n<meta property=\"og:url\" content=\"http://www.i2arch.tech/tags/Linux/index.html\">\n<meta property=\"og:site_name\" content=\"icoder\">\n<meta property=\"og:description\" content=\"遇见更好的自己\">\n<meta property=\"og:locale\" content=\"zh-Hans\">\n<meta name=\"twitter:card\" content=\"summary\">\n<meta name=\"twitter:title\" content=\"icoder\">\n<meta name=\"twitter:description\" content=\"遇见更好的自己\">\n\n\n\n<script type=\"text/javascript\" id=\"hexo.configurations\">\n  var NexT = window.NexT || {};\n  var CONFIG = {\n    root: '/',\n    scheme: 'Gemini',\n    version: '5.1.4',\n    sidebar: {\"position\":\"right\",\"display\":\"post\",\"offset\":12,\"b2t\":false,\"scrollpercent\":false,\"onmobile\":false},\n    fancybox: true,\n    tabs: true,\n    motion: {\"enable\":true,\"async\":false,\"transition\":{\"post_block\":\"fadeIn\",\"post_header\":\"slideDownIn\",\"post_body\":\"slideDownIn\",\"coll_header\":\"slideLeftIn\",\"sidebar\":\"slideUpIn\"}},\n    duoshuo: {\n      userId: '0',\n      author: '博主'\n    },\n    algolia: {\n      applicationID: '',\n      apiKey: '',\n      indexName: '',\n      hits: {\"per_page\":10},\n      labels: {\"input_placeholder\":\"Search for Posts\",\"hits_empty\":\"We didn't find any results for the search: ${query}\",\"hits_stats\":\"${hits} results found in ${time} ms\"}\n    }\n  };\n</script>\n\n\n\n  <link rel=\"canonical\" href=\"http://www.i2arch.tech/tags/Linux/\">\n\n\n\n\n\n  <title>标签: Linux | icoder</title>\n  \n\n\n\n\n\n\n\n\n</head>\n\n<body itemscope=\"\" itemtype=\"http://schema.org/WebPage\" lang=\"zh-Hans\">\n\n  \n  \n    \n  \n\n  <div class=\"container sidebar-position-right \">\n    <div class=\"headband\"></div>\n\n    <header id=\"header\" class=\"header\" itemscope=\"\" itemtype=\"http://schema.org/WPHeader\">\n      <div class=\"header-inner\"><div class=\"site-brand-wrapper\">\n  <div class=\"site-meta \">\n    \n\n    <div class=\"custom-logo-site-title\">\n      <a href=\"/\" class=\"brand\" rel=\"start\">\n        <span class=\"logo-line-before\"><i></i></span>\n        <span class=\"site-title\">icoder</span>\n        <span class=\"logo-line-after\"><i></i></span>\n      </a>\n    </div>\n      \n        <p class=\"site-subtitle\">Just do it!</p>\n      \n  </div>\n\n  <div class=\"site-nav-toggle\">\n    <button>\n      <span class=\"btn-bar\"></span>\n      <span class=\"btn-bar\"></span>\n      <span class=\"btn-bar\"></span>\n    </button>\n  </div>\n</div>\n\n<nav class=\"site-nav\">\n  \n\n  \n    <ul id=\"menu\" class=\"menu\">\n      \n        \n        <li class=\"menu-item menu-item-home\">\n          <a href=\"/\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-home\"></i> <br>\n            \n            首页\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-archives\">\n          <a href=\"/archives/\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-archive\"></i> <br>\n            \n            归档\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-tags\">\n          <a href=\"/tag/\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-tags\"></i> <br>\n            \n            标签\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-work\">\n          <a href=\"/work/\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-tasks\"></i> <br>\n            \n            作品\n          </a>\n        </li>\n      \n\n      \n    </ul>\n  \n\n  \n</nav>\n\n\n\n </div>\n    </header>\n\n    <main id=\"main\" class=\"main\">\n      <div class=\"main-inner\">\n        <div class=\"content-wrap\">\n          <div id=\"content\" class=\"content\">\n            \n\n  \n  \n  \n  <div class=\"post-block tag\">\n\n    <div id=\"posts\" class=\"posts-collapse\">\n      <div class=\"collection-title\">\n        <h1>Linux<small>标签</small>\n        </h1>\n      </div>\n\n      \n        \n\n  <article class=\"post post-type-normal\" itemscope=\"\" itemtype=\"http://schema.org/Article\">\n    <header class=\"post-header\">\n\n      <h2 class=\"post-title\">\n        \n            <a class=\"post-title-link\" href=\"/2018/02/27/test/\" itemprop=\"url\">\n              \n                <span itemprop=\"name\">Test</span>\n              \n            </a>\n        \n      </h2>\n\n      <div class=\"post-meta\">\n        <time class=\"post-time\" itemprop=\"dateCreated\" datetime=\"2018-02-27T10:30:04+08:00\" content=\"2018-02-27\">\n          02-27\n        </time>\n      </div>\n\n    </header>\n  </article>\n\n\n      \n    </div>\n\n  </div>\n  \n  \n  \n\n  \n\n\n          </div>\n          \n\n\n          \n\n        </div>\n        \n          \n  \n  <div class=\"sidebar-toggle\">\n    <div class=\"sidebar-toggle-line-wrap\">\n      <span class=\"sidebar-toggle-line sidebar-toggle-line-first\"></span>\n      <span class=\"sidebar-toggle-line sidebar-toggle-line-middle\"></span>\n      <span class=\"sidebar-toggle-line sidebar-toggle-line-last\"></span>\n    </div>\n  </div>\n\n  <aside id=\"sidebar\" class=\"sidebar\">\n    \n    <div class=\"sidebar-inner\">\n\n      \n\n      \n\n      <section class=\"site-overview-wrap sidebar-panel sidebar-panel-active\">\n        <div class=\"site-overview\">\n          <div class=\"site-author motion-element\" itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\">\n            \n              <img class=\"site-author-image\" itemprop=\"image\" src=\"/uploads/avatar.png\" alt=\"zqunor\">\n            \n              <p class=\"site-author-name\" itemprop=\"name\">zqunor</p>\n              <p class=\"site-description motion-element\" itemprop=\"description\">遇见更好的自己</p>\n          </div>\n\n          <nav class=\"site-state motion-element\">\n\n            \n              <div class=\"site-state-item site-state-posts\">\n              \n                <a href=\"/archives/\">\n              \n                  <span class=\"site-state-item-count\">2</span>\n                  <span class=\"site-state-item-name\">日志</span>\n                </a>\n              </div>\n            \n\n            \n              \n              \n              <div class=\"site-state-item site-state-categories\">\n                \n                  <span class=\"site-state-item-count\">1</span>\n                  <span class=\"site-state-item-name\">分类</span>\n                \n              </div>\n            \n\n            \n              \n              \n              <div class=\"site-state-item site-state-tags\">\n                <a href=\"/tag/index.html\">\n                  <span class=\"site-state-item-count\">2</span>\n                  <span class=\"site-state-item-name\">标签</span>\n                </a>\n              </div>\n            \n\n          </nav>\n\n          \n            <div class=\"feed-link motion-element\">\n              <a href=\"/atom.xml\" rel=\"alternate\">\n                <i class=\"fa fa-rss\"></i>\n                RSS\n              </a>\n            </div>\n          \n\n          \n            <div class=\"links-of-author motion-element\">\n                \n                  <span class=\"links-of-author-item\">\n                    <a href=\"https://github.com/zqunor\" target=\"_blank\" title=\"GitHub\">\n                      \n                        <i class=\"fa fa-fw fa-github\"></i>GitHub</a>\n                  </span>\n                \n                  <span class=\"links-of-author-item\">\n                    <a href=\"mailto:zqunor@gmail.com\" target=\"_blank\" title=\"邮箱\">\n                      \n                        <i class=\"fa fa-fw fa-envelope-square\"></i>邮箱</a>\n                  </span>\n                \n                  <span class=\"links-of-author-item\">\n                    <a href=\"http://www.zhihu.com/people/zqunor\" target=\"_blank\" title=\"知乎\">\n                      \n                        <i class=\"fa fa-fw fa-twitch\"></i>知乎</a>\n                  </span>\n                \n                  <span class=\"links-of-author-item\">\n                    <a href=\"/images/wechat.jpg\" target=\"_blank\" title=\"微信\">\n                      \n                        <i class=\"fa fa-fw fa-wechat\"></i>微信</a>\n                  </span>\n                \n            </div>\n          \n\n          \n          \n\n          \n          \n\n          \n\n        </div>\n      </section>\n\n      \n\n      \n\n    </div>\n  </aside>\n\n\n        \n      </div>\n    </main>\n\n    <footer id=\"footer\" class=\"footer\">\n      <div class=\"footer-inner\">\n        <div class=\"copyright\">&copy; <span itemprop=\"copyrightYear\">2018</span>\n  <span class=\"with-love\">\n    <i class=\"fa fa-user\"></i>\n  </span>\n  <span class=\"author\" itemprop=\"copyrightHolder\">zqunor</span>\n\n  \n</div>\n\n\n\n\n\n\n\n\n\n        \n<div class=\"busuanzi-count\">\n  <script async src=\"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n\n  \n    <span class=\"site-uv\">\n      <i class=\"fa fa-user\"></i>访问人次：\n      <span class=\"busuanzi-value\" id=\"busuanzi_value_site_uv\"></span>\n      \n    </span>\n  \n\n  \n    <span class=\"site-pv\">\n      <i class=\"fa fa-eye\"></i>访问量：\n      <span class=\"busuanzi-value\" id=\"busuanzi_value_site_pv\"></span>\n      \n    </span>\n  \n</div>\n\n\n\n\n\n\n\n\n        \n      </div>\n    </footer>\n\n    \n      <div class=\"back-to-top\">\n        <i class=\"fa fa-arrow-up\"></i>\n        \n      </div>\n    \n\n    \n\n  </div>\n\n  \n\n<script type=\"text/javascript\">\n  if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {\n    window.Promise = null;\n  }\n</script>\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/jquery/index.js?v=2.1.3\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/fastclick/lib/fastclick.min.js?v=1.0.6\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/velocity/velocity.min.js?v=1.2.1\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/velocity/velocity.ui.min.js?v=1.2.1\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5\"></script>\n  \n\n\n  \n\n\n  <script type=\"text/javascript\" src=\"/js/src/utils.js?v=5.1.4\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/motion.js?v=5.1.4\"></script>\n\n\n\n  \n  \n\n\n  <script type=\"text/javascript\" src=\"/js/src/affix.js?v=5.1.4\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/schemes/pisces.js?v=5.1.4\"></script>\n\n\n\n  \n\n  \n\n\n  <script type=\"text/javascript\" src=\"/js/src/bootstrap.js?v=5.1.4\"></script>\n\n\n\n  \n\n\n  \n\n\n\n\n\t\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n\n\n\n\n\n\n<!-- LOCAL: You can save these files to your site and update links -->\n    \n        \n        <link rel=\"stylesheet\" href=\"https://aimingoo.github.io/gitmint/style/default.css\">\n        <script src=\"https://aimingoo.github.io/gitmint/dist/gitmint.browser.js\"></script>\n    \n<!-- END LOCAL -->\n\n    \n      <style>\n        a.gitment-editor-footer-tip { display: none; }\n        .gitment-container.gitment-footer-container { display: none; }\n      </style>\n    \n\n    \n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  <script src=\"https://cdn1.lncld.net/static/js/av-core-mini-0.6.4.js\"></script>\n  <script>AV.initialize(\"pXPuAE7FBoE9NlPEb4HvTh12-gzGzoHsz\", \"IvfbUfSPuRf2BjdlOh6M5hRT\");</script>\n  <script>\n    function showTime(Counter) {\n      var query = new AV.Query(Counter);\n      var entries = [];\n      var $visitors = $(\".leancloud_visitors\");\n\n      $visitors.each(function () {\n        entries.push( $(this).attr(\"id\").trim() );\n      });\n\n      query.containedIn('url', entries);\n      query.find()\n        .done(function (results) {\n          var COUNT_CONTAINER_REF = '.leancloud-visitors-count';\n\n          if (results.length === 0) {\n            $visitors.find(COUNT_CONTAINER_REF).text(0);\n            return;\n          }\n\n          for (var i = 0; i < results.length; i++) {\n            var item = results[i];\n            var url = item.get('url');\n            var time = item.get('time');\n            var element = document.getElementById(url);\n\n            $(element).find(COUNT_CONTAINER_REF).text(time);\n          }\n          for(var i = 0; i < entries.length; i++) {\n            var url = entries[i];\n            var element = document.getElementById(url);\n            var countSpan = $(element).find(COUNT_CONTAINER_REF);\n            if( countSpan.text() == '') {\n              countSpan.text(0);\n            }\n          }\n        })\n        .fail(function (object, error) {\n          console.log(\"Error: \" + error.code + \" \" + error.message);\n        });\n    }\n\n    function addCount(Counter) {\n      var $visitors = $(\".leancloud_visitors\");\n      var url = $visitors.attr('id').trim();\n      var title = $visitors.attr('data-flag-title').trim();\n      var query = new AV.Query(Counter);\n\n      query.equalTo(\"url\", url);\n      query.find({\n        success: function(results) {\n          if (results.length > 0) {\n            var counter = results[0];\n            counter.fetchWhenSave(true);\n            counter.increment(\"time\");\n            counter.save(null, {\n              success: function(counter) {\n                var $element = $(document.getElementById(url));\n                $element.find('.leancloud-visitors-count').text(counter.get('time'));\n              },\n              error: function(counter, error) {\n                console.log('Failed to save Visitor num, with error message: ' + error.message);\n              }\n            });\n          } else {\n            var newcounter = new Counter();\n            /* Set ACL */\n            var acl = new AV.ACL();\n            acl.setPublicReadAccess(true);\n            acl.setPublicWriteAccess(true);\n            newcounter.setACL(acl);\n            /* End Set ACL */\n            newcounter.set(\"title\", title);\n            newcounter.set(\"url\", url);\n            newcounter.set(\"time\", 1);\n            newcounter.save(null, {\n              success: function(newcounter) {\n                var $element = $(document.getElementById(url));\n                $element.find('.leancloud-visitors-count').text(newcounter.get('time'));\n              },\n              error: function(newcounter, error) {\n                console.log('Failed to create');\n              }\n            });\n          }\n        },\n        error: function(error) {\n          console.log('Error:' + error.code + \" \" + error.message);\n        }\n      });\n    }\n\n    $(function() {\n      var Counter = AV.Object.extend(\"Counter\");\n      if ($('.leancloud_visitors').length == 1) {\n        addCount(Counter);\n      } else if ($('.post-title-link').length > 1) {\n        showTime(Counter);\n      }\n    });\n  </script>\n\n\n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n  \n\n</body>\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n\n\n\n  \n\n\n<html class=\"theme-next gemini use-motion\" lang=\"zh-Hans\">\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n  <meta charset=\"UTF-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\n<meta name=\"theme-color\" content=\"#222\">\n\n\n\n\n\n\n  \n  \n  <link rel=\"stylesheet\" media=\"all\" href=\"/lib/Han/dist/han.min.css?v=3.3\">\n\n\n\n\n<meta http-equiv=\"Cache-Control\" content=\"no-transform\">\n<meta http-equiv=\"Cache-Control\" content=\"no-siteapp\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  <link href=\"/lib/fancybox/source/jquery.fancybox.css?v=2.1.5\" rel=\"stylesheet\" type=\"text/css\">\n\n\n\n\n  \n  \n  \n  \n\n  \n    \n    \n  \n\n  \n    \n      \n    \n\n    \n  \n\n  \n    \n      \n    \n\n    \n  \n\n  \n    \n      \n    \n\n    \n  \n\n  \n    \n      \n    \n\n    \n  \n\n  \n    \n    \n    <link href=\"//fonts.googleapis.com/css?family=Monda:300,300italic,400,400italic,700,700italic|Roboto Slab:300,300italic,400,400italic,700,700italic|Monda:300,300italic,400,400italic,700,700italic|Lobster Two:300,300italic,400,400italic,700,700italic|PT Mono:300,300italic,400,400italic,700,700italic&subset=latin,latin-ext\" rel=\"stylesheet\" type=\"text/css\">\n  \n\n\n\n\n\n\n<link href=\"/lib/font-awesome/css/font-awesome.min.css?v=4.6.2\" rel=\"stylesheet\" type=\"text/css\">\n\n<link href=\"/css/main.css?v=5.1.4\" rel=\"stylesheet\" type=\"text/css\">\n\n\n  <link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/images/apple-touch-icon-next.png?v=5.1.4\">\n\n\n  <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/images/favicon-32x32-next.png?v=5.1.4\">\n\n\n  <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/images/favicon-16x16-next.png?v=5.1.4\">\n\n\n  <link rel=\"mask-icon\" href=\"/images/logo.svg?v=5.1.4\" color=\"#222\">\n\n\n\n\n\n  <meta name=\"keywords\" content=\"Hexo, NexT\">\n\n\n\n\n\n  <link rel=\"alternate\" href=\"/atom.xml\" title=\"icoder\" type=\"application/atom+xml\">\n\n\n\n\n\n\n<meta name=\"description\" content=\"遇见更好的自己\">\n<meta property=\"og:type\" content=\"website\">\n<meta property=\"og:title\" content=\"icoder\">\n<meta property=\"og:url\" content=\"http://www.i2arch.tech/tags/Linux/index.html\">\n<meta property=\"og:site_name\" content=\"icoder\">\n<meta property=\"og:description\" content=\"遇见更好的自己\">\n<meta property=\"og:locale\" content=\"zh-Hans\">\n<meta name=\"twitter:card\" content=\"summary\">\n<meta name=\"twitter:title\" content=\"icoder\">\n<meta name=\"twitter:description\" content=\"遇见更好的自己\">\n\n\n\n<script type=\"text/javascript\" id=\"hexo.configurations\">\n  var NexT = window.NexT || {};\n  var CONFIG = {\n    root: '/',\n    scheme: 'Gemini',\n    version: '5.1.4',\n    sidebar: {\"position\":\"right\",\"display\":\"post\",\"offset\":12,\"b2t\":false,\"scrollpercent\":false,\"onmobile\":false},\n    fancybox: true,\n    tabs: true,\n    motion: {\"enable\":true,\"async\":false,\"transition\":{\"post_block\":\"fadeIn\",\"post_header\":\"slideDownIn\",\"post_body\":\"slideDownIn\",\"coll_header\":\"slideLeftIn\",\"sidebar\":\"slideUpIn\"}},\n    duoshuo: {\n      userId: '0',\n      author: '博主'\n    },\n    algolia: {\n      applicationID: '',\n      apiKey: '',\n      indexName: '',\n      hits: {\"per_page\":10},\n      labels: {\"input_placeholder\":\"Search for Posts\",\"hits_empty\":\"We didn't find any results for the search: ${query}\",\"hits_stats\":\"${hits} results found in ${time} ms\"}\n    }\n  };\n</script>\n\n\n\n  <link rel=\"canonical\" href=\"http://www.i2arch.tech/tags/Linux/\">\n\n\n\n\n\n  <title>标签: Linux | icoder</title>\n  \n\n\n\n\n\n\n\n\n</head>\n\n<body itemscope=\"\" itemtype=\"http://schema.org/WebPage\" lang=\"zh-Hans\">\n\n  \n  \n    \n  \n\n  <div class=\"container sidebar-position-right \">\n    <div class=\"headband\"></div>\n\n    <header id=\"header\" class=\"header\" itemscope=\"\" itemtype=\"http://schema.org/WPHeader\">\n      <div class=\"header-inner\"><div class=\"site-brand-wrapper\">\n  <div class=\"site-meta \">\n    \n\n    <div class=\"custom-logo-site-title\">\n      <a href=\"/\" class=\"brand\" rel=\"start\">\n        <span class=\"logo-line-before\"><i></i></span>\n        <span class=\"site-title\">icoder</span>\n        <span class=\"logo-line-after\"><i></i></span>\n      </a>\n    </div>\n      \n        <p class=\"site-subtitle\">Just do it!</p>\n      \n  </div>\n\n  <div class=\"site-nav-toggle\">\n    <button>\n      <span class=\"btn-bar\"></span>\n      <span class=\"btn-bar\"></span>\n      <span class=\"btn-bar\"></span>\n    </button>\n  </div>\n</div>\n\n<nav class=\"site-nav\">\n  \n\n  \n    <ul id=\"menu\" class=\"menu\">\n      \n        \n        <li class=\"menu-item menu-item-home\">\n          <a href=\"/\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-home\"></i> <br>\n            \n            首页\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-archives\">\n          <a href=\"/archives/\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-archive\"></i> <br>\n            \n            归档\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-tags\">\n          <a href=\"/tag/\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-tags\"></i> <br>\n            \n            标签\n          </a>\n        </li>\n      \n        \n        <li class=\"menu-item menu-item-work\">\n          <a href=\"/work/\" rel=\"section\">\n            \n              <i class=\"menu-item-icon fa fa-fw fa-tasks\"></i> <br>\n            \n            作品\n          </a>\n        </li>\n      \n\n      \n    </ul>\n  \n\n  \n</nav>\n\n\n\n </div>\n    </header>\n\n    <main id=\"main\" class=\"main\">\n      <div class=\"main-inner\">\n        <div class=\"content-wrap\">\n          <div id=\"content\" class=\"content\">\n            \n\n  \n  \n  \n  <div class=\"post-block tag\">\n\n    <div id=\"posts\" class=\"posts-collapse\">\n      <div class=\"collection-title\">\n        <h1>Linux<small>标签</small>\n        </h1>\n      </div>\n\n      \n        \n\n  <article class=\"post post-type-normal\" itemscope=\"\" itemtype=\"http://schema.org/Article\">\n    <header class=\"post-header\">\n\n      <h2 class=\"post-title\">\n        \n            <a class=\"post-title-link\" href=\"/2018/02/27/test/\" itemprop=\"url\">\n              \n                <span itemprop=\"name\">Test</span>\n              \n            </a>\n        \n      </h2>\n\n      <div class=\"post-meta\">\n        <time class=\"post-time\" itemprop=\"dateCreated\" datetime=\"2018-02-27T10:30:04+08:00\" content=\"2018-02-27\">\n          02-27\n        </time>\n      </div>\n\n    </header>\n  </article>\n\n\n      \n    </div>\n\n  </div>\n  \n  \n  \n\n  \n\n\n          </div>\n          \n\n\n          \n\n        </div>\n        \n          \n  \n  <div class=\"sidebar-toggle\">\n    <div class=\"sidebar-toggle-line-wrap\">\n      <span class=\"sidebar-toggle-line sidebar-toggle-line-first\"></span>\n      <span class=\"sidebar-toggle-line sidebar-toggle-line-middle\"></span>\n      <span class=\"sidebar-toggle-line sidebar-toggle-line-last\"></span>\n    </div>\n  </div>\n\n  <aside id=\"sidebar\" class=\"sidebar\">\n    \n    <div class=\"sidebar-inner\">\n\n      \n\n      \n\n      <section class=\"site-overview-wrap sidebar-panel sidebar-panel-active\">\n        <div class=\"site-overview\">\n          <div class=\"site-author motion-element\" itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\">\n            \n              <img class=\"site-author-image\" itemprop=\"image\" src=\"/uploads/avatar.png\" alt=\"zqunor\">\n            \n              <p class=\"site-author-name\" itemprop=\"name\">zqunor</p>\n              <p class=\"site-description motion-element\" itemprop=\"description\">遇见更好的自己</p>\n          </div>\n\n          <nav class=\"site-state motion-element\">\n\n            \n              <div class=\"site-state-item site-state-posts\">\n              \n                <a href=\"/archives/\">\n              \n                  <span class=\"site-state-item-count\">2</span>\n                  <span class=\"site-state-item-name\">日志</span>\n                </a>\n              </div>\n            \n\n            \n              \n              \n              <div class=\"site-state-item site-state-categories\">\n                \n                  <span class=\"site-state-item-count\">1</span>\n                  <span class=\"site-state-item-name\">分类</span>\n                \n              </div>\n            \n\n            \n              \n              \n              <div class=\"site-state-item site-state-tags\">\n                <a href=\"/tag/index.html\">\n                  <span class=\"site-state-item-count\">2</span>\n                  <span class=\"site-state-item-name\">标签</span>\n                </a>\n              </div>\n            \n\n          </nav>\n\n          \n            <div class=\"feed-link motion-element\">\n              <a href=\"/atom.xml\" rel=\"alternate\">\n                <i class=\"fa fa-rss\"></i>\n                RSS\n              </a>\n            </div>\n          \n\n          \n            <div class=\"links-of-author motion-element\">\n                \n                  <span class=\"links-of-author-item\">\n                    <a href=\"https://github.com/zqunor\" target=\"_blank\" title=\"GitHub\">\n                      \n                        <i class=\"fa fa-fw fa-github\"></i>GitHub</a>\n                  </span>\n                \n                  <span class=\"links-of-author-item\">\n                    <a href=\"mailto:zqunor@gmail.com\" target=\"_blank\" title=\"邮箱\">\n                      \n                        <i class=\"fa fa-fw fa-envelope-square\"></i>邮箱</a>\n                  </span>\n                \n                  <span class=\"links-of-author-item\">\n                    <a href=\"http://www.zhihu.com/people/zqunor\" target=\"_blank\" title=\"知乎\">\n                      \n                        <i class=\"fa fa-fw fa-twitch\"></i>知乎</a>\n                  </span>\n                \n                  <span class=\"links-of-author-item\">\n                    <a href=\"/images/wechat.jpg\" target=\"_blank\" title=\"微信\">\n                      \n                        <i class=\"fa fa-fw fa-wechat\"></i>微信</a>\n                  </span>\n                \n            </div>\n          \n\n          \n          \n\n          \n          \n\n          \n\n        </div>\n      </section>\n\n      \n\n      \n\n    </div>\n  </aside>\n\n\n        \n      </div>\n    </main>\n\n    <footer id=\"footer\" class=\"footer\">\n      <div class=\"footer-inner\">\n        <div class=\"copyright\">&copy; <span itemprop=\"copyrightYear\">2018</span>\n  <span class=\"with-love\">\n    <i class=\"fa fa-user\"></i>\n  </span>\n  <span class=\"author\" itemprop=\"copyrightHolder\">zqunor</span>\n\n  \n</div>\n\n\n\n\n\n\n\n\n\n        \n<div class=\"busuanzi-count\">\n  <script async src=\"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n\n  \n    <span class=\"site-uv\">\n      <i class=\"fa fa-user\"></i>访问人次：\n      <span class=\"busuanzi-value\" id=\"busuanzi_value_site_uv\"></span>\n      \n    </span>\n  \n\n  \n    <span class=\"site-pv\">\n      <i class=\"fa fa-eye\"></i>访问量：\n      <span class=\"busuanzi-value\" id=\"busuanzi_value_site_pv\"></span>\n      \n    </span>\n  \n</div>\n\n\n\n\n\n\n\n\n        \n      </div>\n    </footer>\n\n    \n      <div class=\"back-to-top\">\n        <i class=\"fa fa-arrow-up\"></i>\n        \n      </div>\n    \n\n    \n\n  </div>\n\n  \n\n<script type=\"text/javascript\">\n  if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {\n    window.Promise = null;\n  }\n</script>\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/jquery/index.js?v=2.1.3\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/fastclick/lib/fastclick.min.js?v=1.0.6\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/velocity/velocity.min.js?v=1.2.1\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/velocity/velocity.ui.min.js?v=1.2.1\"></script>\n  \n\n  \n  \n    <script type=\"text/javascript\" src=\"/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5\"></script>\n  \n\n\n  \n\n\n  <script type=\"text/javascript\" src=\"/js/src/utils.js?v=5.1.4\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/motion.js?v=5.1.4\"></script>\n\n\n\n  \n  \n\n\n  <script type=\"text/javascript\" src=\"/js/src/affix.js?v=5.1.4\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/schemes/pisces.js?v=5.1.4\"></script>\n\n\n\n  \n\n  \n\n\n  <script type=\"text/javascript\" src=\"/js/src/bootstrap.js?v=5.1.4\"></script>\n\n\n\n  \n\n\n  \n\n\n\n\n\t\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n\n\n\n\n\n\n<!-- LOCAL: You can save these files to your site and update links -->\n    \n        \n        <link rel=\"stylesheet\" href=\"https://aimingoo.github.io/gitmint/style/default.css\">\n        <script src=\"https://aimingoo.github.io/gitmint/dist/gitmint.browser.js\"></script>\n    \n<!-- END LOCAL -->\n\n    \n      <style>\n        a.gitment-editor-footer-tip { display: none; }\n        .gitment-container.gitment-footer-container { display: none; }\n      </style>\n    \n\n    \n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  <script src=\"https://cdn1.lncld.net/static/js/av-core-mini-0.6.4.js\"></script>\n  <script>AV.initialize(\"pXPuAE7FBoE9NlPEb4HvTh12-gzGzoHsz\", \"IvfbUfSPuRf2BjdlOh6M5hRT\");</script>\n  <script>\n    function showTime(Counter) {\n      var query = new AV.Query(Counter);\n      var entries = [];\n      var $visitors = $(\".leancloud_visitors\");\n\n      $visitors.each(function () {\n        entries.push( $(this).attr(\"id\").trim() );\n      });\n\n      query.containedIn('url', entries);\n      query.find()\n        .done(function (results) {\n          var COUNT_CONTAINER_REF = '.leancloud-visitors-count';\n\n          if (results.length === 0) {\n            $visitors.find(COUNT_CONTAINER_REF).text(0);\n            return;\n          }\n\n          for (var i = 0; i < results.length; i++) {\n            var item = results[i];\n            var url = item.get('url');\n            var time = item.get('time');\n            var element = document.getElementById(url);\n\n            $(element).find(COUNT_CONTAINER_REF).text(time);\n          }\n          for(var i = 0; i < entries.length; i++) {\n            var url = entries[i];\n            var element = document.getElementById(url);\n            var countSpan = $(element).find(COUNT_CONTAINER_REF);\n            if( countSpan.text() == '') {\n              countSpan.text(0);\n            }\n          }\n        })\n        .fail(function (object, error) {\n          console.log(\"Error: \" + error.code + \" \" + error.message);\n        });\n    }\n\n    function addCount(Counter) {\n      var $visitors = $(\".leancloud_visitors\");\n      var url = $visitors.attr('id').trim();\n      var title = $visitors.attr('data-flag-title').trim();\n      var query = new AV.Query(Counter);\n\n      query.equalTo(\"url\", url);\n      query.find({\n        success: function(results) {\n          if (results.length > 0) {\n            var counter = results[0];\n            counter.fetchWhenSave(true);\n            counter.increment(\"time\");\n            counter.save(null, {\n              success: function(counter) {\n                var $element = $(document.getElementById(url));\n                $element.find('.leancloud-visitors-count').text(counter.get('time'));\n              },\n              error: function(counter, error) {\n                console.log('Failed to save Visitor num, with error message: ' + error.message);\n              }\n            });\n          } else {\n            var newcounter = new Counter();\n            /* Set ACL */\n            var acl = new AV.ACL();\n            acl.setPublicReadAccess(true);\n            acl.setPublicWriteAccess(true);\n            newcounter.setACL(acl);\n            /* End Set ACL */\n            newcounter.set(\"title\", title);\n            newcounter.set(\"url\", url);\n            newcounter.set(\"time\", 1);\n            newcounter.save(null, {\n              success: function(newcounter) {\n                var $element = $(document.getElementById(url));\n                $element.find('.leancloud-visitors-count').text(newcounter.get('time'));\n              },\n              error: function(newcounter, error) {\n                console.log('Failed to create');\n              }\n            });\n          }\n        },\n        error: function(error) {\n          console.log('Error:' + error.code + \" \" + error.message);\n        }\n      });\n    }\n\n    $(function() {\n      var Counter = AV.Object.extend(\"Counter\");\n      if ($('.leancloud_visitors').length == 1) {\n        addCount(Counter);\n      } else if ($('.post-title-link').length > 1) {\n        showTime(Counter);\n      }\n    });\n  </script>\n\n\n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n  \n\n</body>\n</html>\n"}],"Post":[{"title":"【HTTP】原理结合实践","date":"2018-07-05T04:00:00.000Z","_content":"\n<!--more-->\n\n### HTTP 请求头信息\n\nCache-Control\n\n- public、private：设置缓存仅在客户端缓存还是可以在代理服务器中缓存\n- must-revalidate：客户端的缓存获取之后必须到服务端验证之后才能继续使用缓存\n- no-cache、no-store：设置是否使用缓存\n\n缓存验证\n\n- last-modified 配合 if-modified-since\n- etag 配合 if-none-match\n\n- Contetn-Type 、Content-Encoding：等用来约束数据类型\n- Cookie：保持会话信息\n- CORS：实现跨域并保持安全性限制\n\n## 深入到 TCP\n\n1.什么是三次握手\n\n2.HTTPS 链接的创建过程，以及为什么 HTTPS 是安全的\n\n3.什么是长链接，为什么需要长链接\n\n4.HTTP2 的信道复用为什么能提高性能\n\n## HTTP 请求完整过程\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuqog8z9uij318n0f30xa.jpg)\n\n1.Redirect 浏览器要对 url 判断是否需要重定向到新的 url 地址\n\n2.缓存 判断是否需要到浏览器缓存中获取 url 对应的网页资源\n\n3.DNS 解析 将域名解析成 ip 才能访问到资源所在的服务器\n\n4.TCP 连接 拿到 ip 后就要进行 TCP 连接[ http: 经过 TCP 的三次握手;https: 不同于三次握手，需要另外的保证数据安全传输的过程]\n\n5.Request 发送请求的数据包\n\n6.Response 接收到请求数据包，并返回响应结果\n\n## 网络协议分层\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuqoss50zpj30zv0pogpe.jpg)\n\n- 物理层：定义物理设备如何传输数据\n- 数据链路层：在通信的实体间建立数据链路连接\n- 网络层：为数据在结点之间传输创建逻辑链路\n- 传输层：\n  - 向用户传输可靠的端到端(End-to-End)服务\n  - 传输层向高层屏蔽了下层数据通信的细节\n- 应用层\n  - 为应用软件提供了很多服务\n  - 构建于 TCP 协议之上\n  - 屏蔽网络传输相关细节\n\n## HTTP 发展历史\n\n### 几个概念\n\n1.http 并发数\n\n2.http 请求\n\n3.tcp 连接 [1 个连接可以有多个 http 请求]\n\n### HTTP/0.9\n\n- 只有一个命令(方法)GET\n- 没有 HEADER 等描述数据的信息\n- 服务器发送完毕，就关闭 TCP 连接\n\n### HTTP/1.0\n\n- 增加了很多命令\n- 增加 status code(服务端处理完某个请求后的状态)和 header(发送和请求相关的数据 以及对这部分数据的操作方法))\n- 多字符支持、多部分发送、权限、缓存等\n\n[一个 http 请求就要建立一个 tcp 连接，返回完内容后就关闭，但是三次握手建立的消耗和延迟比较高]\n\n### HTTP/1.1\n\n- 增加持久连接 [建立完一个 tcp 连接后，在返回完数据后不关闭，让后续的所有请求都使用这个连接]\n- pipeline [可以在同一个连接中发送多个请求，但是多个请求在服务器端需要顺序处理（串行），这样如果前面的请求处理的时间需要很长，而后面的请求处理的时间只需要很短，导致性能不太好]\n- 增加 host(可以在同一台(物理)服务器跑多个 web 服务[node、java]，使用 host 进行判断，提高物理服务的使用效率)和其他一些命令\n\n### HTTP/2.0\n\n- 所有数据以二进制(帧)传输[以前是以字符串形式传输]\n- 同一个连接里面发送多个请求不再需要需要按照顺序来（并行）\n- 头信息压缩以及推送等提高效率的功能\n\n## HTTP 三次握手\n\n### HTTP 请求和 TCP 连接关系\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuqq6thfa2j30yy0eyjs6.jpg)\n\n1.客户端和服务器之间的 http 请求的发送和返回的过程需要创建 TCP 连接\n\n2.http 只有请求和响应的概念，没有连接的概念\n\n3.请求和响应都是数据包，需要传输通道，TCP 连接就是数据包的传输通道（TCP 连接: 客户端发送，服务端接收）\n\n### 三次握手时序图\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuqq70zeilj30tw0p4zmm.jpg)\n\n1.第一次握手（SYN=1,Seq=X）\n\n2.第二次握手（SYN=1,ACK=X+1,Seq=Y）\n\n3.第三次握手（ACK=Y+1,Seq=Z）\n\n网络抓包工具：wireshark\n\n### URI URL URN\n\n#### URI\n\n【定义】： Uniform Resource Identifier 统一资源标识符\n\n- 用来唯一标识互联网上的信息资源\n- 包括 URL 和 URN\n\n#### URL\n\n【定义】：Uniform Resource Locator 统一资源定位器\n\n示例： http://user:pass@host.com:80/path?query=string#hash\n\n- **[ http ]**：传送协议。`Data URI scheme` [http ftp mailto]\n\n- **[ // ]**：层级 URL 标记符号(为[//],固定不变)\n\n- **[ user:pass ]**： 访问资源需要的凭证信息（可省略，不安全）\n\n- **[ host.com ]**：服务器。（通常为域名，有时为 IP 地址）\n\n- **[ 80 ]**：端口号。（以数字方式表示，若为 HTTP 的默认值“:80”可省略）\n\n- **[ /path ]**：路径。（以“/”字符区别路径中的每一个目录名称）\n\n- **[ ?query=string ]**：查询。（GET 模式的窗体参数，以“?”字符为起点，每个参数以“&”隔开，再以“=”分开参数名称与数据，通常以 UTF8 的 URL 编码，避开字符冲突的问题）\n\n- **[ #hash ]**：片段。以“#”字符为起点。（锚点应用）\n\n#### URN\n\n【定义】：永久统一资源定位符\n\n资源移动之后还能被找到\n\n目前还没有成熟的使用方案\n\n## 参考地址：\n\n1. [wikipedia-统一资源定位符](https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E5%AE%9A%E4%BD%8D%E7%AC%A6)\n\n未完待续","source":"_drafts/http.md","raw":"---\ntitle: 【HTTP】原理结合实践\ndate: 2018-07-5 12:00:00\ntags:\n  - http\ncategory:\n  - HTTP\n---\n\n<!--more-->\n\n### HTTP 请求头信息\n\nCache-Control\n\n- public、private：设置缓存仅在客户端缓存还是可以在代理服务器中缓存\n- must-revalidate：客户端的缓存获取之后必须到服务端验证之后才能继续使用缓存\n- no-cache、no-store：设置是否使用缓存\n\n缓存验证\n\n- last-modified 配合 if-modified-since\n- etag 配合 if-none-match\n\n- Contetn-Type 、Content-Encoding：等用来约束数据类型\n- Cookie：保持会话信息\n- CORS：实现跨域并保持安全性限制\n\n## 深入到 TCP\n\n1.什么是三次握手\n\n2.HTTPS 链接的创建过程，以及为什么 HTTPS 是安全的\n\n3.什么是长链接，为什么需要长链接\n\n4.HTTP2 的信道复用为什么能提高性能\n\n## HTTP 请求完整过程\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuqog8z9uij318n0f30xa.jpg)\n\n1.Redirect 浏览器要对 url 判断是否需要重定向到新的 url 地址\n\n2.缓存 判断是否需要到浏览器缓存中获取 url 对应的网页资源\n\n3.DNS 解析 将域名解析成 ip 才能访问到资源所在的服务器\n\n4.TCP 连接 拿到 ip 后就要进行 TCP 连接[ http: 经过 TCP 的三次握手;https: 不同于三次握手，需要另外的保证数据安全传输的过程]\n\n5.Request 发送请求的数据包\n\n6.Response 接收到请求数据包，并返回响应结果\n\n## 网络协议分层\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuqoss50zpj30zv0pogpe.jpg)\n\n- 物理层：定义物理设备如何传输数据\n- 数据链路层：在通信的实体间建立数据链路连接\n- 网络层：为数据在结点之间传输创建逻辑链路\n- 传输层：\n  - 向用户传输可靠的端到端(End-to-End)服务\n  - 传输层向高层屏蔽了下层数据通信的细节\n- 应用层\n  - 为应用软件提供了很多服务\n  - 构建于 TCP 协议之上\n  - 屏蔽网络传输相关细节\n\n## HTTP 发展历史\n\n### 几个概念\n\n1.http 并发数\n\n2.http 请求\n\n3.tcp 连接 [1 个连接可以有多个 http 请求]\n\n### HTTP/0.9\n\n- 只有一个命令(方法)GET\n- 没有 HEADER 等描述数据的信息\n- 服务器发送完毕，就关闭 TCP 连接\n\n### HTTP/1.0\n\n- 增加了很多命令\n- 增加 status code(服务端处理完某个请求后的状态)和 header(发送和请求相关的数据 以及对这部分数据的操作方法))\n- 多字符支持、多部分发送、权限、缓存等\n\n[一个 http 请求就要建立一个 tcp 连接，返回完内容后就关闭，但是三次握手建立的消耗和延迟比较高]\n\n### HTTP/1.1\n\n- 增加持久连接 [建立完一个 tcp 连接后，在返回完数据后不关闭，让后续的所有请求都使用这个连接]\n- pipeline [可以在同一个连接中发送多个请求，但是多个请求在服务器端需要顺序处理（串行），这样如果前面的请求处理的时间需要很长，而后面的请求处理的时间只需要很短，导致性能不太好]\n- 增加 host(可以在同一台(物理)服务器跑多个 web 服务[node、java]，使用 host 进行判断，提高物理服务的使用效率)和其他一些命令\n\n### HTTP/2.0\n\n- 所有数据以二进制(帧)传输[以前是以字符串形式传输]\n- 同一个连接里面发送多个请求不再需要需要按照顺序来（并行）\n- 头信息压缩以及推送等提高效率的功能\n\n## HTTP 三次握手\n\n### HTTP 请求和 TCP 连接关系\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuqq6thfa2j30yy0eyjs6.jpg)\n\n1.客户端和服务器之间的 http 请求的发送和返回的过程需要创建 TCP 连接\n\n2.http 只有请求和响应的概念，没有连接的概念\n\n3.请求和响应都是数据包，需要传输通道，TCP 连接就是数据包的传输通道（TCP 连接: 客户端发送，服务端接收）\n\n### 三次握手时序图\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuqq70zeilj30tw0p4zmm.jpg)\n\n1.第一次握手（SYN=1,Seq=X）\n\n2.第二次握手（SYN=1,ACK=X+1,Seq=Y）\n\n3.第三次握手（ACK=Y+1,Seq=Z）\n\n网络抓包工具：wireshark\n\n### URI URL URN\n\n#### URI\n\n【定义】： Uniform Resource Identifier 统一资源标识符\n\n- 用来唯一标识互联网上的信息资源\n- 包括 URL 和 URN\n\n#### URL\n\n【定义】：Uniform Resource Locator 统一资源定位器\n\n示例： http://user:pass@host.com:80/path?query=string#hash\n\n- **[ http ]**：传送协议。`Data URI scheme` [http ftp mailto]\n\n- **[ // ]**：层级 URL 标记符号(为[//],固定不变)\n\n- **[ user:pass ]**： 访问资源需要的凭证信息（可省略，不安全）\n\n- **[ host.com ]**：服务器。（通常为域名，有时为 IP 地址）\n\n- **[ 80 ]**：端口号。（以数字方式表示，若为 HTTP 的默认值“:80”可省略）\n\n- **[ /path ]**：路径。（以“/”字符区别路径中的每一个目录名称）\n\n- **[ ?query=string ]**：查询。（GET 模式的窗体参数，以“?”字符为起点，每个参数以“&”隔开，再以“=”分开参数名称与数据，通常以 UTF8 的 URL 编码，避开字符冲突的问题）\n\n- **[ #hash ]**：片段。以“#”字符为起点。（锚点应用）\n\n#### URN\n\n【定义】：永久统一资源定位符\n\n资源移动之后还能被找到\n\n目前还没有成熟的使用方案\n\n## 参考地址：\n\n1. [wikipedia-统一资源定位符](https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E5%AE%9A%E4%BD%8D%E7%AC%A6)\n\n未完待续","slug":"http","published":0,"updated":"2018-11-16T12:14:51.799Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c3y900002wuuep2qkrhz","content":"<a id=\"more\"></a>\n<h3 id=\"http-请求头信息\"><a class=\"markdownIt-Anchor\" href=\"#http-请求头信息\"></a> HTTP 请求头信息</h3>\n<p>Cache-Control</p>\n<ul>\n<li>public、private：设置缓存仅在客户端缓存还是可以在代理服务器中缓存</li>\n<li>must-revalidate：客户端的缓存获取之后必须到服务端验证之后才能继续使用缓存</li>\n<li>no-cache、no-store：设置是否使用缓存</li>\n</ul>\n<p>缓存验证</p>\n<ul>\n<li>\n<p>last-modified 配合 if-modified-since</p>\n</li>\n<li>\n<p>etag 配合 if-none-match</p>\n</li>\n<li>\n<p>Contetn-Type 、Content-Encoding：等用来约束数据类型</p>\n</li>\n<li>\n<p>Cookie：保持会话信息</p>\n</li>\n<li>\n<p>CORS：实现跨域并保持安全性限制</p>\n</li>\n</ul>\n<h2 id=\"深入到-tcp\"><a class=\"markdownIt-Anchor\" href=\"#深入到-tcp\"></a> 深入到 TCP</h2>\n<p>1.什么是三次握手</p>\n<p>2.HTTPS 链接的创建过程，以及为什么 HTTPS 是安全的</p>\n<p>3.什么是长链接，为什么需要长链接</p>\n<p>4.HTTP2 的信道复用为什么能提高性能</p>\n<h2 id=\"http-请求完整过程\"><a class=\"markdownIt-Anchor\" href=\"#http-请求完整过程\"></a> HTTP 请求完整过程</h2>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuqog8z9uij318n0f30xa.jpg\" alt=\"\"></p>\n<p>1.Redirect 浏览器要对 url 判断是否需要重定向到新的 url 地址</p>\n<p>2.缓存 判断是否需要到浏览器缓存中获取 url 对应的网页资源</p>\n<p>3.DNS 解析 将域名解析成 ip 才能访问到资源所在的服务器</p>\n<p>4.TCP 连接 拿到 ip 后就要进行 TCP 连接[ http: 经过 TCP 的三次握手;https: 不同于三次握手，需要另外的保证数据安全传输的过程]</p>\n<p>5.Request 发送请求的数据包</p>\n<p>6.Response 接收到请求数据包，并返回响应结果</p>\n<h2 id=\"网络协议分层\"><a class=\"markdownIt-Anchor\" href=\"#网络协议分层\"></a> 网络协议分层</h2>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuqoss50zpj30zv0pogpe.jpg\" alt=\"\"></p>\n<ul>\n<li>物理层：定义物理设备如何传输数据</li>\n<li>数据链路层：在通信的实体间建立数据链路连接</li>\n<li>网络层：为数据在结点之间传输创建逻辑链路</li>\n<li>传输层：\n<ul>\n<li>向用户传输可靠的端到端(End-to-End)服务</li>\n<li>传输层向高层屏蔽了下层数据通信的细节</li>\n</ul>\n</li>\n<li>应用层\n<ul>\n<li>为应用软件提供了很多服务</li>\n<li>构建于 TCP 协议之上</li>\n<li>屏蔽网络传输相关细节</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"http-发展历史\"><a class=\"markdownIt-Anchor\" href=\"#http-发展历史\"></a> HTTP 发展历史</h2>\n<h3 id=\"几个概念\"><a class=\"markdownIt-Anchor\" href=\"#几个概念\"></a> 几个概念</h3>\n<p>1.http 并发数</p>\n<p>2.http 请求</p>\n<p>3.tcp 连接 [1 个连接可以有多个 http 请求]</p>\n<h3 id=\"http09\"><a class=\"markdownIt-Anchor\" href=\"#http09\"></a> HTTP/0.9</h3>\n<ul>\n<li>只有一个命令(方法)GET</li>\n<li>没有 HEADER 等描述数据的信息</li>\n<li>服务器发送完毕，就关闭 TCP 连接</li>\n</ul>\n<h3 id=\"http10\"><a class=\"markdownIt-Anchor\" href=\"#http10\"></a> HTTP/1.0</h3>\n<ul>\n<li>增加了很多命令</li>\n<li>增加 status code(服务端处理完某个请求后的状态)和 header(发送和请求相关的数据 以及对这部分数据的操作方法))</li>\n<li>多字符支持、多部分发送、权限、缓存等</li>\n</ul>\n<p>[一个 http 请求就要建立一个 tcp 连接，返回完内容后就关闭，但是三次握手建立的消耗和延迟比较高]</p>\n<h3 id=\"http11\"><a class=\"markdownIt-Anchor\" href=\"#http11\"></a> HTTP/1.1</h3>\n<ul>\n<li>增加持久连接 [建立完一个 tcp 连接后，在返回完数据后不关闭，让后续的所有请求都使用这个连接]</li>\n<li>pipeline [可以在同一个连接中发送多个请求，但是多个请求在服务器端需要顺序处理（串行），这样如果前面的请求处理的时间需要很长，而后面的请求处理的时间只需要很短，导致性能不太好]</li>\n<li>增加 host(可以在同一台(物理)服务器跑多个 web 服务[node、java]，使用 host 进行判断，提高物理服务的使用效率)和其他一些命令</li>\n</ul>\n<h3 id=\"http20\"><a class=\"markdownIt-Anchor\" href=\"#http20\"></a> HTTP/2.0</h3>\n<ul>\n<li>所有数据以二进制(帧)传输[以前是以字符串形式传输]</li>\n<li>同一个连接里面发送多个请求不再需要需要按照顺序来（并行）</li>\n<li>头信息压缩以及推送等提高效率的功能</li>\n</ul>\n<h2 id=\"http-三次握手\"><a class=\"markdownIt-Anchor\" href=\"#http-三次握手\"></a> HTTP 三次握手</h2>\n<h3 id=\"http-请求和-tcp-连接关系\"><a class=\"markdownIt-Anchor\" href=\"#http-请求和-tcp-连接关系\"></a> HTTP 请求和 TCP 连接关系</h3>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuqq6thfa2j30yy0eyjs6.jpg\" alt=\"\"></p>\n<p>1.客户端和服务器之间的 http 请求的发送和返回的过程需要创建 TCP 连接</p>\n<p>2.http 只有请求和响应的概念，没有连接的概念</p>\n<p>3.请求和响应都是数据包，需要传输通道，TCP 连接就是数据包的传输通道（TCP 连接: 客户端发送，服务端接收）</p>\n<h3 id=\"三次握手时序图\"><a class=\"markdownIt-Anchor\" href=\"#三次握手时序图\"></a> 三次握手时序图</h3>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuqq70zeilj30tw0p4zmm.jpg\" alt=\"\"></p>\n<p>1.第一次握手（SYN=1,Seq=X）</p>\n<p>2.第二次握手（SYN=1,ACK=X+1,Seq=Y）</p>\n<p>3.第三次握手（ACK=Y+1,Seq=Z）</p>\n<p>网络抓包工具：wireshark</p>\n<h3 id=\"uri-url-urn\"><a class=\"markdownIt-Anchor\" href=\"#uri-url-urn\"></a> URI URL URN</h3>\n<h4 id=\"uri\"><a class=\"markdownIt-Anchor\" href=\"#uri\"></a> URI</h4>\n<p>【定义】： Uniform Resource Identifier 统一资源标识符</p>\n<ul>\n<li>用来唯一标识互联网上的信息资源</li>\n<li>包括 URL 和 URN</li>\n</ul>\n<h4 id=\"url\"><a class=\"markdownIt-Anchor\" href=\"#url\"></a> URL</h4>\n<p>【定义】：Uniform Resource Locator 统一资源定位器</p>\n<p>示例： <a href=\"http://user:pass@host.com:80/path?query=string#hash\" target=\"_blank\" rel=\"noopener\">http://user:pass@host.com:80/path?query=string#hash</a></p>\n<ul>\n<li>\n<p><strong>[ http ]</strong>：传送协议。<code>Data URI scheme</code> [http ftp mailto]</p>\n</li>\n<li>\n<p><strong>[ // ]</strong>：层级 URL 标记符号(为[//],固定不变)</p>\n</li>\n<li>\n<p><strong>[ user:pass ]</strong>： 访问资源需要的凭证信息（可省略，不安全）</p>\n</li>\n<li>\n<p><strong>[ <a href=\"http://host.com\" target=\"_blank\" rel=\"noopener\">host.com</a> ]</strong>：服务器。（通常为域名，有时为 IP 地址）</p>\n</li>\n<li>\n<p><strong>[ 80 ]</strong>：端口号。（以数字方式表示，若为 HTTP 的默认值“:80”可省略）</p>\n</li>\n<li>\n<p><strong>[ /path ]</strong>：路径。（以“/”字符区别路径中的每一个目录名称）</p>\n</li>\n<li>\n<p><strong>[ ?query=string ]</strong>：查询。（GET 模式的窗体参数，以“?”字符为起点，每个参数以“&amp;”隔开，再以“=”分开参数名称与数据，通常以 UTF8 的 URL 编码，避开字符冲突的问题）</p>\n</li>\n<li>\n<p><strong>[ #hash ]</strong>：片段。以“#”字符为起点。（锚点应用）</p>\n</li>\n</ul>\n<h4 id=\"urn\"><a class=\"markdownIt-Anchor\" href=\"#urn\"></a> URN</h4>\n<p>【定义】：永久统一资源定位符</p>\n<p>资源移动之后还能被找到</p>\n<p>目前还没有成熟的使用方案</p>\n<h2 id=\"参考地址\"><a class=\"markdownIt-Anchor\" href=\"#参考地址\"></a> 参考地址：</h2>\n<ol>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E5%AE%9A%E4%BD%8D%E7%AC%A6\" target=\"_blank\" rel=\"noopener\">wikipedia-统一资源定位符</a></li>\n</ol>\n<p>未完待续</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"http-请求头信息\"><a class=\"markdownIt-Anchor\" href=\"#http-请求头信息\"></a> HTTP 请求头信息</h3>\n<p>Cache-Control</p>\n<ul>\n<li>public、private：设置缓存仅在客户端缓存还是可以在代理服务器中缓存</li>\n<li>must-revalidate：客户端的缓存获取之后必须到服务端验证之后才能继续使用缓存</li>\n<li>no-cache、no-store：设置是否使用缓存</li>\n</ul>\n<p>缓存验证</p>\n<ul>\n<li>\n<p>last-modified 配合 if-modified-since</p>\n</li>\n<li>\n<p>etag 配合 if-none-match</p>\n</li>\n<li>\n<p>Contetn-Type 、Content-Encoding：等用来约束数据类型</p>\n</li>\n<li>\n<p>Cookie：保持会话信息</p>\n</li>\n<li>\n<p>CORS：实现跨域并保持安全性限制</p>\n</li>\n</ul>\n<h2 id=\"深入到-tcp\"><a class=\"markdownIt-Anchor\" href=\"#深入到-tcp\"></a> 深入到 TCP</h2>\n<p>1.什么是三次握手</p>\n<p>2.HTTPS 链接的创建过程，以及为什么 HTTPS 是安全的</p>\n<p>3.什么是长链接，为什么需要长链接</p>\n<p>4.HTTP2 的信道复用为什么能提高性能</p>\n<h2 id=\"http-请求完整过程\"><a class=\"markdownIt-Anchor\" href=\"#http-请求完整过程\"></a> HTTP 请求完整过程</h2>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuqog8z9uij318n0f30xa.jpg\" alt=\"\"></p>\n<p>1.Redirect 浏览器要对 url 判断是否需要重定向到新的 url 地址</p>\n<p>2.缓存 判断是否需要到浏览器缓存中获取 url 对应的网页资源</p>\n<p>3.DNS 解析 将域名解析成 ip 才能访问到资源所在的服务器</p>\n<p>4.TCP 连接 拿到 ip 后就要进行 TCP 连接[ http: 经过 TCP 的三次握手;https: 不同于三次握手，需要另外的保证数据安全传输的过程]</p>\n<p>5.Request 发送请求的数据包</p>\n<p>6.Response 接收到请求数据包，并返回响应结果</p>\n<h2 id=\"网络协议分层\"><a class=\"markdownIt-Anchor\" href=\"#网络协议分层\"></a> 网络协议分层</h2>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuqoss50zpj30zv0pogpe.jpg\" alt=\"\"></p>\n<ul>\n<li>物理层：定义物理设备如何传输数据</li>\n<li>数据链路层：在通信的实体间建立数据链路连接</li>\n<li>网络层：为数据在结点之间传输创建逻辑链路</li>\n<li>传输层：\n<ul>\n<li>向用户传输可靠的端到端(End-to-End)服务</li>\n<li>传输层向高层屏蔽了下层数据通信的细节</li>\n</ul>\n</li>\n<li>应用层\n<ul>\n<li>为应用软件提供了很多服务</li>\n<li>构建于 TCP 协议之上</li>\n<li>屏蔽网络传输相关细节</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"http-发展历史\"><a class=\"markdownIt-Anchor\" href=\"#http-发展历史\"></a> HTTP 发展历史</h2>\n<h3 id=\"几个概念\"><a class=\"markdownIt-Anchor\" href=\"#几个概念\"></a> 几个概念</h3>\n<p>1.http 并发数</p>\n<p>2.http 请求</p>\n<p>3.tcp 连接 [1 个连接可以有多个 http 请求]</p>\n<h3 id=\"http09\"><a class=\"markdownIt-Anchor\" href=\"#http09\"></a> HTTP/0.9</h3>\n<ul>\n<li>只有一个命令(方法)GET</li>\n<li>没有 HEADER 等描述数据的信息</li>\n<li>服务器发送完毕，就关闭 TCP 连接</li>\n</ul>\n<h3 id=\"http10\"><a class=\"markdownIt-Anchor\" href=\"#http10\"></a> HTTP/1.0</h3>\n<ul>\n<li>增加了很多命令</li>\n<li>增加 status code(服务端处理完某个请求后的状态)和 header(发送和请求相关的数据 以及对这部分数据的操作方法))</li>\n<li>多字符支持、多部分发送、权限、缓存等</li>\n</ul>\n<p>[一个 http 请求就要建立一个 tcp 连接，返回完内容后就关闭，但是三次握手建立的消耗和延迟比较高]</p>\n<h3 id=\"http11\"><a class=\"markdownIt-Anchor\" href=\"#http11\"></a> HTTP/1.1</h3>\n<ul>\n<li>增加持久连接 [建立完一个 tcp 连接后，在返回完数据后不关闭，让后续的所有请求都使用这个连接]</li>\n<li>pipeline [可以在同一个连接中发送多个请求，但是多个请求在服务器端需要顺序处理（串行），这样如果前面的请求处理的时间需要很长，而后面的请求处理的时间只需要很短，导致性能不太好]</li>\n<li>增加 host(可以在同一台(物理)服务器跑多个 web 服务[node、java]，使用 host 进行判断，提高物理服务的使用效率)和其他一些命令</li>\n</ul>\n<h3 id=\"http20\"><a class=\"markdownIt-Anchor\" href=\"#http20\"></a> HTTP/2.0</h3>\n<ul>\n<li>所有数据以二进制(帧)传输[以前是以字符串形式传输]</li>\n<li>同一个连接里面发送多个请求不再需要需要按照顺序来（并行）</li>\n<li>头信息压缩以及推送等提高效率的功能</li>\n</ul>\n<h2 id=\"http-三次握手\"><a class=\"markdownIt-Anchor\" href=\"#http-三次握手\"></a> HTTP 三次握手</h2>\n<h3 id=\"http-请求和-tcp-连接关系\"><a class=\"markdownIt-Anchor\" href=\"#http-请求和-tcp-连接关系\"></a> HTTP 请求和 TCP 连接关系</h3>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuqq6thfa2j30yy0eyjs6.jpg\" alt=\"\"></p>\n<p>1.客户端和服务器之间的 http 请求的发送和返回的过程需要创建 TCP 连接</p>\n<p>2.http 只有请求和响应的概念，没有连接的概念</p>\n<p>3.请求和响应都是数据包，需要传输通道，TCP 连接就是数据包的传输通道（TCP 连接: 客户端发送，服务端接收）</p>\n<h3 id=\"三次握手时序图\"><a class=\"markdownIt-Anchor\" href=\"#三次握手时序图\"></a> 三次握手时序图</h3>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuqq70zeilj30tw0p4zmm.jpg\" alt=\"\"></p>\n<p>1.第一次握手（SYN=1,Seq=X）</p>\n<p>2.第二次握手（SYN=1,ACK=X+1,Seq=Y）</p>\n<p>3.第三次握手（ACK=Y+1,Seq=Z）</p>\n<p>网络抓包工具：wireshark</p>\n<h3 id=\"uri-url-urn\"><a class=\"markdownIt-Anchor\" href=\"#uri-url-urn\"></a> URI URL URN</h3>\n<h4 id=\"uri\"><a class=\"markdownIt-Anchor\" href=\"#uri\"></a> URI</h4>\n<p>【定义】： Uniform Resource Identifier 统一资源标识符</p>\n<ul>\n<li>用来唯一标识互联网上的信息资源</li>\n<li>包括 URL 和 URN</li>\n</ul>\n<h4 id=\"url\"><a class=\"markdownIt-Anchor\" href=\"#url\"></a> URL</h4>\n<p>【定义】：Uniform Resource Locator 统一资源定位器</p>\n<p>示例： <a href=\"http://user:pass@host.com:80/path?query=string#hash\" target=\"_blank\" rel=\"noopener\">http://user:pass@host.com:80/path?query=string#hash</a></p>\n<ul>\n<li>\n<p><strong>[ http ]</strong>：传送协议。<code>Data URI scheme</code> [http ftp mailto]</p>\n</li>\n<li>\n<p><strong>[ // ]</strong>：层级 URL 标记符号(为[//],固定不变)</p>\n</li>\n<li>\n<p><strong>[ user:pass ]</strong>： 访问资源需要的凭证信息（可省略，不安全）</p>\n</li>\n<li>\n<p><strong>[ <a href=\"http://host.com\" target=\"_blank\" rel=\"noopener\">host.com</a> ]</strong>：服务器。（通常为域名，有时为 IP 地址）</p>\n</li>\n<li>\n<p><strong>[ 80 ]</strong>：端口号。（以数字方式表示，若为 HTTP 的默认值“:80”可省略）</p>\n</li>\n<li>\n<p><strong>[ /path ]</strong>：路径。（以“/”字符区别路径中的每一个目录名称）</p>\n</li>\n<li>\n<p><strong>[ ?query=string ]</strong>：查询。（GET 模式的窗体参数，以“?”字符为起点，每个参数以“&amp;”隔开，再以“=”分开参数名称与数据，通常以 UTF8 的 URL 编码，避开字符冲突的问题）</p>\n</li>\n<li>\n<p><strong>[ #hash ]</strong>：片段。以“#”字符为起点。（锚点应用）</p>\n</li>\n</ul>\n<h4 id=\"urn\"><a class=\"markdownIt-Anchor\" href=\"#urn\"></a> URN</h4>\n<p>【定义】：永久统一资源定位符</p>\n<p>资源移动之后还能被找到</p>\n<p>目前还没有成熟的使用方案</p>\n<h2 id=\"参考地址\"><a class=\"markdownIt-Anchor\" href=\"#参考地址\"></a> 参考地址：</h2>\n<ol>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E5%AE%9A%E4%BD%8D%E7%AC%A6\" target=\"_blank\" rel=\"noopener\">wikipedia-统一资源定位符</a></li>\n</ol>\n<p>未完待续</p>"},{"title":"【React入门】实现todolist功能","date":"2018-08-08T14:07:21.000Z","_content":"\n作为一名 PHP 初级的程序员，目前尚且处于学习 PHP 业务逻辑实现到日常工作中的阶段，但是由于现在想要搭建一个满意的个人博客，并且尝试过很多 hexo 主题后总是会对主题的某些或某个部分不太满意，\n所以为了以后可以自己实现相应页面的开发，所以还是想着能够学点前端框架的知识，为以后成为全栈工程师做准备。目前比较流行的前端框架主要有`React.js`和`Vue.js`，因为当前公司使用的是`React.js`开发的，所以也选择`React`作为学习对象。\n\n<!--more-->\n\n## 开发环境准备\n\n### 安装 node.js\n\n建议在 React 中使用 CommonJS 模块系统，比如 browserify 或 webpack(推荐使用)。\n\n使用淘宝定制的 cpm 命令行工具代替默认的 npm\n\n```bash\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\nnpm config set registry https://registry.npm.taobao.org\n```\n\n这样就可以使用 cnpm 命令来代替 npm 进行安装模块了：\n\n```bash\ncnpm install [name]\n```\n\n### 创建 react 应用\n\n```bash\ncnpm install -g create-react-app\ncd todolist-react/\nnpm start\n```\n\n### 目录结构\n\n- 原始结构\n\n```info\ntodolist-react/\n    node_modules/\n    public/\n        favicon.ico\n        index.html\n        manifest.json\n    src/\n        App.css\n        App.js\n        App.test.js\n        index.css\n        index.js\n        logo.svg\n    README.md\n    package-lock.json\n    package.json\n    .gitignore\n```\n\n## 代码实现\n\n### 准备工作\n\n（1）编写 todolist 功能时，对默认项目的文件进行删减，只需要保留主要的文件即可。\n\n将`App.js`重命名为`TodoList.js`，创建文件`TodoItem.js`。\n\n- 精简后的文件结构\n\n```info\ntodolist-react/\n    node_modules/\n    public/\n        favicon.ico\n        index.html\n        manifest.json\n    src/\n        TodoList.js\n        TodoItem.js\n        index.js\n    README.md\n    package-lock.json\n    package.json\n    .gitignore\n```\n\n（2）组件拆分\n\n`React` 的组件开发意思是将页面上每个部分作为一个组件，然后通过每个组件之间的通信，进行数据交互，实现完整页面的渲染。\n\n`TodoList` 功能包括用户输入部分和 `List` 清单部分，所以将整个功能拆分为两部分。用户输入部分为`TodoList`; `List`清单部分为`TodoItem`。\n\n（3）`index.js`代码实现\n\n```javascript\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\n// 引入TodoList组件\nimport TodoList from \"./TodoList\";\n\n// 获取TodoList返回的数据，并渲染到id为root的元素节点中\nReactDOM.render(<TodoList />, document.getElementById(\"root\"));\n```\n\n（4）`TodoList.js`代码实现\n\n```javascript\n// 引入React类，引入React.Component组件类\nimport React, { Component} from 'react';\n// 从当前目录下的TodoItem.js中引入TodoItem子组件\nimport TodoItem from './TodoItem';\n\n// 组件定义和实现\nclass TodoList extends Component {\n  // 通过render() 方法渲染页面数据\n  render() {\n    return (\n      <div>\n        <div>\n          <input value={this.state.inputValue} onChange={this.handleInputChange}/>\n          <button onClick={this.handleBtnClick}>add</button>\n        </div>\n        <ul>\n        {\n            return (\n                this.state.list.map((item, index) => {\n                    return <TodoItem key={index} content={item} index={index} delete={this.handleDelete}/>\n                })\n            )\n        }\n        </ul>\n      </div>\n    );\n  }\n}\n```\n\n### 未完待续\n","source":"_drafts/js-react.md","raw":"---\ntitle: 【React入门】实现todolist功能\ndate: 2018-08-08 22:07:21\ntags:\n  - web\ncategory:\n  - React\n---\n\n作为一名 PHP 初级的程序员，目前尚且处于学习 PHP 业务逻辑实现到日常工作中的阶段，但是由于现在想要搭建一个满意的个人博客，并且尝试过很多 hexo 主题后总是会对主题的某些或某个部分不太满意，\n所以为了以后可以自己实现相应页面的开发，所以还是想着能够学点前端框架的知识，为以后成为全栈工程师做准备。目前比较流行的前端框架主要有`React.js`和`Vue.js`，因为当前公司使用的是`React.js`开发的，所以也选择`React`作为学习对象。\n\n<!--more-->\n\n## 开发环境准备\n\n### 安装 node.js\n\n建议在 React 中使用 CommonJS 模块系统，比如 browserify 或 webpack(推荐使用)。\n\n使用淘宝定制的 cpm 命令行工具代替默认的 npm\n\n```bash\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\nnpm config set registry https://registry.npm.taobao.org\n```\n\n这样就可以使用 cnpm 命令来代替 npm 进行安装模块了：\n\n```bash\ncnpm install [name]\n```\n\n### 创建 react 应用\n\n```bash\ncnpm install -g create-react-app\ncd todolist-react/\nnpm start\n```\n\n### 目录结构\n\n- 原始结构\n\n```info\ntodolist-react/\n    node_modules/\n    public/\n        favicon.ico\n        index.html\n        manifest.json\n    src/\n        App.css\n        App.js\n        App.test.js\n        index.css\n        index.js\n        logo.svg\n    README.md\n    package-lock.json\n    package.json\n    .gitignore\n```\n\n## 代码实现\n\n### 准备工作\n\n（1）编写 todolist 功能时，对默认项目的文件进行删减，只需要保留主要的文件即可。\n\n将`App.js`重命名为`TodoList.js`，创建文件`TodoItem.js`。\n\n- 精简后的文件结构\n\n```info\ntodolist-react/\n    node_modules/\n    public/\n        favicon.ico\n        index.html\n        manifest.json\n    src/\n        TodoList.js\n        TodoItem.js\n        index.js\n    README.md\n    package-lock.json\n    package.json\n    .gitignore\n```\n\n（2）组件拆分\n\n`React` 的组件开发意思是将页面上每个部分作为一个组件，然后通过每个组件之间的通信，进行数据交互，实现完整页面的渲染。\n\n`TodoList` 功能包括用户输入部分和 `List` 清单部分，所以将整个功能拆分为两部分。用户输入部分为`TodoList`; `List`清单部分为`TodoItem`。\n\n（3）`index.js`代码实现\n\n```javascript\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\n// 引入TodoList组件\nimport TodoList from \"./TodoList\";\n\n// 获取TodoList返回的数据，并渲染到id为root的元素节点中\nReactDOM.render(<TodoList />, document.getElementById(\"root\"));\n```\n\n（4）`TodoList.js`代码实现\n\n```javascript\n// 引入React类，引入React.Component组件类\nimport React, { Component} from 'react';\n// 从当前目录下的TodoItem.js中引入TodoItem子组件\nimport TodoItem from './TodoItem';\n\n// 组件定义和实现\nclass TodoList extends Component {\n  // 通过render() 方法渲染页面数据\n  render() {\n    return (\n      <div>\n        <div>\n          <input value={this.state.inputValue} onChange={this.handleInputChange}/>\n          <button onClick={this.handleBtnClick}>add</button>\n        </div>\n        <ul>\n        {\n            return (\n                this.state.list.map((item, index) => {\n                    return <TodoItem key={index} content={item} index={index} delete={this.handleDelete}/>\n                })\n            )\n        }\n        </ul>\n      </div>\n    );\n  }\n}\n```\n\n### 未完待续\n","slug":"js-react","published":0,"updated":"2018-11-16T12:14:51.808Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c3yk00022wuuqxsxlj7k","content":"<p>作为一名 PHP 初级的程序员，目前尚且处于学习 PHP 业务逻辑实现到日常工作中的阶段，但是由于现在想要搭建一个满意的个人博客，并且尝试过很多 hexo 主题后总是会对主题的某些或某个部分不太满意，<br>\n所以为了以后可以自己实现相应页面的开发，所以还是想着能够学点前端框架的知识，为以后成为全栈工程师做准备。目前比较流行的前端框架主要有<code>React.js</code>和<code>Vue.js</code>，因为当前公司使用的是<code>React.js</code>开发的，所以也选择<code>React</code>作为学习对象。</p>\n<a id=\"more\"></a>\n<h2 id=\"开发环境准备\"><a class=\"markdownIt-Anchor\" href=\"#开发环境准备\"></a> 开发环境准备</h2>\n<h3 id=\"安装-nodejs\"><a class=\"markdownIt-Anchor\" href=\"#安装-nodejs\"></a> 安装 node.js</h3>\n<p>建议在 React 中使用 CommonJS 模块系统，比如 browserify 或 webpack(推荐使用)。</p>\n<p>使用淘宝定制的 cpm 命令行工具代替默认的 npm</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<p>这样就可以使用 cnpm 命令来代替 npm 进行安装模块了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install [name]</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建-react-应用\"><a class=\"markdownIt-Anchor\" href=\"#创建-react-应用\"></a> 创建 react 应用</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install -g create-react-app</span><br><span class=\"line\"><span class=\"built_in\">cd</span> todolist-react/</span><br><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n<h3 id=\"目录结构\"><a class=\"markdownIt-Anchor\" href=\"#目录结构\"></a> 目录结构</h3>\n<ul>\n<li>原始结构</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">todolist-react/</span><br><span class=\"line\">    node_modules/</span><br><span class=\"line\">    public/</span><br><span class=\"line\">        favicon.ico</span><br><span class=\"line\">        index.html</span><br><span class=\"line\">        manifest.json</span><br><span class=\"line\">    src/</span><br><span class=\"line\">        App.css</span><br><span class=\"line\">        App.js</span><br><span class=\"line\">        App.test.js</span><br><span class=\"line\">        index.css</span><br><span class=\"line\">        index.js</span><br><span class=\"line\">        logo.svg</span><br><span class=\"line\">    README.md</span><br><span class=\"line\">    package-lock.json</span><br><span class=\"line\">    package.json</span><br><span class=\"line\">    .gitignore</span><br></pre></td></tr></table></figure>\n<h2 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\"></a> 代码实现</h2>\n<h3 id=\"准备工作\"><a class=\"markdownIt-Anchor\" href=\"#准备工作\"></a> 准备工作</h3>\n<p>（1）编写 todolist 功能时，对默认项目的文件进行删减，只需要保留主要的文件即可。</p>\n<p>将<code>App.js</code>重命名为<code>TodoList.js</code>，创建文件<code>TodoItem.js</code>。</p>\n<ul>\n<li>精简后的文件结构</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">todolist-react/</span><br><span class=\"line\">    node_modules/</span><br><span class=\"line\">    public/</span><br><span class=\"line\">        favicon.ico</span><br><span class=\"line\">        index.html</span><br><span class=\"line\">        manifest.json</span><br><span class=\"line\">    src/</span><br><span class=\"line\">        TodoList.js</span><br><span class=\"line\">        TodoItem.js</span><br><span class=\"line\">        index.js</span><br><span class=\"line\">    README.md</span><br><span class=\"line\">    package-lock.json</span><br><span class=\"line\">    package.json</span><br><span class=\"line\">    .gitignore</span><br></pre></td></tr></table></figure>\n<p>（2）组件拆分</p>\n<p><code>React</code> 的组件开发意思是将页面上每个部分作为一个组件，然后通过每个组件之间的通信，进行数据交互，实现完整页面的渲染。</p>\n<p><code>TodoList</code> 功能包括用户输入部分和 <code>List</code> 清单部分，所以将整个功能拆分为两部分。用户输入部分为<code>TodoList</code>; <code>List</code>清单部分为<code>TodoItem</code>。</p>\n<p>（3）<code>index.js</code>代码实现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引入TodoList组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> TodoList <span class=\"keyword\">from</span> <span class=\"string\">\"./TodoList\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取TodoList返回的数据，并渲染到id为root的元素节点中</span></span><br><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">TodoList</span> /&gt;</span>, document.getElementById(\"root\"));</span></span><br></pre></td></tr></table></figure>\n<p>（4）<code>TodoList.js</code>代码实现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入React类，引入React.Component组件类</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 从当前目录下的TodoItem.js中引入TodoItem子组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> TodoItem <span class=\"keyword\">from</span> <span class=\"string\">'./TodoItem'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 组件定义和实现</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoList</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 通过render() 方法渲染页面数据</span></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">          &lt;input value=&#123;<span class=\"keyword\">this</span>.state.inputValue&#125; onChange=&#123;<span class=\"keyword\">this</span>.handleInputChange&#125;/&gt;</span><br><span class=\"line\">          &lt;button onClick=&#123;<span class=\"keyword\">this</span>.handleBtnClick&#125;&gt;add&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>div&gt;</span><br><span class=\"line\">        &lt;ul&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.state.list.map(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">TodoItem</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;index&#125;</span> <span class=\"attr\">content</span>=<span class=\"string\">&#123;item&#125;</span> <span class=\"attr\">index</span>=<span class=\"string\">&#123;index&#125;</span> <span class=\"attr\">delete</span>=<span class=\"string\">&#123;this.handleDelete&#125;/</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                &#125;)</span></span><br><span class=\"line\"><span class=\"xml\">            )</span></span><br><span class=\"line\"><span class=\"xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"未完待续\"><a class=\"markdownIt-Anchor\" href=\"#未完待续\"></a> 未完待续</h3>\n","site":{"data":{}},"excerpt":"<p>作为一名 PHP 初级的程序员，目前尚且处于学习 PHP 业务逻辑实现到日常工作中的阶段，但是由于现在想要搭建一个满意的个人博客，并且尝试过很多 hexo 主题后总是会对主题的某些或某个部分不太满意，<br>\n所以为了以后可以自己实现相应页面的开发，所以还是想着能够学点前端框架的知识，为以后成为全栈工程师做准备。目前比较流行的前端框架主要有<code>React.js</code>和<code>Vue.js</code>，因为当前公司使用的是<code>React.js</code>开发的，所以也选择<code>React</code>作为学习对象。</p>","more":"<h2 id=\"开发环境准备\"><a class=\"markdownIt-Anchor\" href=\"#开发环境准备\"></a> 开发环境准备</h2>\n<h3 id=\"安装-nodejs\"><a class=\"markdownIt-Anchor\" href=\"#安装-nodejs\"></a> 安装 node.js</h3>\n<p>建议在 React 中使用 CommonJS 模块系统，比如 browserify 或 webpack(推荐使用)。</p>\n<p>使用淘宝定制的 cpm 命令行工具代替默认的 npm</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<p>这样就可以使用 cnpm 命令来代替 npm 进行安装模块了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install [name]</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建-react-应用\"><a class=\"markdownIt-Anchor\" href=\"#创建-react-应用\"></a> 创建 react 应用</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install -g create-react-app</span><br><span class=\"line\"><span class=\"built_in\">cd</span> todolist-react/</span><br><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n<h3 id=\"目录结构\"><a class=\"markdownIt-Anchor\" href=\"#目录结构\"></a> 目录结构</h3>\n<ul>\n<li>原始结构</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">todolist-react/</span><br><span class=\"line\">    node_modules/</span><br><span class=\"line\">    public/</span><br><span class=\"line\">        favicon.ico</span><br><span class=\"line\">        index.html</span><br><span class=\"line\">        manifest.json</span><br><span class=\"line\">    src/</span><br><span class=\"line\">        App.css</span><br><span class=\"line\">        App.js</span><br><span class=\"line\">        App.test.js</span><br><span class=\"line\">        index.css</span><br><span class=\"line\">        index.js</span><br><span class=\"line\">        logo.svg</span><br><span class=\"line\">    README.md</span><br><span class=\"line\">    package-lock.json</span><br><span class=\"line\">    package.json</span><br><span class=\"line\">    .gitignore</span><br></pre></td></tr></table></figure>\n<h2 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\"></a> 代码实现</h2>\n<h3 id=\"准备工作\"><a class=\"markdownIt-Anchor\" href=\"#准备工作\"></a> 准备工作</h3>\n<p>（1）编写 todolist 功能时，对默认项目的文件进行删减，只需要保留主要的文件即可。</p>\n<p>将<code>App.js</code>重命名为<code>TodoList.js</code>，创建文件<code>TodoItem.js</code>。</p>\n<ul>\n<li>精简后的文件结构</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">todolist-react/</span><br><span class=\"line\">    node_modules/</span><br><span class=\"line\">    public/</span><br><span class=\"line\">        favicon.ico</span><br><span class=\"line\">        index.html</span><br><span class=\"line\">        manifest.json</span><br><span class=\"line\">    src/</span><br><span class=\"line\">        TodoList.js</span><br><span class=\"line\">        TodoItem.js</span><br><span class=\"line\">        index.js</span><br><span class=\"line\">    README.md</span><br><span class=\"line\">    package-lock.json</span><br><span class=\"line\">    package.json</span><br><span class=\"line\">    .gitignore</span><br></pre></td></tr></table></figure>\n<p>（2）组件拆分</p>\n<p><code>React</code> 的组件开发意思是将页面上每个部分作为一个组件，然后通过每个组件之间的通信，进行数据交互，实现完整页面的渲染。</p>\n<p><code>TodoList</code> 功能包括用户输入部分和 <code>List</code> 清单部分，所以将整个功能拆分为两部分。用户输入部分为<code>TodoList</code>; <code>List</code>清单部分为<code>TodoItem</code>。</p>\n<p>（3）<code>index.js</code>代码实现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引入TodoList组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> TodoList <span class=\"keyword\">from</span> <span class=\"string\">\"./TodoList\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取TodoList返回的数据，并渲染到id为root的元素节点中</span></span><br><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">TodoList</span> /&gt;</span>, document.getElementById(\"root\"));</span></span><br></pre></td></tr></table></figure>\n<p>（4）<code>TodoList.js</code>代码实现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入React类，引入React.Component组件类</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 从当前目录下的TodoItem.js中引入TodoItem子组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> TodoItem <span class=\"keyword\">from</span> <span class=\"string\">'./TodoItem'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 组件定义和实现</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoList</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 通过render() 方法渲染页面数据</span></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">          &lt;input value=&#123;<span class=\"keyword\">this</span>.state.inputValue&#125; onChange=&#123;<span class=\"keyword\">this</span>.handleInputChange&#125;/&gt;</span><br><span class=\"line\">          &lt;button onClick=&#123;<span class=\"keyword\">this</span>.handleBtnClick&#125;&gt;add&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>div&gt;</span><br><span class=\"line\">        &lt;ul&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.state.list.map(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">TodoItem</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;index&#125;</span> <span class=\"attr\">content</span>=<span class=\"string\">&#123;item&#125;</span> <span class=\"attr\">index</span>=<span class=\"string\">&#123;index&#125;</span> <span class=\"attr\">delete</span>=<span class=\"string\">&#123;this.handleDelete&#125;/</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                &#125;)</span></span><br><span class=\"line\"><span class=\"xml\">            )</span></span><br><span class=\"line\"><span class=\"xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"未完待续\"><a class=\"markdownIt-Anchor\" href=\"#未完待续\"></a> 未完待续</h3>"},{"title":"电影《绿里奇迹》","date":"2018-05-08T04:00:00.000Z","_content":"","source":"_drafts/movie-llqj.md","raw":"---\ntitle: 电影《绿里奇迹》\ndate: 2018-05-08 12:00:00\ntags:\n  - movie\ncategory:\n  - movie\n---\n","slug":"movie-llqj","published":0,"updated":"2018-11-16T12:14:51.813Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c3yq00062wuu3ug3lsb0","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"电影《土拨鼠之日》","date":"2018-05-01T04:00:00.000Z","_content":"","source":"_drafts/movie-tbszr.md","raw":"---\ntitle: 电影《土拨鼠之日》\ndate: 2018-05-01 12:00:00\ntags:\n  - movie\ncategory:\n  - movie\n---\n","slug":"movie-tbszr","published":0,"updated":"2018-11-16T12:14:51.818Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c3yt00082wuuf61o1lgo","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"MySQL性能管理及架构设计","date":"2018-03-28T02:32:33.000Z","_content":"\n<!--more -->\n事务\n\n事务是数据库系统区别于其他一切文件系统的重要特性之一\n事务是一组具有原子性的SQL语句，或是一个独立的工作单元\n具备原子性、一致性、隔离性、持久性\n\n原子性：\n 一个事务必须被视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败，对于一个事务来说，不可能只执行其中的一部分操作。\n\n```mysql\n// 初始使用的是随机生成的字符串，登陆后将数据库密码修改为空\nmysql> alter usre 'root'@'localhost' identified by '';\n\n// 导入当前目录下的safety.sql到数据库中\nmysql 数据库名 -uroot< safety.sql\n```\n","source":"_drafts/mysql-performance-architecture.md","raw":"---\ntitle: MySQL性能管理及架构设计\ndate: 2018-03-28 10:32:33\ntags:\n- mysql\ncategory:\n- MySQL\n---\n\n<!--more -->\n事务\n\n事务是数据库系统区别于其他一切文件系统的重要特性之一\n事务是一组具有原子性的SQL语句，或是一个独立的工作单元\n具备原子性、一致性、隔离性、持久性\n\n原子性：\n 一个事务必须被视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败，对于一个事务来说，不可能只执行其中的一部分操作。\n\n```mysql\n// 初始使用的是随机生成的字符串，登陆后将数据库密码修改为空\nmysql> alter usre 'root'@'localhost' identified by '';\n\n// 导入当前目录下的safety.sql到数据库中\nmysql 数据库名 -uroot< safety.sql\n```\n","slug":"mysql-performance-architecture","published":0,"updated":"2018-11-16T12:14:51.826Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c3yv000a2wuuiougdbpo","content":"<a id=\"more\"></a>\n<p>事务</p>\n<p>事务是数据库系统区别于其他一切文件系统的重要特性之一<br>\n事务是一组具有原子性的SQL语句，或是一个独立的工作单元<br>\n具备原子性、一致性、隔离性、持久性</p>\n<p>原子性：<br>\n一个事务必须被视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败，对于一个事务来说，不可能只执行其中的一部分操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 初始使用的是随机生成的字符串，登陆后将数据库密码修改为空</span><br><span class=\"line\">mysql&gt; alter usre &apos;root&apos;@&apos;localhost&apos; identified by &apos;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 导入当前目录下的safety.sql到数据库中</span><br><span class=\"line\">mysql 数据库名 -uroot&lt; safety.sql</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>事务</p>\n<p>事务是数据库系统区别于其他一切文件系统的重要特性之一<br>\n事务是一组具有原子性的SQL语句，或是一个独立的工作单元<br>\n具备原子性、一致性、隔离性、持久性</p>\n<p>原子性：<br>\n一个事务必须被视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败，对于一个事务来说，不可能只执行其中的一部分操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 初始使用的是随机生成的字符串，登陆后将数据库密码修改为空</span><br><span class=\"line\">mysql&gt; alter usre &apos;root&apos;@&apos;localhost&apos; identified by &apos;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 导入当前目录下的safety.sql到数据库中</span><br><span class=\"line\">mysql 数据库名 -uroot&lt; safety.sql</span><br></pre></td></tr></table></figure>"},{"title":"【Docker】入门使用","date":"2018-07-31T05:00:00.000Z","_content":"\n在学习 Docker 的镜像源设置和安装配置后，开始学习 Docker 的基本使用，包括服务进程的管理，容器、镜像的基本使用和管理。\n\n<!--more-->\n\n## Docker 使用命令\n\n### 系统管理相关\n\n```bash\n# 查看docker运行状态\nsudo service docker status\nsudo systemctl docker status\n\n# 启动和停止docker\nsudo service docker start\nsudo systemctl docekr start\n\nsudo service sdocker stop\nsudo systemctl docekr stop\n```\n\n### Docker 运行\n\n(1)下载 Docker Hub 上的\"hello-world\"镜像[大小只有 1.85k]\n\n```bash\nsudo docker run hello-world\n```\n\n(2) 查看 docker 镜像\n\n```bash\ndocker images\n```\n\n(3) 查看 docker 容器\n\n```bash\n# 查看运行状态的container\ndocker ps\n\n# 查看所有的container\ndocker ps -a\n```\n\n(4)下载`ubuntu`镜像，创建容器，保持可写入操作，并以 bash 状态进入容器\n\n```bash\nsudo docker run -i -t ubuntu /bin/bash\n# [-i]: 保证容器中STDIN是开启的，持久的标准写入\n# [-t]: 为要创建的容器分配一个伪tty终端，使新创建的容器能够提供一个交互式shell\n# [ubuntu]: 使用的镜像名，如果不存在则下载Docker Hub上的镜像\n# [/bin/bash]: 让新建的容器运行/bin/bash命令\n```\n\n只有指定的/bin/bash 命令处于运行状态的时候，容器才处于运行状态，一旦 exit 退出容器，/bin/bash 命令也就结束了，这时容器也随之停止运行。\n但容器仍然是存在的。\n\nDocker 在文件系统内部用这个镜像创建了一个新容器，该容器拥有自己的网络、IP 地址，以及一个用来和宿主机进行通信的桥接网络接口。\n\n### 容器的基本使用\n\n(1)查看容器的主机名[即该容器的 ID]\n\n`hostname`\n\n未完待续！\n","source":"_posts/docker-base.md","raw":"---\ntitle: 【Docker】入门使用\ndate: 2018-07-31 13:00:00\ntags:\n  - docker\ncategory:\n  - 【Docker相关】\n---\n\n在学习 Docker 的镜像源设置和安装配置后，开始学习 Docker 的基本使用，包括服务进程的管理，容器、镜像的基本使用和管理。\n\n<!--more-->\n\n## Docker 使用命令\n\n### 系统管理相关\n\n```bash\n# 查看docker运行状态\nsudo service docker status\nsudo systemctl docker status\n\n# 启动和停止docker\nsudo service docker start\nsudo systemctl docekr start\n\nsudo service sdocker stop\nsudo systemctl docekr stop\n```\n\n### Docker 运行\n\n(1)下载 Docker Hub 上的\"hello-world\"镜像[大小只有 1.85k]\n\n```bash\nsudo docker run hello-world\n```\n\n(2) 查看 docker 镜像\n\n```bash\ndocker images\n```\n\n(3) 查看 docker 容器\n\n```bash\n# 查看运行状态的container\ndocker ps\n\n# 查看所有的container\ndocker ps -a\n```\n\n(4)下载`ubuntu`镜像，创建容器，保持可写入操作，并以 bash 状态进入容器\n\n```bash\nsudo docker run -i -t ubuntu /bin/bash\n# [-i]: 保证容器中STDIN是开启的，持久的标准写入\n# [-t]: 为要创建的容器分配一个伪tty终端，使新创建的容器能够提供一个交互式shell\n# [ubuntu]: 使用的镜像名，如果不存在则下载Docker Hub上的镜像\n# [/bin/bash]: 让新建的容器运行/bin/bash命令\n```\n\n只有指定的/bin/bash 命令处于运行状态的时候，容器才处于运行状态，一旦 exit 退出容器，/bin/bash 命令也就结束了，这时容器也随之停止运行。\n但容器仍然是存在的。\n\nDocker 在文件系统内部用这个镜像创建了一个新容器，该容器拥有自己的网络、IP 地址，以及一个用来和宿主机进行通信的桥接网络接口。\n\n### 容器的基本使用\n\n(1)查看容器的主机名[即该容器的 ID]\n\n`hostname`\n\n未完待续！\n","slug":"docker-base","published":1,"updated":"2019-05-12T15:47:18.271Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c3yz000f2wuuze34ur7r","content":"<p>在学习 Docker 的镜像源设置和安装配置后，开始学习 Docker 的基本使用，包括服务进程的管理，容器、镜像的基本使用和管理。</p>\n<a id=\"more\"></a>\n<h2 id=\"docker-使用命令\"><a class=\"markdownIt-Anchor\" href=\"#docker-使用命令\"></a> Docker 使用命令</h2>\n<h3 id=\"系统管理相关\"><a class=\"markdownIt-Anchor\" href=\"#系统管理相关\"></a> 系统管理相关</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看docker运行状态</span></span><br><span class=\"line\">sudo service docker status</span><br><span class=\"line\">sudo systemctl docker status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动和停止docker</span></span><br><span class=\"line\">sudo service docker start</span><br><span class=\"line\">sudo systemctl docekr start</span><br><span class=\"line\"></span><br><span class=\"line\">sudo service sdocker stop</span><br><span class=\"line\">sudo systemctl docekr stop</span><br></pre></td></tr></table></figure>\n<h3 id=\"docker-运行\"><a class=\"markdownIt-Anchor\" href=\"#docker-运行\"></a> Docker 运行</h3>\n<p>(1)下载 Docker Hub 上的&quot;hello-world&quot;镜像[大小只有 1.85k]</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run hello-world</span><br></pre></td></tr></table></figure>\n<p>(2) 查看 docker 镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n<p>(3) 查看 docker 容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看运行状态的container</span></span><br><span class=\"line\">docker ps</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看所有的container</span></span><br><span class=\"line\">docker ps -a</span><br></pre></td></tr></table></figure>\n<p>(4)下载<code>ubuntu</code>镜像，创建容器，保持可写入操作，并以 bash 状态进入容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -i -t ubuntu /bin/bash</span><br><span class=\"line\"><span class=\"comment\"># [-i]: 保证容器中STDIN是开启的，持久的标准写入</span></span><br><span class=\"line\"><span class=\"comment\"># [-t]: 为要创建的容器分配一个伪tty终端，使新创建的容器能够提供一个交互式shell</span></span><br><span class=\"line\"><span class=\"comment\"># [ubuntu]: 使用的镜像名，如果不存在则下载Docker Hub上的镜像</span></span><br><span class=\"line\"><span class=\"comment\"># [/bin/bash]: 让新建的容器运行/bin/bash命令</span></span><br></pre></td></tr></table></figure>\n<p>只有指定的/bin/bash 命令处于运行状态的时候，容器才处于运行状态，一旦 exit 退出容器，/bin/bash 命令也就结束了，这时容器也随之停止运行。<br>\n但容器仍然是存在的。</p>\n<p>Docker 在文件系统内部用这个镜像创建了一个新容器，该容器拥有自己的网络、IP 地址，以及一个用来和宿主机进行通信的桥接网络接口。</p>\n<h3 id=\"容器的基本使用\"><a class=\"markdownIt-Anchor\" href=\"#容器的基本使用\"></a> 容器的基本使用</h3>\n<p>(1)查看容器的主机名[即该容器的 ID]</p>\n<p><code>hostname</code></p>\n<p>未完待续！</p>\n","site":{"data":{}},"excerpt":"<p>在学习 Docker 的镜像源设置和安装配置后，开始学习 Docker 的基本使用，包括服务进程的管理，容器、镜像的基本使用和管理。</p>","more":"<h2 id=\"docker-使用命令\"><a class=\"markdownIt-Anchor\" href=\"#docker-使用命令\"></a> Docker 使用命令</h2>\n<h3 id=\"系统管理相关\"><a class=\"markdownIt-Anchor\" href=\"#系统管理相关\"></a> 系统管理相关</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看docker运行状态</span></span><br><span class=\"line\">sudo service docker status</span><br><span class=\"line\">sudo systemctl docker status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动和停止docker</span></span><br><span class=\"line\">sudo service docker start</span><br><span class=\"line\">sudo systemctl docekr start</span><br><span class=\"line\"></span><br><span class=\"line\">sudo service sdocker stop</span><br><span class=\"line\">sudo systemctl docekr stop</span><br></pre></td></tr></table></figure>\n<h3 id=\"docker-运行\"><a class=\"markdownIt-Anchor\" href=\"#docker-运行\"></a> Docker 运行</h3>\n<p>(1)下载 Docker Hub 上的&quot;hello-world&quot;镜像[大小只有 1.85k]</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run hello-world</span><br></pre></td></tr></table></figure>\n<p>(2) 查看 docker 镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n<p>(3) 查看 docker 容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看运行状态的container</span></span><br><span class=\"line\">docker ps</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看所有的container</span></span><br><span class=\"line\">docker ps -a</span><br></pre></td></tr></table></figure>\n<p>(4)下载<code>ubuntu</code>镜像，创建容器，保持可写入操作，并以 bash 状态进入容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -i -t ubuntu /bin/bash</span><br><span class=\"line\"><span class=\"comment\"># [-i]: 保证容器中STDIN是开启的，持久的标准写入</span></span><br><span class=\"line\"><span class=\"comment\"># [-t]: 为要创建的容器分配一个伪tty终端，使新创建的容器能够提供一个交互式shell</span></span><br><span class=\"line\"><span class=\"comment\"># [ubuntu]: 使用的镜像名，如果不存在则下载Docker Hub上的镜像</span></span><br><span class=\"line\"><span class=\"comment\"># [/bin/bash]: 让新建的容器运行/bin/bash命令</span></span><br></pre></td></tr></table></figure>\n<p>只有指定的/bin/bash 命令处于运行状态的时候，容器才处于运行状态，一旦 exit 退出容器，/bin/bash 命令也就结束了，这时容器也随之停止运行。<br>\n但容器仍然是存在的。</p>\n<p>Docker 在文件系统内部用这个镜像创建了一个新容器，该容器拥有自己的网络、IP 地址，以及一个用来和宿主机进行通信的桥接网络接口。</p>\n<h3 id=\"容器的基本使用\"><a class=\"markdownIt-Anchor\" href=\"#容器的基本使用\"></a> 容器的基本使用</h3>\n<p>(1)查看容器的主机名[即该容器的 ID]</p>\n<p><code>hostname</code></p>\n<p>未完待续！</p>"},{"title":"【算法】PHP实现全排列","date":"2018-06-09T05:50:55.000Z","_content":"在购物网站中，商品的规格往往有多种，而不同规格的不同属性之间可以有不同的组合方式，而每一种组合方式都是以一个整体的形式存在，所以需要通过算法中的全排列，对不同规格下的属性进行全排列。\n\n<!--more-->\n\n## 一、需求介绍\n\n### 1.当前的规格形式（多种规格，且每种规格下都有多种子规格）\n\n```json\n[\n    {\n        \"attr_name\": \"颜色\",\n        \"value_name\": [\n            \"黄色\",\n            \"绿色\",\n            \"黑色\"\n        ]\n    },\n    {\n         \"attr_name\": \"尺码\",\n        \"value_name\": [\n            \"S\",\n            \"M\",\n            \"L\",\n            \"XL\"\n        ]\n    },\n        {\n        \"attr_name\": \"赠品\",\n        \"value_name\": [\n            \"苹果\",\n            \"香蕉\",\n            \"梨子\"\n        ]\n    }\n]\n```\n\n### 2.需要转换成的样式\n\n三种规格组合在一起决定了一个具体的商品。每一种规格属性都可能和其他规格下的属性值进行组合，所以共有`3*4*3=36`种可能。\n\n```json\n[\n    {\n        {\n            \"attr_name\": \"颜色\",\n            \"value_name\": \"黄色\"\n        },\n        {\n            \"attr_name\": \"尺码\",\n            \"value_name\": \"S\"\n        },\n        {\n            \"attr_name\": \"赠品\",\n            \"value_name\": \"苹果\"\n        }\n    },\n    {\n        {\n            \"attr_name\": \"颜色\",\n            \"value_name\": \"黄色\"\n        },\n        {\n            \"attr_name\": \"尺码\",\n            \"value_name\": \"S\"\n        },\n        {\n            \"attr_name\": \"赠品\",\n            \"value_name\": \"香蕉\"\n        }\n    },\n    {...}\n]\n```\n\n## 二、算法思想\n\n### 1.简单思路\n\n(1)先获取第一种规格的名称和其中一个属性值，再获取第一种规格的名称和其中一个属性值，组成数组，..., 以此类推，直到所有规格的最后一个属性值组成一个数组。\n\n(2)在例举的案例中，第一种规格有三个属性，第二种规格有四个属性，第三种规格有三个属性，即组合的可能情况为`3*4*3=36`种情况。\n\n(3)较为简单的理解方法是对所有规格进行循环，类似冒泡排序，但这种方法对规格少的情况可能实现较为方便，但是一旦规格多了，循环的层级规模将会很大，将大大影响性能。\n\n(4)可以考虑**栈**的数据结构和`while`循环实现。\n\n### 2.进一步延伸\n\n(1)php中栈的实现形式: `array_pop()`\n\n(2)\n\n## 三、代码实现\n\n### 1.功能函数介绍\n\n(1)array_pop() -- 弹出最后一个单元（出栈），并将数组的长度减一\n\n* 具体使用：`mixed array_pop ( array &$array )`\n\n弹出并返回 array 数组的最后一个单元，并将数组 array 的长度减一。\n\n> Note: 使用此函数后会重置（reset()）array 指针。\n\n* 返回值：返回 array 的最后一个值。如果 array 是空（如果不是一个数组），将会返回 NULL 。\n\n(2)array_merge()\n\n* 具体使用：`array array_merge ( array $array1 [, array $... ] )`\n\n将一个或多个数组的单元合并起来，一个数组中的值附加在前一个数组的后面。返回作为结果的数组。\n\n> Note:\n>* 如果输入的数组中有相同的字符串键名，则该键名后面的值将覆盖前一个值。然而，如果数组包含数字键名，后面的值将不会覆盖原来的值，而是附加到后面。\n>* 如果只给了一个数组并且该数组是数字索引的，则键名会以连续方式重新索引。\n\n* 返回值：返回合并后的数组。\n\n### 2.完整代码实现\n\n```php\nfunction goodsSpecPermutation($specs)\n{\n    // 获取第一个规格的信息\n    $spec = array_pop($specs);\n    $attr = $spec['attr_name'];\n    $valueArray = $spec['value_name'];\n\n    while ($specs) {\n        $mergeArray = array();\n\n        // 获取后一个规格的信息\n        $nextSpec = array_pop($specs);\n        $nextSpecAttrName = $nextSpec['attr_name'];\n        $nextValueArray = $nextSpec['value_name'];\n\n        if (!is_array($nextValueArray)) {\n            $nextValueArray = array($nextValueArray);\n        }\n        // 对后一个规格的`value_name`数组进行遍历\n        foreach ($nextValueArray as $k => $nextValue) {\n            // 组成一个规格-属性数组\n            $nextValueMergedSpec = array_merge(array('attr_name' => $nextSpecAttrName),\n                                                array('value_name' => $nextValue)\n                                            );\n            // 对第一个规格的`value_name`数组进行遍历\n            foreach ($valueArray as $key => $value) {\n                // 组成一个规格-属性数组\n                $valueMergedSpec = array_merge(array('attr_name' => $attr),\n                                    array('value_name' => $value)\n                                );\n                $mergeArray[] = array_merge(array($nextValueMergedSpec),\n                                    is_array($value) ? $value : array($valueMergedSpec)\n                                );\n            }\n        }\n        $valueArray = $mergeArray;\n    }\n\n    return $valueArray;\n}\n```\n\n### 3.代码分解\n\n(1)方法命名和参数确定\n\n```php\n/**\n * 商品规格排列组合\n * @param array  $specs\n * @return array $valueArray\n */\nfunction goodsSpecPermutation($specs){}\n```\n\n参数形式：\n\n```json\n[\n    {\n        \"attr_name\": \"颜色\",\n        \"value_name\": [\n            \"黄色\",\n            \"绿色\",\n            \"黑色\"\n        ]\n    },\n    {\n         \"attr_name\": \"尺码\",\n        \"value_name\": [\n            \"S\",\n            \"M\",\n            \"L\",\n            \"XL\"\n        ]\n    },\n        {\n        \"attr_name\": \"赠品\",\n        \"value_name\": [\n            \"苹果\",\n            \"香蕉\",\n            \"梨子\"\n        ]\n    }\n]\n```\n\n(2)获取第一个规格的信息\n\n```php\n$spec = array_pop($specs);         // {\"attr_name\": \"颜色\",\"value_name\": [\"黄色\", \"绿色\", \"黑色\", \"黑色\"]}\n$attrName = $spec['attr_name'];    // \"颜色\"\n$valueArray = $spec['value_name']; // [\"黄色\",\"绿色\",\"黑色\"]\n```\n\n> 执行出栈操作后，当前`$specs`的值为:\n\n```json\n    {\n         \"attr_name\": \"尺码\",\n        \"value_name\": [\n            \"S\",\n            \"M\",\n            \"L\",\n            \"XL\"\n        ]\n    },\n        {\n        \"attr_name\": \"赠品\",\n        \"value_name\": [\n            \"苹果\",\n            \"香蕉\",\n            \"梨子\"\n        ]\n    }\n```\n\n(3)获取下一个规格的信息\n\n```php\n$nextSpec = array_pop($specs); // {\"attr_name\": \"尺码\",\"value_name\": [\"S\", \"M\", \"L\", \"XL\"]}\n$nextSpecAttrName = $nextSpec['attr_name']; // \"尺码\"\n$nextValueArray = $nextSpec['value_name'];  // [\"S\",\"M\",\"L\",\"XL\"]\n```\n\n(4)遍历`$nextValueArray`，获取该规格下的一个属性值数组\n\n```php\nforeach ($nextValueArray as $k => $nextValue) { // $nextValue=\"S\"\n    $nextValueMergedSpec = array_merge(array('attr_name' => $nextSpecAttrName),\n                                array('value_name' => $nextValue)\n                            );\n/* $nextValueMergedSpec = [\n    \"attr_name\" => \"尺码\",\n    \"value_name\" => \"S\"\n]\n*/\n}\n```","source":"_posts/algorithm-permutation.md","raw":"---\ntitle: 【算法】PHP实现全排列\ndate: 2018-06-09 13:50:55\ntags:\n  - 算法\n  - 全排列\ncategory:\n  - 【算法】\n---\n在购物网站中，商品的规格往往有多种，而不同规格的不同属性之间可以有不同的组合方式，而每一种组合方式都是以一个整体的形式存在，所以需要通过算法中的全排列，对不同规格下的属性进行全排列。\n\n<!--more-->\n\n## 一、需求介绍\n\n### 1.当前的规格形式（多种规格，且每种规格下都有多种子规格）\n\n```json\n[\n    {\n        \"attr_name\": \"颜色\",\n        \"value_name\": [\n            \"黄色\",\n            \"绿色\",\n            \"黑色\"\n        ]\n    },\n    {\n         \"attr_name\": \"尺码\",\n        \"value_name\": [\n            \"S\",\n            \"M\",\n            \"L\",\n            \"XL\"\n        ]\n    },\n        {\n        \"attr_name\": \"赠品\",\n        \"value_name\": [\n            \"苹果\",\n            \"香蕉\",\n            \"梨子\"\n        ]\n    }\n]\n```\n\n### 2.需要转换成的样式\n\n三种规格组合在一起决定了一个具体的商品。每一种规格属性都可能和其他规格下的属性值进行组合，所以共有`3*4*3=36`种可能。\n\n```json\n[\n    {\n        {\n            \"attr_name\": \"颜色\",\n            \"value_name\": \"黄色\"\n        },\n        {\n            \"attr_name\": \"尺码\",\n            \"value_name\": \"S\"\n        },\n        {\n            \"attr_name\": \"赠品\",\n            \"value_name\": \"苹果\"\n        }\n    },\n    {\n        {\n            \"attr_name\": \"颜色\",\n            \"value_name\": \"黄色\"\n        },\n        {\n            \"attr_name\": \"尺码\",\n            \"value_name\": \"S\"\n        },\n        {\n            \"attr_name\": \"赠品\",\n            \"value_name\": \"香蕉\"\n        }\n    },\n    {...}\n]\n```\n\n## 二、算法思想\n\n### 1.简单思路\n\n(1)先获取第一种规格的名称和其中一个属性值，再获取第一种规格的名称和其中一个属性值，组成数组，..., 以此类推，直到所有规格的最后一个属性值组成一个数组。\n\n(2)在例举的案例中，第一种规格有三个属性，第二种规格有四个属性，第三种规格有三个属性，即组合的可能情况为`3*4*3=36`种情况。\n\n(3)较为简单的理解方法是对所有规格进行循环，类似冒泡排序，但这种方法对规格少的情况可能实现较为方便，但是一旦规格多了，循环的层级规模将会很大，将大大影响性能。\n\n(4)可以考虑**栈**的数据结构和`while`循环实现。\n\n### 2.进一步延伸\n\n(1)php中栈的实现形式: `array_pop()`\n\n(2)\n\n## 三、代码实现\n\n### 1.功能函数介绍\n\n(1)array_pop() -- 弹出最后一个单元（出栈），并将数组的长度减一\n\n* 具体使用：`mixed array_pop ( array &$array )`\n\n弹出并返回 array 数组的最后一个单元，并将数组 array 的长度减一。\n\n> Note: 使用此函数后会重置（reset()）array 指针。\n\n* 返回值：返回 array 的最后一个值。如果 array 是空（如果不是一个数组），将会返回 NULL 。\n\n(2)array_merge()\n\n* 具体使用：`array array_merge ( array $array1 [, array $... ] )`\n\n将一个或多个数组的单元合并起来，一个数组中的值附加在前一个数组的后面。返回作为结果的数组。\n\n> Note:\n>* 如果输入的数组中有相同的字符串键名，则该键名后面的值将覆盖前一个值。然而，如果数组包含数字键名，后面的值将不会覆盖原来的值，而是附加到后面。\n>* 如果只给了一个数组并且该数组是数字索引的，则键名会以连续方式重新索引。\n\n* 返回值：返回合并后的数组。\n\n### 2.完整代码实现\n\n```php\nfunction goodsSpecPermutation($specs)\n{\n    // 获取第一个规格的信息\n    $spec = array_pop($specs);\n    $attr = $spec['attr_name'];\n    $valueArray = $spec['value_name'];\n\n    while ($specs) {\n        $mergeArray = array();\n\n        // 获取后一个规格的信息\n        $nextSpec = array_pop($specs);\n        $nextSpecAttrName = $nextSpec['attr_name'];\n        $nextValueArray = $nextSpec['value_name'];\n\n        if (!is_array($nextValueArray)) {\n            $nextValueArray = array($nextValueArray);\n        }\n        // 对后一个规格的`value_name`数组进行遍历\n        foreach ($nextValueArray as $k => $nextValue) {\n            // 组成一个规格-属性数组\n            $nextValueMergedSpec = array_merge(array('attr_name' => $nextSpecAttrName),\n                                                array('value_name' => $nextValue)\n                                            );\n            // 对第一个规格的`value_name`数组进行遍历\n            foreach ($valueArray as $key => $value) {\n                // 组成一个规格-属性数组\n                $valueMergedSpec = array_merge(array('attr_name' => $attr),\n                                    array('value_name' => $value)\n                                );\n                $mergeArray[] = array_merge(array($nextValueMergedSpec),\n                                    is_array($value) ? $value : array($valueMergedSpec)\n                                );\n            }\n        }\n        $valueArray = $mergeArray;\n    }\n\n    return $valueArray;\n}\n```\n\n### 3.代码分解\n\n(1)方法命名和参数确定\n\n```php\n/**\n * 商品规格排列组合\n * @param array  $specs\n * @return array $valueArray\n */\nfunction goodsSpecPermutation($specs){}\n```\n\n参数形式：\n\n```json\n[\n    {\n        \"attr_name\": \"颜色\",\n        \"value_name\": [\n            \"黄色\",\n            \"绿色\",\n            \"黑色\"\n        ]\n    },\n    {\n         \"attr_name\": \"尺码\",\n        \"value_name\": [\n            \"S\",\n            \"M\",\n            \"L\",\n            \"XL\"\n        ]\n    },\n        {\n        \"attr_name\": \"赠品\",\n        \"value_name\": [\n            \"苹果\",\n            \"香蕉\",\n            \"梨子\"\n        ]\n    }\n]\n```\n\n(2)获取第一个规格的信息\n\n```php\n$spec = array_pop($specs);         // {\"attr_name\": \"颜色\",\"value_name\": [\"黄色\", \"绿色\", \"黑色\", \"黑色\"]}\n$attrName = $spec['attr_name'];    // \"颜色\"\n$valueArray = $spec['value_name']; // [\"黄色\",\"绿色\",\"黑色\"]\n```\n\n> 执行出栈操作后，当前`$specs`的值为:\n\n```json\n    {\n         \"attr_name\": \"尺码\",\n        \"value_name\": [\n            \"S\",\n            \"M\",\n            \"L\",\n            \"XL\"\n        ]\n    },\n        {\n        \"attr_name\": \"赠品\",\n        \"value_name\": [\n            \"苹果\",\n            \"香蕉\",\n            \"梨子\"\n        ]\n    }\n```\n\n(3)获取下一个规格的信息\n\n```php\n$nextSpec = array_pop($specs); // {\"attr_name\": \"尺码\",\"value_name\": [\"S\", \"M\", \"L\", \"XL\"]}\n$nextSpecAttrName = $nextSpec['attr_name']; // \"尺码\"\n$nextValueArray = $nextSpec['value_name'];  // [\"S\",\"M\",\"L\",\"XL\"]\n```\n\n(4)遍历`$nextValueArray`，获取该规格下的一个属性值数组\n\n```php\nforeach ($nextValueArray as $k => $nextValue) { // $nextValue=\"S\"\n    $nextValueMergedSpec = array_merge(array('attr_name' => $nextSpecAttrName),\n                                array('value_name' => $nextValue)\n                            );\n/* $nextValueMergedSpec = [\n    \"attr_name\" => \"尺码\",\n    \"value_name\" => \"S\"\n]\n*/\n}\n```","slug":"algorithm-permutation","published":1,"updated":"2019-05-12T15:54:50.728Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c3z5000h2wuu10dm9jv5","content":"<p>在购物网站中，商品的规格往往有多种，而不同规格的不同属性之间可以有不同的组合方式，而每一种组合方式都是以一个整体的形式存在，所以需要通过算法中的全排列，对不同规格下的属性进行全排列。</p>\n<a id=\"more\"></a>\n<h2 id=\"一-需求介绍\"><a class=\"markdownIt-Anchor\" href=\"#一-需求介绍\"></a> 一、需求介绍</h2>\n<h3 id=\"1当前的规格形式多种规格且每种规格下都有多种子规格\"><a class=\"markdownIt-Anchor\" href=\"#1当前的规格形式多种规格且每种规格下都有多种子规格\"></a> 1.当前的规格形式（多种规格，且每种规格下都有多种子规格）</h3>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"attr_name\"</span>: <span class=\"string\">\"颜色\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"value_name\"</span>: [</span><br><span class=\"line\">            <span class=\"string\">\"黄色\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"绿色\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"黑色\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">         <span class=\"attr\">\"attr_name\"</span>: <span class=\"string\">\"尺码\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"value_name\"</span>: [</span><br><span class=\"line\">            <span class=\"string\">\"S\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"M\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"L\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"XL\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"attr_name\"</span>: <span class=\"string\">\"赠品\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"value_name\"</span>: [</span><br><span class=\"line\">            <span class=\"string\">\"苹果\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"香蕉\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"梨子\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"2需要转换成的样式\"><a class=\"markdownIt-Anchor\" href=\"#2需要转换成的样式\"></a> 2.需要转换成的样式</h3>\n<p>三种规格组合在一起决定了一个具体的商品。每一种规格属性都可能和其他规格下的属性值进行组合，所以共有<code>3*4*3=36</code>种可能。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            \"attr_name\": \"颜色\",</span><br><span class=\"line\">            \"value_name\": \"黄色\"</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"attr_name\"</span>: <span class=\"string\">\"尺码\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"value_name\"</span>: <span class=\"string\">\"S\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"attr_name\"</span>: <span class=\"string\">\"赠品\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"value_name\"</span>: <span class=\"string\">\"苹果\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            \"attr_name\": \"颜色\",</span><br><span class=\"line\">            \"value_name\": \"黄色\"</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"attr_name\"</span>: <span class=\"string\">\"尺码\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"value_name\"</span>: <span class=\"string\">\"S\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"attr_name\"</span>: <span class=\"string\">\"赠品\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"value_name\"</span>: <span class=\"string\">\"香蕉\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;...&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h2 id=\"二-算法思想\"><a class=\"markdownIt-Anchor\" href=\"#二-算法思想\"></a> 二、算法思想</h2>\n<h3 id=\"1简单思路\"><a class=\"markdownIt-Anchor\" href=\"#1简单思路\"></a> 1.简单思路</h3>\n<p>(1)先获取第一种规格的名称和其中一个属性值，再获取第一种规格的名称和其中一个属性值，组成数组，…, 以此类推，直到所有规格的最后一个属性值组成一个数组。</p>\n<p>(2)在例举的案例中，第一种规格有三个属性，第二种规格有四个属性，第三种规格有三个属性，即组合的可能情况为<code>3*4*3=36</code>种情况。</p>\n<p>(3)较为简单的理解方法是对所有规格进行循环，类似冒泡排序，但这种方法对规格少的情况可能实现较为方便，但是一旦规格多了，循环的层级规模将会很大，将大大影响性能。</p>\n<p>(4)可以考虑<strong>栈</strong>的数据结构和<code>while</code>循环实现。</p>\n<h3 id=\"2进一步延伸\"><a class=\"markdownIt-Anchor\" href=\"#2进一步延伸\"></a> 2.进一步延伸</h3>\n<p>(1)php中栈的实现形式: <code>array_pop()</code></p>\n<p>(2)</p>\n<h2 id=\"三-代码实现\"><a class=\"markdownIt-Anchor\" href=\"#三-代码实现\"></a> 三、代码实现</h2>\n<h3 id=\"1功能函数介绍\"><a class=\"markdownIt-Anchor\" href=\"#1功能函数介绍\"></a> 1.功能函数介绍</h3>\n<p>(1)array_pop() – 弹出最后一个单元（出栈），并将数组的长度减一</p>\n<ul>\n<li>具体使用：<code>mixed array_pop ( array &amp;$array )</code></li>\n</ul>\n<p>弹出并返回 array 数组的最后一个单元，并将数组 array 的长度减一。</p>\n<blockquote>\n<p>Note: 使用此函数后会重置（reset()）array 指针。</p>\n</blockquote>\n<ul>\n<li>返回值：返回 array 的最后一个值。如果 array 是空（如果不是一个数组），将会返回 NULL 。</li>\n</ul>\n<p>(2)array_merge()</p>\n<ul>\n<li>具体使用：<code>array array_merge ( array $array1 [, array $... ] )</code></li>\n</ul>\n<p>将一个或多个数组的单元合并起来，一个数组中的值附加在前一个数组的后面。返回作为结果的数组。</p>\n<blockquote>\n<p>Note:</p>\n<ul>\n<li>如果输入的数组中有相同的字符串键名，则该键名后面的值将覆盖前一个值。然而，如果数组包含数字键名，后面的值将不会覆盖原来的值，而是附加到后面。</li>\n<li>如果只给了一个数组并且该数组是数字索引的，则键名会以连续方式重新索引。</li>\n</ul>\n</blockquote>\n<ul>\n<li>返回值：返回合并后的数组。</li>\n</ul>\n<h3 id=\"2完整代码实现\"><a class=\"markdownIt-Anchor\" href=\"#2完整代码实现\"></a> 2.完整代码实现</h3>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">goodsSpecPermutation</span><span class=\"params\">($specs)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取第一个规格的信息</span></span><br><span class=\"line\">    $spec = array_pop($specs);</span><br><span class=\"line\">    $attr = $spec[<span class=\"string\">'attr_name'</span>];</span><br><span class=\"line\">    $valueArray = $spec[<span class=\"string\">'value_name'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ($specs) &#123;</span><br><span class=\"line\">        $mergeArray = <span class=\"keyword\">array</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取后一个规格的信息</span></span><br><span class=\"line\">        $nextSpec = array_pop($specs);</span><br><span class=\"line\">        $nextSpecAttrName = $nextSpec[<span class=\"string\">'attr_name'</span>];</span><br><span class=\"line\">        $nextValueArray = $nextSpec[<span class=\"string\">'value_name'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!is_array($nextValueArray)) &#123;</span><br><span class=\"line\">            $nextValueArray = <span class=\"keyword\">array</span>($nextValueArray);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 对后一个规格的`value_name`数组进行遍历</span></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> ($nextValueArray <span class=\"keyword\">as</span> $k =&gt; $nextValue) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 组成一个规格-属性数组</span></span><br><span class=\"line\">            $nextValueMergedSpec = array_merge(<span class=\"keyword\">array</span>(<span class=\"string\">'attr_name'</span> =&gt; $nextSpecAttrName),</span><br><span class=\"line\">                                                <span class=\"keyword\">array</span>(<span class=\"string\">'value_name'</span> =&gt; $nextValue)</span><br><span class=\"line\">                                            );</span><br><span class=\"line\">            <span class=\"comment\">// 对第一个规格的`value_name`数组进行遍历</span></span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> ($valueArray <span class=\"keyword\">as</span> $key =&gt; $value) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 组成一个规格-属性数组</span></span><br><span class=\"line\">                $valueMergedSpec = array_merge(<span class=\"keyword\">array</span>(<span class=\"string\">'attr_name'</span> =&gt; $attr),</span><br><span class=\"line\">                                    <span class=\"keyword\">array</span>(<span class=\"string\">'value_name'</span> =&gt; $value)</span><br><span class=\"line\">                                );</span><br><span class=\"line\">                $mergeArray[] = array_merge(<span class=\"keyword\">array</span>($nextValueMergedSpec),</span><br><span class=\"line\">                                    is_array($value) ? $value : <span class=\"keyword\">array</span>($valueMergedSpec)</span><br><span class=\"line\">                                );</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $valueArray = $mergeArray;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $valueArray;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3代码分解\"><a class=\"markdownIt-Anchor\" href=\"#3代码分解\"></a> 3.代码分解</h3>\n<p>(1)方法命名和参数确定</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 商品规格排列组合</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> array  $specs</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> array $valueArray</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">goodsSpecPermutation</span><span class=\"params\">($specs)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>参数形式：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"attr_name\"</span>: <span class=\"string\">\"颜色\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"value_name\"</span>: [</span><br><span class=\"line\">            <span class=\"string\">\"黄色\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"绿色\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"黑色\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">         <span class=\"attr\">\"attr_name\"</span>: <span class=\"string\">\"尺码\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"value_name\"</span>: [</span><br><span class=\"line\">            <span class=\"string\">\"S\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"M\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"L\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"XL\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"attr_name\"</span>: <span class=\"string\">\"赠品\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"value_name\"</span>: [</span><br><span class=\"line\">            <span class=\"string\">\"苹果\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"香蕉\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"梨子\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>(2)获取第一个规格的信息</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$spec = array_pop($specs);         <span class=\"comment\">// &#123;\"attr_name\": \"颜色\",\"value_name\": [\"黄色\", \"绿色\", \"黑色\", \"黑色\"]&#125;</span></span><br><span class=\"line\">$attrName = $spec[<span class=\"string\">'attr_name'</span>];    <span class=\"comment\">// \"颜色\"</span></span><br><span class=\"line\">$valueArray = $spec[<span class=\"string\">'value_name'</span>]; <span class=\"comment\">// [\"黄色\",\"绿色\",\"黑色\"]</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>执行出栈操作后，当前<code>$specs</code>的值为:</p>\n</blockquote>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">     <span class=\"attr\">\"attr_name\"</span>: <span class=\"string\">\"尺码\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"value_name\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"S\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"M\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"L\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"XL\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"attr_name\"</span>: <span class=\"string\">\"赠品\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"value_name\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"苹果\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"香蕉\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"梨子\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(3)获取下一个规格的信息</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$nextSpec = array_pop($specs); <span class=\"comment\">// &#123;\"attr_name\": \"尺码\",\"value_name\": [\"S\", \"M\", \"L\", \"XL\"]&#125;</span></span><br><span class=\"line\">$nextSpecAttrName = $nextSpec[<span class=\"string\">'attr_name'</span>]; <span class=\"comment\">// \"尺码\"</span></span><br><span class=\"line\">$nextValueArray = $nextSpec[<span class=\"string\">'value_name'</span>];  <span class=\"comment\">// [\"S\",\"M\",\"L\",\"XL\"]</span></span><br></pre></td></tr></table></figure>\n<p>(4)遍历<code>$nextValueArray</code>，获取该规格下的一个属性值数组</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">foreach</span> ($nextValueArray <span class=\"keyword\">as</span> $k =&gt; $nextValue) &#123; <span class=\"comment\">// $nextValue=\"S\"</span></span><br><span class=\"line\">    $nextValueMergedSpec = array_merge(<span class=\"keyword\">array</span>(<span class=\"string\">'attr_name'</span> =&gt; $nextSpecAttrName),</span><br><span class=\"line\">                                <span class=\"keyword\">array</span>(<span class=\"string\">'value_name'</span> =&gt; $nextValue)</span><br><span class=\"line\">                            );</span><br><span class=\"line\"><span class=\"comment\">/* $nextValueMergedSpec = [</span></span><br><span class=\"line\"><span class=\"comment\">    \"attr_name\" =&gt; \"尺码\",</span></span><br><span class=\"line\"><span class=\"comment\">    \"value_name\" =&gt; \"S\"</span></span><br><span class=\"line\"><span class=\"comment\">]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>在购物网站中，商品的规格往往有多种，而不同规格的不同属性之间可以有不同的组合方式，而每一种组合方式都是以一个整体的形式存在，所以需要通过算法中的全排列，对不同规格下的属性进行全排列。</p>","more":"<h2 id=\"一-需求介绍\"><a class=\"markdownIt-Anchor\" href=\"#一-需求介绍\"></a> 一、需求介绍</h2>\n<h3 id=\"1当前的规格形式多种规格且每种规格下都有多种子规格\"><a class=\"markdownIt-Anchor\" href=\"#1当前的规格形式多种规格且每种规格下都有多种子规格\"></a> 1.当前的规格形式（多种规格，且每种规格下都有多种子规格）</h3>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"attr_name\"</span>: <span class=\"string\">\"颜色\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"value_name\"</span>: [</span><br><span class=\"line\">            <span class=\"string\">\"黄色\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"绿色\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"黑色\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">         <span class=\"attr\">\"attr_name\"</span>: <span class=\"string\">\"尺码\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"value_name\"</span>: [</span><br><span class=\"line\">            <span class=\"string\">\"S\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"M\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"L\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"XL\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"attr_name\"</span>: <span class=\"string\">\"赠品\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"value_name\"</span>: [</span><br><span class=\"line\">            <span class=\"string\">\"苹果\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"香蕉\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"梨子\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"2需要转换成的样式\"><a class=\"markdownIt-Anchor\" href=\"#2需要转换成的样式\"></a> 2.需要转换成的样式</h3>\n<p>三种规格组合在一起决定了一个具体的商品。每一种规格属性都可能和其他规格下的属性值进行组合，所以共有<code>3*4*3=36</code>种可能。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            \"attr_name\": \"颜色\",</span><br><span class=\"line\">            \"value_name\": \"黄色\"</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"attr_name\"</span>: <span class=\"string\">\"尺码\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"value_name\"</span>: <span class=\"string\">\"S\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"attr_name\"</span>: <span class=\"string\">\"赠品\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"value_name\"</span>: <span class=\"string\">\"苹果\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            \"attr_name\": \"颜色\",</span><br><span class=\"line\">            \"value_name\": \"黄色\"</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"attr_name\"</span>: <span class=\"string\">\"尺码\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"value_name\"</span>: <span class=\"string\">\"S\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"attr_name\"</span>: <span class=\"string\">\"赠品\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"value_name\"</span>: <span class=\"string\">\"香蕉\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;...&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h2 id=\"二-算法思想\"><a class=\"markdownIt-Anchor\" href=\"#二-算法思想\"></a> 二、算法思想</h2>\n<h3 id=\"1简单思路\"><a class=\"markdownIt-Anchor\" href=\"#1简单思路\"></a> 1.简单思路</h3>\n<p>(1)先获取第一种规格的名称和其中一个属性值，再获取第一种规格的名称和其中一个属性值，组成数组，…, 以此类推，直到所有规格的最后一个属性值组成一个数组。</p>\n<p>(2)在例举的案例中，第一种规格有三个属性，第二种规格有四个属性，第三种规格有三个属性，即组合的可能情况为<code>3*4*3=36</code>种情况。</p>\n<p>(3)较为简单的理解方法是对所有规格进行循环，类似冒泡排序，但这种方法对规格少的情况可能实现较为方便，但是一旦规格多了，循环的层级规模将会很大，将大大影响性能。</p>\n<p>(4)可以考虑<strong>栈</strong>的数据结构和<code>while</code>循环实现。</p>\n<h3 id=\"2进一步延伸\"><a class=\"markdownIt-Anchor\" href=\"#2进一步延伸\"></a> 2.进一步延伸</h3>\n<p>(1)php中栈的实现形式: <code>array_pop()</code></p>\n<p>(2)</p>\n<h2 id=\"三-代码实现\"><a class=\"markdownIt-Anchor\" href=\"#三-代码实现\"></a> 三、代码实现</h2>\n<h3 id=\"1功能函数介绍\"><a class=\"markdownIt-Anchor\" href=\"#1功能函数介绍\"></a> 1.功能函数介绍</h3>\n<p>(1)array_pop() – 弹出最后一个单元（出栈），并将数组的长度减一</p>\n<ul>\n<li>具体使用：<code>mixed array_pop ( array &amp;$array )</code></li>\n</ul>\n<p>弹出并返回 array 数组的最后一个单元，并将数组 array 的长度减一。</p>\n<blockquote>\n<p>Note: 使用此函数后会重置（reset()）array 指针。</p>\n</blockquote>\n<ul>\n<li>返回值：返回 array 的最后一个值。如果 array 是空（如果不是一个数组），将会返回 NULL 。</li>\n</ul>\n<p>(2)array_merge()</p>\n<ul>\n<li>具体使用：<code>array array_merge ( array $array1 [, array $... ] )</code></li>\n</ul>\n<p>将一个或多个数组的单元合并起来，一个数组中的值附加在前一个数组的后面。返回作为结果的数组。</p>\n<blockquote>\n<p>Note:</p>\n<ul>\n<li>如果输入的数组中有相同的字符串键名，则该键名后面的值将覆盖前一个值。然而，如果数组包含数字键名，后面的值将不会覆盖原来的值，而是附加到后面。</li>\n<li>如果只给了一个数组并且该数组是数字索引的，则键名会以连续方式重新索引。</li>\n</ul>\n</blockquote>\n<ul>\n<li>返回值：返回合并后的数组。</li>\n</ul>\n<h3 id=\"2完整代码实现\"><a class=\"markdownIt-Anchor\" href=\"#2完整代码实现\"></a> 2.完整代码实现</h3>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">goodsSpecPermutation</span><span class=\"params\">($specs)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取第一个规格的信息</span></span><br><span class=\"line\">    $spec = array_pop($specs);</span><br><span class=\"line\">    $attr = $spec[<span class=\"string\">'attr_name'</span>];</span><br><span class=\"line\">    $valueArray = $spec[<span class=\"string\">'value_name'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ($specs) &#123;</span><br><span class=\"line\">        $mergeArray = <span class=\"keyword\">array</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取后一个规格的信息</span></span><br><span class=\"line\">        $nextSpec = array_pop($specs);</span><br><span class=\"line\">        $nextSpecAttrName = $nextSpec[<span class=\"string\">'attr_name'</span>];</span><br><span class=\"line\">        $nextValueArray = $nextSpec[<span class=\"string\">'value_name'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!is_array($nextValueArray)) &#123;</span><br><span class=\"line\">            $nextValueArray = <span class=\"keyword\">array</span>($nextValueArray);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 对后一个规格的`value_name`数组进行遍历</span></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> ($nextValueArray <span class=\"keyword\">as</span> $k =&gt; $nextValue) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 组成一个规格-属性数组</span></span><br><span class=\"line\">            $nextValueMergedSpec = array_merge(<span class=\"keyword\">array</span>(<span class=\"string\">'attr_name'</span> =&gt; $nextSpecAttrName),</span><br><span class=\"line\">                                                <span class=\"keyword\">array</span>(<span class=\"string\">'value_name'</span> =&gt; $nextValue)</span><br><span class=\"line\">                                            );</span><br><span class=\"line\">            <span class=\"comment\">// 对第一个规格的`value_name`数组进行遍历</span></span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> ($valueArray <span class=\"keyword\">as</span> $key =&gt; $value) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 组成一个规格-属性数组</span></span><br><span class=\"line\">                $valueMergedSpec = array_merge(<span class=\"keyword\">array</span>(<span class=\"string\">'attr_name'</span> =&gt; $attr),</span><br><span class=\"line\">                                    <span class=\"keyword\">array</span>(<span class=\"string\">'value_name'</span> =&gt; $value)</span><br><span class=\"line\">                                );</span><br><span class=\"line\">                $mergeArray[] = array_merge(<span class=\"keyword\">array</span>($nextValueMergedSpec),</span><br><span class=\"line\">                                    is_array($value) ? $value : <span class=\"keyword\">array</span>($valueMergedSpec)</span><br><span class=\"line\">                                );</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $valueArray = $mergeArray;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $valueArray;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3代码分解\"><a class=\"markdownIt-Anchor\" href=\"#3代码分解\"></a> 3.代码分解</h3>\n<p>(1)方法命名和参数确定</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 商品规格排列组合</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> array  $specs</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> array $valueArray</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">goodsSpecPermutation</span><span class=\"params\">($specs)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>参数形式：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"attr_name\"</span>: <span class=\"string\">\"颜色\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"value_name\"</span>: [</span><br><span class=\"line\">            <span class=\"string\">\"黄色\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"绿色\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"黑色\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">         <span class=\"attr\">\"attr_name\"</span>: <span class=\"string\">\"尺码\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"value_name\"</span>: [</span><br><span class=\"line\">            <span class=\"string\">\"S\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"M\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"L\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"XL\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"attr_name\"</span>: <span class=\"string\">\"赠品\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"value_name\"</span>: [</span><br><span class=\"line\">            <span class=\"string\">\"苹果\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"香蕉\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"梨子\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>(2)获取第一个规格的信息</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$spec = array_pop($specs);         <span class=\"comment\">// &#123;\"attr_name\": \"颜色\",\"value_name\": [\"黄色\", \"绿色\", \"黑色\", \"黑色\"]&#125;</span></span><br><span class=\"line\">$attrName = $spec[<span class=\"string\">'attr_name'</span>];    <span class=\"comment\">// \"颜色\"</span></span><br><span class=\"line\">$valueArray = $spec[<span class=\"string\">'value_name'</span>]; <span class=\"comment\">// [\"黄色\",\"绿色\",\"黑色\"]</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>执行出栈操作后，当前<code>$specs</code>的值为:</p>\n</blockquote>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">     <span class=\"attr\">\"attr_name\"</span>: <span class=\"string\">\"尺码\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"value_name\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"S\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"M\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"L\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"XL\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"attr_name\"</span>: <span class=\"string\">\"赠品\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"value_name\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"苹果\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"香蕉\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"梨子\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(3)获取下一个规格的信息</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$nextSpec = array_pop($specs); <span class=\"comment\">// &#123;\"attr_name\": \"尺码\",\"value_name\": [\"S\", \"M\", \"L\", \"XL\"]&#125;</span></span><br><span class=\"line\">$nextSpecAttrName = $nextSpec[<span class=\"string\">'attr_name'</span>]; <span class=\"comment\">// \"尺码\"</span></span><br><span class=\"line\">$nextValueArray = $nextSpec[<span class=\"string\">'value_name'</span>];  <span class=\"comment\">// [\"S\",\"M\",\"L\",\"XL\"]</span></span><br></pre></td></tr></table></figure>\n<p>(4)遍历<code>$nextValueArray</code>，获取该规格下的一个属性值数组</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">foreach</span> ($nextValueArray <span class=\"keyword\">as</span> $k =&gt; $nextValue) &#123; <span class=\"comment\">// $nextValue=\"S\"</span></span><br><span class=\"line\">    $nextValueMergedSpec = array_merge(<span class=\"keyword\">array</span>(<span class=\"string\">'attr_name'</span> =&gt; $nextSpecAttrName),</span><br><span class=\"line\">                                <span class=\"keyword\">array</span>(<span class=\"string\">'value_name'</span> =&gt; $nextValue)</span><br><span class=\"line\">                            );</span><br><span class=\"line\"><span class=\"comment\">/* $nextValueMergedSpec = [</span></span><br><span class=\"line\"><span class=\"comment\">    \"attr_name\" =&gt; \"尺码\",</span></span><br><span class=\"line\"><span class=\"comment\">    \"value_name\" =&gt; \"S\"</span></span><br><span class=\"line\"><span class=\"comment\">]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"【Docker】安装与配置","date":"2018-07-31T03:00:00.000Z","_content":"\ndocker 是 linux 虚拟化技术，能够一键式搭建开发环境，并且能保证运维、开发、上线部署的环境完全一致，避免了运行环境差异性带来的问题。\n具有简单、轻量、快速、高效的特性。掌握 Docker 的安装和相关配置也是提升开发技能的重要途径。\n\n<!--more-->\n\n## Linux 安装[ubuntu/centos]\n\n### 安装前检查\n\n**Ubuntu > 12**\n\n(1).内核版本：[>=Linux 3.8]\n\n```bash\nuname -a\n```\n\n(2).存储驱动 Device Mapper[文件存在即已安装]\n\n```bash\nls -l /sys/class/misc/device-mapper\n\n# 如果不存在，加载dm_mod模块\nsudo modprobe dm_mod\n```\n\n(3).开启[cgroup](http://en.wikipedia.org/wiki/Cgroups)和命名空间(namespace)功能\n\n2.6.38 以后的内核都已经提供了良好的支持。\n\n(4).系统为 64 位[x86_64 和 amd64] 【目前不支持 32 位 CPU】\n\n### 安装方式\n\n（1）安装 Ubuntu/CentOS 维护的版本\n\n[ubuntu]\n\n```bash\n# 安装docker[ubuntu]\nsudo apt-get install -y docker.io\n\n# 配置docker\nsource /etc/bash_completion.d/docker.io\n```\n\n[centos]\n\n```bash\n# 安装docker[centos]\nsudo yum install -y docker\n```\n\n（2）安装 Docker 维护的版本\n\n```bash\n# 1.检查APT的HTTPS支持，查看/usr/lib/apt/methods/https文件是否存在，如果不存在，运行安装命令\napt-get update\napt-get install -y apt-transport-https\n\n# 2.添加Docker的apt仓库\necho deb https://get.docker.com/ubuntu docker main > /etc/apt/sources.list.d/docker.list\n\n# 3.添加仓库的key\napt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys {你的key}\n\n# 4.安装\napt-get update\napt-get install -y lxc-docker\n```\n\n（3）脚本安装：\n\n```bash\n# 查看系统是否安装curl\nwhereis curl\n\n# 安装curl命令\nsudo apt-get install -y curl   [ubuntu]\nsudo yum install -y curl    [centos]\n\n# 运行脚本 [获得当前最新稳定版docker]\ncurl -sSL https://get.docker.com/ubuntu/ | sudo sh\n```\n\n（4）查看 docker 版本信息\n\n```bash\n# 查看docker版本\nsudo docker version\n```\n\n当前版本信息：\n\n```bash\nClient:\n Version:         1.13.1\n API version:     1.26\n Package version: docker-1.13.1-68.gitdded712.el7.centos.x86_64\n Go version:      go1.9.4\n Git commit:      dded712/1.13.1\n Built:           Tue Jul 17 18:34:48 2018\n OS/Arch:         linux/amd64\n\nServer:\n Version:         1.13.1\n API version:     1.26 (minimum version 1.12)\n Package version: docker-1.13.1-68.gitdded712.el7.centos.x86_64\n Go version:      go1.9.4\n Git commit:      dded712/1.13.1\n Built:           Tue Jul 17 18:34:48 2018\n OS/Arch:         linux/amd64\n Experimental:    false\n```\n\n### 查看 docker 运行效果\n\n```bash\nsudo docker run ubuntu echo 'Hello World'\n```\n\n```info\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n    (amd64)\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker ID:\n https://hub.docker.com/\n\nFor more examples and ideas, visit:\n https://docs.docker.com/engine/userguide/\n```\n\n### 使用非 root 用户[为当前用户添加 docker 用户组]\n\n默认使用 docker 相关命令时，必须使用 root 权限，实际上可以创建 docker 用户组，从而简化 docker 使用操作，不用在所有的 docker 命令前使用`sudo`命名。\n\n```bash\n# 1.添加docker用户组\nsudo groupadd docker\n\n# 2.将当前用户添加到docker用户组\nsudo gpasswd -a ${USER} docker\n# 或\nsudo usermod -aG docker $USER\n\n# 3.重启docker服务\nsudo service docker restart\n```\n\n[注意，执行 gpasswd 命令之后需要注销后重新再登录才能生效]\n\n> 添加到 docker 用户组存在安全隐患，docker 用户组对 Docker 具有与 root 用户相同的权限，\n> 所以 docker 用户组中应该只能添加确实需要使用 Docker 的用户和程序\n\n### Docker 升级\n\n[ubuntu]\n\n```bash\nsudo apt-get update\nsudo apt-get install docker\n```\n\n[centos]\n\n```bash\nsudo yum update\nsudo yum install docker\n```\n\n## 安装 docker-compose\n\n### pip 安装\n\n```bash\nsudo pip install docker-compose\n```\n\n### 下载二进制文件安装\n\n【查看最新版版本号】:[docker/compose--github](https://github.com/docker/compose/releases)\n\n```bash\n# 下载最新版的docker-compose[版本号需要前往github确认是否为最新，1.22.0是目前的最新版2018/7/31]\nsudo curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose\n\n# 对docker-compose添加可执行权限\nsudo chmod +x /usr/local/bin/docker-compose\n\n# 查看版本信息\nsudo docker-compose -v\n```\n\n## Windows 安装\n\n### Docker 基本介绍\n\n- Linux 容器技术\n- 操作系统级别的虚拟化\n- 依赖于 Linux 内核的 Namespace 和 Cgroups\n\n### windows 下的 docker[Boot2Docker for windows|Docker ToolBox]\n\n- Boot2Docker Linux ISO | Docker ToolBox [为 docker 定制的虚拟机镜像，包含 docker 的运行环境]\n- Virtualbox [提供虚拟机服务的软件]\n- MSYS-git [提供 shell 运行环境]\n- 管理工具\n","source":"_posts/docker-install.md","raw":"---\ntitle: 【Docker】安装与配置\ndate: 2018-07-31 11:00:00\ntags:\n  - docker\ncategory:\n  - 【Docker相关】\n---\n\ndocker 是 linux 虚拟化技术，能够一键式搭建开发环境，并且能保证运维、开发、上线部署的环境完全一致，避免了运行环境差异性带来的问题。\n具有简单、轻量、快速、高效的特性。掌握 Docker 的安装和相关配置也是提升开发技能的重要途径。\n\n<!--more-->\n\n## Linux 安装[ubuntu/centos]\n\n### 安装前检查\n\n**Ubuntu > 12**\n\n(1).内核版本：[>=Linux 3.8]\n\n```bash\nuname -a\n```\n\n(2).存储驱动 Device Mapper[文件存在即已安装]\n\n```bash\nls -l /sys/class/misc/device-mapper\n\n# 如果不存在，加载dm_mod模块\nsudo modprobe dm_mod\n```\n\n(3).开启[cgroup](http://en.wikipedia.org/wiki/Cgroups)和命名空间(namespace)功能\n\n2.6.38 以后的内核都已经提供了良好的支持。\n\n(4).系统为 64 位[x86_64 和 amd64] 【目前不支持 32 位 CPU】\n\n### 安装方式\n\n（1）安装 Ubuntu/CentOS 维护的版本\n\n[ubuntu]\n\n```bash\n# 安装docker[ubuntu]\nsudo apt-get install -y docker.io\n\n# 配置docker\nsource /etc/bash_completion.d/docker.io\n```\n\n[centos]\n\n```bash\n# 安装docker[centos]\nsudo yum install -y docker\n```\n\n（2）安装 Docker 维护的版本\n\n```bash\n# 1.检查APT的HTTPS支持，查看/usr/lib/apt/methods/https文件是否存在，如果不存在，运行安装命令\napt-get update\napt-get install -y apt-transport-https\n\n# 2.添加Docker的apt仓库\necho deb https://get.docker.com/ubuntu docker main > /etc/apt/sources.list.d/docker.list\n\n# 3.添加仓库的key\napt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys {你的key}\n\n# 4.安装\napt-get update\napt-get install -y lxc-docker\n```\n\n（3）脚本安装：\n\n```bash\n# 查看系统是否安装curl\nwhereis curl\n\n# 安装curl命令\nsudo apt-get install -y curl   [ubuntu]\nsudo yum install -y curl    [centos]\n\n# 运行脚本 [获得当前最新稳定版docker]\ncurl -sSL https://get.docker.com/ubuntu/ | sudo sh\n```\n\n（4）查看 docker 版本信息\n\n```bash\n# 查看docker版本\nsudo docker version\n```\n\n当前版本信息：\n\n```bash\nClient:\n Version:         1.13.1\n API version:     1.26\n Package version: docker-1.13.1-68.gitdded712.el7.centos.x86_64\n Go version:      go1.9.4\n Git commit:      dded712/1.13.1\n Built:           Tue Jul 17 18:34:48 2018\n OS/Arch:         linux/amd64\n\nServer:\n Version:         1.13.1\n API version:     1.26 (minimum version 1.12)\n Package version: docker-1.13.1-68.gitdded712.el7.centos.x86_64\n Go version:      go1.9.4\n Git commit:      dded712/1.13.1\n Built:           Tue Jul 17 18:34:48 2018\n OS/Arch:         linux/amd64\n Experimental:    false\n```\n\n### 查看 docker 运行效果\n\n```bash\nsudo docker run ubuntu echo 'Hello World'\n```\n\n```info\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n    (amd64)\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker ID:\n https://hub.docker.com/\n\nFor more examples and ideas, visit:\n https://docs.docker.com/engine/userguide/\n```\n\n### 使用非 root 用户[为当前用户添加 docker 用户组]\n\n默认使用 docker 相关命令时，必须使用 root 权限，实际上可以创建 docker 用户组，从而简化 docker 使用操作，不用在所有的 docker 命令前使用`sudo`命名。\n\n```bash\n# 1.添加docker用户组\nsudo groupadd docker\n\n# 2.将当前用户添加到docker用户组\nsudo gpasswd -a ${USER} docker\n# 或\nsudo usermod -aG docker $USER\n\n# 3.重启docker服务\nsudo service docker restart\n```\n\n[注意，执行 gpasswd 命令之后需要注销后重新再登录才能生效]\n\n> 添加到 docker 用户组存在安全隐患，docker 用户组对 Docker 具有与 root 用户相同的权限，\n> 所以 docker 用户组中应该只能添加确实需要使用 Docker 的用户和程序\n\n### Docker 升级\n\n[ubuntu]\n\n```bash\nsudo apt-get update\nsudo apt-get install docker\n```\n\n[centos]\n\n```bash\nsudo yum update\nsudo yum install docker\n```\n\n## 安装 docker-compose\n\n### pip 安装\n\n```bash\nsudo pip install docker-compose\n```\n\n### 下载二进制文件安装\n\n【查看最新版版本号】:[docker/compose--github](https://github.com/docker/compose/releases)\n\n```bash\n# 下载最新版的docker-compose[版本号需要前往github确认是否为最新，1.22.0是目前的最新版2018/7/31]\nsudo curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose\n\n# 对docker-compose添加可执行权限\nsudo chmod +x /usr/local/bin/docker-compose\n\n# 查看版本信息\nsudo docker-compose -v\n```\n\n## Windows 安装\n\n### Docker 基本介绍\n\n- Linux 容器技术\n- 操作系统级别的虚拟化\n- 依赖于 Linux 内核的 Namespace 和 Cgroups\n\n### windows 下的 docker[Boot2Docker for windows|Docker ToolBox]\n\n- Boot2Docker Linux ISO | Docker ToolBox [为 docker 定制的虚拟机镜像，包含 docker 的运行环境]\n- Virtualbox [提供虚拟机服务的软件]\n- MSYS-git [提供 shell 运行环境]\n- 管理工具\n","slug":"docker-install","published":1,"updated":"2019-05-12T15:47:18.245Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c3z9000m2wuudwscxv0m","content":"<p>docker 是 linux 虚拟化技术，能够一键式搭建开发环境，并且能保证运维、开发、上线部署的环境完全一致，避免了运行环境差异性带来的问题。<br>\n具有简单、轻量、快速、高效的特性。掌握 Docker 的安装和相关配置也是提升开发技能的重要途径。</p>\n<a id=\"more\"></a>\n<h2 id=\"linux-安装ubuntucentos\"><a class=\"markdownIt-Anchor\" href=\"#linux-安装ubuntucentos\"></a> Linux 安装[ubuntu/centos]</h2>\n<h3 id=\"安装前检查\"><a class=\"markdownIt-Anchor\" href=\"#安装前检查\"></a> 安装前检查</h3>\n<p><strong>Ubuntu &gt; 12</strong></p>\n<p>(1).内核版本：[&gt;=Linux 3.8]</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname -a</span><br></pre></td></tr></table></figure>\n<p>(2).存储驱动 Device Mapper[文件存在即已安装]</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -l /sys/class/misc/device-mapper</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果不存在，加载dm_mod模块</span></span><br><span class=\"line\">sudo modprobe dm_mod</span><br></pre></td></tr></table></figure>\n<p>(3).开启<a href=\"http://en.wikipedia.org/wiki/Cgroups\" target=\"_blank\" rel=\"noopener\">cgroup</a>和命名空间(namespace)功能</p>\n<p>2.6.38 以后的内核都已经提供了良好的支持。</p>\n<p>(4).系统为 64 位[x86_64 和 amd64] 【目前不支持 32 位 CPU】</p>\n<h3 id=\"安装方式\"><a class=\"markdownIt-Anchor\" href=\"#安装方式\"></a> 安装方式</h3>\n<p>（1）安装 Ubuntu/CentOS 维护的版本</p>\n<p>[ubuntu]</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装docker[ubuntu]</span></span><br><span class=\"line\">sudo apt-get install -y docker.io</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置docker</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/bash_completion.d/docker.io</span><br></pre></td></tr></table></figure>\n<p>[centos]</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装docker[centos]</span></span><br><span class=\"line\">sudo yum install -y docker</span><br></pre></td></tr></table></figure>\n<p>（2）安装 Docker 维护的版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.检查APT的HTTPS支持，查看/usr/lib/apt/methods/https文件是否存在，如果不存在，运行安装命令</span></span><br><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install -y apt-transport-https</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.添加Docker的apt仓库</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> deb https://get.docker.com/ubuntu docker main &gt; /etc/apt/sources.list.d/docker.list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.添加仓库的key</span></span><br><span class=\"line\">apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys &#123;你的key&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.安装</span></span><br><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install -y lxc-docker</span><br></pre></td></tr></table></figure>\n<p>（3）脚本安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看系统是否安装curl</span></span><br><span class=\"line\">whereis curl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装curl命令</span></span><br><span class=\"line\">sudo apt-get install -y curl   [ubuntu]</span><br><span class=\"line\">sudo yum install -y curl    [centos]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行脚本 [获得当前最新稳定版docker]</span></span><br><span class=\"line\">curl -sSL https://get.docker.com/ubuntu/ | sudo sh</span><br></pre></td></tr></table></figure>\n<p>（4）查看 docker 版本信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看docker版本</span></span><br><span class=\"line\">sudo docker version</span><br></pre></td></tr></table></figure>\n<p>当前版本信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Client:</span><br><span class=\"line\"> Version:         1.13.1</span><br><span class=\"line\"> API version:     1.26</span><br><span class=\"line\"> Package version: docker-1.13.1-68.gitdded712.el7.centos.x86_64</span><br><span class=\"line\"> Go version:      go1.9.4</span><br><span class=\"line\"> Git commit:      dded712/1.13.1</span><br><span class=\"line\"> Built:           Tue Jul 17 18:34:48 2018</span><br><span class=\"line\"> OS/Arch:         linux/amd64</span><br><span class=\"line\"></span><br><span class=\"line\">Server:</span><br><span class=\"line\"> Version:         1.13.1</span><br><span class=\"line\"> API version:     1.26 (minimum version 1.12)</span><br><span class=\"line\"> Package version: docker-1.13.1-68.gitdded712.el7.centos.x86_64</span><br><span class=\"line\"> Go version:      go1.9.4</span><br><span class=\"line\"> Git commit:      dded712/1.13.1</span><br><span class=\"line\"> Built:           Tue Jul 17 18:34:48 2018</span><br><span class=\"line\"> OS/Arch:         linux/amd64</span><br><span class=\"line\"> Experimental:    <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"查看-docker-运行效果\"><a class=\"markdownIt-Anchor\" href=\"#查看-docker-运行效果\"></a> 查看 docker 运行效果</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run ubuntu <span class=\"built_in\">echo</span> <span class=\"string\">'Hello World'</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello from Docker!</span><br><span class=\"line\">This message shows that your installation appears to be working correctly.</span><br><span class=\"line\"></span><br><span class=\"line\">To generate this message, Docker took the following steps:</span><br><span class=\"line\"> 1. The Docker client contacted the Docker daemon.</span><br><span class=\"line\"> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.</span><br><span class=\"line\">    (amd64)</span><br><span class=\"line\"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class=\"line\">    executable that produces the output you are currently reading.</span><br><span class=\"line\"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class=\"line\">    to your terminal.</span><br><span class=\"line\"></span><br><span class=\"line\">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class=\"line\"> $ docker run -it ubuntu bash</span><br><span class=\"line\"></span><br><span class=\"line\">Share images, automate workflows, and more with a free Docker ID:</span><br><span class=\"line\"> https://hub.docker.com/</span><br><span class=\"line\"></span><br><span class=\"line\">For more examples and ideas, visit:</span><br><span class=\"line\"> https://docs.docker.com/engine/userguide/</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用非-root-用户为当前用户添加-docker-用户组\"><a class=\"markdownIt-Anchor\" href=\"#使用非-root-用户为当前用户添加-docker-用户组\"></a> 使用非 root 用户[为当前用户添加 docker 用户组]</h3>\n<p>默认使用 docker 相关命令时，必须使用 root 权限，实际上可以创建 docker 用户组，从而简化 docker 使用操作，不用在所有的 docker 命令前使用<code>sudo</code>命名。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.添加docker用户组</span></span><br><span class=\"line\">sudo groupadd docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.将当前用户添加到docker用户组</span></span><br><span class=\"line\">sudo gpasswd -a <span class=\"variable\">$&#123;USER&#125;</span> docker</span><br><span class=\"line\"><span class=\"comment\"># 或</span></span><br><span class=\"line\">sudo usermod -aG docker <span class=\"variable\">$USER</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.重启docker服务</span></span><br><span class=\"line\">sudo service docker restart</span><br></pre></td></tr></table></figure>\n<p>[注意，执行 gpasswd 命令之后需要注销后重新再登录才能生效]</p>\n<blockquote>\n<p>添加到 docker 用户组存在安全隐患，docker 用户组对 Docker 具有与 root 用户相同的权限，<br>\n所以 docker 用户组中应该只能添加确实需要使用 Docker 的用户和程序</p>\n</blockquote>\n<h3 id=\"docker-升级\"><a class=\"markdownIt-Anchor\" href=\"#docker-升级\"></a> Docker 升级</h3>\n<p>[ubuntu]</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install docker</span><br></pre></td></tr></table></figure>\n<p>[centos]</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum update</span><br><span class=\"line\">sudo yum install docker</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装-docker-compose\"><a class=\"markdownIt-Anchor\" href=\"#安装-docker-compose\"></a> 安装 docker-compose</h2>\n<h3 id=\"pip-安装\"><a class=\"markdownIt-Anchor\" href=\"#pip-安装\"></a> pip 安装</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip install docker-compose</span><br></pre></td></tr></table></figure>\n<h3 id=\"下载二进制文件安装\"><a class=\"markdownIt-Anchor\" href=\"#下载二进制文件安装\"></a> 下载二进制文件安装</h3>\n<p>【查看最新版版本号】:<a href=\"https://github.com/docker/compose/releases\" target=\"_blank\" rel=\"noopener\">docker/compose–github</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载最新版的docker-compose[版本号需要前往github确认是否为最新，1.22.0是目前的最新版2018/7/31]</span></span><br><span class=\"line\">sudo curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` -o /usr/<span class=\"built_in\">local</span>/bin/docker-compose</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对docker-compose添加可执行权限</span></span><br><span class=\"line\">sudo chmod +x /usr/<span class=\"built_in\">local</span>/bin/docker-compose</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看版本信息</span></span><br><span class=\"line\">sudo docker-compose -v</span><br></pre></td></tr></table></figure>\n<h2 id=\"windows-安装\"><a class=\"markdownIt-Anchor\" href=\"#windows-安装\"></a> Windows 安装</h2>\n<h3 id=\"docker-基本介绍\"><a class=\"markdownIt-Anchor\" href=\"#docker-基本介绍\"></a> Docker 基本介绍</h3>\n<ul>\n<li>Linux 容器技术</li>\n<li>操作系统级别的虚拟化</li>\n<li>依赖于 Linux 内核的 Namespace 和 Cgroups</li>\n</ul>\n<h3 id=\"windows-下的-dockerboot2docker-for-windowsdocker-toolbox\"><a class=\"markdownIt-Anchor\" href=\"#windows-下的-dockerboot2docker-for-windowsdocker-toolbox\"></a> windows 下的 docker[Boot2Docker for windows|Docker ToolBox]</h3>\n<ul>\n<li>Boot2Docker Linux ISO | Docker ToolBox [为 docker 定制的虚拟机镜像，包含 docker 的运行环境]</li>\n<li>Virtualbox [提供虚拟机服务的软件]</li>\n<li>MSYS-git [提供 shell 运行环境]</li>\n<li>管理工具</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>docker 是 linux 虚拟化技术，能够一键式搭建开发环境，并且能保证运维、开发、上线部署的环境完全一致，避免了运行环境差异性带来的问题。<br>\n具有简单、轻量、快速、高效的特性。掌握 Docker 的安装和相关配置也是提升开发技能的重要途径。</p>","more":"<h2 id=\"linux-安装ubuntucentos\"><a class=\"markdownIt-Anchor\" href=\"#linux-安装ubuntucentos\"></a> Linux 安装[ubuntu/centos]</h2>\n<h3 id=\"安装前检查\"><a class=\"markdownIt-Anchor\" href=\"#安装前检查\"></a> 安装前检查</h3>\n<p><strong>Ubuntu &gt; 12</strong></p>\n<p>(1).内核版本：[&gt;=Linux 3.8]</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname -a</span><br></pre></td></tr></table></figure>\n<p>(2).存储驱动 Device Mapper[文件存在即已安装]</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -l /sys/class/misc/device-mapper</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果不存在，加载dm_mod模块</span></span><br><span class=\"line\">sudo modprobe dm_mod</span><br></pre></td></tr></table></figure>\n<p>(3).开启<a href=\"http://en.wikipedia.org/wiki/Cgroups\" target=\"_blank\" rel=\"noopener\">cgroup</a>和命名空间(namespace)功能</p>\n<p>2.6.38 以后的内核都已经提供了良好的支持。</p>\n<p>(4).系统为 64 位[x86_64 和 amd64] 【目前不支持 32 位 CPU】</p>\n<h3 id=\"安装方式\"><a class=\"markdownIt-Anchor\" href=\"#安装方式\"></a> 安装方式</h3>\n<p>（1）安装 Ubuntu/CentOS 维护的版本</p>\n<p>[ubuntu]</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装docker[ubuntu]</span></span><br><span class=\"line\">sudo apt-get install -y docker.io</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置docker</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/bash_completion.d/docker.io</span><br></pre></td></tr></table></figure>\n<p>[centos]</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装docker[centos]</span></span><br><span class=\"line\">sudo yum install -y docker</span><br></pre></td></tr></table></figure>\n<p>（2）安装 Docker 维护的版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.检查APT的HTTPS支持，查看/usr/lib/apt/methods/https文件是否存在，如果不存在，运行安装命令</span></span><br><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install -y apt-transport-https</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.添加Docker的apt仓库</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> deb https://get.docker.com/ubuntu docker main &gt; /etc/apt/sources.list.d/docker.list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.添加仓库的key</span></span><br><span class=\"line\">apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys &#123;你的key&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.安装</span></span><br><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install -y lxc-docker</span><br></pre></td></tr></table></figure>\n<p>（3）脚本安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看系统是否安装curl</span></span><br><span class=\"line\">whereis curl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装curl命令</span></span><br><span class=\"line\">sudo apt-get install -y curl   [ubuntu]</span><br><span class=\"line\">sudo yum install -y curl    [centos]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行脚本 [获得当前最新稳定版docker]</span></span><br><span class=\"line\">curl -sSL https://get.docker.com/ubuntu/ | sudo sh</span><br></pre></td></tr></table></figure>\n<p>（4）查看 docker 版本信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看docker版本</span></span><br><span class=\"line\">sudo docker version</span><br></pre></td></tr></table></figure>\n<p>当前版本信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Client:</span><br><span class=\"line\"> Version:         1.13.1</span><br><span class=\"line\"> API version:     1.26</span><br><span class=\"line\"> Package version: docker-1.13.1-68.gitdded712.el7.centos.x86_64</span><br><span class=\"line\"> Go version:      go1.9.4</span><br><span class=\"line\"> Git commit:      dded712/1.13.1</span><br><span class=\"line\"> Built:           Tue Jul 17 18:34:48 2018</span><br><span class=\"line\"> OS/Arch:         linux/amd64</span><br><span class=\"line\"></span><br><span class=\"line\">Server:</span><br><span class=\"line\"> Version:         1.13.1</span><br><span class=\"line\"> API version:     1.26 (minimum version 1.12)</span><br><span class=\"line\"> Package version: docker-1.13.1-68.gitdded712.el7.centos.x86_64</span><br><span class=\"line\"> Go version:      go1.9.4</span><br><span class=\"line\"> Git commit:      dded712/1.13.1</span><br><span class=\"line\"> Built:           Tue Jul 17 18:34:48 2018</span><br><span class=\"line\"> OS/Arch:         linux/amd64</span><br><span class=\"line\"> Experimental:    <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"查看-docker-运行效果\"><a class=\"markdownIt-Anchor\" href=\"#查看-docker-运行效果\"></a> 查看 docker 运行效果</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run ubuntu <span class=\"built_in\">echo</span> <span class=\"string\">'Hello World'</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello from Docker!</span><br><span class=\"line\">This message shows that your installation appears to be working correctly.</span><br><span class=\"line\"></span><br><span class=\"line\">To generate this message, Docker took the following steps:</span><br><span class=\"line\"> 1. The Docker client contacted the Docker daemon.</span><br><span class=\"line\"> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.</span><br><span class=\"line\">    (amd64)</span><br><span class=\"line\"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class=\"line\">    executable that produces the output you are currently reading.</span><br><span class=\"line\"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class=\"line\">    to your terminal.</span><br><span class=\"line\"></span><br><span class=\"line\">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class=\"line\"> $ docker run -it ubuntu bash</span><br><span class=\"line\"></span><br><span class=\"line\">Share images, automate workflows, and more with a free Docker ID:</span><br><span class=\"line\"> https://hub.docker.com/</span><br><span class=\"line\"></span><br><span class=\"line\">For more examples and ideas, visit:</span><br><span class=\"line\"> https://docs.docker.com/engine/userguide/</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用非-root-用户为当前用户添加-docker-用户组\"><a class=\"markdownIt-Anchor\" href=\"#使用非-root-用户为当前用户添加-docker-用户组\"></a> 使用非 root 用户[为当前用户添加 docker 用户组]</h3>\n<p>默认使用 docker 相关命令时，必须使用 root 权限，实际上可以创建 docker 用户组，从而简化 docker 使用操作，不用在所有的 docker 命令前使用<code>sudo</code>命名。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.添加docker用户组</span></span><br><span class=\"line\">sudo groupadd docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.将当前用户添加到docker用户组</span></span><br><span class=\"line\">sudo gpasswd -a <span class=\"variable\">$&#123;USER&#125;</span> docker</span><br><span class=\"line\"><span class=\"comment\"># 或</span></span><br><span class=\"line\">sudo usermod -aG docker <span class=\"variable\">$USER</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.重启docker服务</span></span><br><span class=\"line\">sudo service docker restart</span><br></pre></td></tr></table></figure>\n<p>[注意，执行 gpasswd 命令之后需要注销后重新再登录才能生效]</p>\n<blockquote>\n<p>添加到 docker 用户组存在安全隐患，docker 用户组对 Docker 具有与 root 用户相同的权限，<br>\n所以 docker 用户组中应该只能添加确实需要使用 Docker 的用户和程序</p>\n</blockquote>\n<h3 id=\"docker-升级\"><a class=\"markdownIt-Anchor\" href=\"#docker-升级\"></a> Docker 升级</h3>\n<p>[ubuntu]</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install docker</span><br></pre></td></tr></table></figure>\n<p>[centos]</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum update</span><br><span class=\"line\">sudo yum install docker</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装-docker-compose\"><a class=\"markdownIt-Anchor\" href=\"#安装-docker-compose\"></a> 安装 docker-compose</h2>\n<h3 id=\"pip-安装\"><a class=\"markdownIt-Anchor\" href=\"#pip-安装\"></a> pip 安装</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip install docker-compose</span><br></pre></td></tr></table></figure>\n<h3 id=\"下载二进制文件安装\"><a class=\"markdownIt-Anchor\" href=\"#下载二进制文件安装\"></a> 下载二进制文件安装</h3>\n<p>【查看最新版版本号】:<a href=\"https://github.com/docker/compose/releases\" target=\"_blank\" rel=\"noopener\">docker/compose–github</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载最新版的docker-compose[版本号需要前往github确认是否为最新，1.22.0是目前的最新版2018/7/31]</span></span><br><span class=\"line\">sudo curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` -o /usr/<span class=\"built_in\">local</span>/bin/docker-compose</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对docker-compose添加可执行权限</span></span><br><span class=\"line\">sudo chmod +x /usr/<span class=\"built_in\">local</span>/bin/docker-compose</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看版本信息</span></span><br><span class=\"line\">sudo docker-compose -v</span><br></pre></td></tr></table></figure>\n<h2 id=\"windows-安装\"><a class=\"markdownIt-Anchor\" href=\"#windows-安装\"></a> Windows 安装</h2>\n<h3 id=\"docker-基本介绍\"><a class=\"markdownIt-Anchor\" href=\"#docker-基本介绍\"></a> Docker 基本介绍</h3>\n<ul>\n<li>Linux 容器技术</li>\n<li>操作系统级别的虚拟化</li>\n<li>依赖于 Linux 内核的 Namespace 和 Cgroups</li>\n</ul>\n<h3 id=\"windows-下的-dockerboot2docker-for-windowsdocker-toolbox\"><a class=\"markdownIt-Anchor\" href=\"#windows-下的-dockerboot2docker-for-windowsdocker-toolbox\"></a> windows 下的 docker[Boot2Docker for windows|Docker ToolBox]</h3>\n<ul>\n<li>Boot2Docker Linux ISO | Docker ToolBox [为 docker 定制的虚拟机镜像，包含 docker 的运行环境]</li>\n<li>Virtualbox [提供虚拟机服务的软件]</li>\n<li>MSYS-git [提供 shell 运行环境]</li>\n<li>管理工具</li>\n</ul>"},{"title":"【Docker】更新docker镜像源","date":"2018-07-31T02:00:00.000Z","_content":"\n使用 docker 拉取 Docker Hub 上镜像时，可能会由于网络限制，导致下载失败。可以将 docker 的镜像源设置为国内的镜像，\n目前支持的镜像源有[阿里云](https://cr.console.aliyun.com/cn-hangzhou/mirrors)和[docker 中文站](https://www.docker-cn.com)\n\n<!--more-->\n\n1.获取个人加速地址：\n\n[阿里云镜像加速器](https://cr.console.aliyun.com/cn-hangzhou/mirrors)\n\n2.配置镜像加速器\n\n> 针对 Docker 客户端版本大于 1.10.0 的用户\n\n修改 daemon 配置文件`/etc/docker/daemon.json`来使用加速器\n\n(1)创建`/etc/docker`目录(如果不存在的话)\n\n`sudo mkdir -p /etc/docker`\n\n(2)修改配置文件`/etc/docker/daemon.json`\n\n[阿里云]：\n\n```json\n// 文件位置: /etc/docker/daemon.json\n{\n  \"registry-mirrors\": [\"https://y0qd3iq.mirror.aliyuncs.com\"]\n}\n```\n\n[docker 中文站]：\n\n```json\n// 文件位置: /etc/docker/daemon.json\n{\n  \"registry-mirrors\": [\"https://registry.docker-cn.com\"]\n}\n```\n\n3.重载守护进程文件，重启 docker\n\n```bash\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```\n\n4.查看加速器是否生效\n\n```bash\n[root@txyun ~]# docker info\n\n...\nRegistry Mirrors:\n https://y0qd36iq.mirror.aliyuncs.com\n...\n```\n","source":"_posts/docker-mirrors.md","raw":"---\ntitle: 【Docker】更新docker镜像源\ndate: 2018-07-31 10:00:00\ntags:\n  - 镜像\ncategory:\n  - 【Docker相关】\n---\n\n使用 docker 拉取 Docker Hub 上镜像时，可能会由于网络限制，导致下载失败。可以将 docker 的镜像源设置为国内的镜像，\n目前支持的镜像源有[阿里云](https://cr.console.aliyun.com/cn-hangzhou/mirrors)和[docker 中文站](https://www.docker-cn.com)\n\n<!--more-->\n\n1.获取个人加速地址：\n\n[阿里云镜像加速器](https://cr.console.aliyun.com/cn-hangzhou/mirrors)\n\n2.配置镜像加速器\n\n> 针对 Docker 客户端版本大于 1.10.0 的用户\n\n修改 daemon 配置文件`/etc/docker/daemon.json`来使用加速器\n\n(1)创建`/etc/docker`目录(如果不存在的话)\n\n`sudo mkdir -p /etc/docker`\n\n(2)修改配置文件`/etc/docker/daemon.json`\n\n[阿里云]：\n\n```json\n// 文件位置: /etc/docker/daemon.json\n{\n  \"registry-mirrors\": [\"https://y0qd3iq.mirror.aliyuncs.com\"]\n}\n```\n\n[docker 中文站]：\n\n```json\n// 文件位置: /etc/docker/daemon.json\n{\n  \"registry-mirrors\": [\"https://registry.docker-cn.com\"]\n}\n```\n\n3.重载守护进程文件，重启 docker\n\n```bash\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```\n\n4.查看加速器是否生效\n\n```bash\n[root@txyun ~]# docker info\n\n...\nRegistry Mirrors:\n https://y0qd36iq.mirror.aliyuncs.com\n...\n```\n","slug":"docker-mirrors","published":1,"updated":"2019-05-12T15:47:18.192Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c3zb000o2wuuko6ui8ss","content":"<p>使用 docker 拉取 Docker Hub 上镜像时，可能会由于网络限制，导致下载失败。可以将 docker 的镜像源设置为国内的镜像，<br>\n目前支持的镜像源有<a href=\"https://cr.console.aliyun.com/cn-hangzhou/mirrors\" target=\"_blank\" rel=\"noopener\">阿里云</a>和<a href=\"https://www.docker-cn.com\" target=\"_blank\" rel=\"noopener\">docker 中文站</a></p>\n<a id=\"more\"></a>\n<p>1.获取个人加速地址：</p>\n<p><a href=\"https://cr.console.aliyun.com/cn-hangzhou/mirrors\" target=\"_blank\" rel=\"noopener\">阿里云镜像加速器</a></p>\n<p>2.配置镜像加速器</p>\n<blockquote>\n<p>针对 Docker 客户端版本大于 1.10.0 的用户</p>\n</blockquote>\n<p>修改 daemon 配置文件<code>/etc/docker/daemon.json</code>来使用加速器</p>\n<p>(1)创建<code>/etc/docker</code>目录(如果不存在的话)</p>\n<p><code>sudo mkdir -p /etc/docker</code></p>\n<p>(2)修改配置文件<code>/etc/docker/daemon.json</code></p>\n<p>[阿里云]：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 文件位置: /etc/docker/daemon.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"registry-mirrors\"</span>: [<span class=\"string\">\"https://y0qd3iq.mirror.aliyuncs.com\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>[docker 中文站]：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 文件位置: /etc/docker/daemon.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"registry-mirrors\"</span>: [<span class=\"string\">\"https://registry.docker-cn.com\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3.重载守护进程文件，重启 docker</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n<p>4.查看加速器是否生效</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@txyun ~]<span class=\"comment\"># docker info</span></span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">Registry Mirrors:</span><br><span class=\"line\"> https://y0qd36iq.mirror.aliyuncs.com</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>使用 docker 拉取 Docker Hub 上镜像时，可能会由于网络限制，导致下载失败。可以将 docker 的镜像源设置为国内的镜像，<br>\n目前支持的镜像源有<a href=\"https://cr.console.aliyun.com/cn-hangzhou/mirrors\" target=\"_blank\" rel=\"noopener\">阿里云</a>和<a href=\"https://www.docker-cn.com\" target=\"_blank\" rel=\"noopener\">docker 中文站</a></p>","more":"<p>1.获取个人加速地址：</p>\n<p><a href=\"https://cr.console.aliyun.com/cn-hangzhou/mirrors\" target=\"_blank\" rel=\"noopener\">阿里云镜像加速器</a></p>\n<p>2.配置镜像加速器</p>\n<blockquote>\n<p>针对 Docker 客户端版本大于 1.10.0 的用户</p>\n</blockquote>\n<p>修改 daemon 配置文件<code>/etc/docker/daemon.json</code>来使用加速器</p>\n<p>(1)创建<code>/etc/docker</code>目录(如果不存在的话)</p>\n<p><code>sudo mkdir -p /etc/docker</code></p>\n<p>(2)修改配置文件<code>/etc/docker/daemon.json</code></p>\n<p>[阿里云]：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 文件位置: /etc/docker/daemon.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"registry-mirrors\"</span>: [<span class=\"string\">\"https://y0qd3iq.mirror.aliyuncs.com\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>[docker 中文站]：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 文件位置: /etc/docker/daemon.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"registry-mirrors\"</span>: [<span class=\"string\">\"https://registry.docker-cn.com\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3.重载守护进程文件，重启 docker</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n<p>4.查看加速器是否生效</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@txyun ~]<span class=\"comment\"># docker info</span></span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">Registry Mirrors:</span><br><span class=\"line\"> https://y0qd36iq.mirror.aliyuncs.com</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>"},{"title":"【Git】修改已经提交的commit内容","date":"2018-08-13T09:39:15.000Z","_content":"\n通过 Git 进行版本管理时，对于已经提交但没有 push 的 message 信息，发现提交信息填写错误后，如何进行修改？\n对于已经 push 的 message 信息如何修改？通过`git rebase -i`进行分支管理，以及重新操作已经提交的分支信息[reword,edit,squash 等]。此次用到的主要是`reword`修改已经提交的`message`信息。\n\n<!--more-->\n\n## 修改已经 commit 但没有 push 的 commit message\n\n### 查看提交历史\n\n`git log --oneline -10`\n\n> `--onlien`的方式能够显示精简的日志信息\n\n显示的信息[当前分支为`zzz`]：\n\n```bash\n15af769 (HEAD -> zzz) 10-15 通过模型自动写入时间戳[补充order模型隐藏字段的设置]\n197fcdd 10-13 测试下14 测试下单接口, 修改程序错误\nfdeb6af 10-13 一对多关系的新增操作[完成下单接口方法]\nda0bd4e 10-13 订单创建[添加订单信息到order order_product表]\n5ab5068 10-11 订单快照的实现\n09c2116 10-10 订单快照的业务分析\n8493571 10-9 下单接口说明文档补充注释\n6edda7e (origin/develop) 下单接口业务模型\n60b8f01 10-7 编写一个复杂的验证器\n3e8375c 10-4|5|6 下单与支付流程 + 重构权限控制前置方法\n```\n\n发现提交的信息中：\n\n- `6edda7e`的信息中没有加标题序号\n\n- `da0bd4e`的信息中标题序号错误\n\n- `197fcdd`的信息中标题序号和内容有误\n\n### 通过`git rebase -i`编辑提交的历史\n\n> `git-rebase - Reapply commits on top of another base tip` [重新应用提交到另一个基础提示之上]\n\n在上面的日志中可以看到`6edda7e`为已经 push 的分支了，暂时不介绍这个，现在需要修改`da0bd4e`和 `197fcdd`两个提交的分支上的`message`内容。\n\n（1）编辑最久远的需要修改的分支的前一个分支上\n\n`git rebase -i 60b8f01`\n\n显示的内容：\n\n```bash\npick 6edda7e 下单接口业务模型\npick 8493571 10-9 下单接口说明文档补充注释\npick 09c2116 10-10 订单快照的业务分析\npick 5ab5068 10-11 订单快照的实现\npick da0bd4e 10-13 订单创建[添加订单信息到order order_product表]\npick fdeb6af 10-13 一对多关系的新增操作[完成下单接口方法]\npick 197fcdd 10-13 测试下14 测试下单接口, 修改程序错误\npick 15af769 10-15 通过模型自动写入时间戳[补充order模型隐藏字段的设置]\n```\n\n并且下方会提示修改建议：\n\n```bash\n# Commands:\n# p, pick <commit> = use commit\n# r, reword <commit> = use commit, but edit the commit message\n# e, edit <commit> = use commit, but stop for amending\n# s, squash <commit> = use commit, but meld into previous commit\n# f, fixup <commit> = like \"squash\", but discard this commit's log message\n# x, exec <command> = run command (the rest of the line) using shell\n# d, drop <commit> = remove commit\n# l, label <label> = label current HEAD with a name\n# t, reset <label> = reset HEAD to a label\n# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]\n```\n\n我们需要操作的是重新编辑已经提交的分支记录的 message 信息，所以对应的应该是`reword`,简写为`r`。\n\n（2）修改显示的内容，将`pick`修改为`reword` [保留提交的分支记录，但是编辑提交的信息]\n\n```bash\nr 6edda7e 下单接口业务模型\npick 8493571 10-9 下单接口说明文档补充注释\npick 09c2116 10-10 订单快照的业务分析\npick 5ab5068 10-11 订单快照的实现\nr da0bd4e 10-13 订单创建[添加订单信息到order order_product表]\npick fdeb6af 10-13 一对多关系的新增操作[完成下单接口方法]\nr 197fcdd 10-13 测试下14 测试下单接口, 修改程序错误\npick 15af769 10-15 通过模型自动写入时间戳[补充order模型隐藏字段的设置]\n```\n\n将需要修改的记录前的 `pick` 改为 `r`，然后`:wq`保存退出后，会**按顺序**自动进入需要编辑的提交信息框\n\n```bash\n下单接口业务模型\n\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n#\n# Date:      Wed Aug 8 20:08:03 2018 +0800\n```\n\n然后将第一行的提交信息修改为需要设置的信息，然后`:wq`保存退出，进入下一条需要编辑的提交记录。将全部需要修改的分支信息依次修改完成后，保存退出后会出现下面的信息，表示提交成功。\n\n```bash\n[detached HEAD 91d973f] 10-8|9 下单接口业务模型\nDate: Wed Aug 8 20:08:03 2018 +0800\n3 files changed, 252 insertions(+), 1 deletion(-)\ncreate mode 100644 application/api/service/Order.php\n[detached HEAD b007935] 10-12 订单创建[添加订单信息到order order_product表]\n4 files changed, 179 insertions(+), 23 deletions(-)\ncreate mode 100644 application/api/model/Order.php\ncreate mode 100644 application/api/model/OrderProduct.php\n[detached HEAD a5449fc] 10-14 测试下单接口, 修改程序错误\n4 files changed, 99 insertions(+), 7 deletions(-)\nSuccessfully rebased and updated refs/heads/develop.\n```\n\n再次执行`git log --oneline -10`命令后，即可看到分支的信息为修改后的提交信息\n\n## 修改已经 push 的 commmit message\n\n对于已经提交的信息的分支信息操作步骤同上，只是在推送`push`的时候需要加`--force`，强制覆盖远程分支上的提交信息。\n\n【声明】\n\n我的博客即将搬运同步至腾讯云+社区，邀请大家一同入驻：[https://cloud.tencent.com/developer/support-plan?invite_code=89fda9dsh3d0](https://cloud.tencent.com/developer/support-plan?invite_code=89fda9dsh3d0)","source":"_posts/git-modify-commit-message.md","raw":"---\ntitle: 【Git】修改已经提交的commit内容\ndate: 2018-08-13 17:39:15\ntags:\n  - git\ncategory:\n  - 【开发工具】\n---\n\n通过 Git 进行版本管理时，对于已经提交但没有 push 的 message 信息，发现提交信息填写错误后，如何进行修改？\n对于已经 push 的 message 信息如何修改？通过`git rebase -i`进行分支管理，以及重新操作已经提交的分支信息[reword,edit,squash 等]。此次用到的主要是`reword`修改已经提交的`message`信息。\n\n<!--more-->\n\n## 修改已经 commit 但没有 push 的 commit message\n\n### 查看提交历史\n\n`git log --oneline -10`\n\n> `--onlien`的方式能够显示精简的日志信息\n\n显示的信息[当前分支为`zzz`]：\n\n```bash\n15af769 (HEAD -> zzz) 10-15 通过模型自动写入时间戳[补充order模型隐藏字段的设置]\n197fcdd 10-13 测试下14 测试下单接口, 修改程序错误\nfdeb6af 10-13 一对多关系的新增操作[完成下单接口方法]\nda0bd4e 10-13 订单创建[添加订单信息到order order_product表]\n5ab5068 10-11 订单快照的实现\n09c2116 10-10 订单快照的业务分析\n8493571 10-9 下单接口说明文档补充注释\n6edda7e (origin/develop) 下单接口业务模型\n60b8f01 10-7 编写一个复杂的验证器\n3e8375c 10-4|5|6 下单与支付流程 + 重构权限控制前置方法\n```\n\n发现提交的信息中：\n\n- `6edda7e`的信息中没有加标题序号\n\n- `da0bd4e`的信息中标题序号错误\n\n- `197fcdd`的信息中标题序号和内容有误\n\n### 通过`git rebase -i`编辑提交的历史\n\n> `git-rebase - Reapply commits on top of another base tip` [重新应用提交到另一个基础提示之上]\n\n在上面的日志中可以看到`6edda7e`为已经 push 的分支了，暂时不介绍这个，现在需要修改`da0bd4e`和 `197fcdd`两个提交的分支上的`message`内容。\n\n（1）编辑最久远的需要修改的分支的前一个分支上\n\n`git rebase -i 60b8f01`\n\n显示的内容：\n\n```bash\npick 6edda7e 下单接口业务模型\npick 8493571 10-9 下单接口说明文档补充注释\npick 09c2116 10-10 订单快照的业务分析\npick 5ab5068 10-11 订单快照的实现\npick da0bd4e 10-13 订单创建[添加订单信息到order order_product表]\npick fdeb6af 10-13 一对多关系的新增操作[完成下单接口方法]\npick 197fcdd 10-13 测试下14 测试下单接口, 修改程序错误\npick 15af769 10-15 通过模型自动写入时间戳[补充order模型隐藏字段的设置]\n```\n\n并且下方会提示修改建议：\n\n```bash\n# Commands:\n# p, pick <commit> = use commit\n# r, reword <commit> = use commit, but edit the commit message\n# e, edit <commit> = use commit, but stop for amending\n# s, squash <commit> = use commit, but meld into previous commit\n# f, fixup <commit> = like \"squash\", but discard this commit's log message\n# x, exec <command> = run command (the rest of the line) using shell\n# d, drop <commit> = remove commit\n# l, label <label> = label current HEAD with a name\n# t, reset <label> = reset HEAD to a label\n# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]\n```\n\n我们需要操作的是重新编辑已经提交的分支记录的 message 信息，所以对应的应该是`reword`,简写为`r`。\n\n（2）修改显示的内容，将`pick`修改为`reword` [保留提交的分支记录，但是编辑提交的信息]\n\n```bash\nr 6edda7e 下单接口业务模型\npick 8493571 10-9 下单接口说明文档补充注释\npick 09c2116 10-10 订单快照的业务分析\npick 5ab5068 10-11 订单快照的实现\nr da0bd4e 10-13 订单创建[添加订单信息到order order_product表]\npick fdeb6af 10-13 一对多关系的新增操作[完成下单接口方法]\nr 197fcdd 10-13 测试下14 测试下单接口, 修改程序错误\npick 15af769 10-15 通过模型自动写入时间戳[补充order模型隐藏字段的设置]\n```\n\n将需要修改的记录前的 `pick` 改为 `r`，然后`:wq`保存退出后，会**按顺序**自动进入需要编辑的提交信息框\n\n```bash\n下单接口业务模型\n\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n#\n# Date:      Wed Aug 8 20:08:03 2018 +0800\n```\n\n然后将第一行的提交信息修改为需要设置的信息，然后`:wq`保存退出，进入下一条需要编辑的提交记录。将全部需要修改的分支信息依次修改完成后，保存退出后会出现下面的信息，表示提交成功。\n\n```bash\n[detached HEAD 91d973f] 10-8|9 下单接口业务模型\nDate: Wed Aug 8 20:08:03 2018 +0800\n3 files changed, 252 insertions(+), 1 deletion(-)\ncreate mode 100644 application/api/service/Order.php\n[detached HEAD b007935] 10-12 订单创建[添加订单信息到order order_product表]\n4 files changed, 179 insertions(+), 23 deletions(-)\ncreate mode 100644 application/api/model/Order.php\ncreate mode 100644 application/api/model/OrderProduct.php\n[detached HEAD a5449fc] 10-14 测试下单接口, 修改程序错误\n4 files changed, 99 insertions(+), 7 deletions(-)\nSuccessfully rebased and updated refs/heads/develop.\n```\n\n再次执行`git log --oneline -10`命令后，即可看到分支的信息为修改后的提交信息\n\n## 修改已经 push 的 commmit message\n\n对于已经提交的信息的分支信息操作步骤同上，只是在推送`push`的时候需要加`--force`，强制覆盖远程分支上的提交信息。\n\n【声明】\n\n我的博客即将搬运同步至腾讯云+社区，邀请大家一同入驻：[https://cloud.tencent.com/developer/support-plan?invite_code=89fda9dsh3d0](https://cloud.tencent.com/developer/support-plan?invite_code=89fda9dsh3d0)","slug":"git-modify-commit-message","published":1,"updated":"2019-05-12T15:47:18.192Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c3zf000s2wuul91uqj6m","content":"<p>通过 Git 进行版本管理时，对于已经提交但没有 push 的 message 信息，发现提交信息填写错误后，如何进行修改？<br>\n对于已经 push 的 message 信息如何修改？通过<code>git rebase -i</code>进行分支管理，以及重新操作已经提交的分支信息[reword,edit,squash 等]。此次用到的主要是<code>reword</code>修改已经提交的<code>message</code>信息。</p>\n<a id=\"more\"></a>\n<h2 id=\"修改已经-commit-但没有-push-的-commit-message\"><a class=\"markdownIt-Anchor\" href=\"#修改已经-commit-但没有-push-的-commit-message\"></a> 修改已经 commit 但没有 push 的 commit message</h2>\n<h3 id=\"查看提交历史\"><a class=\"markdownIt-Anchor\" href=\"#查看提交历史\"></a> 查看提交历史</h3>\n<p><code>git log --oneline -10</code></p>\n<blockquote>\n<p><code>--onlien</code>的方式能够显示精简的日志信息</p>\n</blockquote>\n<p>显示的信息[当前分支为<code>zzz</code>]：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">15af769 (HEAD -&gt; zzz) 10-15 通过模型自动写入时间戳[补充order模型隐藏字段的设置]</span><br><span class=\"line\">197fcdd 10-13 测试下14 测试下单接口, 修改程序错误</span><br><span class=\"line\">fdeb6af 10-13 一对多关系的新增操作[完成下单接口方法]</span><br><span class=\"line\">da0bd4e 10-13 订单创建[添加订单信息到order order_product表]</span><br><span class=\"line\">5ab5068 10-11 订单快照的实现</span><br><span class=\"line\">09c2116 10-10 订单快照的业务分析</span><br><span class=\"line\">8493571 10-9 下单接口说明文档补充注释</span><br><span class=\"line\">6edda7e (origin/develop) 下单接口业务模型</span><br><span class=\"line\">60b8f01 10-7 编写一个复杂的验证器</span><br><span class=\"line\">3e8375c 10-4|5|6 下单与支付流程 + 重构权限控制前置方法</span><br></pre></td></tr></table></figure>\n<p>发现提交的信息中：</p>\n<ul>\n<li>\n<p><code>6edda7e</code>的信息中没有加标题序号</p>\n</li>\n<li>\n<p><code>da0bd4e</code>的信息中标题序号错误</p>\n</li>\n<li>\n<p><code>197fcdd</code>的信息中标题序号和内容有误</p>\n</li>\n</ul>\n<h3 id=\"通过git-rebase-i编辑提交的历史\"><a class=\"markdownIt-Anchor\" href=\"#通过git-rebase-i编辑提交的历史\"></a> 通过<code>git rebase -i</code>编辑提交的历史</h3>\n<blockquote>\n<p><code>git-rebase - Reapply commits on top of another base tip</code> [重新应用提交到另一个基础提示之上]</p>\n</blockquote>\n<p>在上面的日志中可以看到<code>6edda7e</code>为已经 push 的分支了，暂时不介绍这个，现在需要修改<code>da0bd4e</code>和 <code>197fcdd</code>两个提交的分支上的<code>message</code>内容。</p>\n<p>（1）编辑最久远的需要修改的分支的前一个分支上</p>\n<p><code>git rebase -i 60b8f01</code></p>\n<p>显示的内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pick 6edda7e 下单接口业务模型</span><br><span class=\"line\">pick 8493571 10-9 下单接口说明文档补充注释</span><br><span class=\"line\">pick 09c2116 10-10 订单快照的业务分析</span><br><span class=\"line\">pick 5ab5068 10-11 订单快照的实现</span><br><span class=\"line\">pick da0bd4e 10-13 订单创建[添加订单信息到order order_product表]</span><br><span class=\"line\">pick fdeb6af 10-13 一对多关系的新增操作[完成下单接口方法]</span><br><span class=\"line\">pick 197fcdd 10-13 测试下14 测试下单接口, 修改程序错误</span><br><span class=\"line\">pick 15af769 10-15 通过模型自动写入时间戳[补充order模型隐藏字段的设置]</span><br></pre></td></tr></table></figure>\n<p>并且下方会提示修改建议：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Commands:</span></span><br><span class=\"line\"><span class=\"comment\"># p, pick &lt;commit&gt; = use commit</span></span><br><span class=\"line\"><span class=\"comment\"># r, reword &lt;commit&gt; = use commit, but edit the commit message</span></span><br><span class=\"line\"><span class=\"comment\"># e, edit &lt;commit&gt; = use commit, but stop for amending</span></span><br><span class=\"line\"><span class=\"comment\"># s, squash &lt;commit&gt; = use commit, but meld into previous commit</span></span><br><span class=\"line\"><span class=\"comment\"># f, fixup &lt;commit&gt; = like \"squash\", but discard this commit's log message</span></span><br><span class=\"line\"><span class=\"comment\"># x, exec &lt;command&gt; = run command (the rest of the line) using shell</span></span><br><span class=\"line\"><span class=\"comment\"># d, drop &lt;commit&gt; = remove commit</span></span><br><span class=\"line\"><span class=\"comment\"># l, label &lt;label&gt; = label current HEAD with a name</span></span><br><span class=\"line\"><span class=\"comment\"># t, reset &lt;label&gt; = reset HEAD to a label</span></span><br><span class=\"line\"><span class=\"comment\"># m, merge [-C &lt;commit&gt; | -c &lt;commit&gt;] &lt;label&gt; [# &lt;oneline&gt;]</span></span><br></pre></td></tr></table></figure>\n<p>我们需要操作的是重新编辑已经提交的分支记录的 message 信息，所以对应的应该是<code>reword</code>,简写为<code>r</code>。</p>\n<p>（2）修改显示的内容，将<code>pick</code>修改为<code>reword</code> [保留提交的分支记录，但是编辑提交的信息]</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r 6edda7e 下单接口业务模型</span><br><span class=\"line\">pick 8493571 10-9 下单接口说明文档补充注释</span><br><span class=\"line\">pick 09c2116 10-10 订单快照的业务分析</span><br><span class=\"line\">pick 5ab5068 10-11 订单快照的实现</span><br><span class=\"line\">r da0bd4e 10-13 订单创建[添加订单信息到order order_product表]</span><br><span class=\"line\">pick fdeb6af 10-13 一对多关系的新增操作[完成下单接口方法]</span><br><span class=\"line\">r 197fcdd 10-13 测试下14 测试下单接口, 修改程序错误</span><br><span class=\"line\">pick 15af769 10-15 通过模型自动写入时间戳[补充order模型隐藏字段的设置]</span><br></pre></td></tr></table></figure>\n<p>将需要修改的记录前的 <code>pick</code> 改为 <code>r</code>，然后<code>:wq</code>保存退出后，会<strong>按顺序</strong>自动进入需要编辑的提交信息框</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下单接口业务模型</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Please enter the commit message for your changes. Lines starting</span></span><br><span class=\"line\"><span class=\"comment\"># with '#' will be ignored, and an empty message aborts the commit.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Date:      Wed Aug 8 20:08:03 2018 +0800</span></span><br></pre></td></tr></table></figure>\n<p>然后将第一行的提交信息修改为需要设置的信息，然后<code>:wq</code>保存退出，进入下一条需要编辑的提交记录。将全部需要修改的分支信息依次修改完成后，保存退出后会出现下面的信息，表示提交成功。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[detached HEAD 91d973f] 10-8|9 下单接口业务模型</span><br><span class=\"line\">Date: Wed Aug 8 20:08:03 2018 +0800</span><br><span class=\"line\">3 files changed, 252 insertions(+), 1 deletion(-)</span><br><span class=\"line\">create mode 100644 application/api/service/Order.php</span><br><span class=\"line\">[detached HEAD b007935] 10-12 订单创建[添加订单信息到order order_product表]</span><br><span class=\"line\">4 files changed, 179 insertions(+), 23 deletions(-)</span><br><span class=\"line\">create mode 100644 application/api/model/Order.php</span><br><span class=\"line\">create mode 100644 application/api/model/OrderProduct.php</span><br><span class=\"line\">[detached HEAD a5449fc] 10-14 测试下单接口, 修改程序错误</span><br><span class=\"line\">4 files changed, 99 insertions(+), 7 deletions(-)</span><br><span class=\"line\">Successfully rebased and updated refs/heads/develop.</span><br></pre></td></tr></table></figure>\n<p>再次执行<code>git log --oneline -10</code>命令后，即可看到分支的信息为修改后的提交信息</p>\n<h2 id=\"修改已经-push-的-commmit-message\"><a class=\"markdownIt-Anchor\" href=\"#修改已经-push-的-commmit-message\"></a> 修改已经 push 的 commmit message</h2>\n<p>对于已经提交的信息的分支信息操作步骤同上，只是在推送<code>push</code>的时候需要加<code>--force</code>，强制覆盖远程分支上的提交信息。</p>\n<p>【声明】</p>\n<p>我的博客即将搬运同步至腾讯云+社区，邀请大家一同入驻：<a href=\"https://cloud.tencent.com/developer/support-plan?invite_code=89fda9dsh3d0\" target=\"_blank\" rel=\"noopener\">https://cloud.tencent.com/developer/support-plan?invite_code=89fda9dsh3d0</a></p>\n","site":{"data":{}},"excerpt":"<p>通过 Git 进行版本管理时，对于已经提交但没有 push 的 message 信息，发现提交信息填写错误后，如何进行修改？<br>\n对于已经 push 的 message 信息如何修改？通过<code>git rebase -i</code>进行分支管理，以及重新操作已经提交的分支信息[reword,edit,squash 等]。此次用到的主要是<code>reword</code>修改已经提交的<code>message</code>信息。</p>","more":"<h2 id=\"修改已经-commit-但没有-push-的-commit-message\"><a class=\"markdownIt-Anchor\" href=\"#修改已经-commit-但没有-push-的-commit-message\"></a> 修改已经 commit 但没有 push 的 commit message</h2>\n<h3 id=\"查看提交历史\"><a class=\"markdownIt-Anchor\" href=\"#查看提交历史\"></a> 查看提交历史</h3>\n<p><code>git log --oneline -10</code></p>\n<blockquote>\n<p><code>--onlien</code>的方式能够显示精简的日志信息</p>\n</blockquote>\n<p>显示的信息[当前分支为<code>zzz</code>]：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">15af769 (HEAD -&gt; zzz) 10-15 通过模型自动写入时间戳[补充order模型隐藏字段的设置]</span><br><span class=\"line\">197fcdd 10-13 测试下14 测试下单接口, 修改程序错误</span><br><span class=\"line\">fdeb6af 10-13 一对多关系的新增操作[完成下单接口方法]</span><br><span class=\"line\">da0bd4e 10-13 订单创建[添加订单信息到order order_product表]</span><br><span class=\"line\">5ab5068 10-11 订单快照的实现</span><br><span class=\"line\">09c2116 10-10 订单快照的业务分析</span><br><span class=\"line\">8493571 10-9 下单接口说明文档补充注释</span><br><span class=\"line\">6edda7e (origin/develop) 下单接口业务模型</span><br><span class=\"line\">60b8f01 10-7 编写一个复杂的验证器</span><br><span class=\"line\">3e8375c 10-4|5|6 下单与支付流程 + 重构权限控制前置方法</span><br></pre></td></tr></table></figure>\n<p>发现提交的信息中：</p>\n<ul>\n<li>\n<p><code>6edda7e</code>的信息中没有加标题序号</p>\n</li>\n<li>\n<p><code>da0bd4e</code>的信息中标题序号错误</p>\n</li>\n<li>\n<p><code>197fcdd</code>的信息中标题序号和内容有误</p>\n</li>\n</ul>\n<h3 id=\"通过git-rebase-i编辑提交的历史\"><a class=\"markdownIt-Anchor\" href=\"#通过git-rebase-i编辑提交的历史\"></a> 通过<code>git rebase -i</code>编辑提交的历史</h3>\n<blockquote>\n<p><code>git-rebase - Reapply commits on top of another base tip</code> [重新应用提交到另一个基础提示之上]</p>\n</blockquote>\n<p>在上面的日志中可以看到<code>6edda7e</code>为已经 push 的分支了，暂时不介绍这个，现在需要修改<code>da0bd4e</code>和 <code>197fcdd</code>两个提交的分支上的<code>message</code>内容。</p>\n<p>（1）编辑最久远的需要修改的分支的前一个分支上</p>\n<p><code>git rebase -i 60b8f01</code></p>\n<p>显示的内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pick 6edda7e 下单接口业务模型</span><br><span class=\"line\">pick 8493571 10-9 下单接口说明文档补充注释</span><br><span class=\"line\">pick 09c2116 10-10 订单快照的业务分析</span><br><span class=\"line\">pick 5ab5068 10-11 订单快照的实现</span><br><span class=\"line\">pick da0bd4e 10-13 订单创建[添加订单信息到order order_product表]</span><br><span class=\"line\">pick fdeb6af 10-13 一对多关系的新增操作[完成下单接口方法]</span><br><span class=\"line\">pick 197fcdd 10-13 测试下14 测试下单接口, 修改程序错误</span><br><span class=\"line\">pick 15af769 10-15 通过模型自动写入时间戳[补充order模型隐藏字段的设置]</span><br></pre></td></tr></table></figure>\n<p>并且下方会提示修改建议：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Commands:</span></span><br><span class=\"line\"><span class=\"comment\"># p, pick &lt;commit&gt; = use commit</span></span><br><span class=\"line\"><span class=\"comment\"># r, reword &lt;commit&gt; = use commit, but edit the commit message</span></span><br><span class=\"line\"><span class=\"comment\"># e, edit &lt;commit&gt; = use commit, but stop for amending</span></span><br><span class=\"line\"><span class=\"comment\"># s, squash &lt;commit&gt; = use commit, but meld into previous commit</span></span><br><span class=\"line\"><span class=\"comment\"># f, fixup &lt;commit&gt; = like \"squash\", but discard this commit's log message</span></span><br><span class=\"line\"><span class=\"comment\"># x, exec &lt;command&gt; = run command (the rest of the line) using shell</span></span><br><span class=\"line\"><span class=\"comment\"># d, drop &lt;commit&gt; = remove commit</span></span><br><span class=\"line\"><span class=\"comment\"># l, label &lt;label&gt; = label current HEAD with a name</span></span><br><span class=\"line\"><span class=\"comment\"># t, reset &lt;label&gt; = reset HEAD to a label</span></span><br><span class=\"line\"><span class=\"comment\"># m, merge [-C &lt;commit&gt; | -c &lt;commit&gt;] &lt;label&gt; [# &lt;oneline&gt;]</span></span><br></pre></td></tr></table></figure>\n<p>我们需要操作的是重新编辑已经提交的分支记录的 message 信息，所以对应的应该是<code>reword</code>,简写为<code>r</code>。</p>\n<p>（2）修改显示的内容，将<code>pick</code>修改为<code>reword</code> [保留提交的分支记录，但是编辑提交的信息]</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r 6edda7e 下单接口业务模型</span><br><span class=\"line\">pick 8493571 10-9 下单接口说明文档补充注释</span><br><span class=\"line\">pick 09c2116 10-10 订单快照的业务分析</span><br><span class=\"line\">pick 5ab5068 10-11 订单快照的实现</span><br><span class=\"line\">r da0bd4e 10-13 订单创建[添加订单信息到order order_product表]</span><br><span class=\"line\">pick fdeb6af 10-13 一对多关系的新增操作[完成下单接口方法]</span><br><span class=\"line\">r 197fcdd 10-13 测试下14 测试下单接口, 修改程序错误</span><br><span class=\"line\">pick 15af769 10-15 通过模型自动写入时间戳[补充order模型隐藏字段的设置]</span><br></pre></td></tr></table></figure>\n<p>将需要修改的记录前的 <code>pick</code> 改为 <code>r</code>，然后<code>:wq</code>保存退出后，会<strong>按顺序</strong>自动进入需要编辑的提交信息框</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下单接口业务模型</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Please enter the commit message for your changes. Lines starting</span></span><br><span class=\"line\"><span class=\"comment\"># with '#' will be ignored, and an empty message aborts the commit.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Date:      Wed Aug 8 20:08:03 2018 +0800</span></span><br></pre></td></tr></table></figure>\n<p>然后将第一行的提交信息修改为需要设置的信息，然后<code>:wq</code>保存退出，进入下一条需要编辑的提交记录。将全部需要修改的分支信息依次修改完成后，保存退出后会出现下面的信息，表示提交成功。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[detached HEAD 91d973f] 10-8|9 下单接口业务模型</span><br><span class=\"line\">Date: Wed Aug 8 20:08:03 2018 +0800</span><br><span class=\"line\">3 files changed, 252 insertions(+), 1 deletion(-)</span><br><span class=\"line\">create mode 100644 application/api/service/Order.php</span><br><span class=\"line\">[detached HEAD b007935] 10-12 订单创建[添加订单信息到order order_product表]</span><br><span class=\"line\">4 files changed, 179 insertions(+), 23 deletions(-)</span><br><span class=\"line\">create mode 100644 application/api/model/Order.php</span><br><span class=\"line\">create mode 100644 application/api/model/OrderProduct.php</span><br><span class=\"line\">[detached HEAD a5449fc] 10-14 测试下单接口, 修改程序错误</span><br><span class=\"line\">4 files changed, 99 insertions(+), 7 deletions(-)</span><br><span class=\"line\">Successfully rebased and updated refs/heads/develop.</span><br></pre></td></tr></table></figure>\n<p>再次执行<code>git log --oneline -10</code>命令后，即可看到分支的信息为修改后的提交信息</p>\n<h2 id=\"修改已经-push-的-commmit-message\"><a class=\"markdownIt-Anchor\" href=\"#修改已经-push-的-commmit-message\"></a> 修改已经 push 的 commmit message</h2>\n<p>对于已经提交的信息的分支信息操作步骤同上，只是在推送<code>push</code>的时候需要加<code>--force</code>，强制覆盖远程分支上的提交信息。</p>\n<p>【声明】</p>\n<p>我的博客即将搬运同步至腾讯云+社区，邀请大家一同入驻：<a href=\"https://cloud.tencent.com/developer/support-plan?invite_code=89fda9dsh3d0\" target=\"_blank\" rel=\"noopener\">https://cloud.tencent.com/developer/support-plan?invite_code=89fda9dsh3d0</a></p>"},{"title":"【Git】将现有项目提交到空仓库","date":"2018-04-16T05:57:50.000Z","_content":"\n如果想把本地的一个项目进行托管，应该如何操作？如何将本地的项目和远程的仓库进行连接管理？\n\n关键点：`git remote add origin 远程地址名`\n\n<!--more-->\n\n### 本地项目执行操作\n\n1.在本地项目目录下初始化 git 仓库\n\n`git init`\n\n2.将本地项目下工作区的所有文件添加到 git 版本库的暂存区中\n\n`git add .`\n\n（可以创建.gitignore 文件忽略不需要加入到版本库中的文件，或单独 git add {filename}将文件加入到版本库）\n\n3.将暂存区的文件进行提交到版本库\n\n`git commit -m '{描述}'`\n\n### 远程 github 执行操作\n\n创建一个仓库(仓库名任意)，并复制仓库地址`git@github.com:zqunor/lamp.git`\n\n### 设置本地项目版本库的远程仓库地址\n\n两种方式：\n\n(1)使用 ssh 方式：\n\n`git remote add origin git@github.com:zqunor/lamp.git`\n\n(2)使用 http 方式：\n\n`git remote add origin https://github.com/zqunor/lamp.git`\n\n> 区别: 是 ssh 方式当把本地的`ssh key`公钥放到 github 上后就可以直接使用 push 和 pull 等操作，而 http 方式需要手动输入 github 账号的用户名和密码，进行验证\n\n### 将本地版本库推送到 github 上\n\n`git push origin master`\n\n完成同步\n","source":"_posts/git-remote-add.md","raw":"---\ntitle: 【Git】将现有项目提交到空仓库\ndate: 2018-04-16 13:57:50\ntags:\n  - git\ncategory:\n  - 【开发工具】\n---\n\n如果想把本地的一个项目进行托管，应该如何操作？如何将本地的项目和远程的仓库进行连接管理？\n\n关键点：`git remote add origin 远程地址名`\n\n<!--more-->\n\n### 本地项目执行操作\n\n1.在本地项目目录下初始化 git 仓库\n\n`git init`\n\n2.将本地项目下工作区的所有文件添加到 git 版本库的暂存区中\n\n`git add .`\n\n（可以创建.gitignore 文件忽略不需要加入到版本库中的文件，或单独 git add {filename}将文件加入到版本库）\n\n3.将暂存区的文件进行提交到版本库\n\n`git commit -m '{描述}'`\n\n### 远程 github 执行操作\n\n创建一个仓库(仓库名任意)，并复制仓库地址`git@github.com:zqunor/lamp.git`\n\n### 设置本地项目版本库的远程仓库地址\n\n两种方式：\n\n(1)使用 ssh 方式：\n\n`git remote add origin git@github.com:zqunor/lamp.git`\n\n(2)使用 http 方式：\n\n`git remote add origin https://github.com/zqunor/lamp.git`\n\n> 区别: 是 ssh 方式当把本地的`ssh key`公钥放到 github 上后就可以直接使用 push 和 pull 等操作，而 http 方式需要手动输入 github 账号的用户名和密码，进行验证\n\n### 将本地版本库推送到 github 上\n\n`git push origin master`\n\n完成同步\n","slug":"git-remote-add","published":1,"updated":"2019-05-12T15:47:18.193Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c3zg000u2wuuj7g1v7ly","content":"<p>如果想把本地的一个项目进行托管，应该如何操作？如何将本地的项目和远程的仓库进行连接管理？</p>\n<p>关键点：<code>git remote add origin 远程地址名</code></p>\n<a id=\"more\"></a>\n<h3 id=\"本地项目执行操作\"><a class=\"markdownIt-Anchor\" href=\"#本地项目执行操作\"></a> 本地项目执行操作</h3>\n<p>1.在本地项目目录下初始化 git 仓库</p>\n<p><code>git init</code></p>\n<p>2.将本地项目下工作区的所有文件添加到 git 版本库的暂存区中</p>\n<p><code>git add .</code></p>\n<p>（可以创建.gitignore 文件忽略不需要加入到版本库中的文件，或单独 git add {filename}将文件加入到版本库）</p>\n<p>3.将暂存区的文件进行提交到版本库</p>\n<p><code>git commit -m '{描述}'</code></p>\n<h3 id=\"远程-github-执行操作\"><a class=\"markdownIt-Anchor\" href=\"#远程-github-执行操作\"></a> 远程 github 执行操作</h3>\n<p>创建一个仓库(仓库名任意)，并复制仓库地址<code>git@github.com:zqunor/lamp.git</code></p>\n<h3 id=\"设置本地项目版本库的远程仓库地址\"><a class=\"markdownIt-Anchor\" href=\"#设置本地项目版本库的远程仓库地址\"></a> 设置本地项目版本库的远程仓库地址</h3>\n<p>两种方式：</p>\n<p>(1)使用 ssh 方式：</p>\n<p><code>git remote add origin git@github.com:zqunor/lamp.git</code></p>\n<p>(2)使用 http 方式：</p>\n<p><code>git remote add origin https://github.com/zqunor/lamp.git</code></p>\n<blockquote>\n<p>区别: 是 ssh 方式当把本地的<code>ssh key</code>公钥放到 github 上后就可以直接使用 push 和 pull 等操作，而 http 方式需要手动输入 github 账号的用户名和密码，进行验证</p>\n</blockquote>\n<h3 id=\"将本地版本库推送到-github-上\"><a class=\"markdownIt-Anchor\" href=\"#将本地版本库推送到-github-上\"></a> 将本地版本库推送到 github 上</h3>\n<p><code>git push origin master</code></p>\n<p>完成同步</p>\n","site":{"data":{}},"excerpt":"<p>如果想把本地的一个项目进行托管，应该如何操作？如何将本地的项目和远程的仓库进行连接管理？</p>\n<p>关键点：<code>git remote add origin 远程地址名</code></p>","more":"<h3 id=\"本地项目执行操作\"><a class=\"markdownIt-Anchor\" href=\"#本地项目执行操作\"></a> 本地项目执行操作</h3>\n<p>1.在本地项目目录下初始化 git 仓库</p>\n<p><code>git init</code></p>\n<p>2.将本地项目下工作区的所有文件添加到 git 版本库的暂存区中</p>\n<p><code>git add .</code></p>\n<p>（可以创建.gitignore 文件忽略不需要加入到版本库中的文件，或单独 git add {filename}将文件加入到版本库）</p>\n<p>3.将暂存区的文件进行提交到版本库</p>\n<p><code>git commit -m '{描述}'</code></p>\n<h3 id=\"远程-github-执行操作\"><a class=\"markdownIt-Anchor\" href=\"#远程-github-执行操作\"></a> 远程 github 执行操作</h3>\n<p>创建一个仓库(仓库名任意)，并复制仓库地址<code>git@github.com:zqunor/lamp.git</code></p>\n<h3 id=\"设置本地项目版本库的远程仓库地址\"><a class=\"markdownIt-Anchor\" href=\"#设置本地项目版本库的远程仓库地址\"></a> 设置本地项目版本库的远程仓库地址</h3>\n<p>两种方式：</p>\n<p>(1)使用 ssh 方式：</p>\n<p><code>git remote add origin git@github.com:zqunor/lamp.git</code></p>\n<p>(2)使用 http 方式：</p>\n<p><code>git remote add origin https://github.com/zqunor/lamp.git</code></p>\n<blockquote>\n<p>区别: 是 ssh 方式当把本地的<code>ssh key</code>公钥放到 github 上后就可以直接使用 push 和 pull 等操作，而 http 方式需要手动输入 github 账号的用户名和密码，进行验证</p>\n</blockquote>\n<h3 id=\"将本地版本库推送到-github-上\"><a class=\"markdownIt-Anchor\" href=\"#将本地版本库推送到-github-上\"></a> 将本地版本库推送到 github 上</h3>\n<p><code>git push origin master</code></p>\n<p>完成同步</p>"},{"title":"【Git】使用Git和Github进行代码管理","date":"2018-04-16T05:47:52.000Z","_content":"\n使用 Git 进行代码版本管理是程序员项目记录和管理的重要途径，并且为便于多设备能够共享代码，进行远程管理是一个比较理想的方式，而 Github 作为全球最大的开源代码管理社区也是非常好的远程仓库选择，并且其提供静态博客域名和服务器，可以直接将仓库作为博客内容源，对于没有购置服务器却希望搭建个人博客的程序员是非常友好的。\n\n<!--more-->\n\n## 安装 Git\n\n官网下载地址：[下载](https://git-scm.com/downloads)\n\n学习教程:\n\n- 官方手册：[前往](https://git-scm.com/docs)\n\n- Pro Git: [查看](https://git-scm.com/book/zh/v2)\n\n## 生成 ssh 秘钥\n\n`ssh-keygen`\n\n中间出现提示进行设置 ssh 秘钥的存放地址，此处可直接回车，放到默认的存储位置`/c/Users/Administrator/.ssh/`\n\n![](https://images2018.cnblogs.com/blog/1049028/201803/1049028-20180318212746038-1187254415.png)\n\n## 查看公钥信息\n\n`cat /c/Users/Administrator/.ssh/id_rsa.pub`\n\n![](https://images2018.cnblogs.com/blog/1049028/201803/1049028-20180318213326726-1484496635.png)\n\n## 放到 github 网站上\n\n（设置秘钥入口：[传送门](https://github.com/settings/keys)）\n\n## 测试秘钥是否能够成功访问 github 网站\n\n`ssh -T git@github.com`\n中间需要手动输入进行确认\n\n![](https://images2018.cnblogs.com/blog/1049028/201803/1049028-20180318213631372-1010547178.png)\n\n【问题调整】：\n\n如果执行上述命令时，出现以下错误提示\n\n```bash\nHi username! You've successfully authenticated, but GitHub does not\nprovide shell access.\n```\n\n则需要再对 ssh 配置文件进行配置`~/.ssh/config` [.ssh 的目录以自己安装时设置的目录为准]\n\n```bash\nHost github.com\nHostname ssh.github.com\nPort 443\n```\n\n设置完成后再执行上述命令：\n\n```bash\n[root@VM_0_10_centos i2arch]# ssh -T git@github.com\nThe authenticity of host '[ssh.github.com]:443 ([192.xx.xx.123]:443)' can't be established.\nRSA key fingerprint is SHA256xxxxxxxxxxxxxxxxxxxxxxxxLviKw6E5SY8.\nRSA key fingerprint is MD5:1xxxxxxxxxxxxxxxxxxxxxxxxxxxxd:eb:df:a6:48.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added '[ssh.github.com]:443,[192.xx.xx.123]:443' (RSA) to the list of known hosts.\nHi zqunor! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n则证明已经可以使用 git 访问 github，后续即可直接进行项目管理\n\n## 参考资料：\n\n[Github Help](https://help.github.com/articles/using-ssh-over-the-https-port/)\n","source":"_posts/git.md","raw":"---\ntitle: 【Git】使用Git和Github进行代码管理\ndate: 2018-04-16 13:47:52\ntags:\n  - git\n  - github\ncategory:\n  - 【开发工具】\n---\n\n使用 Git 进行代码版本管理是程序员项目记录和管理的重要途径，并且为便于多设备能够共享代码，进行远程管理是一个比较理想的方式，而 Github 作为全球最大的开源代码管理社区也是非常好的远程仓库选择，并且其提供静态博客域名和服务器，可以直接将仓库作为博客内容源，对于没有购置服务器却希望搭建个人博客的程序员是非常友好的。\n\n<!--more-->\n\n## 安装 Git\n\n官网下载地址：[下载](https://git-scm.com/downloads)\n\n学习教程:\n\n- 官方手册：[前往](https://git-scm.com/docs)\n\n- Pro Git: [查看](https://git-scm.com/book/zh/v2)\n\n## 生成 ssh 秘钥\n\n`ssh-keygen`\n\n中间出现提示进行设置 ssh 秘钥的存放地址，此处可直接回车，放到默认的存储位置`/c/Users/Administrator/.ssh/`\n\n![](https://images2018.cnblogs.com/blog/1049028/201803/1049028-20180318212746038-1187254415.png)\n\n## 查看公钥信息\n\n`cat /c/Users/Administrator/.ssh/id_rsa.pub`\n\n![](https://images2018.cnblogs.com/blog/1049028/201803/1049028-20180318213326726-1484496635.png)\n\n## 放到 github 网站上\n\n（设置秘钥入口：[传送门](https://github.com/settings/keys)）\n\n## 测试秘钥是否能够成功访问 github 网站\n\n`ssh -T git@github.com`\n中间需要手动输入进行确认\n\n![](https://images2018.cnblogs.com/blog/1049028/201803/1049028-20180318213631372-1010547178.png)\n\n【问题调整】：\n\n如果执行上述命令时，出现以下错误提示\n\n```bash\nHi username! You've successfully authenticated, but GitHub does not\nprovide shell access.\n```\n\n则需要再对 ssh 配置文件进行配置`~/.ssh/config` [.ssh 的目录以自己安装时设置的目录为准]\n\n```bash\nHost github.com\nHostname ssh.github.com\nPort 443\n```\n\n设置完成后再执行上述命令：\n\n```bash\n[root@VM_0_10_centos i2arch]# ssh -T git@github.com\nThe authenticity of host '[ssh.github.com]:443 ([192.xx.xx.123]:443)' can't be established.\nRSA key fingerprint is SHA256xxxxxxxxxxxxxxxxxxxxxxxxLviKw6E5SY8.\nRSA key fingerprint is MD5:1xxxxxxxxxxxxxxxxxxxxxxxxxxxxd:eb:df:a6:48.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added '[ssh.github.com]:443,[192.xx.xx.123]:443' (RSA) to the list of known hosts.\nHi zqunor! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n则证明已经可以使用 git 访问 github，后续即可直接进行项目管理\n\n## 参考资料：\n\n[Github Help](https://help.github.com/articles/using-ssh-over-the-https-port/)\n","slug":"git","published":1,"updated":"2019-05-12T15:47:18.295Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c3zj000y2wuudwwv2gpk","content":"<p>使用 Git 进行代码版本管理是程序员项目记录和管理的重要途径，并且为便于多设备能够共享代码，进行远程管理是一个比较理想的方式，而 Github 作为全球最大的开源代码管理社区也是非常好的远程仓库选择，并且其提供静态博客域名和服务器，可以直接将仓库作为博客内容源，对于没有购置服务器却希望搭建个人博客的程序员是非常友好的。</p>\n<a id=\"more\"></a>\n<h2 id=\"安装-git\"><a class=\"markdownIt-Anchor\" href=\"#安装-git\"></a> 安装 Git</h2>\n<p>官网下载地址：<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">下载</a></p>\n<p>学习教程:</p>\n<ul>\n<li>\n<p>官方手册：<a href=\"https://git-scm.com/docs\" target=\"_blank\" rel=\"noopener\">前往</a></p>\n</li>\n<li>\n<p>Pro Git: <a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"noopener\">查看</a></p>\n</li>\n</ul>\n<h2 id=\"生成-ssh-秘钥\"><a class=\"markdownIt-Anchor\" href=\"#生成-ssh-秘钥\"></a> 生成 ssh 秘钥</h2>\n<p><code>ssh-keygen</code></p>\n<p>中间出现提示进行设置 ssh 秘钥的存放地址，此处可直接回车，放到默认的存储位置<code>/c/Users/Administrator/.ssh/</code></p>\n<p><img src=\"https://images2018.cnblogs.com/blog/1049028/201803/1049028-20180318212746038-1187254415.png\" alt=\"\"></p>\n<h2 id=\"查看公钥信息\"><a class=\"markdownIt-Anchor\" href=\"#查看公钥信息\"></a> 查看公钥信息</h2>\n<p><code>cat /c/Users/Administrator/.ssh/id_rsa.pub</code></p>\n<p><img src=\"https://images2018.cnblogs.com/blog/1049028/201803/1049028-20180318213326726-1484496635.png\" alt=\"\"></p>\n<h2 id=\"放到-github-网站上\"><a class=\"markdownIt-Anchor\" href=\"#放到-github-网站上\"></a> 放到 github 网站上</h2>\n<p>（设置秘钥入口：<a href=\"https://github.com/settings/keys\" target=\"_blank\" rel=\"noopener\">传送门</a>）</p>\n<h2 id=\"测试秘钥是否能够成功访问-github-网站\"><a class=\"markdownIt-Anchor\" href=\"#测试秘钥是否能够成功访问-github-网站\"></a> 测试秘钥是否能够成功访问 github 网站</h2>\n<p><code>ssh -T git@github.com</code><br>\n中间需要手动输入进行确认</p>\n<p><img src=\"https://images2018.cnblogs.com/blog/1049028/201803/1049028-20180318213631372-1010547178.png\" alt=\"\"></p>\n<p>【问题调整】：</p>\n<p>如果执行上述命令时，出现以下错误提示</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hi username! You<span class=\"string\">'ve successfully authenticated, but GitHub does not</span></span><br><span class=\"line\"><span class=\"string\">provide shell access.</span></span><br></pre></td></tr></table></figure>\n<p>则需要再对 ssh 配置文件进行配置<code>~/.ssh/config</code> [.ssh 的目录以自己安装时设置的目录为准]</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host github.com</span><br><span class=\"line\">Hostname ssh.github.com</span><br><span class=\"line\">Port 443</span><br></pre></td></tr></table></figure>\n<p>设置完成后再执行上述命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_0_10_centos i2arch]<span class=\"comment\"># ssh -T git@github.com</span></span><br><span class=\"line\">The authenticity of host <span class=\"string\">'[ssh.github.com]:443 ([192.xx.xx.123]:443)'</span> can<span class=\"string\">'t be established.</span></span><br><span class=\"line\"><span class=\"string\">RSA key fingerprint is SHA256xxxxxxxxxxxxxxxxxxxxxxxxLviKw6E5SY8.</span></span><br><span class=\"line\"><span class=\"string\">RSA key fingerprint is MD5:1xxxxxxxxxxxxxxxxxxxxxxxxxxxxd:eb:df:a6:48.</span></span><br><span class=\"line\"><span class=\"string\">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class=\"line\"><span class=\"string\">Warning: Permanently added '</span>[ssh.github.com]:443,[192.xx.xx.123]:443<span class=\"string\">' (RSA) to the list of known hosts.</span></span><br><span class=\"line\"><span class=\"string\">Hi zqunor! You'</span>ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>\n<p>则证明已经可以使用 git 访问 github，后续即可直接进行项目管理</p>\n<h2 id=\"参考资料\"><a class=\"markdownIt-Anchor\" href=\"#参考资料\"></a> 参考资料：</h2>\n<p><a href=\"https://help.github.com/articles/using-ssh-over-the-https-port/\" target=\"_blank\" rel=\"noopener\">Github Help</a></p>\n","site":{"data":{}},"excerpt":"<p>使用 Git 进行代码版本管理是程序员项目记录和管理的重要途径，并且为便于多设备能够共享代码，进行远程管理是一个比较理想的方式，而 Github 作为全球最大的开源代码管理社区也是非常好的远程仓库选择，并且其提供静态博客域名和服务器，可以直接将仓库作为博客内容源，对于没有购置服务器却希望搭建个人博客的程序员是非常友好的。</p>","more":"<h2 id=\"安装-git\"><a class=\"markdownIt-Anchor\" href=\"#安装-git\"></a> 安装 Git</h2>\n<p>官网下载地址：<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">下载</a></p>\n<p>学习教程:</p>\n<ul>\n<li>\n<p>官方手册：<a href=\"https://git-scm.com/docs\" target=\"_blank\" rel=\"noopener\">前往</a></p>\n</li>\n<li>\n<p>Pro Git: <a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"noopener\">查看</a></p>\n</li>\n</ul>\n<h2 id=\"生成-ssh-秘钥\"><a class=\"markdownIt-Anchor\" href=\"#生成-ssh-秘钥\"></a> 生成 ssh 秘钥</h2>\n<p><code>ssh-keygen</code></p>\n<p>中间出现提示进行设置 ssh 秘钥的存放地址，此处可直接回车，放到默认的存储位置<code>/c/Users/Administrator/.ssh/</code></p>\n<p><img src=\"https://images2018.cnblogs.com/blog/1049028/201803/1049028-20180318212746038-1187254415.png\" alt=\"\"></p>\n<h2 id=\"查看公钥信息\"><a class=\"markdownIt-Anchor\" href=\"#查看公钥信息\"></a> 查看公钥信息</h2>\n<p><code>cat /c/Users/Administrator/.ssh/id_rsa.pub</code></p>\n<p><img src=\"https://images2018.cnblogs.com/blog/1049028/201803/1049028-20180318213326726-1484496635.png\" alt=\"\"></p>\n<h2 id=\"放到-github-网站上\"><a class=\"markdownIt-Anchor\" href=\"#放到-github-网站上\"></a> 放到 github 网站上</h2>\n<p>（设置秘钥入口：<a href=\"https://github.com/settings/keys\" target=\"_blank\" rel=\"noopener\">传送门</a>）</p>\n<h2 id=\"测试秘钥是否能够成功访问-github-网站\"><a class=\"markdownIt-Anchor\" href=\"#测试秘钥是否能够成功访问-github-网站\"></a> 测试秘钥是否能够成功访问 github 网站</h2>\n<p><code>ssh -T git@github.com</code><br>\n中间需要手动输入进行确认</p>\n<p><img src=\"https://images2018.cnblogs.com/blog/1049028/201803/1049028-20180318213631372-1010547178.png\" alt=\"\"></p>\n<p>【问题调整】：</p>\n<p>如果执行上述命令时，出现以下错误提示</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hi username! You<span class=\"string\">'ve successfully authenticated, but GitHub does not</span></span><br><span class=\"line\"><span class=\"string\">provide shell access.</span></span><br></pre></td></tr></table></figure>\n<p>则需要再对 ssh 配置文件进行配置<code>~/.ssh/config</code> [.ssh 的目录以自己安装时设置的目录为准]</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host github.com</span><br><span class=\"line\">Hostname ssh.github.com</span><br><span class=\"line\">Port 443</span><br></pre></td></tr></table></figure>\n<p>设置完成后再执行上述命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_0_10_centos i2arch]<span class=\"comment\"># ssh -T git@github.com</span></span><br><span class=\"line\">The authenticity of host <span class=\"string\">'[ssh.github.com]:443 ([192.xx.xx.123]:443)'</span> can<span class=\"string\">'t be established.</span></span><br><span class=\"line\"><span class=\"string\">RSA key fingerprint is SHA256xxxxxxxxxxxxxxxxxxxxxxxxLviKw6E5SY8.</span></span><br><span class=\"line\"><span class=\"string\">RSA key fingerprint is MD5:1xxxxxxxxxxxxxxxxxxxxxxxxxxxxd:eb:df:a6:48.</span></span><br><span class=\"line\"><span class=\"string\">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class=\"line\"><span class=\"string\">Warning: Permanently added '</span>[ssh.github.com]:443,[192.xx.xx.123]:443<span class=\"string\">' (RSA) to the list of known hosts.</span></span><br><span class=\"line\"><span class=\"string\">Hi zqunor! You'</span>ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>\n<p>则证明已经可以使用 git 访问 github，后续即可直接进行项目管理</p>\n<h2 id=\"参考资料\"><a class=\"markdownIt-Anchor\" href=\"#参考资料\"></a> 参考资料：</h2>\n<p><a href=\"https://help.github.com/articles/using-ssh-over-the-https-port/\" target=\"_blank\" rel=\"noopener\">Github Help</a></p>"},{"title":"【HTTP】第三方登录OAuth2.0","date":"2018-07-05T04:00:00.000Z","_content":"\n对于网站应用程序，涉及到登录和第三方 api 接口时，都会接触到 Token 等概念，而这部分的逻辑原理则是来自于 OAuth 授权协议，\n目前的 OAuth2.0 协议的安全性也是被广泛认可，到目前为止尚且没有发生严重的安全事故。学习 OAuth2.0 协议的工作原理，并了解 qq 登录的流程和实现方式。\n\n<!--more-->\n\n## OAuth2.0 协议工作原理\n\n![](http://ww1.sinaimg.cn/large/005EgYNMgy1fsvhp6rqkvj30wz0g0wld.jpg)\n\n### 步骤一：请求 OAuth 登录页\n\nRequest Token URL - 未授权的令牌请求服务地址[慕课网请求 QQ 登录页面时使用的带有特定参数的 URL](client_id,redirect_uri)\n\n### 步骤二：用户使用第三方账号登录并授权\n\n身份认证通过后，会跳转到第一步的 redirect_uri，并携带 code 参数\n\n### 步骤三：返回登录结果\n\nUser Authorization URL - 用户授权的令牌请求服务地址[用户 QQ 登录授权之后需要请求的一个带有特定参数的 URL](client_id,client_secret,code)\ncode 有生命周期且只可使用一次的字符串\n\nAccessToken - 用户通过第三方应用访问 OAuth 接口的令牌[通过慕课网把自己喜欢的课程分享到 QQ 空间]\nRefresh Token\n\n### AccessToken 和 RefreshToken 数据传输原理\n\n[imooc]带有 AccessToken 参数的特定 URL=>[post]=>[QQ]open Authorization API=>[xml/json]=>[imooc]带有 AccessToken 参数的特定 URL\n\n### AccessToken 和 RefreshToken 生命周期解析\n\nAccessToken - 具有较长生命周期(10 天半个月甚至更长)\nUser Authorization URL 中指定参数 RefreshToken 进行重新获取 AccessToken\n\n## QQ 登录\n\n### 1.接入 QQ 开放平台的前置条件\n\n- qq 号\n- 公网可访问的 web 服务器\n\n- 关于域名备案\n\n![](http://ww1.sinaimg.cn/large/005EgYNMgy1fsvhwnt4zqj30ye0fqdnz.jpg)\n\n(腾讯的用于域名验证，拿到 appid 等信息)\n\n- 关于服务器运行环境\n\n### 2.申请 AppID 和 AppKey\n\n[QQ 互联](https://connect.qq.com)\n\n网站地址[需要在该页面下的 index.html 文件中嵌入一行代码，然后进行验证]\n回调地址[可以填写多个，英文半角分号;间隔，加 http(s)://头]\n\n[每次修改配置后都需要重新验证网站地址]\n\n### 3.添加测试回调地址\n\neg. http://test.open.mypro.com/callback.php\n\n### 4.引入官方 SDK\n\n[下载](http://wiki.connect.qq.com/sdk%E4%B8%8B%E8%BD%BD)\n\n### 5.SDK 参数配置\n\n- appid\n- appkey\n- callback\n- 请求授权列表\n\n        get_user_info add_share list_album add_album ...\n\n  [请求的权限会在授权登录页面显示需要请求的信息列表]\n\n- 是否开通调试\n\n### 6.SDK 解读\n\n- 文档资料 -> oauth 开发指引 -> 开发功率\\_server-side\n\n- Server-side or Client-side\n\n核心类和重要方法(Connectx.x/class/\\*.class.php)\n\n- Recorder.class.php[配置读写与 SESSION 存取]\n\n  - \\_\\_construct()\n    - 读入配置文件 json 串：$incFileContents = file(ROOT.\"comm/inc.php\")\n    - $incFileContents = $incFileContents[1];\n    - 解析成 php 对象：$this->inc = json_decode($incFileContents);\n  - readInc($name)\n    - return $this->inc->$name;\n    - //->readInc('appid') 既读取配置文件的 appid\n\n- URL.class.php[基于 CURL 库的 get 与 post 请求]\n  - combineURL($baseURL, $keysArr)\n    - 拼接：$combined = $baseURL.\"?\";\n    - 拼接参数: foreach($keysArr as $key=>$val) $valueArr[] = \"$key=$val\";\n    - 使用&拼接参数键值对：$keyStr = implode(\"&\", $valueArr);\n    - 生成形如http://xxx.com?a=b&c=d...的链接\n  - get($url,$keysArr) 发送 get 请求\n  - post($url,$keysArr,$flag = 0) 发送 post 请求\n- Oauth.class.php[Oauth 相关 URL 动态拼接与 token 操作]\n  - qq_login() 拼接 QQ 登录页面 URL\n    - 读取 appid: $appid = $this->recoder->readInc(\"appid\");\n    - 读取回调地: $callback = $this->recoder->readInc(\"callback\");\n    - 读取授权列表：$this->recorder->readInc(\"scope\");\n    - 生成唯一随机串防 CSRF 攻击\n    - 原样返回参数：md5(uniqid(rand(), TRUE));\n    - state 写入 session 中：$this->recorder->write('state',$state);\n      =》拼接之后得到https://graph.qq.com/oauth2.0/authorize?response_type=code&client_id=[APPID]&redirect_uri=[REDIRECT_URI]&scope=[SCOPE]&state=[STATE]\n    - 跳转到生成的 url: header(\"Location:$login_url\");\n  - qq_callback() QQ 登录完成后的回调处理\n\n### 7.SDK 优化\n\n- SDK 太老，很久无人维护\n  - 调整文件及目录结构\n- SDK 中的常量名太常见，可能和现有项目冲突\n  - 批量替换 SDK 中常量名称为不常见名称\n\n### 8.整合 SDK 到 Web 项目中--请求访问 QQ 登录页面\n\n```php\n$oauth = new Oauth();\n$oauth->qq_login();\n```\n\n### 9.整合 SDK 到 Web 项目中--获取 code 和 AccessToken\n\n- 回调地址：http://test.open.mypro.com/callback.php\n\n- 拿到返回的`code`，并请求 AccessToken\n\n```php\n$oauth = new Oauth();\n$accessToken = $oauth->qq_callback();\n```\n\n### 9.整合 SDK 到 Web 项目中--获取 openID\n\n(1) 关于 openId\n\n- QQ 用户在第三方站点的唯一标识\n- 同一个 QQ 用户在不同站点使用 QQ 登录 openId 始终一样\n\n```php\n$openid = $oauth->get_openid();\n```\n\n(2)存储`accesstoken`和`openid`到`cookie`中\n\n```php\n// 有效期时长可以读取session中的相应信息的有效期 [手动设置时需要将该时长小于实际有效期]\nsetcookie('qq_accesstoken', $accesstoken, time()+86400);\nsetcookie('qq_openid', $openid, time()+86400);\n```\n\n### 10.API 调用示例\n\n#### 调用`get_user_info`接口，获取用户信息\n\n(1)回调成功后，跳转到`index.php`文件\n\n```php\nheader('Location: index.php');\n```\n\n(2)判断当前登录状态[通过 cookie]\n\n- 未登录\n\n  - 进行登录 [获取 AccessToken，获取 openid]\n\n- 已经登录\n  - 调用接口，获取信息\n\n```php\n$qc = new QC($_COOKIE['qq_accesstoken'], $_COOKIE['qq_openid']);\n$userInfo = $qc->get_user_info();\n```\n\n### 平台政策与注意事项\n\n- APPID 申请之后 3 个月未申请上线将被回收\n\n- 申请上线需要使用官网提供的 QQ 登录按钮素材\n\n- 遵守国家法律法规, 拒绝黄赌毒\n","source":"_posts/http-ouath.md","raw":"---\ntitle: 【HTTP】第三方登录OAuth2.0\ndate: 2018-07-5 12:00:00\ntags:\n  - oauth\ncategory:\n  - 【HTTP相关】\n---\n\n对于网站应用程序，涉及到登录和第三方 api 接口时，都会接触到 Token 等概念，而这部分的逻辑原理则是来自于 OAuth 授权协议，\n目前的 OAuth2.0 协议的安全性也是被广泛认可，到目前为止尚且没有发生严重的安全事故。学习 OAuth2.0 协议的工作原理，并了解 qq 登录的流程和实现方式。\n\n<!--more-->\n\n## OAuth2.0 协议工作原理\n\n![](http://ww1.sinaimg.cn/large/005EgYNMgy1fsvhp6rqkvj30wz0g0wld.jpg)\n\n### 步骤一：请求 OAuth 登录页\n\nRequest Token URL - 未授权的令牌请求服务地址[慕课网请求 QQ 登录页面时使用的带有特定参数的 URL](client_id,redirect_uri)\n\n### 步骤二：用户使用第三方账号登录并授权\n\n身份认证通过后，会跳转到第一步的 redirect_uri，并携带 code 参数\n\n### 步骤三：返回登录结果\n\nUser Authorization URL - 用户授权的令牌请求服务地址[用户 QQ 登录授权之后需要请求的一个带有特定参数的 URL](client_id,client_secret,code)\ncode 有生命周期且只可使用一次的字符串\n\nAccessToken - 用户通过第三方应用访问 OAuth 接口的令牌[通过慕课网把自己喜欢的课程分享到 QQ 空间]\nRefresh Token\n\n### AccessToken 和 RefreshToken 数据传输原理\n\n[imooc]带有 AccessToken 参数的特定 URL=>[post]=>[QQ]open Authorization API=>[xml/json]=>[imooc]带有 AccessToken 参数的特定 URL\n\n### AccessToken 和 RefreshToken 生命周期解析\n\nAccessToken - 具有较长生命周期(10 天半个月甚至更长)\nUser Authorization URL 中指定参数 RefreshToken 进行重新获取 AccessToken\n\n## QQ 登录\n\n### 1.接入 QQ 开放平台的前置条件\n\n- qq 号\n- 公网可访问的 web 服务器\n\n- 关于域名备案\n\n![](http://ww1.sinaimg.cn/large/005EgYNMgy1fsvhwnt4zqj30ye0fqdnz.jpg)\n\n(腾讯的用于域名验证，拿到 appid 等信息)\n\n- 关于服务器运行环境\n\n### 2.申请 AppID 和 AppKey\n\n[QQ 互联](https://connect.qq.com)\n\n网站地址[需要在该页面下的 index.html 文件中嵌入一行代码，然后进行验证]\n回调地址[可以填写多个，英文半角分号;间隔，加 http(s)://头]\n\n[每次修改配置后都需要重新验证网站地址]\n\n### 3.添加测试回调地址\n\neg. http://test.open.mypro.com/callback.php\n\n### 4.引入官方 SDK\n\n[下载](http://wiki.connect.qq.com/sdk%E4%B8%8B%E8%BD%BD)\n\n### 5.SDK 参数配置\n\n- appid\n- appkey\n- callback\n- 请求授权列表\n\n        get_user_info add_share list_album add_album ...\n\n  [请求的权限会在授权登录页面显示需要请求的信息列表]\n\n- 是否开通调试\n\n### 6.SDK 解读\n\n- 文档资料 -> oauth 开发指引 -> 开发功率\\_server-side\n\n- Server-side or Client-side\n\n核心类和重要方法(Connectx.x/class/\\*.class.php)\n\n- Recorder.class.php[配置读写与 SESSION 存取]\n\n  - \\_\\_construct()\n    - 读入配置文件 json 串：$incFileContents = file(ROOT.\"comm/inc.php\")\n    - $incFileContents = $incFileContents[1];\n    - 解析成 php 对象：$this->inc = json_decode($incFileContents);\n  - readInc($name)\n    - return $this->inc->$name;\n    - //->readInc('appid') 既读取配置文件的 appid\n\n- URL.class.php[基于 CURL 库的 get 与 post 请求]\n  - combineURL($baseURL, $keysArr)\n    - 拼接：$combined = $baseURL.\"?\";\n    - 拼接参数: foreach($keysArr as $key=>$val) $valueArr[] = \"$key=$val\";\n    - 使用&拼接参数键值对：$keyStr = implode(\"&\", $valueArr);\n    - 生成形如http://xxx.com?a=b&c=d...的链接\n  - get($url,$keysArr) 发送 get 请求\n  - post($url,$keysArr,$flag = 0) 发送 post 请求\n- Oauth.class.php[Oauth 相关 URL 动态拼接与 token 操作]\n  - qq_login() 拼接 QQ 登录页面 URL\n    - 读取 appid: $appid = $this->recoder->readInc(\"appid\");\n    - 读取回调地: $callback = $this->recoder->readInc(\"callback\");\n    - 读取授权列表：$this->recorder->readInc(\"scope\");\n    - 生成唯一随机串防 CSRF 攻击\n    - 原样返回参数：md5(uniqid(rand(), TRUE));\n    - state 写入 session 中：$this->recorder->write('state',$state);\n      =》拼接之后得到https://graph.qq.com/oauth2.0/authorize?response_type=code&client_id=[APPID]&redirect_uri=[REDIRECT_URI]&scope=[SCOPE]&state=[STATE]\n    - 跳转到生成的 url: header(\"Location:$login_url\");\n  - qq_callback() QQ 登录完成后的回调处理\n\n### 7.SDK 优化\n\n- SDK 太老，很久无人维护\n  - 调整文件及目录结构\n- SDK 中的常量名太常见，可能和现有项目冲突\n  - 批量替换 SDK 中常量名称为不常见名称\n\n### 8.整合 SDK 到 Web 项目中--请求访问 QQ 登录页面\n\n```php\n$oauth = new Oauth();\n$oauth->qq_login();\n```\n\n### 9.整合 SDK 到 Web 项目中--获取 code 和 AccessToken\n\n- 回调地址：http://test.open.mypro.com/callback.php\n\n- 拿到返回的`code`，并请求 AccessToken\n\n```php\n$oauth = new Oauth();\n$accessToken = $oauth->qq_callback();\n```\n\n### 9.整合 SDK 到 Web 项目中--获取 openID\n\n(1) 关于 openId\n\n- QQ 用户在第三方站点的唯一标识\n- 同一个 QQ 用户在不同站点使用 QQ 登录 openId 始终一样\n\n```php\n$openid = $oauth->get_openid();\n```\n\n(2)存储`accesstoken`和`openid`到`cookie`中\n\n```php\n// 有效期时长可以读取session中的相应信息的有效期 [手动设置时需要将该时长小于实际有效期]\nsetcookie('qq_accesstoken', $accesstoken, time()+86400);\nsetcookie('qq_openid', $openid, time()+86400);\n```\n\n### 10.API 调用示例\n\n#### 调用`get_user_info`接口，获取用户信息\n\n(1)回调成功后，跳转到`index.php`文件\n\n```php\nheader('Location: index.php');\n```\n\n(2)判断当前登录状态[通过 cookie]\n\n- 未登录\n\n  - 进行登录 [获取 AccessToken，获取 openid]\n\n- 已经登录\n  - 调用接口，获取信息\n\n```php\n$qc = new QC($_COOKIE['qq_accesstoken'], $_COOKIE['qq_openid']);\n$userInfo = $qc->get_user_info();\n```\n\n### 平台政策与注意事项\n\n- APPID 申请之后 3 个月未申请上线将被回收\n\n- 申请上线需要使用官网提供的 QQ 登录按钮素材\n\n- 遵守国家法律法规, 拒绝黄赌毒\n","slug":"http-ouath","published":1,"updated":"2019-05-12T15:48:34.254Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c3zk00102wuuuulc9zrq","content":"<p>对于网站应用程序，涉及到登录和第三方 api 接口时，都会接触到 Token 等概念，而这部分的逻辑原理则是来自于 OAuth 授权协议，<br>\n目前的 OAuth2.0 协议的安全性也是被广泛认可，到目前为止尚且没有发生严重的安全事故。学习 OAuth2.0 协议的工作原理，并了解 qq 登录的流程和实现方式。</p>\n<a id=\"more\"></a>\n<h2 id=\"oauth20-协议工作原理\"><a class=\"markdownIt-Anchor\" href=\"#oauth20-协议工作原理\"></a> OAuth2.0 协议工作原理</h2>\n<p><img src=\"http://ww1.sinaimg.cn/large/005EgYNMgy1fsvhp6rqkvj30wz0g0wld.jpg\" alt=\"\"></p>\n<h3 id=\"步骤一请求-oauth-登录页\"><a class=\"markdownIt-Anchor\" href=\"#步骤一请求-oauth-登录页\"></a> 步骤一：请求 OAuth 登录页</h3>\n<p>Request Token URL - 未授权的令牌请求服务地址<a href=\"client_id,redirect_uri\">慕课网请求 QQ 登录页面时使用的带有特定参数的 URL</a></p>\n<h3 id=\"步骤二用户使用第三方账号登录并授权\"><a class=\"markdownIt-Anchor\" href=\"#步骤二用户使用第三方账号登录并授权\"></a> 步骤二：用户使用第三方账号登录并授权</h3>\n<p>身份认证通过后，会跳转到第一步的 redirect_uri，并携带 code 参数</p>\n<h3 id=\"步骤三返回登录结果\"><a class=\"markdownIt-Anchor\" href=\"#步骤三返回登录结果\"></a> 步骤三：返回登录结果</h3>\n<p>User Authorization URL - 用户授权的令牌请求服务地址<a href=\"client_id,client_secret,code\">用户 QQ 登录授权之后需要请求的一个带有特定参数的 URL</a><br>\ncode 有生命周期且只可使用一次的字符串</p>\n<p>AccessToken - 用户通过第三方应用访问 OAuth 接口的令牌[通过慕课网把自己喜欢的课程分享到 QQ 空间]<br>\nRefresh Token</p>\n<h3 id=\"accesstoken-和-refreshtoken-数据传输原理\"><a class=\"markdownIt-Anchor\" href=\"#accesstoken-和-refreshtoken-数据传输原理\"></a> AccessToken 和 RefreshToken 数据传输原理</h3>\n<p>[imooc]带有 AccessToken 参数的特定 URL=&gt;[post]=&gt;[QQ]open Authorization API=&gt;[xml/json]=&gt;[imooc]带有 AccessToken 参数的特定 URL</p>\n<h3 id=\"accesstoken-和-refreshtoken-生命周期解析\"><a class=\"markdownIt-Anchor\" href=\"#accesstoken-和-refreshtoken-生命周期解析\"></a> AccessToken 和 RefreshToken 生命周期解析</h3>\n<p>AccessToken - 具有较长生命周期(10 天半个月甚至更长)<br>\nUser Authorization URL 中指定参数 RefreshToken 进行重新获取 AccessToken</p>\n<h2 id=\"qq-登录\"><a class=\"markdownIt-Anchor\" href=\"#qq-登录\"></a> QQ 登录</h2>\n<h3 id=\"1接入-qq-开放平台的前置条件\"><a class=\"markdownIt-Anchor\" href=\"#1接入-qq-开放平台的前置条件\"></a> 1.接入 QQ 开放平台的前置条件</h3>\n<ul>\n<li>\n<p>qq 号</p>\n</li>\n<li>\n<p>公网可访问的 web 服务器</p>\n</li>\n<li>\n<p>关于域名备案</p>\n</li>\n</ul>\n<p><img src=\"http://ww1.sinaimg.cn/large/005EgYNMgy1fsvhwnt4zqj30ye0fqdnz.jpg\" alt=\"\"></p>\n<p>(腾讯的用于域名验证，拿到 appid 等信息)</p>\n<ul>\n<li>关于服务器运行环境</li>\n</ul>\n<h3 id=\"2申请-appid-和-appkey\"><a class=\"markdownIt-Anchor\" href=\"#2申请-appid-和-appkey\"></a> 2.申请 AppID 和 AppKey</h3>\n<p><a href=\"https://connect.qq.com\" target=\"_blank\" rel=\"noopener\">QQ 互联</a></p>\n<p>网站地址[需要在该页面下的 index.html 文件中嵌入一行代码，然后进行验证]<br>\n回调地址[可以填写多个，英文半角分号;间隔，加 http(s)😕/头]</p>\n<p>[每次修改配置后都需要重新验证网站地址]</p>\n<h3 id=\"3添加测试回调地址\"><a class=\"markdownIt-Anchor\" href=\"#3添加测试回调地址\"></a> 3.添加测试回调地址</h3>\n<p>eg. <a href=\"http://test.open.mypro.com/callback.php\" target=\"_blank\" rel=\"noopener\">http://test.open.mypro.com/callback.php</a></p>\n<h3 id=\"4引入官方-sdk\"><a class=\"markdownIt-Anchor\" href=\"#4引入官方-sdk\"></a> 4.引入官方 SDK</h3>\n<p><a href=\"http://wiki.connect.qq.com/sdk%E4%B8%8B%E8%BD%BD\" target=\"_blank\" rel=\"noopener\">下载</a></p>\n<h3 id=\"5sdk-参数配置\"><a class=\"markdownIt-Anchor\" href=\"#5sdk-参数配置\"></a> 5.SDK 参数配置</h3>\n<ul>\n<li>\n<p>appid</p>\n</li>\n<li>\n<p>appkey</p>\n</li>\n<li>\n<p>callback</p>\n</li>\n<li>\n<p>请求授权列表</p>\n<pre><code>  get_user_info add_share list_album add_album ...\n</code></pre>\n<p>[请求的权限会在授权登录页面显示需要请求的信息列表]</p>\n</li>\n<li>\n<p>是否开通调试</p>\n</li>\n</ul>\n<h3 id=\"6sdk-解读\"><a class=\"markdownIt-Anchor\" href=\"#6sdk-解读\"></a> 6.SDK 解读</h3>\n<ul>\n<li>\n<p>文档资料 -&gt; oauth 开发指引 -&gt; 开发功率_server-side</p>\n</li>\n<li>\n<p>Server-side or Client-side</p>\n</li>\n</ul>\n<p>核心类和重要方法(Connectx.x/class/*.class.php)</p>\n<ul>\n<li>\n<p>Recorder.class.php[配置读写与 SESSION 存取]</p>\n<ul>\n<li>__construct()\n<ul>\n<li>读入配置文件 json 串：$incFileContents = file(ROOT.“comm/inc.php”)</li>\n<li>$incFileContents = $incFileContents[1];</li>\n<li>解析成 php 对象：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi><mo>−</mo><mo>&gt;</mo><mi>i</mi><mi>n</mi><mi>c</mi><mo>=</mo><mi>j</mi><mi>s</mi><mi>o</mi><msub><mi>n</mi><mi>d</mi></msub><mi>e</mi><mi>c</mi><mi>o</mi><mi>d</mi><mi>e</mi><mo>(</mo></mrow><annotation encoding=\"application/x-tex\">this-&gt;inc = json_decode(</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\">t</span><span class=\"mord mathit\">h</span><span class=\"mord mathit\">i</span><span class=\"mord mathit\">s</span><span class=\"mord\">−</span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathit\">i</span><span class=\"mord mathit\">n</span><span class=\"mord mathit\">c</span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathit\" style=\"margin-right:0.05724em;\">j</span><span class=\"mord mathit\">s</span><span class=\"mord mathit\">o</span><span class=\"mord\"><span class=\"mord mathit\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">d</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mord mathit\">e</span><span class=\"mord mathit\">c</span><span class=\"mord mathit\">o</span><span class=\"mord mathit\">d</span><span class=\"mord mathit\">e</span><span class=\"mopen\">(</span></span></span></span>incFileContents);</li>\n</ul>\n</li>\n<li>readInc($name)\n<ul>\n<li>return <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi><mo>−</mo><mo>&gt;</mo><mi>i</mi><mi>n</mi><mi>c</mi><mo>−</mo><mo>&gt;</mo></mrow><annotation encoding=\"application/x-tex\">this-&gt;inc-&gt;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"base\"><span class=\"mord mathit\">t</span><span class=\"mord mathit\">h</span><span class=\"mord mathit\">i</span><span class=\"mord mathit\">s</span><span class=\"mord\">−</span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathit\">i</span><span class=\"mord mathit\">n</span><span class=\"mord mathit\">c</span><span class=\"mord\">−</span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span></span></span></span>name;</li>\n<li>//-&gt;readInc(‘appid’) 既读取配置文件的 appid</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>URL.class.php[基于 CURL 库的 get 与 post 请求]</p>\n<ul>\n<li>combineURL($baseURL, $keysArr)\n<ul>\n<li>拼接：$combined = $baseURL.&quot;?&quot;;</li>\n<li>拼接参数: foreach($keysArr as <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi><mo>=</mo><mo>&gt;</mo></mrow><annotation encoding=\"application/x-tex\">key=&gt;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathit\">e</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mrel\">&gt;</span></span></span></span>val) <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>v</mi><mi>a</mi><mi>l</mi><mi>u</mi><mi>e</mi><mi>A</mi><mi>r</mi><mi>r</mi><mo>[</mo><mo>]</mo><mo>=</mo><mi mathvariant=\"normal\">&quot;</mi></mrow><annotation encoding=\"application/x-tex\">valueArr[] = &quot;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathit\">a</span><span class=\"mord mathit\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathit\">u</span><span class=\"mord mathit\">e</span><span class=\"mord mathit\">A</span><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">[</span><span class=\"mclose\">]</span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">&quot;</span></span></span></span>key=$val&quot;;</li>\n<li>使用&amp;拼接参数键值对：$keyStr = implode(&quot;&amp;&quot;, $valueArr);</li>\n<li>生成形如http://xxx.com?a=b&amp;c=d…的链接</li>\n</ul>\n</li>\n<li>get(<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>u</mi><mi>r</mi><mi>l</mi><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">url,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">u</span><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathit\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span></span></span></span>keysArr) 发送 get 请求</li>\n<li>post(<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>u</mi><mi>r</mi><mi>l</mi><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">url,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">u</span><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathit\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span></span></span></span>keysArr,$flag = 0) 发送 post 请求</li>\n</ul>\n</li>\n<li>\n<p>Oauth.class.php[Oauth 相关 URL 动态拼接与 token 操作]</p>\n<ul>\n<li>qq_login() 拼接 QQ 登录页面 URL\n<ul>\n<li>读取 appid: $appid = $this-&gt;recoder-&gt;readInc(“appid”);</li>\n<li>读取回调地: $callback = $this-&gt;recoder-&gt;readInc(“callback”);</li>\n<li>读取授权列表：$this-&gt;recorder-&gt;readInc(“scope”);</li>\n<li>生成唯一随机串防 CSRF 攻击</li>\n<li>原样返回参数：md5(uniqid(rand(), TRUE));</li>\n<li>state 写入 session 中：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi><mo>−</mo><mo>&gt;</mo><mi>r</mi><mi>e</mi><mi>c</mi><mi>o</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo>−</mo><mo>&gt;</mo><mi>w</mi><mi>r</mi><mi>i</mi><mi>t</mi><mi>e</mi><msup><mo>(</mo><mo mathvariant=\"normal\">′</mo></msup><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><msup><mi>e</mi><mo mathvariant=\"normal\">′</mo></msup><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">this-&gt;recorder-&gt;write(&#x27;state&#x27;,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.751892em;\"></span><span class=\"strut bottom\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\">t</span><span class=\"mord mathit\">h</span><span class=\"mord mathit\">i</span><span class=\"mord mathit\">s</span><span class=\"mord\">−</span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathit\">e</span><span class=\"mord mathit\">c</span><span class=\"mord mathit\">o</span><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathit\">d</span><span class=\"mord mathit\">e</span><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">−</span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathit\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathit\">i</span><span class=\"mord mathit\">t</span><span class=\"mord mathit\">e</span><span class=\"mopen\"><span class=\"mopen\">(</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord mathit\">s</span><span class=\"mord mathit\">t</span><span class=\"mord mathit\">a</span><span class=\"mord mathit\">t</span><span class=\"mord\"><span class=\"mord mathit\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span></span></span></span>state);<br>\n=》拼接之后得到https://graph.qq.com/oauth2.0/authorize?response_type=code&amp;client_id=[APPID]&amp;redirect_uri=[REDIRECT_URI]&amp;scope=[SCOPE]&amp;state=[STATE]</li>\n<li>跳转到生成的 url: header(“Location:$login_url”);</li>\n</ul>\n</li>\n<li>qq_callback() QQ 登录完成后的回调处理</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"7sdk-优化\"><a class=\"markdownIt-Anchor\" href=\"#7sdk-优化\"></a> 7.SDK 优化</h3>\n<ul>\n<li>SDK 太老，很久无人维护\n<ul>\n<li>调整文件及目录结构</li>\n</ul>\n</li>\n<li>SDK 中的常量名太常见，可能和现有项目冲突\n<ul>\n<li>批量替换 SDK 中常量名称为不常见名称</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"8整合-sdk-到-web-项目中请求访问-qq-登录页面\"><a class=\"markdownIt-Anchor\" href=\"#8整合-sdk-到-web-项目中请求访问-qq-登录页面\"></a> 8.整合 SDK 到 Web 项目中–请求访问 QQ 登录页面</h3>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$oauth = <span class=\"keyword\">new</span> Oauth();</span><br><span class=\"line\">$oauth-&gt;qq_login();</span><br></pre></td></tr></table></figure>\n<h3 id=\"9整合-sdk-到-web-项目中获取-code-和-accesstoken\"><a class=\"markdownIt-Anchor\" href=\"#9整合-sdk-到-web-项目中获取-code-和-accesstoken\"></a> 9.整合 SDK 到 Web 项目中–获取 code 和 AccessToken</h3>\n<ul>\n<li>\n<p>回调地址：<a href=\"http://test.open.mypro.com/callback.php\" target=\"_blank\" rel=\"noopener\">http://test.open.mypro.com/callback.php</a></p>\n</li>\n<li>\n<p>拿到返回的<code>code</code>，并请求 AccessToken</p>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$oauth = <span class=\"keyword\">new</span> Oauth();</span><br><span class=\"line\">$accessToken = $oauth-&gt;qq_callback();</span><br></pre></td></tr></table></figure>\n<h3 id=\"9整合-sdk-到-web-项目中获取-openid\"><a class=\"markdownIt-Anchor\" href=\"#9整合-sdk-到-web-项目中获取-openid\"></a> 9.整合 SDK 到 Web 项目中–获取 openID</h3>\n<p>(1) 关于 openId</p>\n<ul>\n<li>QQ 用户在第三方站点的唯一标识</li>\n<li>同一个 QQ 用户在不同站点使用 QQ 登录 openId 始终一样</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$openid = $oauth-&gt;get_openid();</span><br></pre></td></tr></table></figure>\n<p>(2)存储<code>accesstoken</code>和<code>openid</code>到<code>cookie</code>中</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 有效期时长可以读取session中的相应信息的有效期 [手动设置时需要将该时长小于实际有效期]</span></span><br><span class=\"line\">setcookie(<span class=\"string\">'qq_accesstoken'</span>, $accesstoken, time()+<span class=\"number\">86400</span>);</span><br><span class=\"line\">setcookie(<span class=\"string\">'qq_openid'</span>, $openid, time()+<span class=\"number\">86400</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"10api-调用示例\"><a class=\"markdownIt-Anchor\" href=\"#10api-调用示例\"></a> 10.API 调用示例</h3>\n<h4 id=\"调用get_user_info接口获取用户信息\"><a class=\"markdownIt-Anchor\" href=\"#调用get_user_info接口获取用户信息\"></a> 调用<code>get_user_info</code>接口，获取用户信息</h4>\n<p>(1)回调成功后，跳转到<code>index.php</code>文件</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">header(<span class=\"string\">'Location: index.php'</span>);</span><br></pre></td></tr></table></figure>\n<p>(2)判断当前登录状态[通过 cookie]</p>\n<ul>\n<li>\n<p>未登录</p>\n<ul>\n<li>进行登录 [获取 AccessToken，获取 openid]</li>\n</ul>\n</li>\n<li>\n<p>已经登录</p>\n<ul>\n<li>调用接口，获取信息</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$qc = <span class=\"keyword\">new</span> QC($_COOKIE[<span class=\"string\">'qq_accesstoken'</span>], $_COOKIE[<span class=\"string\">'qq_openid'</span>]);</span><br><span class=\"line\">$userInfo = $qc-&gt;get_user_info();</span><br></pre></td></tr></table></figure>\n<h3 id=\"平台政策与注意事项\"><a class=\"markdownIt-Anchor\" href=\"#平台政策与注意事项\"></a> 平台政策与注意事项</h3>\n<ul>\n<li>\n<p>APPID 申请之后 3 个月未申请上线将被回收</p>\n</li>\n<li>\n<p>申请上线需要使用官网提供的 QQ 登录按钮素材</p>\n</li>\n<li>\n<p>遵守国家法律法规, 拒绝黄赌毒</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>对于网站应用程序，涉及到登录和第三方 api 接口时，都会接触到 Token 等概念，而这部分的逻辑原理则是来自于 OAuth 授权协议，<br>\n目前的 OAuth2.0 协议的安全性也是被广泛认可，到目前为止尚且没有发生严重的安全事故。学习 OAuth2.0 协议的工作原理，并了解 qq 登录的流程和实现方式。</p>","more":"<h2 id=\"oauth20-协议工作原理\"><a class=\"markdownIt-Anchor\" href=\"#oauth20-协议工作原理\"></a> OAuth2.0 协议工作原理</h2>\n<p><img src=\"http://ww1.sinaimg.cn/large/005EgYNMgy1fsvhp6rqkvj30wz0g0wld.jpg\" alt=\"\"></p>\n<h3 id=\"步骤一请求-oauth-登录页\"><a class=\"markdownIt-Anchor\" href=\"#步骤一请求-oauth-登录页\"></a> 步骤一：请求 OAuth 登录页</h3>\n<p>Request Token URL - 未授权的令牌请求服务地址<a href=\"client_id,redirect_uri\">慕课网请求 QQ 登录页面时使用的带有特定参数的 URL</a></p>\n<h3 id=\"步骤二用户使用第三方账号登录并授权\"><a class=\"markdownIt-Anchor\" href=\"#步骤二用户使用第三方账号登录并授权\"></a> 步骤二：用户使用第三方账号登录并授权</h3>\n<p>身份认证通过后，会跳转到第一步的 redirect_uri，并携带 code 参数</p>\n<h3 id=\"步骤三返回登录结果\"><a class=\"markdownIt-Anchor\" href=\"#步骤三返回登录结果\"></a> 步骤三：返回登录结果</h3>\n<p>User Authorization URL - 用户授权的令牌请求服务地址<a href=\"client_id,client_secret,code\">用户 QQ 登录授权之后需要请求的一个带有特定参数的 URL</a><br>\ncode 有生命周期且只可使用一次的字符串</p>\n<p>AccessToken - 用户通过第三方应用访问 OAuth 接口的令牌[通过慕课网把自己喜欢的课程分享到 QQ 空间]<br>\nRefresh Token</p>\n<h3 id=\"accesstoken-和-refreshtoken-数据传输原理\"><a class=\"markdownIt-Anchor\" href=\"#accesstoken-和-refreshtoken-数据传输原理\"></a> AccessToken 和 RefreshToken 数据传输原理</h3>\n<p>[imooc]带有 AccessToken 参数的特定 URL=&gt;[post]=&gt;[QQ]open Authorization API=&gt;[xml/json]=&gt;[imooc]带有 AccessToken 参数的特定 URL</p>\n<h3 id=\"accesstoken-和-refreshtoken-生命周期解析\"><a class=\"markdownIt-Anchor\" href=\"#accesstoken-和-refreshtoken-生命周期解析\"></a> AccessToken 和 RefreshToken 生命周期解析</h3>\n<p>AccessToken - 具有较长生命周期(10 天半个月甚至更长)<br>\nUser Authorization URL 中指定参数 RefreshToken 进行重新获取 AccessToken</p>\n<h2 id=\"qq-登录\"><a class=\"markdownIt-Anchor\" href=\"#qq-登录\"></a> QQ 登录</h2>\n<h3 id=\"1接入-qq-开放平台的前置条件\"><a class=\"markdownIt-Anchor\" href=\"#1接入-qq-开放平台的前置条件\"></a> 1.接入 QQ 开放平台的前置条件</h3>\n<ul>\n<li>\n<p>qq 号</p>\n</li>\n<li>\n<p>公网可访问的 web 服务器</p>\n</li>\n<li>\n<p>关于域名备案</p>\n</li>\n</ul>\n<p><img src=\"http://ww1.sinaimg.cn/large/005EgYNMgy1fsvhwnt4zqj30ye0fqdnz.jpg\" alt=\"\"></p>\n<p>(腾讯的用于域名验证，拿到 appid 等信息)</p>\n<ul>\n<li>关于服务器运行环境</li>\n</ul>\n<h3 id=\"2申请-appid-和-appkey\"><a class=\"markdownIt-Anchor\" href=\"#2申请-appid-和-appkey\"></a> 2.申请 AppID 和 AppKey</h3>\n<p><a href=\"https://connect.qq.com\" target=\"_blank\" rel=\"noopener\">QQ 互联</a></p>\n<p>网站地址[需要在该页面下的 index.html 文件中嵌入一行代码，然后进行验证]<br>\n回调地址[可以填写多个，英文半角分号;间隔，加 http(s)😕/头]</p>\n<p>[每次修改配置后都需要重新验证网站地址]</p>\n<h3 id=\"3添加测试回调地址\"><a class=\"markdownIt-Anchor\" href=\"#3添加测试回调地址\"></a> 3.添加测试回调地址</h3>\n<p>eg. <a href=\"http://test.open.mypro.com/callback.php\" target=\"_blank\" rel=\"noopener\">http://test.open.mypro.com/callback.php</a></p>\n<h3 id=\"4引入官方-sdk\"><a class=\"markdownIt-Anchor\" href=\"#4引入官方-sdk\"></a> 4.引入官方 SDK</h3>\n<p><a href=\"http://wiki.connect.qq.com/sdk%E4%B8%8B%E8%BD%BD\" target=\"_blank\" rel=\"noopener\">下载</a></p>\n<h3 id=\"5sdk-参数配置\"><a class=\"markdownIt-Anchor\" href=\"#5sdk-参数配置\"></a> 5.SDK 参数配置</h3>\n<ul>\n<li>\n<p>appid</p>\n</li>\n<li>\n<p>appkey</p>\n</li>\n<li>\n<p>callback</p>\n</li>\n<li>\n<p>请求授权列表</p>\n<pre><code>  get_user_info add_share list_album add_album ...\n</code></pre>\n<p>[请求的权限会在授权登录页面显示需要请求的信息列表]</p>\n</li>\n<li>\n<p>是否开通调试</p>\n</li>\n</ul>\n<h3 id=\"6sdk-解读\"><a class=\"markdownIt-Anchor\" href=\"#6sdk-解读\"></a> 6.SDK 解读</h3>\n<ul>\n<li>\n<p>文档资料 -&gt; oauth 开发指引 -&gt; 开发功率_server-side</p>\n</li>\n<li>\n<p>Server-side or Client-side</p>\n</li>\n</ul>\n<p>核心类和重要方法(Connectx.x/class/*.class.php)</p>\n<ul>\n<li>\n<p>Recorder.class.php[配置读写与 SESSION 存取]</p>\n<ul>\n<li>__construct()\n<ul>\n<li>读入配置文件 json 串：$incFileContents = file(ROOT.“comm/inc.php”)</li>\n<li>$incFileContents = $incFileContents[1];</li>\n<li>解析成 php 对象：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi><mo>−</mo><mo>&gt;</mo><mi>i</mi><mi>n</mi><mi>c</mi><mo>=</mo><mi>j</mi><mi>s</mi><mi>o</mi><msub><mi>n</mi><mi>d</mi></msub><mi>e</mi><mi>c</mi><mi>o</mi><mi>d</mi><mi>e</mi><mo>(</mo></mrow><annotation encoding=\"application/x-tex\">this-&gt;inc = json_decode(</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\">t</span><span class=\"mord mathit\">h</span><span class=\"mord mathit\">i</span><span class=\"mord mathit\">s</span><span class=\"mord\">−</span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathit\">i</span><span class=\"mord mathit\">n</span><span class=\"mord mathit\">c</span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathit\" style=\"margin-right:0.05724em;\">j</span><span class=\"mord mathit\">s</span><span class=\"mord mathit\">o</span><span class=\"mord\"><span class=\"mord mathit\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">d</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mord mathit\">e</span><span class=\"mord mathit\">c</span><span class=\"mord mathit\">o</span><span class=\"mord mathit\">d</span><span class=\"mord mathit\">e</span><span class=\"mopen\">(</span></span></span></span>incFileContents);</li>\n</ul>\n</li>\n<li>readInc($name)\n<ul>\n<li>return <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi><mo>−</mo><mo>&gt;</mo><mi>i</mi><mi>n</mi><mi>c</mi><mo>−</mo><mo>&gt;</mo></mrow><annotation encoding=\"application/x-tex\">this-&gt;inc-&gt;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"base\"><span class=\"mord mathit\">t</span><span class=\"mord mathit\">h</span><span class=\"mord mathit\">i</span><span class=\"mord mathit\">s</span><span class=\"mord\">−</span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathit\">i</span><span class=\"mord mathit\">n</span><span class=\"mord mathit\">c</span><span class=\"mord\">−</span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span></span></span></span>name;</li>\n<li>//-&gt;readInc(‘appid’) 既读取配置文件的 appid</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>URL.class.php[基于 CURL 库的 get 与 post 请求]</p>\n<ul>\n<li>combineURL($baseURL, $keysArr)\n<ul>\n<li>拼接：$combined = $baseURL.&quot;?&quot;;</li>\n<li>拼接参数: foreach($keysArr as <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi><mo>=</mo><mo>&gt;</mo></mrow><annotation encoding=\"application/x-tex\">key=&gt;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathit\">e</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mrel\">&gt;</span></span></span></span>val) <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>v</mi><mi>a</mi><mi>l</mi><mi>u</mi><mi>e</mi><mi>A</mi><mi>r</mi><mi>r</mi><mo>[</mo><mo>]</mo><mo>=</mo><mi mathvariant=\"normal\">&quot;</mi></mrow><annotation encoding=\"application/x-tex\">valueArr[] = &quot;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathit\">a</span><span class=\"mord mathit\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathit\">u</span><span class=\"mord mathit\">e</span><span class=\"mord mathit\">A</span><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">[</span><span class=\"mclose\">]</span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">&quot;</span></span></span></span>key=$val&quot;;</li>\n<li>使用&amp;拼接参数键值对：$keyStr = implode(&quot;&amp;&quot;, $valueArr);</li>\n<li>生成形如http://xxx.com?a=b&amp;c=d…的链接</li>\n</ul>\n</li>\n<li>get(<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>u</mi><mi>r</mi><mi>l</mi><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">url,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">u</span><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathit\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span></span></span></span>keysArr) 发送 get 请求</li>\n<li>post(<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>u</mi><mi>r</mi><mi>l</mi><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">url,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">u</span><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathit\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span></span></span></span>keysArr,$flag = 0) 发送 post 请求</li>\n</ul>\n</li>\n<li>\n<p>Oauth.class.php[Oauth 相关 URL 动态拼接与 token 操作]</p>\n<ul>\n<li>qq_login() 拼接 QQ 登录页面 URL\n<ul>\n<li>读取 appid: $appid = $this-&gt;recoder-&gt;readInc(“appid”);</li>\n<li>读取回调地: $callback = $this-&gt;recoder-&gt;readInc(“callback”);</li>\n<li>读取授权列表：$this-&gt;recorder-&gt;readInc(“scope”);</li>\n<li>生成唯一随机串防 CSRF 攻击</li>\n<li>原样返回参数：md5(uniqid(rand(), TRUE));</li>\n<li>state 写入 session 中：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi><mo>−</mo><mo>&gt;</mo><mi>r</mi><mi>e</mi><mi>c</mi><mi>o</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo>−</mo><mo>&gt;</mo><mi>w</mi><mi>r</mi><mi>i</mi><mi>t</mi><mi>e</mi><msup><mo>(</mo><mo mathvariant=\"normal\">′</mo></msup><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><msup><mi>e</mi><mo mathvariant=\"normal\">′</mo></msup><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">this-&gt;recorder-&gt;write(&#x27;state&#x27;,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.751892em;\"></span><span class=\"strut bottom\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\">t</span><span class=\"mord mathit\">h</span><span class=\"mord mathit\">i</span><span class=\"mord mathit\">s</span><span class=\"mord\">−</span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathit\">e</span><span class=\"mord mathit\">c</span><span class=\"mord mathit\">o</span><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathit\">d</span><span class=\"mord mathit\">e</span><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">−</span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathit\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathit\">i</span><span class=\"mord mathit\">t</span><span class=\"mord mathit\">e</span><span class=\"mopen\"><span class=\"mopen\">(</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord mathit\">s</span><span class=\"mord mathit\">t</span><span class=\"mord mathit\">a</span><span class=\"mord mathit\">t</span><span class=\"mord\"><span class=\"mord mathit\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span></span></span></span>state);<br>\n=》拼接之后得到https://graph.qq.com/oauth2.0/authorize?response_type=code&amp;client_id=[APPID]&amp;redirect_uri=[REDIRECT_URI]&amp;scope=[SCOPE]&amp;state=[STATE]</li>\n<li>跳转到生成的 url: header(“Location:$login_url”);</li>\n</ul>\n</li>\n<li>qq_callback() QQ 登录完成后的回调处理</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"7sdk-优化\"><a class=\"markdownIt-Anchor\" href=\"#7sdk-优化\"></a> 7.SDK 优化</h3>\n<ul>\n<li>SDK 太老，很久无人维护\n<ul>\n<li>调整文件及目录结构</li>\n</ul>\n</li>\n<li>SDK 中的常量名太常见，可能和现有项目冲突\n<ul>\n<li>批量替换 SDK 中常量名称为不常见名称</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"8整合-sdk-到-web-项目中请求访问-qq-登录页面\"><a class=\"markdownIt-Anchor\" href=\"#8整合-sdk-到-web-项目中请求访问-qq-登录页面\"></a> 8.整合 SDK 到 Web 项目中–请求访问 QQ 登录页面</h3>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$oauth = <span class=\"keyword\">new</span> Oauth();</span><br><span class=\"line\">$oauth-&gt;qq_login();</span><br></pre></td></tr></table></figure>\n<h3 id=\"9整合-sdk-到-web-项目中获取-code-和-accesstoken\"><a class=\"markdownIt-Anchor\" href=\"#9整合-sdk-到-web-项目中获取-code-和-accesstoken\"></a> 9.整合 SDK 到 Web 项目中–获取 code 和 AccessToken</h3>\n<ul>\n<li>\n<p>回调地址：<a href=\"http://test.open.mypro.com/callback.php\" target=\"_blank\" rel=\"noopener\">http://test.open.mypro.com/callback.php</a></p>\n</li>\n<li>\n<p>拿到返回的<code>code</code>，并请求 AccessToken</p>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$oauth = <span class=\"keyword\">new</span> Oauth();</span><br><span class=\"line\">$accessToken = $oauth-&gt;qq_callback();</span><br></pre></td></tr></table></figure>\n<h3 id=\"9整合-sdk-到-web-项目中获取-openid\"><a class=\"markdownIt-Anchor\" href=\"#9整合-sdk-到-web-项目中获取-openid\"></a> 9.整合 SDK 到 Web 项目中–获取 openID</h3>\n<p>(1) 关于 openId</p>\n<ul>\n<li>QQ 用户在第三方站点的唯一标识</li>\n<li>同一个 QQ 用户在不同站点使用 QQ 登录 openId 始终一样</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$openid = $oauth-&gt;get_openid();</span><br></pre></td></tr></table></figure>\n<p>(2)存储<code>accesstoken</code>和<code>openid</code>到<code>cookie</code>中</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 有效期时长可以读取session中的相应信息的有效期 [手动设置时需要将该时长小于实际有效期]</span></span><br><span class=\"line\">setcookie(<span class=\"string\">'qq_accesstoken'</span>, $accesstoken, time()+<span class=\"number\">86400</span>);</span><br><span class=\"line\">setcookie(<span class=\"string\">'qq_openid'</span>, $openid, time()+<span class=\"number\">86400</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"10api-调用示例\"><a class=\"markdownIt-Anchor\" href=\"#10api-调用示例\"></a> 10.API 调用示例</h3>\n<h4 id=\"调用get_user_info接口获取用户信息\"><a class=\"markdownIt-Anchor\" href=\"#调用get_user_info接口获取用户信息\"></a> 调用<code>get_user_info</code>接口，获取用户信息</h4>\n<p>(1)回调成功后，跳转到<code>index.php</code>文件</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">header(<span class=\"string\">'Location: index.php'</span>);</span><br></pre></td></tr></table></figure>\n<p>(2)判断当前登录状态[通过 cookie]</p>\n<ul>\n<li>\n<p>未登录</p>\n<ul>\n<li>进行登录 [获取 AccessToken，获取 openid]</li>\n</ul>\n</li>\n<li>\n<p>已经登录</p>\n<ul>\n<li>调用接口，获取信息</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$qc = <span class=\"keyword\">new</span> QC($_COOKIE[<span class=\"string\">'qq_accesstoken'</span>], $_COOKIE[<span class=\"string\">'qq_openid'</span>]);</span><br><span class=\"line\">$userInfo = $qc-&gt;get_user_info();</span><br></pre></td></tr></table></figure>\n<h3 id=\"平台政策与注意事项\"><a class=\"markdownIt-Anchor\" href=\"#平台政策与注意事项\"></a> 平台政策与注意事项</h3>\n<ul>\n<li>\n<p>APPID 申请之后 3 个月未申请上线将被回收</p>\n</li>\n<li>\n<p>申请上线需要使用官网提供的 QQ 登录按钮素材</p>\n</li>\n<li>\n<p>遵守国家法律法规, 拒绝黄赌毒</p>\n</li>\n</ul>"},{"title":"【面试】杭州边锋网络","date":"2019-04-01T12:00:00.000Z","_content":"\n正式工作正好满一年，一直加班加需求的工作状态有点让自己疲倦了，所以想要停下来整理一段时间，再出发，也为了自己的职业发展能够向一个更好的方向发展，寻求更深层的技术拓展，和更多的技术伙伴，这个裸辞后的第一个面试，有点不太好，凭印象记录下面试和笔试题，正好为这段时间的整理提供一方面的素材。\n\n<!-- more -->\n\n基本过程：一点半到前台，填写了基本信息表，然后一个面试的人（估计是项目组技术负责人）带我穿过一个大厅，到了一个小房间，然后给我一份三页的笔试题让我先做着，，大概半个小时之后开始，带我进来的人和另外一个女性（懂技术，应该不是hr）一起进来面试。\n\n### 一、笔试题\n\n#### 1、基础题\n（1）面向对象的特性、修饰符类型、构造函数和析构函数的作用\n\n面向对象的特性：\n\n- 继承：它可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。\n\n- 封装：也就是把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。\n\n- 多态：一个类实例的相同方法在不同情形有不同表现形式。多态机制使具有不同内部结构的对象可以共享相同的外部接口。这意味着，虽然针对不同对象的具体操作不同，但通过一个公共的类，它们（那些操作）可以通过相同的方式予以调用。\n\n参考：[面向对象三大基本特性,五大基本原则-博客园](http://www.cnblogs.com/hnrainll/archive/2012/09/18/2690846.html)\n\n```\npublic（公共的、默认）：可被外部访问\nprotected（受保护的）：只允许子类访问\nprivate（私有的）：类内部可访问，外部不可访问（子类不能访问）\n```\n\n访问权限 | public | protected | private\n--|--|--|--\n所有|是|否|否\n子类|是|是|否\n类内|是|否|否\n\n参考：[PHP面向对象——访问修饰符](https://www.cnblogs.com/giantpanda/archive/2012/11/08/2760074.html)\n\n**构造函数和析构函数作用：**\n\n- 构造函数\n\n> 构造函数可以接受参数，能够在创建对象时赋值给对象属性\n构造函数可以调用类方法或其他函数\n构造函数可以调用其他类的构造函数\n\n- 析构函数\n\n> 析构函数是在销毁对象时，自动调用，不能显示的调用。\n析构函数不能带参数。\n\n在以下几种情况下可能会调用析构函数（但不一定）：\n\n- PHP页面加载完毕之后；\n- unset()类；\n- 变量引用指向别的对象或值时；\n\n（2）输出执行结果\n\n```php\n$a = 87;\n$b = ($a % 7 ) * 16;\n\necho $a > $b ?: 0;\n```\n（3）输出执行结果\n\n```php\n$a = 10;\n$b = &$a;\nunset($b);\n$b = 2;\necho $b;\n```\n\n（4）null、‘’、‘ ’、0、‘0’、false 哪些是==的？\n\n（4）array_split()、chunk_split()、wordrap()区别和用法\n\n（5）交换数组键和值的函数、多维数组排序函数和使用方法\n\n（6）数据库优化的原则\n\n（7）php多进程的实现\n\n（8）闭包和匿名函数的使用\n\n（9）如何判断sql性能\n\n#### 2、算法题：\n\n（1）递归实现汉诺塔\n\n（2）查出一段时间内星期一和星期日的所有日期\n\n（3）实现min函数获取数组最小元素的\n\n#### 3、系统设计\n（1）访问量30w，高并发3000，需要日期和XX（另一个字段），谈谈设计思路。\n\n（2）一个系统有多个属性，数量不定，但是不会超过32，如何实现增删改和快速检索？\n\n#### 4、加分项：\n（1）列举5个以上php的扩展的使用方法\n\n（2）简述一下你的得意之作\n\n### 二、面试题\n\n1、谈谈对设计模式的了解\n\n资料：\n\n- [图说设计模式-doc](https://www.cnblogs.com/giantpanda/archive/2012/11/08/2760074.html)\n- [史上最全设计模式导学目录（完整版）-csdn](https://www.cnblogs.com/giantpanda/archive/2012/11/08/2760074.html)\n\n2、cookie和session的使用\n\n3、索引的设计原则\n\n有A、B、C三个字段，现在需要查询 A AB AC，需要怎么建索引？\n\n4、网络协议（七层、五层）分别是什么？TCP、HTTP分别是哪一层的？\n\n五层协议\n\n```\n应用层（HTTP、FTP）：\n    为应用软件提供了很多服务\n    构建于 TCP 协议之上\n    屏蔽网络传输相关细节\n传输层（TCP）：\n    向用户传输可靠的端到端(End-to-End)服务\n    传输层向高层屏蔽了下层数据通信的细节\n网络层（IP）：为数据在结点之间传输创建逻辑链路\n数据链路层（数据链路）：在通信的实体间建立数据链路连接\n物理层（物理介质）：定义物理设备如何传输数据\n```\n\n5、负载均衡了解吗？\n\n6、php运行模式有哪些？\n\n```\ncgi 通用网关接口（Common Gateway Interface)）\n\nfast-cgi 常驻 (long-live) 型的 CGI\n\ncli  命令行运行   （Command Line Interface）：一般使用调用脚本、查看php信息时会使用到该模式\ne.g:php -r \"phpinfo();\" |less 分页显示\n\nweb模块模式：\nApache + mod_php5\nlighttp + spawn-fcgi\nnginx + PHP-FPM\n```\n参考：\n\n- [PHP 运行模式与运行原理–segmentfault](https://segmentfault.com/a/1190000014913877)\n- [PHP运行模式-CSDN](https://blog.csdn.net/hguisu/article/details/7386882)\n\n7、你了解过哪些github的项目？\n\n8、索引是怎么提升效率的？\n\n9、一个接口请求是3秒，如果优化到只需要0.3秒？(api接口优化)\n\n10、浏览器输入url到页面加载出页面，整个流程是怎样的？\n\n11、数据结构类型有哪些？\n\n12、你了解的错误码有哪些？http请求时Cookie是请求的哪个部分？请求头有哪些？\n\n13、状态码有哪些？\n\n14、php是如何运行的？\n\n15、git、svn了解吗？\n\n### 三、总结\n\n整体技术点回答的都不太好，一年的工作中一直停留在写业务上，系统设计和基础巩固，对于深一点的技术方案考虑较少，以前学过的基础知识，也因为长期没整理而一时答不上来，本身又不善言谈，表现不了自己的优势，又把自己的劣势暴露无意，所以一直在面试上都坎坎坷坷，当然最主要的还是基本功不太扎实，没有形成自身的核心竞争力。\n\n**未来可期，自勉!**","source":"_posts/interview-bfwl.md","raw":"---\ntitle: 【面试】杭州边锋网络\ndate: 2019-04-01 20:00:00\ntags:\n  - 面经\ncategory:\n  - 【面经】\n---\n\n正式工作正好满一年，一直加班加需求的工作状态有点让自己疲倦了，所以想要停下来整理一段时间，再出发，也为了自己的职业发展能够向一个更好的方向发展，寻求更深层的技术拓展，和更多的技术伙伴，这个裸辞后的第一个面试，有点不太好，凭印象记录下面试和笔试题，正好为这段时间的整理提供一方面的素材。\n\n<!-- more -->\n\n基本过程：一点半到前台，填写了基本信息表，然后一个面试的人（估计是项目组技术负责人）带我穿过一个大厅，到了一个小房间，然后给我一份三页的笔试题让我先做着，，大概半个小时之后开始，带我进来的人和另外一个女性（懂技术，应该不是hr）一起进来面试。\n\n### 一、笔试题\n\n#### 1、基础题\n（1）面向对象的特性、修饰符类型、构造函数和析构函数的作用\n\n面向对象的特性：\n\n- 继承：它可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。\n\n- 封装：也就是把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。\n\n- 多态：一个类实例的相同方法在不同情形有不同表现形式。多态机制使具有不同内部结构的对象可以共享相同的外部接口。这意味着，虽然针对不同对象的具体操作不同，但通过一个公共的类，它们（那些操作）可以通过相同的方式予以调用。\n\n参考：[面向对象三大基本特性,五大基本原则-博客园](http://www.cnblogs.com/hnrainll/archive/2012/09/18/2690846.html)\n\n```\npublic（公共的、默认）：可被外部访问\nprotected（受保护的）：只允许子类访问\nprivate（私有的）：类内部可访问，外部不可访问（子类不能访问）\n```\n\n访问权限 | public | protected | private\n--|--|--|--\n所有|是|否|否\n子类|是|是|否\n类内|是|否|否\n\n参考：[PHP面向对象——访问修饰符](https://www.cnblogs.com/giantpanda/archive/2012/11/08/2760074.html)\n\n**构造函数和析构函数作用：**\n\n- 构造函数\n\n> 构造函数可以接受参数，能够在创建对象时赋值给对象属性\n构造函数可以调用类方法或其他函数\n构造函数可以调用其他类的构造函数\n\n- 析构函数\n\n> 析构函数是在销毁对象时，自动调用，不能显示的调用。\n析构函数不能带参数。\n\n在以下几种情况下可能会调用析构函数（但不一定）：\n\n- PHP页面加载完毕之后；\n- unset()类；\n- 变量引用指向别的对象或值时；\n\n（2）输出执行结果\n\n```php\n$a = 87;\n$b = ($a % 7 ) * 16;\n\necho $a > $b ?: 0;\n```\n（3）输出执行结果\n\n```php\n$a = 10;\n$b = &$a;\nunset($b);\n$b = 2;\necho $b;\n```\n\n（4）null、‘’、‘ ’、0、‘0’、false 哪些是==的？\n\n（4）array_split()、chunk_split()、wordrap()区别和用法\n\n（5）交换数组键和值的函数、多维数组排序函数和使用方法\n\n（6）数据库优化的原则\n\n（7）php多进程的实现\n\n（8）闭包和匿名函数的使用\n\n（9）如何判断sql性能\n\n#### 2、算法题：\n\n（1）递归实现汉诺塔\n\n（2）查出一段时间内星期一和星期日的所有日期\n\n（3）实现min函数获取数组最小元素的\n\n#### 3、系统设计\n（1）访问量30w，高并发3000，需要日期和XX（另一个字段），谈谈设计思路。\n\n（2）一个系统有多个属性，数量不定，但是不会超过32，如何实现增删改和快速检索？\n\n#### 4、加分项：\n（1）列举5个以上php的扩展的使用方法\n\n（2）简述一下你的得意之作\n\n### 二、面试题\n\n1、谈谈对设计模式的了解\n\n资料：\n\n- [图说设计模式-doc](https://www.cnblogs.com/giantpanda/archive/2012/11/08/2760074.html)\n- [史上最全设计模式导学目录（完整版）-csdn](https://www.cnblogs.com/giantpanda/archive/2012/11/08/2760074.html)\n\n2、cookie和session的使用\n\n3、索引的设计原则\n\n有A、B、C三个字段，现在需要查询 A AB AC，需要怎么建索引？\n\n4、网络协议（七层、五层）分别是什么？TCP、HTTP分别是哪一层的？\n\n五层协议\n\n```\n应用层（HTTP、FTP）：\n    为应用软件提供了很多服务\n    构建于 TCP 协议之上\n    屏蔽网络传输相关细节\n传输层（TCP）：\n    向用户传输可靠的端到端(End-to-End)服务\n    传输层向高层屏蔽了下层数据通信的细节\n网络层（IP）：为数据在结点之间传输创建逻辑链路\n数据链路层（数据链路）：在通信的实体间建立数据链路连接\n物理层（物理介质）：定义物理设备如何传输数据\n```\n\n5、负载均衡了解吗？\n\n6、php运行模式有哪些？\n\n```\ncgi 通用网关接口（Common Gateway Interface)）\n\nfast-cgi 常驻 (long-live) 型的 CGI\n\ncli  命令行运行   （Command Line Interface）：一般使用调用脚本、查看php信息时会使用到该模式\ne.g:php -r \"phpinfo();\" |less 分页显示\n\nweb模块模式：\nApache + mod_php5\nlighttp + spawn-fcgi\nnginx + PHP-FPM\n```\n参考：\n\n- [PHP 运行模式与运行原理–segmentfault](https://segmentfault.com/a/1190000014913877)\n- [PHP运行模式-CSDN](https://blog.csdn.net/hguisu/article/details/7386882)\n\n7、你了解过哪些github的项目？\n\n8、索引是怎么提升效率的？\n\n9、一个接口请求是3秒，如果优化到只需要0.3秒？(api接口优化)\n\n10、浏览器输入url到页面加载出页面，整个流程是怎样的？\n\n11、数据结构类型有哪些？\n\n12、你了解的错误码有哪些？http请求时Cookie是请求的哪个部分？请求头有哪些？\n\n13、状态码有哪些？\n\n14、php是如何运行的？\n\n15、git、svn了解吗？\n\n### 三、总结\n\n整体技术点回答的都不太好，一年的工作中一直停留在写业务上，系统设计和基础巩固，对于深一点的技术方案考虑较少，以前学过的基础知识，也因为长期没整理而一时答不上来，本身又不善言谈，表现不了自己的优势，又把自己的劣势暴露无意，所以一直在面试上都坎坎坷坷，当然最主要的还是基本功不太扎实，没有形成自身的核心竞争力。\n\n**未来可期，自勉!**","slug":"interview-bfwl","published":1,"updated":"2019-05-12T15:54:50.728Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c3zn00142wuuz8t40z67","content":"<p>正式工作正好满一年，一直加班加需求的工作状态有点让自己疲倦了，所以想要停下来整理一段时间，再出发，也为了自己的职业发展能够向一个更好的方向发展，寻求更深层的技术拓展，和更多的技术伙伴，这个裸辞后的第一个面试，有点不太好，凭印象记录下面试和笔试题，正好为这段时间的整理提供一方面的素材。</p>\n<a id=\"more\"></a>\n<p>基本过程：一点半到前台，填写了基本信息表，然后一个面试的人（估计是项目组技术负责人）带我穿过一个大厅，到了一个小房间，然后给我一份三页的笔试题让我先做着，，大概半个小时之后开始，带我进来的人和另外一个女性（懂技术，应该不是hr）一起进来面试。</p>\n<h3 id=\"一-笔试题\"><a class=\"markdownIt-Anchor\" href=\"#一-笔试题\"></a> 一、笔试题</h3>\n<h4 id=\"1-基础题\"><a class=\"markdownIt-Anchor\" href=\"#1-基础题\"></a> 1、基础题</h4>\n<p>（1）面向对象的特性、修饰符类型、构造函数和析构函数的作用</p>\n<p>面向对象的特性：</p>\n<ul>\n<li>\n<p>继承：它可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。</p>\n</li>\n<li>\n<p>封装：也就是把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。</p>\n</li>\n<li>\n<p>多态：一个类实例的相同方法在不同情形有不同表现形式。多态机制使具有不同内部结构的对象可以共享相同的外部接口。这意味着，虽然针对不同对象的具体操作不同，但通过一个公共的类，它们（那些操作）可以通过相同的方式予以调用。</p>\n</li>\n</ul>\n<p>参考：<a href=\"http://www.cnblogs.com/hnrainll/archive/2012/09/18/2690846.html\" target=\"_blank\" rel=\"noopener\">面向对象三大基本特性,五大基本原则-博客园</a></p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span>（公共的、默认）：可被外部访问</span><br><span class=\"line\"><span class=\"keyword\">protected</span>（受保护的）：只允许子类访问</span><br><span class=\"line\"><span class=\"keyword\">private</span>（私有的）：类内部可访问，外部不可访问（子类不能访问）</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>访问权限</th>\n<th>public</th>\n<th>protected</th>\n<th>private</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>所有</td>\n<td>是</td>\n<td>否</td>\n<td>否</td>\n</tr>\n<tr>\n<td>子类</td>\n<td>是</td>\n<td>是</td>\n<td>否</td>\n</tr>\n<tr>\n<td>类内</td>\n<td>是</td>\n<td>否</td>\n<td>否</td>\n</tr>\n</tbody>\n</table>\n<p>参考：<a href=\"https://www.cnblogs.com/giantpanda/archive/2012/11/08/2760074.html\" target=\"_blank\" rel=\"noopener\">PHP面向对象——访问修饰符</a></p>\n<p><strong>构造函数和析构函数作用：</strong></p>\n<ul>\n<li>构造函数</li>\n</ul>\n<blockquote>\n<p>构造函数可以接受参数，能够在创建对象时赋值给对象属性<br>\n构造函数可以调用类方法或其他函数<br>\n构造函数可以调用其他类的构造函数</p>\n</blockquote>\n<ul>\n<li>析构函数</li>\n</ul>\n<blockquote>\n<p>析构函数是在销毁对象时，自动调用，不能显示的调用。<br>\n析构函数不能带参数。</p>\n</blockquote>\n<p>在以下几种情况下可能会调用析构函数（但不一定）：</p>\n<ul>\n<li>PHP页面加载完毕之后；</li>\n<li>unset()类；</li>\n<li>变量引用指向别的对象或值时；</li>\n</ul>\n<p>（2）输出执行结果</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a = <span class=\"number\">87</span>;</span><br><span class=\"line\">$b = ($a % <span class=\"number\">7</span> ) * <span class=\"number\">16</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $a &gt; $b ?: <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<p>（3）输出执行结果</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a = <span class=\"number\">10</span>;</span><br><span class=\"line\">$b = &amp;$a;</span><br><span class=\"line\"><span class=\"keyword\">unset</span>($b);</span><br><span class=\"line\">$b = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $b;</span><br></pre></td></tr></table></figure>\n<p>（4）null、‘’、‘ ’、0、‘0’、false 哪些是==的？</p>\n<p>（4）array_split()、chunk_split()、wordrap()区别和用法</p>\n<p>（5）交换数组键和值的函数、多维数组排序函数和使用方法</p>\n<p>（6）数据库优化的原则</p>\n<p>（7）php多进程的实现</p>\n<p>（8）闭包和匿名函数的使用</p>\n<p>（9）如何判断sql性能</p>\n<h4 id=\"2-算法题\"><a class=\"markdownIt-Anchor\" href=\"#2-算法题\"></a> 2、算法题：</h4>\n<p>（1）递归实现汉诺塔</p>\n<p>（2）查出一段时间内星期一和星期日的所有日期</p>\n<p>（3）实现min函数获取数组最小元素的</p>\n<h4 id=\"3-系统设计\"><a class=\"markdownIt-Anchor\" href=\"#3-系统设计\"></a> 3、系统设计</h4>\n<p>（1）访问量30w，高并发3000，需要日期和XX（另一个字段），谈谈设计思路。</p>\n<p>（2）一个系统有多个属性，数量不定，但是不会超过32，如何实现增删改和快速检索？</p>\n<h4 id=\"4-加分项\"><a class=\"markdownIt-Anchor\" href=\"#4-加分项\"></a> 4、加分项：</h4>\n<p>（1）列举5个以上php的扩展的使用方法</p>\n<p>（2）简述一下你的得意之作</p>\n<h3 id=\"二-面试题\"><a class=\"markdownIt-Anchor\" href=\"#二-面试题\"></a> 二、面试题</h3>\n<p>1、谈谈对设计模式的了解</p>\n<p>资料：</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/giantpanda/archive/2012/11/08/2760074.html\" target=\"_blank\" rel=\"noopener\">图说设计模式-doc</a></li>\n<li><a href=\"https://www.cnblogs.com/giantpanda/archive/2012/11/08/2760074.html\" target=\"_blank\" rel=\"noopener\">史上最全设计模式导学目录（完整版）-csdn</a></li>\n</ul>\n<p>2、cookie和session的使用</p>\n<p>3、索引的设计原则</p>\n<p>有A、B、C三个字段，现在需要查询 A AB AC，需要怎么建索引？</p>\n<p>4、网络协议（七层、五层）分别是什么？TCP、HTTP分别是哪一层的？</p>\n<p>五层协议</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">应用层（HTTP、FTP）：</span><br><span class=\"line\">    为应用软件提供了很多服务</span><br><span class=\"line\">    构建于 TCP 协议之上</span><br><span class=\"line\">    屏蔽网络传输相关细节</span><br><span class=\"line\">传输层（TCP）：</span><br><span class=\"line\">    向用户传输可靠的端到端(<span class=\"meta\">End</span>-to-<span class=\"meta\">End</span>)服务</span><br><span class=\"line\">    传输层向高层屏蔽了下层数据通信的细节</span><br><span class=\"line\">网络层（<span class=\"built_in\">IP</span>）：为数据在结点之间传输创建逻辑链路</span><br><span class=\"line\">数据链路层（数据链路）：在通信的实体间建立数据链路连接</span><br><span class=\"line\">物理层（物理介质）：定义物理设备如何传输数据</span><br></pre></td></tr></table></figure>\n<p>5、负载均衡了解吗？</p>\n<p>6、php运行模式有哪些？</p>\n<figure class=\"highlight monkey\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cgi 通用网关接口（Common Gateway <span class=\"class\"><span class=\"keyword\">Interface</span>)）</span></span><br><span class=\"line\"></span><br><span class=\"line\">fast-cgi 常驻 (long-live) 型的 CGI</span><br><span class=\"line\"></span><br><span class=\"line\">cli  命令行运行   （Command Line <span class=\"class\"><span class=\"keyword\">Interface</span>）：一般使用调用脚本、查看<span class=\"title\">php</span>信息时会使用到该模式</span></span><br><span class=\"line\">e.g:php -r <span class=\"string\">\"phpinfo();\"</span> |less 分页显示</span><br><span class=\"line\"></span><br><span class=\"line\">web模块模式：</span><br><span class=\"line\">Apache + mod_php5</span><br><span class=\"line\">lighttp + spawn-fcgi</span><br><span class=\"line\">nginx + PHP-FPM</span><br></pre></td></tr></table></figure>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000014913877\" target=\"_blank\" rel=\"noopener\">PHP 运行模式与运行原理–segmentfault</a></li>\n<li><a href=\"https://blog.csdn.net/hguisu/article/details/7386882\" target=\"_blank\" rel=\"noopener\">PHP运行模式-CSDN</a></li>\n</ul>\n<p>7、你了解过哪些github的项目？</p>\n<p>8、索引是怎么提升效率的？</p>\n<p>9、一个接口请求是3秒，如果优化到只需要0.3秒？(api接口优化)</p>\n<p>10、浏览器输入url到页面加载出页面，整个流程是怎样的？</p>\n<p>11、数据结构类型有哪些？</p>\n<p>12、你了解的错误码有哪些？http请求时Cookie是请求的哪个部分？请求头有哪些？</p>\n<p>13、状态码有哪些？</p>\n<p>14、php是如何运行的？</p>\n<p>15、git、svn了解吗？</p>\n<h3 id=\"三-总结\"><a class=\"markdownIt-Anchor\" href=\"#三-总结\"></a> 三、总结</h3>\n<p>整体技术点回答的都不太好，一年的工作中一直停留在写业务上，系统设计和基础巩固，对于深一点的技术方案考虑较少，以前学过的基础知识，也因为长期没整理而一时答不上来，本身又不善言谈，表现不了自己的优势，又把自己的劣势暴露无意，所以一直在面试上都坎坎坷坷，当然最主要的还是基本功不太扎实，没有形成自身的核心竞争力。</p>\n<p><strong>未来可期，自勉!</strong></p>\n","site":{"data":{}},"excerpt":"<p>正式工作正好满一年，一直加班加需求的工作状态有点让自己疲倦了，所以想要停下来整理一段时间，再出发，也为了自己的职业发展能够向一个更好的方向发展，寻求更深层的技术拓展，和更多的技术伙伴，这个裸辞后的第一个面试，有点不太好，凭印象记录下面试和笔试题，正好为这段时间的整理提供一方面的素材。</p>","more":"<p>基本过程：一点半到前台，填写了基本信息表，然后一个面试的人（估计是项目组技术负责人）带我穿过一个大厅，到了一个小房间，然后给我一份三页的笔试题让我先做着，，大概半个小时之后开始，带我进来的人和另外一个女性（懂技术，应该不是hr）一起进来面试。</p>\n<h3 id=\"一-笔试题\"><a class=\"markdownIt-Anchor\" href=\"#一-笔试题\"></a> 一、笔试题</h3>\n<h4 id=\"1-基础题\"><a class=\"markdownIt-Anchor\" href=\"#1-基础题\"></a> 1、基础题</h4>\n<p>（1）面向对象的特性、修饰符类型、构造函数和析构函数的作用</p>\n<p>面向对象的特性：</p>\n<ul>\n<li>\n<p>继承：它可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。</p>\n</li>\n<li>\n<p>封装：也就是把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。</p>\n</li>\n<li>\n<p>多态：一个类实例的相同方法在不同情形有不同表现形式。多态机制使具有不同内部结构的对象可以共享相同的外部接口。这意味着，虽然针对不同对象的具体操作不同，但通过一个公共的类，它们（那些操作）可以通过相同的方式予以调用。</p>\n</li>\n</ul>\n<p>参考：<a href=\"http://www.cnblogs.com/hnrainll/archive/2012/09/18/2690846.html\" target=\"_blank\" rel=\"noopener\">面向对象三大基本特性,五大基本原则-博客园</a></p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span>（公共的、默认）：可被外部访问</span><br><span class=\"line\"><span class=\"keyword\">protected</span>（受保护的）：只允许子类访问</span><br><span class=\"line\"><span class=\"keyword\">private</span>（私有的）：类内部可访问，外部不可访问（子类不能访问）</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>访问权限</th>\n<th>public</th>\n<th>protected</th>\n<th>private</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>所有</td>\n<td>是</td>\n<td>否</td>\n<td>否</td>\n</tr>\n<tr>\n<td>子类</td>\n<td>是</td>\n<td>是</td>\n<td>否</td>\n</tr>\n<tr>\n<td>类内</td>\n<td>是</td>\n<td>否</td>\n<td>否</td>\n</tr>\n</tbody>\n</table>\n<p>参考：<a href=\"https://www.cnblogs.com/giantpanda/archive/2012/11/08/2760074.html\" target=\"_blank\" rel=\"noopener\">PHP面向对象——访问修饰符</a></p>\n<p><strong>构造函数和析构函数作用：</strong></p>\n<ul>\n<li>构造函数</li>\n</ul>\n<blockquote>\n<p>构造函数可以接受参数，能够在创建对象时赋值给对象属性<br>\n构造函数可以调用类方法或其他函数<br>\n构造函数可以调用其他类的构造函数</p>\n</blockquote>\n<ul>\n<li>析构函数</li>\n</ul>\n<blockquote>\n<p>析构函数是在销毁对象时，自动调用，不能显示的调用。<br>\n析构函数不能带参数。</p>\n</blockquote>\n<p>在以下几种情况下可能会调用析构函数（但不一定）：</p>\n<ul>\n<li>PHP页面加载完毕之后；</li>\n<li>unset()类；</li>\n<li>变量引用指向别的对象或值时；</li>\n</ul>\n<p>（2）输出执行结果</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a = <span class=\"number\">87</span>;</span><br><span class=\"line\">$b = ($a % <span class=\"number\">7</span> ) * <span class=\"number\">16</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $a &gt; $b ?: <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<p>（3）输出执行结果</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a = <span class=\"number\">10</span>;</span><br><span class=\"line\">$b = &amp;$a;</span><br><span class=\"line\"><span class=\"keyword\">unset</span>($b);</span><br><span class=\"line\">$b = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $b;</span><br></pre></td></tr></table></figure>\n<p>（4）null、‘’、‘ ’、0、‘0’、false 哪些是==的？</p>\n<p>（4）array_split()、chunk_split()、wordrap()区别和用法</p>\n<p>（5）交换数组键和值的函数、多维数组排序函数和使用方法</p>\n<p>（6）数据库优化的原则</p>\n<p>（7）php多进程的实现</p>\n<p>（8）闭包和匿名函数的使用</p>\n<p>（9）如何判断sql性能</p>\n<h4 id=\"2-算法题\"><a class=\"markdownIt-Anchor\" href=\"#2-算法题\"></a> 2、算法题：</h4>\n<p>（1）递归实现汉诺塔</p>\n<p>（2）查出一段时间内星期一和星期日的所有日期</p>\n<p>（3）实现min函数获取数组最小元素的</p>\n<h4 id=\"3-系统设计\"><a class=\"markdownIt-Anchor\" href=\"#3-系统设计\"></a> 3、系统设计</h4>\n<p>（1）访问量30w，高并发3000，需要日期和XX（另一个字段），谈谈设计思路。</p>\n<p>（2）一个系统有多个属性，数量不定，但是不会超过32，如何实现增删改和快速检索？</p>\n<h4 id=\"4-加分项\"><a class=\"markdownIt-Anchor\" href=\"#4-加分项\"></a> 4、加分项：</h4>\n<p>（1）列举5个以上php的扩展的使用方法</p>\n<p>（2）简述一下你的得意之作</p>\n<h3 id=\"二-面试题\"><a class=\"markdownIt-Anchor\" href=\"#二-面试题\"></a> 二、面试题</h3>\n<p>1、谈谈对设计模式的了解</p>\n<p>资料：</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/giantpanda/archive/2012/11/08/2760074.html\" target=\"_blank\" rel=\"noopener\">图说设计模式-doc</a></li>\n<li><a href=\"https://www.cnblogs.com/giantpanda/archive/2012/11/08/2760074.html\" target=\"_blank\" rel=\"noopener\">史上最全设计模式导学目录（完整版）-csdn</a></li>\n</ul>\n<p>2、cookie和session的使用</p>\n<p>3、索引的设计原则</p>\n<p>有A、B、C三个字段，现在需要查询 A AB AC，需要怎么建索引？</p>\n<p>4、网络协议（七层、五层）分别是什么？TCP、HTTP分别是哪一层的？</p>\n<p>五层协议</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">应用层（HTTP、FTP）：</span><br><span class=\"line\">    为应用软件提供了很多服务</span><br><span class=\"line\">    构建于 TCP 协议之上</span><br><span class=\"line\">    屏蔽网络传输相关细节</span><br><span class=\"line\">传输层（TCP）：</span><br><span class=\"line\">    向用户传输可靠的端到端(<span class=\"meta\">End</span>-to-<span class=\"meta\">End</span>)服务</span><br><span class=\"line\">    传输层向高层屏蔽了下层数据通信的细节</span><br><span class=\"line\">网络层（<span class=\"built_in\">IP</span>）：为数据在结点之间传输创建逻辑链路</span><br><span class=\"line\">数据链路层（数据链路）：在通信的实体间建立数据链路连接</span><br><span class=\"line\">物理层（物理介质）：定义物理设备如何传输数据</span><br></pre></td></tr></table></figure>\n<p>5、负载均衡了解吗？</p>\n<p>6、php运行模式有哪些？</p>\n<figure class=\"highlight monkey\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cgi 通用网关接口（Common Gateway <span class=\"class\"><span class=\"keyword\">Interface</span>)）</span></span><br><span class=\"line\"></span><br><span class=\"line\">fast-cgi 常驻 (long-live) 型的 CGI</span><br><span class=\"line\"></span><br><span class=\"line\">cli  命令行运行   （Command Line <span class=\"class\"><span class=\"keyword\">Interface</span>）：一般使用调用脚本、查看<span class=\"title\">php</span>信息时会使用到该模式</span></span><br><span class=\"line\">e.g:php -r <span class=\"string\">\"phpinfo();\"</span> |less 分页显示</span><br><span class=\"line\"></span><br><span class=\"line\">web模块模式：</span><br><span class=\"line\">Apache + mod_php5</span><br><span class=\"line\">lighttp + spawn-fcgi</span><br><span class=\"line\">nginx + PHP-FPM</span><br></pre></td></tr></table></figure>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000014913877\" target=\"_blank\" rel=\"noopener\">PHP 运行模式与运行原理–segmentfault</a></li>\n<li><a href=\"https://blog.csdn.net/hguisu/article/details/7386882\" target=\"_blank\" rel=\"noopener\">PHP运行模式-CSDN</a></li>\n</ul>\n<p>7、你了解过哪些github的项目？</p>\n<p>8、索引是怎么提升效率的？</p>\n<p>9、一个接口请求是3秒，如果优化到只需要0.3秒？(api接口优化)</p>\n<p>10、浏览器输入url到页面加载出页面，整个流程是怎样的？</p>\n<p>11、数据结构类型有哪些？</p>\n<p>12、你了解的错误码有哪些？http请求时Cookie是请求的哪个部分？请求头有哪些？</p>\n<p>13、状态码有哪些？</p>\n<p>14、php是如何运行的？</p>\n<p>15、git、svn了解吗？</p>\n<h3 id=\"三-总结\"><a class=\"markdownIt-Anchor\" href=\"#三-总结\"></a> 三、总结</h3>\n<p>整体技术点回答的都不太好，一年的工作中一直停留在写业务上，系统设计和基础巩固，对于深一点的技术方案考虑较少，以前学过的基础知识，也因为长期没整理而一时答不上来，本身又不善言谈，表现不了自己的优势，又把自己的劣势暴露无意，所以一直在面试上都坎坎坷坷，当然最主要的还是基本功不太扎实，没有形成自身的核心竞争力。</p>\n<p><strong>未来可期，自勉!</strong></p>"},{"title":"Hexo+Github搭建个人博客","date":"2018-05-01T08:42:13.000Z","_content":"\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n```bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n```bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n```bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n```bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/js-hexo.md","raw":"---\ntitle: Hexo+Github搭建个人博客\ndate: 2018-05-01 16:42:13\ntags:\n  - hexo\n  - github\ncategory:\n  - 【前端相关】\n---\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n```bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n```bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n```bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n```bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"js-hexo","published":1,"updated":"2019-05-12T15:53:30.763Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c3zo00162wuumwgbbkof","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<a id=\"more\"></a>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\"></a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\"></a> Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\"></a> Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\"></a> Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\"></a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>","more":"<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\"></a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\"></a> Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\"></a> Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\"></a> Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\"></a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>"},{"title":"【React入门】实现todolist功能","date":"2018-08-08T14:07:21.000Z","_content":"\n作为一名 PHP 初级的程序员，目前尚且处于学习 PHP 业务逻辑实现到日常工作中的阶段，但是由于现在想要搭建一个满意的个人博客，并且尝试过很多 hexo 主题后总是会对主题的某些或某个部分不太满意，\n所以为了以后可以自己实现相应页面的开发，所以还是想着能够学点前端框架的知识，为以后成为全栈工程师做准备。目前比较流行的前端框架主要有`React.js`和`Vue.js`，因为当前公司使用的是`React.js`开发的，所以也选择`React`作为学习对象。\n\n<!--more-->\n\n## 开发环境准备\n\n### 安装 node.js\n\n建议在 React 中使用 CommonJS 模块系统，比如 browserify 或 webpack(推荐使用)。\n\n使用淘宝定制的 cpm 命令行工具代替默认的 npm\n\n```bash\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\nnpm config set registry https://registry.npm.taobao.org\n```\n\n这样就可以使用 cnpm 命令来代替 npm 进行安装模块了：\n\n```bash\ncnpm install [name]\n```\n\n### 创建 react 应用\n\n```bash\ncnpm install -g create-react-app\ncd todolist-react/\nnpm start\n```\n\n### 目录结构\n\n- 原始结构\n\n```info\ntodolist-react/\n    node_modules/\n    public/\n        favicon.ico\n        index.html\n        manifest.json\n    src/\n        App.css\n        App.js\n        App.test.js\n        index.css\n        index.js\n        logo.svg\n    README.md\n    package-lock.json\n    package.json\n    .gitignore\n```\n\n## 代码实现\n\n### 准备工作\n\n（1）编写 todolist 功能时，对默认项目的文件进行删减，只需要保留主要的文件即可。\n\n将`App.js`重命名为`TodoList.js`，创建文件`TodoItem.js`。\n\n- 精简后的文件结构\n\n```info\ntodolist-react/\n    node_modules/\n    public/\n        favicon.ico\n        index.html\n        manifest.json\n    src/\n        TodoList.js\n        TodoItem.js\n        index.js\n    README.md\n    package-lock.json\n    package.json\n    .gitignore\n```\n\n（2）组件拆分\n\n`React` 的组件开发意思是将页面上每个部分作为一个组件，然后通过每个组件之间的通信，进行数据交互，实现完整页面的渲染。\n\n`TodoList` 功能包括用户输入部分和 `List` 清单部分，所以将整个功能拆分为两部分。用户输入部分为`TodoList`; `List`清单部分为`TodoItem`。\n\n（3）`index.js`代码实现\n\n```javascript\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\n// 引入TodoList组件\nimport TodoList from \"./TodoList\";\n\n// 获取TodoList返回的数据，并渲染到id为root的元素节点中\nReactDOM.render(<TodoList />, document.getElementById(\"root\"));\n```\n\n（4）`TodoList.js`代码实现\n\n```javascript\n// 引入React类，引入React.Component组件类\nimport React, { Component} from 'react';\n// 从当前目录下的TodoItem.js中引入TodoItem子组件\nimport TodoItem from './TodoItem';\n\n// 组件定义和实现\nclass TodoList extends Component {\n  // 通过render() 方法渲染页面数据\n  render() {\n    return (\n      <div>\n        <div>\n          <input value={this.state.inputValue} onChange={this.handleInputChange}/>\n          <button onClick={this.handleBtnClick}>add</button>\n        </div>\n        <ul>\n        {\n            return (\n                this.state.list.map((item, index) => {\n                    return <TodoItem key={index} content={item} index={index} delete={this.handleDelete}/>\n                })\n            )\n        }\n        </ul>\n      </div>\n    );\n  }\n}\n```\n\n### 未完待续\n","source":"_posts/js-react.md","raw":"---\ntitle: 【React入门】实现todolist功能\ndate: 2018-08-08 22:07:21\ntags:\n  - web\n  - React\ncategory:\n  - 【前端相关】\n---\n\n作为一名 PHP 初级的程序员，目前尚且处于学习 PHP 业务逻辑实现到日常工作中的阶段，但是由于现在想要搭建一个满意的个人博客，并且尝试过很多 hexo 主题后总是会对主题的某些或某个部分不太满意，\n所以为了以后可以自己实现相应页面的开发，所以还是想着能够学点前端框架的知识，为以后成为全栈工程师做准备。目前比较流行的前端框架主要有`React.js`和`Vue.js`，因为当前公司使用的是`React.js`开发的，所以也选择`React`作为学习对象。\n\n<!--more-->\n\n## 开发环境准备\n\n### 安装 node.js\n\n建议在 React 中使用 CommonJS 模块系统，比如 browserify 或 webpack(推荐使用)。\n\n使用淘宝定制的 cpm 命令行工具代替默认的 npm\n\n```bash\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\nnpm config set registry https://registry.npm.taobao.org\n```\n\n这样就可以使用 cnpm 命令来代替 npm 进行安装模块了：\n\n```bash\ncnpm install [name]\n```\n\n### 创建 react 应用\n\n```bash\ncnpm install -g create-react-app\ncd todolist-react/\nnpm start\n```\n\n### 目录结构\n\n- 原始结构\n\n```info\ntodolist-react/\n    node_modules/\n    public/\n        favicon.ico\n        index.html\n        manifest.json\n    src/\n        App.css\n        App.js\n        App.test.js\n        index.css\n        index.js\n        logo.svg\n    README.md\n    package-lock.json\n    package.json\n    .gitignore\n```\n\n## 代码实现\n\n### 准备工作\n\n（1）编写 todolist 功能时，对默认项目的文件进行删减，只需要保留主要的文件即可。\n\n将`App.js`重命名为`TodoList.js`，创建文件`TodoItem.js`。\n\n- 精简后的文件结构\n\n```info\ntodolist-react/\n    node_modules/\n    public/\n        favicon.ico\n        index.html\n        manifest.json\n    src/\n        TodoList.js\n        TodoItem.js\n        index.js\n    README.md\n    package-lock.json\n    package.json\n    .gitignore\n```\n\n（2）组件拆分\n\n`React` 的组件开发意思是将页面上每个部分作为一个组件，然后通过每个组件之间的通信，进行数据交互，实现完整页面的渲染。\n\n`TodoList` 功能包括用户输入部分和 `List` 清单部分，所以将整个功能拆分为两部分。用户输入部分为`TodoList`; `List`清单部分为`TodoItem`。\n\n（3）`index.js`代码实现\n\n```javascript\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\n// 引入TodoList组件\nimport TodoList from \"./TodoList\";\n\n// 获取TodoList返回的数据，并渲染到id为root的元素节点中\nReactDOM.render(<TodoList />, document.getElementById(\"root\"));\n```\n\n（4）`TodoList.js`代码实现\n\n```javascript\n// 引入React类，引入React.Component组件类\nimport React, { Component} from 'react';\n// 从当前目录下的TodoItem.js中引入TodoItem子组件\nimport TodoItem from './TodoItem';\n\n// 组件定义和实现\nclass TodoList extends Component {\n  // 通过render() 方法渲染页面数据\n  render() {\n    return (\n      <div>\n        <div>\n          <input value={this.state.inputValue} onChange={this.handleInputChange}/>\n          <button onClick={this.handleBtnClick}>add</button>\n        </div>\n        <ul>\n        {\n            return (\n                this.state.list.map((item, index) => {\n                    return <TodoItem key={index} content={item} index={index} delete={this.handleDelete}/>\n                })\n            )\n        }\n        </ul>\n      </div>\n    );\n  }\n}\n```\n\n### 未完待续\n","slug":"js-react","published":1,"updated":"2019-05-12T15:52:54.454Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c3zq00182wuuou1qkjlr","content":"<p>作为一名 PHP 初级的程序员，目前尚且处于学习 PHP 业务逻辑实现到日常工作中的阶段，但是由于现在想要搭建一个满意的个人博客，并且尝试过很多 hexo 主题后总是会对主题的某些或某个部分不太满意，<br>\n所以为了以后可以自己实现相应页面的开发，所以还是想着能够学点前端框架的知识，为以后成为全栈工程师做准备。目前比较流行的前端框架主要有<code>React.js</code>和<code>Vue.js</code>，因为当前公司使用的是<code>React.js</code>开发的，所以也选择<code>React</code>作为学习对象。</p>\n<a id=\"more\"></a>\n<h2 id=\"开发环境准备\"><a class=\"markdownIt-Anchor\" href=\"#开发环境准备\"></a> 开发环境准备</h2>\n<h3 id=\"安装-nodejs\"><a class=\"markdownIt-Anchor\" href=\"#安装-nodejs\"></a> 安装 node.js</h3>\n<p>建议在 React 中使用 CommonJS 模块系统，比如 browserify 或 webpack(推荐使用)。</p>\n<p>使用淘宝定制的 cpm 命令行工具代替默认的 npm</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<p>这样就可以使用 cnpm 命令来代替 npm 进行安装模块了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install [name]</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建-react-应用\"><a class=\"markdownIt-Anchor\" href=\"#创建-react-应用\"></a> 创建 react 应用</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install -g create-react-app</span><br><span class=\"line\"><span class=\"built_in\">cd</span> todolist-react/</span><br><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n<h3 id=\"目录结构\"><a class=\"markdownIt-Anchor\" href=\"#目录结构\"></a> 目录结构</h3>\n<ul>\n<li>原始结构</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">todolist-react/</span><br><span class=\"line\">    node_modules/</span><br><span class=\"line\">    public/</span><br><span class=\"line\">        favicon.ico</span><br><span class=\"line\">        index.html</span><br><span class=\"line\">        manifest.json</span><br><span class=\"line\">    src/</span><br><span class=\"line\">        App.css</span><br><span class=\"line\">        App.js</span><br><span class=\"line\">        App.test.js</span><br><span class=\"line\">        index.css</span><br><span class=\"line\">        index.js</span><br><span class=\"line\">        logo.svg</span><br><span class=\"line\">    README.md</span><br><span class=\"line\">    package-lock.json</span><br><span class=\"line\">    package.json</span><br><span class=\"line\">    .gitignore</span><br></pre></td></tr></table></figure>\n<h2 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\"></a> 代码实现</h2>\n<h3 id=\"准备工作\"><a class=\"markdownIt-Anchor\" href=\"#准备工作\"></a> 准备工作</h3>\n<p>（1）编写 todolist 功能时，对默认项目的文件进行删减，只需要保留主要的文件即可。</p>\n<p>将<code>App.js</code>重命名为<code>TodoList.js</code>，创建文件<code>TodoItem.js</code>。</p>\n<ul>\n<li>精简后的文件结构</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">todolist-react/</span><br><span class=\"line\">    node_modules/</span><br><span class=\"line\">    public/</span><br><span class=\"line\">        favicon.ico</span><br><span class=\"line\">        index.html</span><br><span class=\"line\">        manifest.json</span><br><span class=\"line\">    src/</span><br><span class=\"line\">        TodoList.js</span><br><span class=\"line\">        TodoItem.js</span><br><span class=\"line\">        index.js</span><br><span class=\"line\">    README.md</span><br><span class=\"line\">    package-lock.json</span><br><span class=\"line\">    package.json</span><br><span class=\"line\">    .gitignore</span><br></pre></td></tr></table></figure>\n<p>（2）组件拆分</p>\n<p><code>React</code> 的组件开发意思是将页面上每个部分作为一个组件，然后通过每个组件之间的通信，进行数据交互，实现完整页面的渲染。</p>\n<p><code>TodoList</code> 功能包括用户输入部分和 <code>List</code> 清单部分，所以将整个功能拆分为两部分。用户输入部分为<code>TodoList</code>; <code>List</code>清单部分为<code>TodoItem</code>。</p>\n<p>（3）<code>index.js</code>代码实现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引入TodoList组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> TodoList <span class=\"keyword\">from</span> <span class=\"string\">\"./TodoList\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取TodoList返回的数据，并渲染到id为root的元素节点中</span></span><br><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">TodoList</span> /&gt;</span>, document.getElementById(\"root\"));</span></span><br></pre></td></tr></table></figure>\n<p>（4）<code>TodoList.js</code>代码实现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入React类，引入React.Component组件类</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 从当前目录下的TodoItem.js中引入TodoItem子组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> TodoItem <span class=\"keyword\">from</span> <span class=\"string\">'./TodoItem'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 组件定义和实现</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoList</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 通过render() 方法渲染页面数据</span></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">          &lt;input value=&#123;<span class=\"keyword\">this</span>.state.inputValue&#125; onChange=&#123;<span class=\"keyword\">this</span>.handleInputChange&#125;/&gt;</span><br><span class=\"line\">          &lt;button onClick=&#123;<span class=\"keyword\">this</span>.handleBtnClick&#125;&gt;add&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>div&gt;</span><br><span class=\"line\">        &lt;ul&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.state.list.map(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">TodoItem</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;index&#125;</span> <span class=\"attr\">content</span>=<span class=\"string\">&#123;item&#125;</span> <span class=\"attr\">index</span>=<span class=\"string\">&#123;index&#125;</span> <span class=\"attr\">delete</span>=<span class=\"string\">&#123;this.handleDelete&#125;/</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                &#125;)</span></span><br><span class=\"line\"><span class=\"xml\">            )</span></span><br><span class=\"line\"><span class=\"xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"未完待续\"><a class=\"markdownIt-Anchor\" href=\"#未完待续\"></a> 未完待续</h3>\n","site":{"data":{}},"excerpt":"<p>作为一名 PHP 初级的程序员，目前尚且处于学习 PHP 业务逻辑实现到日常工作中的阶段，但是由于现在想要搭建一个满意的个人博客，并且尝试过很多 hexo 主题后总是会对主题的某些或某个部分不太满意，<br>\n所以为了以后可以自己实现相应页面的开发，所以还是想着能够学点前端框架的知识，为以后成为全栈工程师做准备。目前比较流行的前端框架主要有<code>React.js</code>和<code>Vue.js</code>，因为当前公司使用的是<code>React.js</code>开发的，所以也选择<code>React</code>作为学习对象。</p>","more":"<h2 id=\"开发环境准备\"><a class=\"markdownIt-Anchor\" href=\"#开发环境准备\"></a> 开发环境准备</h2>\n<h3 id=\"安装-nodejs\"><a class=\"markdownIt-Anchor\" href=\"#安装-nodejs\"></a> 安装 node.js</h3>\n<p>建议在 React 中使用 CommonJS 模块系统，比如 browserify 或 webpack(推荐使用)。</p>\n<p>使用淘宝定制的 cpm 命令行工具代替默认的 npm</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<p>这样就可以使用 cnpm 命令来代替 npm 进行安装模块了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install [name]</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建-react-应用\"><a class=\"markdownIt-Anchor\" href=\"#创建-react-应用\"></a> 创建 react 应用</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install -g create-react-app</span><br><span class=\"line\"><span class=\"built_in\">cd</span> todolist-react/</span><br><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n<h3 id=\"目录结构\"><a class=\"markdownIt-Anchor\" href=\"#目录结构\"></a> 目录结构</h3>\n<ul>\n<li>原始结构</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">todolist-react/</span><br><span class=\"line\">    node_modules/</span><br><span class=\"line\">    public/</span><br><span class=\"line\">        favicon.ico</span><br><span class=\"line\">        index.html</span><br><span class=\"line\">        manifest.json</span><br><span class=\"line\">    src/</span><br><span class=\"line\">        App.css</span><br><span class=\"line\">        App.js</span><br><span class=\"line\">        App.test.js</span><br><span class=\"line\">        index.css</span><br><span class=\"line\">        index.js</span><br><span class=\"line\">        logo.svg</span><br><span class=\"line\">    README.md</span><br><span class=\"line\">    package-lock.json</span><br><span class=\"line\">    package.json</span><br><span class=\"line\">    .gitignore</span><br></pre></td></tr></table></figure>\n<h2 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\"></a> 代码实现</h2>\n<h3 id=\"准备工作\"><a class=\"markdownIt-Anchor\" href=\"#准备工作\"></a> 准备工作</h3>\n<p>（1）编写 todolist 功能时，对默认项目的文件进行删减，只需要保留主要的文件即可。</p>\n<p>将<code>App.js</code>重命名为<code>TodoList.js</code>，创建文件<code>TodoItem.js</code>。</p>\n<ul>\n<li>精简后的文件结构</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">todolist-react/</span><br><span class=\"line\">    node_modules/</span><br><span class=\"line\">    public/</span><br><span class=\"line\">        favicon.ico</span><br><span class=\"line\">        index.html</span><br><span class=\"line\">        manifest.json</span><br><span class=\"line\">    src/</span><br><span class=\"line\">        TodoList.js</span><br><span class=\"line\">        TodoItem.js</span><br><span class=\"line\">        index.js</span><br><span class=\"line\">    README.md</span><br><span class=\"line\">    package-lock.json</span><br><span class=\"line\">    package.json</span><br><span class=\"line\">    .gitignore</span><br></pre></td></tr></table></figure>\n<p>（2）组件拆分</p>\n<p><code>React</code> 的组件开发意思是将页面上每个部分作为一个组件，然后通过每个组件之间的通信，进行数据交互，实现完整页面的渲染。</p>\n<p><code>TodoList</code> 功能包括用户输入部分和 <code>List</code> 清单部分，所以将整个功能拆分为两部分。用户输入部分为<code>TodoList</code>; <code>List</code>清单部分为<code>TodoItem</code>。</p>\n<p>（3）<code>index.js</code>代码实现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引入TodoList组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> TodoList <span class=\"keyword\">from</span> <span class=\"string\">\"./TodoList\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取TodoList返回的数据，并渲染到id为root的元素节点中</span></span><br><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">TodoList</span> /&gt;</span>, document.getElementById(\"root\"));</span></span><br></pre></td></tr></table></figure>\n<p>（4）<code>TodoList.js</code>代码实现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入React类，引入React.Component组件类</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 从当前目录下的TodoItem.js中引入TodoItem子组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> TodoItem <span class=\"keyword\">from</span> <span class=\"string\">'./TodoItem'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 组件定义和实现</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoList</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 通过render() 方法渲染页面数据</span></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">          &lt;input value=&#123;<span class=\"keyword\">this</span>.state.inputValue&#125; onChange=&#123;<span class=\"keyword\">this</span>.handleInputChange&#125;/&gt;</span><br><span class=\"line\">          &lt;button onClick=&#123;<span class=\"keyword\">this</span>.handleBtnClick&#125;&gt;add&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>div&gt;</span><br><span class=\"line\">        &lt;ul&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.state.list.map(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">TodoItem</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;index&#125;</span> <span class=\"attr\">content</span>=<span class=\"string\">&#123;item&#125;</span> <span class=\"attr\">index</span>=<span class=\"string\">&#123;index&#125;</span> <span class=\"attr\">delete</span>=<span class=\"string\">&#123;this.handleDelete&#125;/</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                &#125;)</span></span><br><span class=\"line\"><span class=\"xml\">            )</span></span><br><span class=\"line\"><span class=\"xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"未完待续\"><a class=\"markdownIt-Anchor\" href=\"#未完待续\"></a> 未完待续</h3>"},{"title":"【Linux】网站上线","date":"2018-07-07T04:00:00.000Z","_content":"\n作为后端程序员，对网站上线的操作需要有一定的了解，对于一些没有专门运维人员的公司，运维上线的操作就需要后端程序员来执行。\n需要学习域名解析、本地文件和服务器文件传递`scp`的相关操作。\n\n<!--more-->\n\n## 一、上传网站到服务器\n\n### 1.将本地文件上传到远程服务器：**scp**\n\n#### (1) 具体用法：\n\n> scp -r {本地目录的文件} {服务器用户名@远程服务器 ip:{远程服务器的文件目录}}\n\n`scp -r ./demo/* root@47.94.255.230:/root/www`\n\n### 2.CentOS 系统管理命令：\n\n```bash\n# 使用ssh登录远程服务器\nssh {user}@{ipv4}\n\n# 安装scp命令\nyum install openssh-client\n\n# 查看进程\nps -ef | grep nginx\n\n# 验证nginx配置文件语法\nnginx -t\n\n# 关闭nginx服务进程\nnginx -s stop\n\n# 开启nginx服务进程\nnginx -s reload\n```\n\n## 二、域名解析\n\n### 1.解析设置\n\n| 记录类型 | 主机记录 | 解析线路(jsp) | 记录值 | TTL 值  |\n| :------: | :------: | :-----------: | :----: | :-----: |\n|    A     |   www    |     默认      | {ipv4} | 10 分钟 |\n|    A     |    @     |     默认      | {ipv4} | 10 分钟 |\n\n### 2.说明\n\n(1) `www`表示对有`www`前缀的完整域名进行解析\n\n(2) `@`表示对没有`www`前缀的省略域名进行解析\n\n(3) `CNAME`表示需要将域名重定向到另一个域名[使用 github 搭建博客绑定独立域名时需要用到]\n\n## 三、HTTP 协议在访问域名时的工作流程\n\n```ini\n输入网址(imooc.com)\n        ||\n        \\/\nDNS解析，寻找对应服务器地址\n        ||\n        \\/\n进行第一次握手（HTTP会话）\n        ||\n        \\/\n建立文档树，加载资源\n```\n","source":"_posts/linixx-web-goserver.md","raw":"---\ntitle: 【Linux】网站上线\ndate: 2018-07-7 12:00:00\ntags:\n  - 上线\ncategory:\n  - 【Linux相关】\n---\n\n作为后端程序员，对网站上线的操作需要有一定的了解，对于一些没有专门运维人员的公司，运维上线的操作就需要后端程序员来执行。\n需要学习域名解析、本地文件和服务器文件传递`scp`的相关操作。\n\n<!--more-->\n\n## 一、上传网站到服务器\n\n### 1.将本地文件上传到远程服务器：**scp**\n\n#### (1) 具体用法：\n\n> scp -r {本地目录的文件} {服务器用户名@远程服务器 ip:{远程服务器的文件目录}}\n\n`scp -r ./demo/* root@47.94.255.230:/root/www`\n\n### 2.CentOS 系统管理命令：\n\n```bash\n# 使用ssh登录远程服务器\nssh {user}@{ipv4}\n\n# 安装scp命令\nyum install openssh-client\n\n# 查看进程\nps -ef | grep nginx\n\n# 验证nginx配置文件语法\nnginx -t\n\n# 关闭nginx服务进程\nnginx -s stop\n\n# 开启nginx服务进程\nnginx -s reload\n```\n\n## 二、域名解析\n\n### 1.解析设置\n\n| 记录类型 | 主机记录 | 解析线路(jsp) | 记录值 | TTL 值  |\n| :------: | :------: | :-----------: | :----: | :-----: |\n|    A     |   www    |     默认      | {ipv4} | 10 分钟 |\n|    A     |    @     |     默认      | {ipv4} | 10 分钟 |\n\n### 2.说明\n\n(1) `www`表示对有`www`前缀的完整域名进行解析\n\n(2) `@`表示对没有`www`前缀的省略域名进行解析\n\n(3) `CNAME`表示需要将域名重定向到另一个域名[使用 github 搭建博客绑定独立域名时需要用到]\n\n## 三、HTTP 协议在访问域名时的工作流程\n\n```ini\n输入网址(imooc.com)\n        ||\n        \\/\nDNS解析，寻找对应服务器地址\n        ||\n        \\/\n进行第一次握手（HTTP会话）\n        ||\n        \\/\n建立文档树，加载资源\n```\n","slug":"linixx-web-goserver","published":1,"updated":"2019-05-12T15:50:58.544Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c3zt001c2wuut99ddcyd","content":"<p>作为后端程序员，对网站上线的操作需要有一定的了解，对于一些没有专门运维人员的公司，运维上线的操作就需要后端程序员来执行。<br>\n需要学习域名解析、本地文件和服务器文件传递<code>scp</code>的相关操作。</p>\n<a id=\"more\"></a>\n<h2 id=\"一-上传网站到服务器\"><a class=\"markdownIt-Anchor\" href=\"#一-上传网站到服务器\"></a> 一、上传网站到服务器</h2>\n<h3 id=\"1将本地文件上传到远程服务器scp\"><a class=\"markdownIt-Anchor\" href=\"#1将本地文件上传到远程服务器scp\"></a> 1.将本地文件上传到远程服务器：<strong>scp</strong></h3>\n<h4 id=\"1-具体用法\"><a class=\"markdownIt-Anchor\" href=\"#1-具体用法\"></a> (1) 具体用法：</h4>\n<blockquote>\n<p>scp -r {本地目录的文件} {服务器用户名@远程服务器 ip:{远程服务器的文件目录}}</p>\n</blockquote>\n<p><code>scp -r ./demo/* root@47.94.255.230:/root/www</code></p>\n<h3 id=\"2centos-系统管理命令\"><a class=\"markdownIt-Anchor\" href=\"#2centos-系统管理命令\"></a> 2.CentOS 系统管理命令：</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用ssh登录远程服务器</span></span><br><span class=\"line\">ssh &#123;user&#125;@&#123;ipv4&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装scp命令</span></span><br><span class=\"line\">yum install openssh-client</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看进程</span></span><br><span class=\"line\">ps -ef | grep nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证nginx配置文件语法</span></span><br><span class=\"line\">nginx -t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭nginx服务进程</span></span><br><span class=\"line\">nginx -s stop</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开启nginx服务进程</span></span><br><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n<h2 id=\"二-域名解析\"><a class=\"markdownIt-Anchor\" href=\"#二-域名解析\"></a> 二、域名解析</h2>\n<h3 id=\"1解析设置\"><a class=\"markdownIt-Anchor\" href=\"#1解析设置\"></a> 1.解析设置</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">记录类型</th>\n<th style=\"text-align:center\">主机记录</th>\n<th style=\"text-align:center\">解析线路(jsp)</th>\n<th style=\"text-align:center\">记录值</th>\n<th style=\"text-align:center\">TTL 值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">A</td>\n<td style=\"text-align:center\">www</td>\n<td style=\"text-align:center\">默认</td>\n<td style=\"text-align:center\">{ipv4}</td>\n<td style=\"text-align:center\">10 分钟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">A</td>\n<td style=\"text-align:center\">@</td>\n<td style=\"text-align:center\">默认</td>\n<td style=\"text-align:center\">{ipv4}</td>\n<td style=\"text-align:center\">10 分钟</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"2说明\"><a class=\"markdownIt-Anchor\" href=\"#2说明\"></a> 2.说明</h3>\n<p>(1) <code>www</code>表示对有<code>www</code>前缀的完整域名进行解析</p>\n<p>(2) <code>@</code>表示对没有<code>www</code>前缀的省略域名进行解析</p>\n<p>(3) <code>CNAME</code>表示需要将域名重定向到另一个域名[使用 github 搭建博客绑定独立域名时需要用到]</p>\n<h2 id=\"三-http-协议在访问域名时的工作流程\"><a class=\"markdownIt-Anchor\" href=\"#三-http-协议在访问域名时的工作流程\"></a> 三、HTTP 协议在访问域名时的工作流程</h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入网址(imooc.com)</span><br><span class=\"line\">        ||</span><br><span class=\"line\">        \\/</span><br><span class=\"line\">DNS解析，寻找对应服务器地址</span><br><span class=\"line\">        ||</span><br><span class=\"line\">        \\/</span><br><span class=\"line\">进行第一次握手（HTTP会话）</span><br><span class=\"line\">        ||</span><br><span class=\"line\">        \\/</span><br><span class=\"line\">建立文档树，加载资源</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>作为后端程序员，对网站上线的操作需要有一定的了解，对于一些没有专门运维人员的公司，运维上线的操作就需要后端程序员来执行。<br>\n需要学习域名解析、本地文件和服务器文件传递<code>scp</code>的相关操作。</p>","more":"<h2 id=\"一-上传网站到服务器\"><a class=\"markdownIt-Anchor\" href=\"#一-上传网站到服务器\"></a> 一、上传网站到服务器</h2>\n<h3 id=\"1将本地文件上传到远程服务器scp\"><a class=\"markdownIt-Anchor\" href=\"#1将本地文件上传到远程服务器scp\"></a> 1.将本地文件上传到远程服务器：<strong>scp</strong></h3>\n<h4 id=\"1-具体用法\"><a class=\"markdownIt-Anchor\" href=\"#1-具体用法\"></a> (1) 具体用法：</h4>\n<blockquote>\n<p>scp -r {本地目录的文件} {服务器用户名@远程服务器 ip:{远程服务器的文件目录}}</p>\n</blockquote>\n<p><code>scp -r ./demo/* root@47.94.255.230:/root/www</code></p>\n<h3 id=\"2centos-系统管理命令\"><a class=\"markdownIt-Anchor\" href=\"#2centos-系统管理命令\"></a> 2.CentOS 系统管理命令：</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用ssh登录远程服务器</span></span><br><span class=\"line\">ssh &#123;user&#125;@&#123;ipv4&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装scp命令</span></span><br><span class=\"line\">yum install openssh-client</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看进程</span></span><br><span class=\"line\">ps -ef | grep nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证nginx配置文件语法</span></span><br><span class=\"line\">nginx -t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭nginx服务进程</span></span><br><span class=\"line\">nginx -s stop</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开启nginx服务进程</span></span><br><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n<h2 id=\"二-域名解析\"><a class=\"markdownIt-Anchor\" href=\"#二-域名解析\"></a> 二、域名解析</h2>\n<h3 id=\"1解析设置\"><a class=\"markdownIt-Anchor\" href=\"#1解析设置\"></a> 1.解析设置</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">记录类型</th>\n<th style=\"text-align:center\">主机记录</th>\n<th style=\"text-align:center\">解析线路(jsp)</th>\n<th style=\"text-align:center\">记录值</th>\n<th style=\"text-align:center\">TTL 值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">A</td>\n<td style=\"text-align:center\">www</td>\n<td style=\"text-align:center\">默认</td>\n<td style=\"text-align:center\">{ipv4}</td>\n<td style=\"text-align:center\">10 分钟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">A</td>\n<td style=\"text-align:center\">@</td>\n<td style=\"text-align:center\">默认</td>\n<td style=\"text-align:center\">{ipv4}</td>\n<td style=\"text-align:center\">10 分钟</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"2说明\"><a class=\"markdownIt-Anchor\" href=\"#2说明\"></a> 2.说明</h3>\n<p>(1) <code>www</code>表示对有<code>www</code>前缀的完整域名进行解析</p>\n<p>(2) <code>@</code>表示对没有<code>www</code>前缀的省略域名进行解析</p>\n<p>(3) <code>CNAME</code>表示需要将域名重定向到另一个域名[使用 github 搭建博客绑定独立域名时需要用到]</p>\n<h2 id=\"三-http-协议在访问域名时的工作流程\"><a class=\"markdownIt-Anchor\" href=\"#三-http-协议在访问域名时的工作流程\"></a> 三、HTTP 协议在访问域名时的工作流程</h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入网址(imooc.com)</span><br><span class=\"line\">        ||</span><br><span class=\"line\">        \\/</span><br><span class=\"line\">DNS解析，寻找对应服务器地址</span><br><span class=\"line\">        ||</span><br><span class=\"line\">        \\/</span><br><span class=\"line\">进行第一次握手（HTTP会话）</span><br><span class=\"line\">        ||</span><br><span class=\"line\">        \\/</span><br><span class=\"line\">建立文档树，加载资源</span><br></pre></td></tr></table></figure>"},{"title":"【SSH】使用SSH登录远程主机，并禁用密码登录","date":"2018-07-30T08:54:08.000Z","_content":"\n对远程主机进行登录管理，一方面可以简化日常频繁登录的密码和 ip 输入步骤，另一方面，也可以提高远程主机的安全性，避免远程主机被“黑客”轻易攻击。\n也借此加强对 Linux 文件权限的认识和理解。\n\n<!--more-->\n\n## 本地生成 SSH 秘钥\n\n### 生成本机系统的 ssh 公钥\n\n```bash\nssh-keygen\n```\n\n默认保存路径为 `~/.ssh/`\n\n[windows 对应为`C:\\Users\\Administrator\\.ssh\\`][mobaxterm对应为`/home/mobaxterm/.ssh/`]\n\n```bash\n# 公钥路径\n~/.ssh/id_rsa.pub\n\n# 私钥路径\n~/.ssh/id_rsa\n```\n\n### 复制公钥\n\n```bash\ncat ~/.ssh/id_rsa.pub\n```\n\n## 远程主机配置 ssh\n\n### 使用密码登录到远程主机\n\n```bash\nssh {登录用户}@{ip地址}\n\n输入密码后进入远程主机系统\n```\n\n### 查看远程主机的 ssh 配置\n\n配置文件目录`/etc/ssh/`\n\n```bash\n/etc/ssh/sshd_config\n```\n\n对以下参数进行设置：\n\n```ini\n# 默认的认证公钥文件\nAuthorizedKeysFile .ssh/authorized_keys\n```\n\n将`本地的公钥`复制到`远程的公钥认证文件` [~/.ssh/authorized_keys]中保存\n\n### 设置文件和目录权限\n\n【理论说明】：\n\n**一栏有十个字符**：\n\n- 第一个字符用于标识是`文件`还是`目录`\n\n- 后面九个字符为三组：\n  - 第一组为『文件拥有者的权限』；\n  - 第二组为『同群组的权限』；\n  - 第三组为『其他非本群组的权限』。\n\n其中：\n\n[ r ]代表可读(read)，值为 4 [二进制：100][ w ]代表可写(write)，值为 2 [二进制：010][ x ]代表可执行(execute)，值为 1 [二进制: 001][ - ]代表没有操作权限，值为 0 [二进制： 000]\n\n参考来源: [http://cn.linux.vbird.org/linux_basic/0210filepermission.php](http://cn.linux.vbird.org/linux_basic/0210filepermission.php)\n\n（1）设置`.ssh`目录权限\n\n```bash\n# 文件拥有者拥有读、写、执行权限,其他组无权限\nchmod 700 ~/.ssh/\n```\n\n（2）设置`authorized_keys`文件权限\n\n```bash\n# 文件拥有者拥有读、写权限，同群组和其他群组成员拥有读权限\nchmod 644 ~/.ssh/authorized_keys\n```\n\n### 对 ssh 进行配置\n\n```bash\n# 位置：/etc/ssh/sshd_config\n\n# 允许root用户通过ssh登录\nPermitRootLogin yes\n\n# 允许使用ssh权限登录\nRSAAuthentication yes\nPubkeyAuthentication yes\n```\n\n使用秘钥方式登陆后,禁用密码登录[之前密码登录的 session 将失效]\n\n```bash\n# 禁用密码登录\nPasswordAuthentication no\n```\n\n重启 ssh\n\n```bash\nservice sshd restart\n```\n\n参考来源: [https://hyjk2000.github.io/2012/03/16/how-to-set-up-ssh-keys/](https://hyjk2000.github.io/2012/03/16/how-to-set-up-ssh-keys/)\n\n## 本地 ssh 配置进行快捷登录\n\n### 配置 ssh\n\n```bash\n# ~/.ssh/config\n# 定义登录远程主机的ssh连接名\nHost txyun\n\n# 定义远程主机ip地址\nHostName {ip地址}\n\n# 定义远程主机的ssh端口号[默认情况下ssh端口号为22]\nPort 22\n\n# 设置登录用户名, root用户拥有所有权限\nUser root\n```\n\n### 进行 ssh 方式登录远程主机\n\n```bash\nssh txyun\n```\n\n即可直接登录。\n\n## 总结\n\n简化了可信访客的登录步骤，并且也只有和远程服务器 ssh 认证文件中公钥相匹配的主机才能成功登录，提高了服务器的安全性。\n\n完。\n","source":"_posts/linux-ssh.md","raw":"---\ntitle: 【SSH】使用SSH登录远程主机，并禁用密码登录\ndate: 2018-07-30 16:54:08\ntags:\n  - ssh\ncategory:\n  - 【Linux相关】\n---\n\n对远程主机进行登录管理，一方面可以简化日常频繁登录的密码和 ip 输入步骤，另一方面，也可以提高远程主机的安全性，避免远程主机被“黑客”轻易攻击。\n也借此加强对 Linux 文件权限的认识和理解。\n\n<!--more-->\n\n## 本地生成 SSH 秘钥\n\n### 生成本机系统的 ssh 公钥\n\n```bash\nssh-keygen\n```\n\n默认保存路径为 `~/.ssh/`\n\n[windows 对应为`C:\\Users\\Administrator\\.ssh\\`][mobaxterm对应为`/home/mobaxterm/.ssh/`]\n\n```bash\n# 公钥路径\n~/.ssh/id_rsa.pub\n\n# 私钥路径\n~/.ssh/id_rsa\n```\n\n### 复制公钥\n\n```bash\ncat ~/.ssh/id_rsa.pub\n```\n\n## 远程主机配置 ssh\n\n### 使用密码登录到远程主机\n\n```bash\nssh {登录用户}@{ip地址}\n\n输入密码后进入远程主机系统\n```\n\n### 查看远程主机的 ssh 配置\n\n配置文件目录`/etc/ssh/`\n\n```bash\n/etc/ssh/sshd_config\n```\n\n对以下参数进行设置：\n\n```ini\n# 默认的认证公钥文件\nAuthorizedKeysFile .ssh/authorized_keys\n```\n\n将`本地的公钥`复制到`远程的公钥认证文件` [~/.ssh/authorized_keys]中保存\n\n### 设置文件和目录权限\n\n【理论说明】：\n\n**一栏有十个字符**：\n\n- 第一个字符用于标识是`文件`还是`目录`\n\n- 后面九个字符为三组：\n  - 第一组为『文件拥有者的权限』；\n  - 第二组为『同群组的权限』；\n  - 第三组为『其他非本群组的权限』。\n\n其中：\n\n[ r ]代表可读(read)，值为 4 [二进制：100][ w ]代表可写(write)，值为 2 [二进制：010][ x ]代表可执行(execute)，值为 1 [二进制: 001][ - ]代表没有操作权限，值为 0 [二进制： 000]\n\n参考来源: [http://cn.linux.vbird.org/linux_basic/0210filepermission.php](http://cn.linux.vbird.org/linux_basic/0210filepermission.php)\n\n（1）设置`.ssh`目录权限\n\n```bash\n# 文件拥有者拥有读、写、执行权限,其他组无权限\nchmod 700 ~/.ssh/\n```\n\n（2）设置`authorized_keys`文件权限\n\n```bash\n# 文件拥有者拥有读、写权限，同群组和其他群组成员拥有读权限\nchmod 644 ~/.ssh/authorized_keys\n```\n\n### 对 ssh 进行配置\n\n```bash\n# 位置：/etc/ssh/sshd_config\n\n# 允许root用户通过ssh登录\nPermitRootLogin yes\n\n# 允许使用ssh权限登录\nRSAAuthentication yes\nPubkeyAuthentication yes\n```\n\n使用秘钥方式登陆后,禁用密码登录[之前密码登录的 session 将失效]\n\n```bash\n# 禁用密码登录\nPasswordAuthentication no\n```\n\n重启 ssh\n\n```bash\nservice sshd restart\n```\n\n参考来源: [https://hyjk2000.github.io/2012/03/16/how-to-set-up-ssh-keys/](https://hyjk2000.github.io/2012/03/16/how-to-set-up-ssh-keys/)\n\n## 本地 ssh 配置进行快捷登录\n\n### 配置 ssh\n\n```bash\n# ~/.ssh/config\n# 定义登录远程主机的ssh连接名\nHost txyun\n\n# 定义远程主机ip地址\nHostName {ip地址}\n\n# 定义远程主机的ssh端口号[默认情况下ssh端口号为22]\nPort 22\n\n# 设置登录用户名, root用户拥有所有权限\nUser root\n```\n\n### 进行 ssh 方式登录远程主机\n\n```bash\nssh txyun\n```\n\n即可直接登录。\n\n## 总结\n\n简化了可信访客的登录步骤，并且也只有和远程服务器 ssh 认证文件中公钥相匹配的主机才能成功登录，提高了服务器的安全性。\n\n完。\n","slug":"linux-ssh","published":1,"updated":"2019-05-12T15:50:08.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c3zu001d2wuugsjyaftg","content":"<p>对远程主机进行登录管理，一方面可以简化日常频繁登录的密码和 ip 输入步骤，另一方面，也可以提高远程主机的安全性，避免远程主机被“黑客”轻易攻击。<br>\n也借此加强对 Linux 文件权限的认识和理解。</p>\n<a id=\"more\"></a>\n<h2 id=\"本地生成-ssh-秘钥\"><a class=\"markdownIt-Anchor\" href=\"#本地生成-ssh-秘钥\"></a> 本地生成 SSH 秘钥</h2>\n<h3 id=\"生成本机系统的-ssh-公钥\"><a class=\"markdownIt-Anchor\" href=\"#生成本机系统的-ssh-公钥\"></a> 生成本机系统的 ssh 公钥</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen</span><br></pre></td></tr></table></figure>\n<p>默认保存路径为 <code>~/.ssh/</code></p>\n<p>[windows 对应为<code>C:\\Users\\Administrator\\.ssh\\</code>][mobaxterm对应为<code>/home/mobaxterm/.ssh/</code>]</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 公钥路径</span></span><br><span class=\"line\">~/.ssh/id_rsa.pub</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 私钥路径</span></span><br><span class=\"line\">~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n<h3 id=\"复制公钥\"><a class=\"markdownIt-Anchor\" href=\"#复制公钥\"></a> 复制公钥</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n<h2 id=\"远程主机配置-ssh\"><a class=\"markdownIt-Anchor\" href=\"#远程主机配置-ssh\"></a> 远程主机配置 ssh</h2>\n<h3 id=\"使用密码登录到远程主机\"><a class=\"markdownIt-Anchor\" href=\"#使用密码登录到远程主机\"></a> 使用密码登录到远程主机</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh &#123;登录用户&#125;@&#123;ip地址&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">输入密码后进入远程主机系统</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看远程主机的-ssh-配置\"><a class=\"markdownIt-Anchor\" href=\"#查看远程主机的-ssh-配置\"></a> 查看远程主机的 ssh 配置</h3>\n<p>配置文件目录<code>/etc/ssh/</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>\n<p>对以下参数进行设置：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认的认证公钥文件</span></span><br><span class=\"line\">AuthorizedKeysFile .ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n<p>将<code>本地的公钥</code>复制到<code>远程的公钥认证文件</code> [~/.ssh/authorized_keys]中保存</p>\n<h3 id=\"设置文件和目录权限\"><a class=\"markdownIt-Anchor\" href=\"#设置文件和目录权限\"></a> 设置文件和目录权限</h3>\n<p>【理论说明】：</p>\n<p><strong>一栏有十个字符</strong>：</p>\n<ul>\n<li>\n<p>第一个字符用于标识是<code>文件</code>还是<code>目录</code></p>\n</li>\n<li>\n<p>后面九个字符为三组：</p>\n<ul>\n<li>第一组为『文件拥有者的权限』；</li>\n<li>第二组为『同群组的权限』；</li>\n<li>第三组为『其他非本群组的权限』。</li>\n</ul>\n</li>\n</ul>\n<p>其中：</p>\n<p>[ r ]代表可读(read)，值为 4 [二进制：100][ w ]代表可写(write)，值为 2 [二进制：010][ x ]代表可执行(execute)，值为 1 [二进制: 001][ - ]代表没有操作权限，值为 0 [二进制： 000]</p>\n<p>参考来源: <a href=\"http://cn.linux.vbird.org/linux_basic/0210filepermission.php\" target=\"_blank\" rel=\"noopener\">http://cn.linux.vbird.org/linux_basic/0210filepermission.php</a></p>\n<p>（1）设置<code>.ssh</code>目录权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 文件拥有者拥有读、写、执行权限,其他组无权限</span></span><br><span class=\"line\">chmod 700 ~/.ssh/</span><br></pre></td></tr></table></figure>\n<p>（2）设置<code>authorized_keys</code>文件权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 文件拥有者拥有读、写权限，同群组和其他群组成员拥有读权限</span></span><br><span class=\"line\">chmod 644 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n<h3 id=\"对-ssh-进行配置\"><a class=\"markdownIt-Anchor\" href=\"#对-ssh-进行配置\"></a> 对 ssh 进行配置</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 位置：/etc/ssh/sshd_config</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 允许root用户通过ssh登录</span></span><br><span class=\"line\">PermitRootLogin yes</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 允许使用ssh权限登录</span></span><br><span class=\"line\">RSAAuthentication yes</span><br><span class=\"line\">PubkeyAuthentication yes</span><br></pre></td></tr></table></figure>\n<p>使用秘钥方式登陆后,禁用密码登录[之前密码登录的 session 将失效]</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 禁用密码登录</span></span><br><span class=\"line\">PasswordAuthentication no</span><br></pre></td></tr></table></figure>\n<p>重启 ssh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service sshd restart</span><br></pre></td></tr></table></figure>\n<p>参考来源: <a href=\"https://hyjk2000.github.io/2012/03/16/how-to-set-up-ssh-keys/\" target=\"_blank\" rel=\"noopener\">https://hyjk2000.github.io/2012/03/16/how-to-set-up-ssh-keys/</a></p>\n<h2 id=\"本地-ssh-配置进行快捷登录\"><a class=\"markdownIt-Anchor\" href=\"#本地-ssh-配置进行快捷登录\"></a> 本地 ssh 配置进行快捷登录</h2>\n<h3 id=\"配置-ssh\"><a class=\"markdownIt-Anchor\" href=\"#配置-ssh\"></a> 配置 ssh</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ~/.ssh/config</span></span><br><span class=\"line\"><span class=\"comment\"># 定义登录远程主机的ssh连接名</span></span><br><span class=\"line\">Host txyun</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义远程主机ip地址</span></span><br><span class=\"line\">HostName &#123;ip地址&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义远程主机的ssh端口号[默认情况下ssh端口号为22]</span></span><br><span class=\"line\">Port 22</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置登录用户名, root用户拥有所有权限</span></span><br><span class=\"line\">User root</span><br></pre></td></tr></table></figure>\n<h3 id=\"进行-ssh-方式登录远程主机\"><a class=\"markdownIt-Anchor\" href=\"#进行-ssh-方式登录远程主机\"></a> 进行 ssh 方式登录远程主机</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh txyun</span><br></pre></td></tr></table></figure>\n<p>即可直接登录。</p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h2>\n<p>简化了可信访客的登录步骤，并且也只有和远程服务器 ssh 认证文件中公钥相匹配的主机才能成功登录，提高了服务器的安全性。</p>\n<p>完。</p>\n","site":{"data":{}},"excerpt":"<p>对远程主机进行登录管理，一方面可以简化日常频繁登录的密码和 ip 输入步骤，另一方面，也可以提高远程主机的安全性，避免远程主机被“黑客”轻易攻击。<br>\n也借此加强对 Linux 文件权限的认识和理解。</p>","more":"<h2 id=\"本地生成-ssh-秘钥\"><a class=\"markdownIt-Anchor\" href=\"#本地生成-ssh-秘钥\"></a> 本地生成 SSH 秘钥</h2>\n<h3 id=\"生成本机系统的-ssh-公钥\"><a class=\"markdownIt-Anchor\" href=\"#生成本机系统的-ssh-公钥\"></a> 生成本机系统的 ssh 公钥</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen</span><br></pre></td></tr></table></figure>\n<p>默认保存路径为 <code>~/.ssh/</code></p>\n<p>[windows 对应为<code>C:\\Users\\Administrator\\.ssh\\</code>][mobaxterm对应为<code>/home/mobaxterm/.ssh/</code>]</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 公钥路径</span></span><br><span class=\"line\">~/.ssh/id_rsa.pub</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 私钥路径</span></span><br><span class=\"line\">~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n<h3 id=\"复制公钥\"><a class=\"markdownIt-Anchor\" href=\"#复制公钥\"></a> 复制公钥</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n<h2 id=\"远程主机配置-ssh\"><a class=\"markdownIt-Anchor\" href=\"#远程主机配置-ssh\"></a> 远程主机配置 ssh</h2>\n<h3 id=\"使用密码登录到远程主机\"><a class=\"markdownIt-Anchor\" href=\"#使用密码登录到远程主机\"></a> 使用密码登录到远程主机</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh &#123;登录用户&#125;@&#123;ip地址&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">输入密码后进入远程主机系统</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看远程主机的-ssh-配置\"><a class=\"markdownIt-Anchor\" href=\"#查看远程主机的-ssh-配置\"></a> 查看远程主机的 ssh 配置</h3>\n<p>配置文件目录<code>/etc/ssh/</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>\n<p>对以下参数进行设置：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认的认证公钥文件</span></span><br><span class=\"line\">AuthorizedKeysFile .ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n<p>将<code>本地的公钥</code>复制到<code>远程的公钥认证文件</code> [~/.ssh/authorized_keys]中保存</p>\n<h3 id=\"设置文件和目录权限\"><a class=\"markdownIt-Anchor\" href=\"#设置文件和目录权限\"></a> 设置文件和目录权限</h3>\n<p>【理论说明】：</p>\n<p><strong>一栏有十个字符</strong>：</p>\n<ul>\n<li>\n<p>第一个字符用于标识是<code>文件</code>还是<code>目录</code></p>\n</li>\n<li>\n<p>后面九个字符为三组：</p>\n<ul>\n<li>第一组为『文件拥有者的权限』；</li>\n<li>第二组为『同群组的权限』；</li>\n<li>第三组为『其他非本群组的权限』。</li>\n</ul>\n</li>\n</ul>\n<p>其中：</p>\n<p>[ r ]代表可读(read)，值为 4 [二进制：100][ w ]代表可写(write)，值为 2 [二进制：010][ x ]代表可执行(execute)，值为 1 [二进制: 001][ - ]代表没有操作权限，值为 0 [二进制： 000]</p>\n<p>参考来源: <a href=\"http://cn.linux.vbird.org/linux_basic/0210filepermission.php\" target=\"_blank\" rel=\"noopener\">http://cn.linux.vbird.org/linux_basic/0210filepermission.php</a></p>\n<p>（1）设置<code>.ssh</code>目录权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 文件拥有者拥有读、写、执行权限,其他组无权限</span></span><br><span class=\"line\">chmod 700 ~/.ssh/</span><br></pre></td></tr></table></figure>\n<p>（2）设置<code>authorized_keys</code>文件权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 文件拥有者拥有读、写权限，同群组和其他群组成员拥有读权限</span></span><br><span class=\"line\">chmod 644 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n<h3 id=\"对-ssh-进行配置\"><a class=\"markdownIt-Anchor\" href=\"#对-ssh-进行配置\"></a> 对 ssh 进行配置</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 位置：/etc/ssh/sshd_config</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 允许root用户通过ssh登录</span></span><br><span class=\"line\">PermitRootLogin yes</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 允许使用ssh权限登录</span></span><br><span class=\"line\">RSAAuthentication yes</span><br><span class=\"line\">PubkeyAuthentication yes</span><br></pre></td></tr></table></figure>\n<p>使用秘钥方式登陆后,禁用密码登录[之前密码登录的 session 将失效]</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 禁用密码登录</span></span><br><span class=\"line\">PasswordAuthentication no</span><br></pre></td></tr></table></figure>\n<p>重启 ssh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service sshd restart</span><br></pre></td></tr></table></figure>\n<p>参考来源: <a href=\"https://hyjk2000.github.io/2012/03/16/how-to-set-up-ssh-keys/\" target=\"_blank\" rel=\"noopener\">https://hyjk2000.github.io/2012/03/16/how-to-set-up-ssh-keys/</a></p>\n<h2 id=\"本地-ssh-配置进行快捷登录\"><a class=\"markdownIt-Anchor\" href=\"#本地-ssh-配置进行快捷登录\"></a> 本地 ssh 配置进行快捷登录</h2>\n<h3 id=\"配置-ssh\"><a class=\"markdownIt-Anchor\" href=\"#配置-ssh\"></a> 配置 ssh</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ~/.ssh/config</span></span><br><span class=\"line\"><span class=\"comment\"># 定义登录远程主机的ssh连接名</span></span><br><span class=\"line\">Host txyun</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义远程主机ip地址</span></span><br><span class=\"line\">HostName &#123;ip地址&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义远程主机的ssh端口号[默认情况下ssh端口号为22]</span></span><br><span class=\"line\">Port 22</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置登录用户名, root用户拥有所有权限</span></span><br><span class=\"line\">User root</span><br></pre></td></tr></table></figure>\n<h3 id=\"进行-ssh-方式登录远程主机\"><a class=\"markdownIt-Anchor\" href=\"#进行-ssh-方式登录远程主机\"></a> 进行 ssh 方式登录远程主机</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh txyun</span><br></pre></td></tr></table></figure>\n<p>即可直接登录。</p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h2>\n<p>简化了可信访客的登录步骤，并且也只有和远程服务器 ssh 认证文件中公钥相匹配的主机才能成功登录，提高了服务器的安全性。</p>\n<p>完。</p>"},{"title":"【CentOS】更新yum软件源","date":"2018-07-31T01:00:00.000Z","_content":"\n当使用 linux 安装包命令安装相关软件时，会提示`Connection timed out`,表示连接超时，即访问国外网址受限，可以切换软件源地址为国内的。\n\n<!--more-->\n\n目前有网易和阿里云：\n\n- [网易软件源](mirrors.163.com)\n\n- [阿里云软件源](https://opsx.alibaba.com/mirror)\n\n【以阿里云为例(CentOS)】：\n\n(1) 备份\n\n```bash\nmv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup\n```\n\n(2) 下载新的 CentOS-Base.repo 到`/etc/yum.repos.d/`\n\n[CentOS 5]\n\n```bash\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo\n# 或\ncurl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo\n```\n\n[CentOS 6]\n\n```bash\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo\n# 或\ncurl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo\n```\n\n[CentOS 7]\n\n```bash\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n# 或\ncurl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n```\n\n(3) 生成缓存，是 yum 源生效\n\n```bash\nyum clean all\nyum makecache\n```\n\n(4)更新 yum,验证 yum 软件源\n\n```bash\n[root@centos ~]# yum -y update\nLoaded plugins: fastestmirror, langpacks\nLoading mirror speeds from cached hostfile\n * base: mirrors.aliyun.com\n * extras: mirrors.aliyun.com\n * updates: mirrors.aliyun.com\nNo packages marked for update\n```\n","source":"_posts/linux-yum源.md","raw":"---\ntitle: 【CentOS】更新yum软件源\ndate: 2018-07-31 9:00:00\ntags:\n  - 镜像\ncategory:\n  - 【Linux相关】\n---\n\n当使用 linux 安装包命令安装相关软件时，会提示`Connection timed out`,表示连接超时，即访问国外网址受限，可以切换软件源地址为国内的。\n\n<!--more-->\n\n目前有网易和阿里云：\n\n- [网易软件源](mirrors.163.com)\n\n- [阿里云软件源](https://opsx.alibaba.com/mirror)\n\n【以阿里云为例(CentOS)】：\n\n(1) 备份\n\n```bash\nmv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup\n```\n\n(2) 下载新的 CentOS-Base.repo 到`/etc/yum.repos.d/`\n\n[CentOS 5]\n\n```bash\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo\n# 或\ncurl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo\n```\n\n[CentOS 6]\n\n```bash\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo\n# 或\ncurl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo\n```\n\n[CentOS 7]\n\n```bash\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n# 或\ncurl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n```\n\n(3) 生成缓存，是 yum 源生效\n\n```bash\nyum clean all\nyum makecache\n```\n\n(4)更新 yum,验证 yum 软件源\n\n```bash\n[root@centos ~]# yum -y update\nLoaded plugins: fastestmirror, langpacks\nLoading mirror speeds from cached hostfile\n * base: mirrors.aliyun.com\n * extras: mirrors.aliyun.com\n * updates: mirrors.aliyun.com\nNo packages marked for update\n```\n","slug":"linux-yum源","published":1,"updated":"2019-05-12T15:50:21.569Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c3zx001h2wuultm0nk2a","content":"<p>当使用 linux 安装包命令安装相关软件时，会提示<code>Connection timed out</code>,表示连接超时，即访问国外网址受限，可以切换软件源地址为国内的。</p>\n<a id=\"more\"></a>\n<p>目前有网易和阿里云：</p>\n<ul>\n<li>\n<p><a href=\"mirrors.163.com\">网易软件源</a></p>\n</li>\n<li>\n<p><a href=\"https://opsx.alibaba.com/mirror\" target=\"_blank\" rel=\"noopener\">阿里云软件源</a></p>\n</li>\n</ul>\n<p>【以阿里云为例(CentOS)】：</p>\n<p>(1) 备份</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure>\n<p>(2) 下载新的 CentOS-Base.repo 到<code>/etc/yum.repos.d/</code></p>\n<p>[CentOS 5]</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo</span><br><span class=\"line\"><span class=\"comment\"># 或</span></span><br><span class=\"line\">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo</span><br></pre></td></tr></table></figure>\n<p>[CentOS 6]</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br><span class=\"line\"><span class=\"comment\"># 或</span></span><br><span class=\"line\">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br></pre></td></tr></table></figure>\n<p>[CentOS 7]</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class=\"line\"><span class=\"comment\"># 或</span></span><br><span class=\"line\">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure>\n<p>(3) 生成缓存，是 yum 源生效</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum clean all</span><br><span class=\"line\">yum makecache</span><br></pre></td></tr></table></figure>\n<p>(4)更新 yum,验证 yum 软件源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@centos ~]<span class=\"comment\"># yum -y update</span></span><br><span class=\"line\">Loaded plugins: fastestmirror, langpacks</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\"> * base: mirrors.aliyun.com</span><br><span class=\"line\"> * extras: mirrors.aliyun.com</span><br><span class=\"line\"> * updates: mirrors.aliyun.com</span><br><span class=\"line\">No packages marked <span class=\"keyword\">for</span> update</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>当使用 linux 安装包命令安装相关软件时，会提示<code>Connection timed out</code>,表示连接超时，即访问国外网址受限，可以切换软件源地址为国内的。</p>","more":"<p>目前有网易和阿里云：</p>\n<ul>\n<li>\n<p><a href=\"mirrors.163.com\">网易软件源</a></p>\n</li>\n<li>\n<p><a href=\"https://opsx.alibaba.com/mirror\" target=\"_blank\" rel=\"noopener\">阿里云软件源</a></p>\n</li>\n</ul>\n<p>【以阿里云为例(CentOS)】：</p>\n<p>(1) 备份</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure>\n<p>(2) 下载新的 CentOS-Base.repo 到<code>/etc/yum.repos.d/</code></p>\n<p>[CentOS 5]</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo</span><br><span class=\"line\"><span class=\"comment\"># 或</span></span><br><span class=\"line\">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo</span><br></pre></td></tr></table></figure>\n<p>[CentOS 6]</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br><span class=\"line\"><span class=\"comment\"># 或</span></span><br><span class=\"line\">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br></pre></td></tr></table></figure>\n<p>[CentOS 7]</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class=\"line\"><span class=\"comment\"># 或</span></span><br><span class=\"line\">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure>\n<p>(3) 生成缓存，是 yum 源生效</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum clean all</span><br><span class=\"line\">yum makecache</span><br></pre></td></tr></table></figure>\n<p>(4)更新 yum,验证 yum 软件源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@centos ~]<span class=\"comment\"># yum -y update</span></span><br><span class=\"line\">Loaded plugins: fastestmirror, langpacks</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\"> * base: mirrors.aliyun.com</span><br><span class=\"line\"> * extras: mirrors.aliyun.com</span><br><span class=\"line\"> * updates: mirrors.aliyun.com</span><br><span class=\"line\">No packages marked <span class=\"keyword\">for</span> update</span><br></pre></td></tr></table></figure>"},{"title":"电影《绿里奇迹》","date":"2018-05-08T04:00:00.000Z","_content":"","source":"_posts/movie-llqj.md","raw":"---\ntitle: 电影《绿里奇迹》\ndate: 2018-05-08 12:00:00\ntags:\n  - movie\ncategory:\n  - 【影评感悟】\n---\n","slug":"movie-llqj","published":1,"updated":"2019-05-12T15:51:38.070Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c3zz001i2wuu608d1jyc","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"电影《土拨鼠之日》","date":"2018-05-01T04:00:00.000Z","_content":"","source":"_posts/movie-tbszr.md","raw":"---\ntitle: 电影《土拨鼠之日》\ndate: 2018-05-01 12:00:00\ntags:\n  - movie\ncategory:\n  - 【影评感悟】\n---\n","slug":"movie-tbszr","published":1,"updated":"2019-05-12T15:51:51.062Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c402001m2wuu7libzzzl","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"电影《闻香识女人》","date":"2018-05-15T04:00:00.000Z","_content":"\n揭发同学求自保，还是坚持原则被处罚？前两个小时平淡无奇的叙述，后 30 分钟将所有的事情衔接起来，开始转变。生活需要勇气，需要坚持原则。没有什么比精神残废更可怕，灵魂不可能有义肢。\n\nSimple, so harming.\n\n<!--more-->\n\n电影的前 100 分钟，只能感觉出演员的演技很好，但却不理解他的经典之处，但最后差不多 30 分钟，从范克失落开始，开始将前面的情节串起来，并且给了一个尚且合理的解释。到后面的演讲，以及范克对孩子的转变，越来越多的触发感触。\n\n![](![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv5wm0lj31pc0yidls.jpg)\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv5yyhkj31pc0yijxf.jpg)\n他之前的暴躁，做过的混蛋的事，是因为他对只能生活在黑暗中的发泄，虽然灵敏的嗅觉让他能够只通过味道便能了解到女人们的基本信息，但除此之外，便只能用暴躁的方式发泄情绪。所以他成了一个＂混蛋＂。\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv66g2bj31pc0yiaev.jpg)\n他通过和查理的最后一个周末的相处，把人生没有做过完的事做了一遍，看望了哥哥，尽兴的开了法拉利，和不错的女郎跳了探戈，和不错的女人有了亲密接触，做完这一切之后，他也准备结束他的生命，却被查理拦下，将之前做的不错的事情作为他应该活下去的理由，他俩彼此被彼此触动。\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv6bjd5j31pc0yijyf.jpg)\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv64b9vj31pc0yidmp.jpg)\n最后高潮部分，是范克在博德学校的发言，慷慨激昂，最后征服所有学生和生活委员，并帮助查理避免被开除。当然，此外还吸引到了一位政治学女教授的青睐。\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv7yg1oj31pc0yiahg.jpg)\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv8dqpmj31pc0yidoi.jpg)\n在查理用他应该捍卫的原则征服范克，并消除范克想要自杀的念头后，范克就找到了新的定义，找到了乐观活下去的理由，也带着这份该有的生活意义继续生活下去，所以他的演讲，不仅仅是讲给别人听的，也是讲给自己听的，灵魂不可抹杀，不该被抹杀。\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv801ptj31pc0yijyh.jpg)\n生活应该是有意义的创造，不是机械的重复，即使生活遭遇不幸，满腹牢骚，也应该及时找到生活的意义，有时候，我们不仅仅为了活而活，更是应该给他人带来积极正能量，捍卫不可抹杀的原则和理想。正直不该也不能被抹杀。\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv6728vj31pc0yitdk.jpg)\n演讲完毕，宣布判处结果的时候，全场振奋，加上鼓舞人心的配乐，创造了彻底的震撼。\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv8xmw7j31pc0yiamv.jpg)\n最后，范克和查理分别，落寞的背影，满地的落叶，很是沧桑，又有一段令人动容的配乐，再一次被触动。查理改变了范克，范克也改变了查理。\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv9f1dbj31pc0yih1o.jpg)\n\n> 不过看完也有一个不理解的地方，校长为什么不直接找广播站的负责人调查当天是谁去了广播站呢？\n","source":"_posts/movie-wxsnr.md","raw":"---\ntitle: 电影《闻香识女人》\ndate: 2018-05-15 12:00:00\ntags:\n  - movie\ncategory:\n  - 【影评感悟】\n---\n\n揭发同学求自保，还是坚持原则被处罚？前两个小时平淡无奇的叙述，后 30 分钟将所有的事情衔接起来，开始转变。生活需要勇气，需要坚持原则。没有什么比精神残废更可怕，灵魂不可能有义肢。\n\nSimple, so harming.\n\n<!--more-->\n\n电影的前 100 分钟，只能感觉出演员的演技很好，但却不理解他的经典之处，但最后差不多 30 分钟，从范克失落开始，开始将前面的情节串起来，并且给了一个尚且合理的解释。到后面的演讲，以及范克对孩子的转变，越来越多的触发感触。\n\n![](![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv5wm0lj31pc0yidls.jpg)\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv5yyhkj31pc0yijxf.jpg)\n他之前的暴躁，做过的混蛋的事，是因为他对只能生活在黑暗中的发泄，虽然灵敏的嗅觉让他能够只通过味道便能了解到女人们的基本信息，但除此之外，便只能用暴躁的方式发泄情绪。所以他成了一个＂混蛋＂。\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv66g2bj31pc0yiaev.jpg)\n他通过和查理的最后一个周末的相处，把人生没有做过完的事做了一遍，看望了哥哥，尽兴的开了法拉利，和不错的女郎跳了探戈，和不错的女人有了亲密接触，做完这一切之后，他也准备结束他的生命，却被查理拦下，将之前做的不错的事情作为他应该活下去的理由，他俩彼此被彼此触动。\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv6bjd5j31pc0yijyf.jpg)\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv64b9vj31pc0yidmp.jpg)\n最后高潮部分，是范克在博德学校的发言，慷慨激昂，最后征服所有学生和生活委员，并帮助查理避免被开除。当然，此外还吸引到了一位政治学女教授的青睐。\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv7yg1oj31pc0yiahg.jpg)\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv8dqpmj31pc0yidoi.jpg)\n在查理用他应该捍卫的原则征服范克，并消除范克想要自杀的念头后，范克就找到了新的定义，找到了乐观活下去的理由，也带着这份该有的生活意义继续生活下去，所以他的演讲，不仅仅是讲给别人听的，也是讲给自己听的，灵魂不可抹杀，不该被抹杀。\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv801ptj31pc0yijyh.jpg)\n生活应该是有意义的创造，不是机械的重复，即使生活遭遇不幸，满腹牢骚，也应该及时找到生活的意义，有时候，我们不仅仅为了活而活，更是应该给他人带来积极正能量，捍卫不可抹杀的原则和理想。正直不该也不能被抹杀。\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv6728vj31pc0yitdk.jpg)\n演讲完毕，宣布判处结果的时候，全场振奋，加上鼓舞人心的配乐，创造了彻底的震撼。\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv8xmw7j31pc0yiamv.jpg)\n最后，范克和查理分别，落寞的背影，满地的落叶，很是沧桑，又有一段令人动容的配乐，再一次被触动。查理改变了范克，范克也改变了查理。\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv9f1dbj31pc0yih1o.jpg)\n\n> 不过看完也有一个不理解的地方，校长为什么不直接找广播站的负责人调查当天是谁去了广播站呢？\n","slug":"movie-wxsnr","published":1,"updated":"2019-05-12T15:51:51.084Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c403001o2wuu4antpzhe","content":"<p>揭发同学求自保，还是坚持原则被处罚？前两个小时平淡无奇的叙述，后 30 分钟将所有的事情衔接起来，开始转变。生活需要勇气，需要坚持原则。没有什么比精神残废更可怕，灵魂不可能有义肢。</p>\n<p>Simple, so harming.</p>\n<a id=\"more\"></a>\n<p>电影的前 100 分钟，只能感觉出演员的演技很好，但却不理解他的经典之处，但最后差不多 30 分钟，从范克失落开始，开始将前面的情节串起来，并且给了一个尚且合理的解释。到后面的演讲，以及范克对孩子的转变，越来越多的触发感触。</p>\n<p>![](<img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv5wm0lj31pc0yidls.jpg\" alt=\"\"></p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv5yyhkj31pc0yijxf.jpg\" alt=\"\"><br>\n他之前的暴躁，做过的混蛋的事，是因为他对只能生活在黑暗中的发泄，虽然灵敏的嗅觉让他能够只通过味道便能了解到女人们的基本信息，但除此之外，便只能用暴躁的方式发泄情绪。所以他成了一个＂混蛋＂。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv66g2bj31pc0yiaev.jpg\" alt=\"\"><br>\n他通过和查理的最后一个周末的相处，把人生没有做过完的事做了一遍，看望了哥哥，尽兴的开了法拉利，和不错的女郎跳了探戈，和不错的女人有了亲密接触，做完这一切之后，他也准备结束他的生命，却被查理拦下，将之前做的不错的事情作为他应该活下去的理由，他俩彼此被彼此触动。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv6bjd5j31pc0yijyf.jpg\" alt=\"\"><br>\n<img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv64b9vj31pc0yidmp.jpg\" alt=\"\"><br>\n最后高潮部分，是范克在博德学校的发言，慷慨激昂，最后征服所有学生和生活委员，并帮助查理避免被开除。当然，此外还吸引到了一位政治学女教授的青睐。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv7yg1oj31pc0yiahg.jpg\" alt=\"\"><br>\n<img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv8dqpmj31pc0yidoi.jpg\" alt=\"\"><br>\n在查理用他应该捍卫的原则征服范克，并消除范克想要自杀的念头后，范克就找到了新的定义，找到了乐观活下去的理由，也带着这份该有的生活意义继续生活下去，所以他的演讲，不仅仅是讲给别人听的，也是讲给自己听的，灵魂不可抹杀，不该被抹杀。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv801ptj31pc0yijyh.jpg\" alt=\"\"><br>\n生活应该是有意义的创造，不是机械的重复，即使生活遭遇不幸，满腹牢骚，也应该及时找到生活的意义，有时候，我们不仅仅为了活而活，更是应该给他人带来积极正能量，捍卫不可抹杀的原则和理想。正直不该也不能被抹杀。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv6728vj31pc0yitdk.jpg\" alt=\"\"><br>\n演讲完毕，宣布判处结果的时候，全场振奋，加上鼓舞人心的配乐，创造了彻底的震撼。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv8xmw7j31pc0yiamv.jpg\" alt=\"\"><br>\n最后，范克和查理分别，落寞的背影，满地的落叶，很是沧桑，又有一段令人动容的配乐，再一次被触动。查理改变了范克，范克也改变了查理。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv9f1dbj31pc0yih1o.jpg\" alt=\"\"></p>\n<blockquote>\n<p>不过看完也有一个不理解的地方，校长为什么不直接找广播站的负责人调查当天是谁去了广播站呢？</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>揭发同学求自保，还是坚持原则被处罚？前两个小时平淡无奇的叙述，后 30 分钟将所有的事情衔接起来，开始转变。生活需要勇气，需要坚持原则。没有什么比精神残废更可怕，灵魂不可能有义肢。</p>\n<p>Simple, so harming.</p>","more":"<p>电影的前 100 分钟，只能感觉出演员的演技很好，但却不理解他的经典之处，但最后差不多 30 分钟，从范克失落开始，开始将前面的情节串起来，并且给了一个尚且合理的解释。到后面的演讲，以及范克对孩子的转变，越来越多的触发感触。</p>\n<p>![](<img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv5wm0lj31pc0yidls.jpg\" alt=\"\"></p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv5yyhkj31pc0yijxf.jpg\" alt=\"\"><br>\n他之前的暴躁，做过的混蛋的事，是因为他对只能生活在黑暗中的发泄，虽然灵敏的嗅觉让他能够只通过味道便能了解到女人们的基本信息，但除此之外，便只能用暴躁的方式发泄情绪。所以他成了一个＂混蛋＂。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv66g2bj31pc0yiaev.jpg\" alt=\"\"><br>\n他通过和查理的最后一个周末的相处，把人生没有做过完的事做了一遍，看望了哥哥，尽兴的开了法拉利，和不错的女郎跳了探戈，和不错的女人有了亲密接触，做完这一切之后，他也准备结束他的生命，却被查理拦下，将之前做的不错的事情作为他应该活下去的理由，他俩彼此被彼此触动。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv6bjd5j31pc0yijyf.jpg\" alt=\"\"><br>\n<img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv64b9vj31pc0yidmp.jpg\" alt=\"\"><br>\n最后高潮部分，是范克在博德学校的发言，慷慨激昂，最后征服所有学生和生活委员，并帮助查理避免被开除。当然，此外还吸引到了一位政治学女教授的青睐。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv7yg1oj31pc0yiahg.jpg\" alt=\"\"><br>\n<img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv8dqpmj31pc0yidoi.jpg\" alt=\"\"><br>\n在查理用他应该捍卫的原则征服范克，并消除范克想要自杀的念头后，范克就找到了新的定义，找到了乐观活下去的理由，也带着这份该有的生活意义继续生活下去，所以他的演讲，不仅仅是讲给别人听的，也是讲给自己听的，灵魂不可抹杀，不该被抹杀。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv801ptj31pc0yijyh.jpg\" alt=\"\"><br>\n生活应该是有意义的创造，不是机械的重复，即使生活遭遇不幸，满腹牢骚，也应该及时找到生活的意义，有时候，我们不仅仅为了活而活，更是应该给他人带来积极正能量，捍卫不可抹杀的原则和理想。正直不该也不能被抹杀。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv6728vj31pc0yitdk.jpg\" alt=\"\"><br>\n演讲完毕，宣布判处结果的时候，全场振奋，加上鼓舞人心的配乐，创造了彻底的震撼。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv8xmw7j31pc0yiamv.jpg\" alt=\"\"><br>\n最后，范克和查理分别，落寞的背影，满地的落叶，很是沧桑，又有一段令人动容的配乐，再一次被触动。查理改变了范克，范克也改变了查理。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchv9f1dbj31pc0yih1o.jpg\" alt=\"\"></p>\n<blockquote>\n<p>不过看完也有一个不理解的地方，校长为什么不直接找广播站的负责人调查当天是谁去了广播站呢？</p>\n</blockquote>"},{"title":"MySQL数据库常见名词对比","date":"2018-06-05T13:27:45.000Z","_content":"\nMySQL 由于性能高、成本低、可靠性好，已经成为最流行的开源数据库，因此被广泛地应用在 Internet 上的中小型网站中。随着 MySQL 的不断成熟，它也逐渐用于更多大规模网站和应用，比如维基百科、Google 和 Facebook 等网站。非常流行的开源软件组合 LAMP 中的“M”指的就是 MySQL。\n\n<!--more-->\n\n## 1.存储引擎 --- `MyISAM` vs `InnoDB`\n\n### (1)**存储方式**\n\n每种存储引擎下的数据表创建成功后都会生成相应格式的文件\n\n- MyISAM： `.frm` -- 结构 `.MDY` -- 数据 `.MYI` -- 索引\n\n- InnoDB： `.frm` -- 结构 `.ibd` -- 数据+索引\n\n### (2)**物理顺序**\n\n`MyISAM`： 依插入顺序\n\n`InnoDB`： 依主键顺序\n\n### (3)**特定功能**\n\nMyISAM:\n\n- 支持全文索引(鸡肋)\n- 存储空间少\n- 文件级别快速备份（将生成的文件直接拷贝到相应位置，需要还原时直接拷贝回来）\n\nInnoDB:\n\n- 外键\n- 事务\n- 行级锁定\n\n### (4)**并发处理能力**\n\nMyISAM：\n\n- 锁定粒度：表级\n- 并发插入（在表中执行其他操作时，可以同事执行插入工作，大多数情况是不需要考虑锁的问题。因为插入不影响其他记录的操作，在最后插入）\n\nInnoDB：\n\n- 锁定粒度：表级 + 行级\n- 多版本并发控制 MVCC(`Multi-Version Concurrency Control`)，实现无阻塞读操作\n\n> Multi-Version Concurrency Control 多版本并发控制，MVCC 是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问；在编程语言中实现事务内存。\n\n### (5)**空间空洞**\n\nMyISAM：\n\n- 删除表中大量记录后，表结构的文件大小没有变化。需要手动修复空洞空间。`repair table table_name`\n\nInnoDB：\n\n- 没有空洞现象。\n\n### (6)**总结**\n\nMyISAM: 以读取和插入为主\n\nInnoDB: 以更新和删除为主（写锁[独占锁，阻塞其他的所有操作]）\n\n**总结**：直接用 InnoDB。\n\n## 2.字段类型\n\n### (1)**`varchar` vs `char`**\n\n`varchar`:\n\n- 优点：变长，占用的空间随着内容的增长而变大，节约空间\n- 缺点：速度稍慢\n\n`char`:\n\n- 优点：速度快\n- 缺点：定长，永远占用 4 个直接，无论存储 0，-1,1234567 占用的空间是一致的。\n\n### (2)**`datetime` vs `timestamp`**\n\n`timestamp`: 占用较少的空间，存储时间的范围小\n\n`datetime`: 占用较多的空间，存储时间范围大\n\n### (3)**`decimal` vs `double`**\n\n`decimal`： 定点数，数据精确。变长的数据类型，随着存储的数据有效位增加，而占用更多的存储空间。\n\n`double`：浮点数，精度丢失。定长的数据类型，永远占用 8 个直接的存储空间（float4 个字节）\n\n### (4)**`enum` vs `set`**\n\n`enum`: 枚举，使用一个数表示一个枚举值，占 2 个字节，一共 2^16 个枚举值\n\n`set`: 使用一个位表示一个元素值，占用 8 个直接，一共 8\\*8 个元素值\n","source":"_posts/mysql-compare.md","raw":"---\ntitle: MySQL数据库常见名词对比\ndate: 2018-06-05 21:27:45\ntags:\n  - mysql\ncategory:\n  - 【MySQL相关】\n---\n\nMySQL 由于性能高、成本低、可靠性好，已经成为最流行的开源数据库，因此被广泛地应用在 Internet 上的中小型网站中。随着 MySQL 的不断成熟，它也逐渐用于更多大规模网站和应用，比如维基百科、Google 和 Facebook 等网站。非常流行的开源软件组合 LAMP 中的“M”指的就是 MySQL。\n\n<!--more-->\n\n## 1.存储引擎 --- `MyISAM` vs `InnoDB`\n\n### (1)**存储方式**\n\n每种存储引擎下的数据表创建成功后都会生成相应格式的文件\n\n- MyISAM： `.frm` -- 结构 `.MDY` -- 数据 `.MYI` -- 索引\n\n- InnoDB： `.frm` -- 结构 `.ibd` -- 数据+索引\n\n### (2)**物理顺序**\n\n`MyISAM`： 依插入顺序\n\n`InnoDB`： 依主键顺序\n\n### (3)**特定功能**\n\nMyISAM:\n\n- 支持全文索引(鸡肋)\n- 存储空间少\n- 文件级别快速备份（将生成的文件直接拷贝到相应位置，需要还原时直接拷贝回来）\n\nInnoDB:\n\n- 外键\n- 事务\n- 行级锁定\n\n### (4)**并发处理能力**\n\nMyISAM：\n\n- 锁定粒度：表级\n- 并发插入（在表中执行其他操作时，可以同事执行插入工作，大多数情况是不需要考虑锁的问题。因为插入不影响其他记录的操作，在最后插入）\n\nInnoDB：\n\n- 锁定粒度：表级 + 行级\n- 多版本并发控制 MVCC(`Multi-Version Concurrency Control`)，实现无阻塞读操作\n\n> Multi-Version Concurrency Control 多版本并发控制，MVCC 是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问；在编程语言中实现事务内存。\n\n### (5)**空间空洞**\n\nMyISAM：\n\n- 删除表中大量记录后，表结构的文件大小没有变化。需要手动修复空洞空间。`repair table table_name`\n\nInnoDB：\n\n- 没有空洞现象。\n\n### (6)**总结**\n\nMyISAM: 以读取和插入为主\n\nInnoDB: 以更新和删除为主（写锁[独占锁，阻塞其他的所有操作]）\n\n**总结**：直接用 InnoDB。\n\n## 2.字段类型\n\n### (1)**`varchar` vs `char`**\n\n`varchar`:\n\n- 优点：变长，占用的空间随着内容的增长而变大，节约空间\n- 缺点：速度稍慢\n\n`char`:\n\n- 优点：速度快\n- 缺点：定长，永远占用 4 个直接，无论存储 0，-1,1234567 占用的空间是一致的。\n\n### (2)**`datetime` vs `timestamp`**\n\n`timestamp`: 占用较少的空间，存储时间的范围小\n\n`datetime`: 占用较多的空间，存储时间范围大\n\n### (3)**`decimal` vs `double`**\n\n`decimal`： 定点数，数据精确。变长的数据类型，随着存储的数据有效位增加，而占用更多的存储空间。\n\n`double`：浮点数，精度丢失。定长的数据类型，永远占用 8 个直接的存储空间（float4 个字节）\n\n### (4)**`enum` vs `set`**\n\n`enum`: 枚举，使用一个数表示一个枚举值，占 2 个字节，一共 2^16 个枚举值\n\n`set`: 使用一个位表示一个元素值，占用 8 个直接，一共 8\\*8 个元素值\n","slug":"mysql-compare","published":1,"updated":"2019-05-12T15:55:05.612Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c406001t2wuu6ijxtvqv","content":"<p>MySQL 由于性能高、成本低、可靠性好，已经成为最流行的开源数据库，因此被广泛地应用在 Internet 上的中小型网站中。随着 MySQL 的不断成熟，它也逐渐用于更多大规模网站和应用，比如维基百科、Google 和 Facebook 等网站。非常流行的开源软件组合 LAMP 中的“M”指的就是 MySQL。</p>\n<a id=\"more\"></a>\n<h2 id=\"1存储引擎-myisam-vs-innodb\"><a class=\"markdownIt-Anchor\" href=\"#1存储引擎-myisam-vs-innodb\"></a> 1.存储引擎 — <code>MyISAM</code> vs <code>InnoDB</code></h2>\n<h3 id=\"1存储方式\"><a class=\"markdownIt-Anchor\" href=\"#1存储方式\"></a> (1)<strong>存储方式</strong></h3>\n<p>每种存储引擎下的数据表创建成功后都会生成相应格式的文件</p>\n<ul>\n<li>\n<p>MyISAM： <code>.frm</code> – 结构 <code>.MDY</code> – 数据 <code>.MYI</code> – 索引</p>\n</li>\n<li>\n<p>InnoDB： <code>.frm</code> – 结构 <code>.ibd</code> – 数据+索引</p>\n</li>\n</ul>\n<h3 id=\"2物理顺序\"><a class=\"markdownIt-Anchor\" href=\"#2物理顺序\"></a> (2)<strong>物理顺序</strong></h3>\n<p><code>MyISAM</code>： 依插入顺序</p>\n<p><code>InnoDB</code>： 依主键顺序</p>\n<h3 id=\"3特定功能\"><a class=\"markdownIt-Anchor\" href=\"#3特定功能\"></a> (3)<strong>特定功能</strong></h3>\n<p>MyISAM:</p>\n<ul>\n<li>支持全文索引(鸡肋)</li>\n<li>存储空间少</li>\n<li>文件级别快速备份（将生成的文件直接拷贝到相应位置，需要还原时直接拷贝回来）</li>\n</ul>\n<p>InnoDB:</p>\n<ul>\n<li>外键</li>\n<li>事务</li>\n<li>行级锁定</li>\n</ul>\n<h3 id=\"4并发处理能力\"><a class=\"markdownIt-Anchor\" href=\"#4并发处理能力\"></a> (4)<strong>并发处理能力</strong></h3>\n<p>MyISAM：</p>\n<ul>\n<li>锁定粒度：表级</li>\n<li>并发插入（在表中执行其他操作时，可以同事执行插入工作，大多数情况是不需要考虑锁的问题。因为插入不影响其他记录的操作，在最后插入）</li>\n</ul>\n<p>InnoDB：</p>\n<ul>\n<li>锁定粒度：表级 + 行级</li>\n<li>多版本并发控制 MVCC(<code>Multi-Version Concurrency Control</code>)，实现无阻塞读操作</li>\n</ul>\n<blockquote>\n<p>Multi-Version Concurrency Control 多版本并发控制，MVCC 是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问；在编程语言中实现事务内存。</p>\n</blockquote>\n<h3 id=\"5空间空洞\"><a class=\"markdownIt-Anchor\" href=\"#5空间空洞\"></a> (5)<strong>空间空洞</strong></h3>\n<p>MyISAM：</p>\n<ul>\n<li>删除表中大量记录后，表结构的文件大小没有变化。需要手动修复空洞空间。<code>repair table table_name</code></li>\n</ul>\n<p>InnoDB：</p>\n<ul>\n<li>没有空洞现象。</li>\n</ul>\n<h3 id=\"6总结\"><a class=\"markdownIt-Anchor\" href=\"#6总结\"></a> (6)<strong>总结</strong></h3>\n<p>MyISAM: 以读取和插入为主</p>\n<p>InnoDB: 以更新和删除为主（写锁[独占锁，阻塞其他的所有操作]）</p>\n<p><strong>总结</strong>：直接用 InnoDB。</p>\n<h2 id=\"2字段类型\"><a class=\"markdownIt-Anchor\" href=\"#2字段类型\"></a> 2.字段类型</h2>\n<h3 id=\"1varchar-vs-char\"><a class=\"markdownIt-Anchor\" href=\"#1varchar-vs-char\"></a> (1)<strong><code>varchar</code> vs <code>char</code></strong></h3>\n<p><code>varchar</code>:</p>\n<ul>\n<li>优点：变长，占用的空间随着内容的增长而变大，节约空间</li>\n<li>缺点：速度稍慢</li>\n</ul>\n<p><code>char</code>:</p>\n<ul>\n<li>优点：速度快</li>\n<li>缺点：定长，永远占用 4 个直接，无论存储 0，-1,1234567 占用的空间是一致的。</li>\n</ul>\n<h3 id=\"2datetime-vs-timestamp\"><a class=\"markdownIt-Anchor\" href=\"#2datetime-vs-timestamp\"></a> (2)<strong><code>datetime</code> vs <code>timestamp</code></strong></h3>\n<p><code>timestamp</code>: 占用较少的空间，存储时间的范围小</p>\n<p><code>datetime</code>: 占用较多的空间，存储时间范围大</p>\n<h3 id=\"3decimal-vs-double\"><a class=\"markdownIt-Anchor\" href=\"#3decimal-vs-double\"></a> (3)<strong><code>decimal</code> vs <code>double</code></strong></h3>\n<p><code>decimal</code>： 定点数，数据精确。变长的数据类型，随着存储的数据有效位增加，而占用更多的存储空间。</p>\n<p><code>double</code>：浮点数，精度丢失。定长的数据类型，永远占用 8 个直接的存储空间（float4 个字节）</p>\n<h3 id=\"4enum-vs-set\"><a class=\"markdownIt-Anchor\" href=\"#4enum-vs-set\"></a> (4)<strong><code>enum</code> vs <code>set</code></strong></h3>\n<p><code>enum</code>: 枚举，使用一个数表示一个枚举值，占 2 个字节，一共 2^16 个枚举值</p>\n<p><code>set</code>: 使用一个位表示一个元素值，占用 8 个直接，一共 8*8 个元素值</p>\n","site":{"data":{}},"excerpt":"<p>MySQL 由于性能高、成本低、可靠性好，已经成为最流行的开源数据库，因此被广泛地应用在 Internet 上的中小型网站中。随着 MySQL 的不断成熟，它也逐渐用于更多大规模网站和应用，比如维基百科、Google 和 Facebook 等网站。非常流行的开源软件组合 LAMP 中的“M”指的就是 MySQL。</p>","more":"<h2 id=\"1存储引擎-myisam-vs-innodb\"><a class=\"markdownIt-Anchor\" href=\"#1存储引擎-myisam-vs-innodb\"></a> 1.存储引擎 — <code>MyISAM</code> vs <code>InnoDB</code></h2>\n<h3 id=\"1存储方式\"><a class=\"markdownIt-Anchor\" href=\"#1存储方式\"></a> (1)<strong>存储方式</strong></h3>\n<p>每种存储引擎下的数据表创建成功后都会生成相应格式的文件</p>\n<ul>\n<li>\n<p>MyISAM： <code>.frm</code> – 结构 <code>.MDY</code> – 数据 <code>.MYI</code> – 索引</p>\n</li>\n<li>\n<p>InnoDB： <code>.frm</code> – 结构 <code>.ibd</code> – 数据+索引</p>\n</li>\n</ul>\n<h3 id=\"2物理顺序\"><a class=\"markdownIt-Anchor\" href=\"#2物理顺序\"></a> (2)<strong>物理顺序</strong></h3>\n<p><code>MyISAM</code>： 依插入顺序</p>\n<p><code>InnoDB</code>： 依主键顺序</p>\n<h3 id=\"3特定功能\"><a class=\"markdownIt-Anchor\" href=\"#3特定功能\"></a> (3)<strong>特定功能</strong></h3>\n<p>MyISAM:</p>\n<ul>\n<li>支持全文索引(鸡肋)</li>\n<li>存储空间少</li>\n<li>文件级别快速备份（将生成的文件直接拷贝到相应位置，需要还原时直接拷贝回来）</li>\n</ul>\n<p>InnoDB:</p>\n<ul>\n<li>外键</li>\n<li>事务</li>\n<li>行级锁定</li>\n</ul>\n<h3 id=\"4并发处理能力\"><a class=\"markdownIt-Anchor\" href=\"#4并发处理能力\"></a> (4)<strong>并发处理能力</strong></h3>\n<p>MyISAM：</p>\n<ul>\n<li>锁定粒度：表级</li>\n<li>并发插入（在表中执行其他操作时，可以同事执行插入工作，大多数情况是不需要考虑锁的问题。因为插入不影响其他记录的操作，在最后插入）</li>\n</ul>\n<p>InnoDB：</p>\n<ul>\n<li>锁定粒度：表级 + 行级</li>\n<li>多版本并发控制 MVCC(<code>Multi-Version Concurrency Control</code>)，实现无阻塞读操作</li>\n</ul>\n<blockquote>\n<p>Multi-Version Concurrency Control 多版本并发控制，MVCC 是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问；在编程语言中实现事务内存。</p>\n</blockquote>\n<h3 id=\"5空间空洞\"><a class=\"markdownIt-Anchor\" href=\"#5空间空洞\"></a> (5)<strong>空间空洞</strong></h3>\n<p>MyISAM：</p>\n<ul>\n<li>删除表中大量记录后，表结构的文件大小没有变化。需要手动修复空洞空间。<code>repair table table_name</code></li>\n</ul>\n<p>InnoDB：</p>\n<ul>\n<li>没有空洞现象。</li>\n</ul>\n<h3 id=\"6总结\"><a class=\"markdownIt-Anchor\" href=\"#6总结\"></a> (6)<strong>总结</strong></h3>\n<p>MyISAM: 以读取和插入为主</p>\n<p>InnoDB: 以更新和删除为主（写锁[独占锁，阻塞其他的所有操作]）</p>\n<p><strong>总结</strong>：直接用 InnoDB。</p>\n<h2 id=\"2字段类型\"><a class=\"markdownIt-Anchor\" href=\"#2字段类型\"></a> 2.字段类型</h2>\n<h3 id=\"1varchar-vs-char\"><a class=\"markdownIt-Anchor\" href=\"#1varchar-vs-char\"></a> (1)<strong><code>varchar</code> vs <code>char</code></strong></h3>\n<p><code>varchar</code>:</p>\n<ul>\n<li>优点：变长，占用的空间随着内容的增长而变大，节约空间</li>\n<li>缺点：速度稍慢</li>\n</ul>\n<p><code>char</code>:</p>\n<ul>\n<li>优点：速度快</li>\n<li>缺点：定长，永远占用 4 个直接，无论存储 0，-1,1234567 占用的空间是一致的。</li>\n</ul>\n<h3 id=\"2datetime-vs-timestamp\"><a class=\"markdownIt-Anchor\" href=\"#2datetime-vs-timestamp\"></a> (2)<strong><code>datetime</code> vs <code>timestamp</code></strong></h3>\n<p><code>timestamp</code>: 占用较少的空间，存储时间的范围小</p>\n<p><code>datetime</code>: 占用较多的空间，存储时间范围大</p>\n<h3 id=\"3decimal-vs-double\"><a class=\"markdownIt-Anchor\" href=\"#3decimal-vs-double\"></a> (3)<strong><code>decimal</code> vs <code>double</code></strong></h3>\n<p><code>decimal</code>： 定点数，数据精确。变长的数据类型，随着存储的数据有效位增加，而占用更多的存储空间。</p>\n<p><code>double</code>：浮点数，精度丢失。定长的数据类型，永远占用 8 个直接的存储空间（float4 个字节）</p>\n<h3 id=\"4enum-vs-set\"><a class=\"markdownIt-Anchor\" href=\"#4enum-vs-set\"></a> (4)<strong><code>enum</code> vs <code>set</code></strong></h3>\n<p><code>enum</code>: 枚举，使用一个数表示一个枚举值，占 2 个字节，一共 2^16 个枚举值</p>\n<p><code>set</code>: 使用一个位表示一个元素值，占用 8 个直接，一共 8*8 个元素值</p>"},{"title":"【MySQL】索引（Index）","date":"2019-03-15T12:10:34.000Z","_content":"\n#### 1.定义：帮助MySQL高效获取数据的**数据结构**\n\n- 目的在于提高查询效率。类似字典\n- 排好序的快速查找数据结构（影响查找和排序）\n  - 数据库系统还维护着满足特定查找算法的数据结构\n- 索引一般是指B树（多路搜索树，并不一定是二叉树）结构组织的索引\n\n<!-- more -->\n\n#### 2.优势：\n\n- 提高数据检索的效率，降低数据库IO成本\n- 通过索引列队数据进行排序，降低数据排序的成本，降低CPU的消耗\n\n#### 3.劣势：\n\n- 实际上索引也是一张表，该表保存了逐渐与索引字段，并指向实体表的记录，索引列也是要占用空间的\n- 虽然索引大大提高了查询速度，但是会降低更新表的速度，如对表进行INSERT、UPDATE、DELETE。 (因为更新表时，不仅要保存数据，还要保存索引文件每次更新添加了索引列的字段)\n- 索引只是提高效率的一个因素，如果有大数据量的表，就需要花时间研究建立最优秀的索引，或优化查询\n\n#### 4.索引分类：\n\n- 单值索引：一个索引只包含单个列，一个表可以有多个单列索引\n- 唯一索引：索引列的值必须唯一，但允许有空值\n- 复合索引：一个索引包含多个列\n\n#### 5.基本语法：\n\n(1)创建\n\n`CREATE [UNIQUE] INDEX indexName ON mytable(columnname(length))`\n\n`ALTER mytable ADD [UNIQUE] INDEX [indexName] ON (columnname(length))`\n\n```sql\nselect * from user where name='';\n-- 单值索引\ncreate index idx_user_name on user(name)\n-- 复合索引\ncreate index idx_user_nameEmail on user(name.email)\n```\n\n索引名称规范：：`idx_`+'表名'+'字段名'\n\n(2)删除\n\n`DROP INDEX [indexName] ON mytable;`\n\n(3)查看\n\n`SHOW INDEX FROM table_name\\G`\n\n#### 6.索引结构\n\n- BTree索引\n    - 原理分析\n- Hash索引\n- full-text全文索引\n- R-Tree索引\n\n#### 7.适合建索引情况\n\n- 主键自动建立唯一索引\n- 频繁作为查询条件的字段\n- 查询中与其他表关联的字段，外键关系建立索引\n- 单键/组合索引的选择问题（高并发下倾向创建组合索引）\n- 查询中排序的字段，排序字段若通过索引去访问將大大提高排序速度\n- 查询中统计或者分组字段\n\n#### 8.不适合创建索引情况\n\n- 表记录太少\n- 频繁更新的字段不适合建索引（每次更新都需要同步更新索引）\n- where条件里用不到的字段不创建索引\n- 数据重复且分布平均的表字段不适合建索引（如果某个数据列包含许多重复的内容，为它创建索引就没有太大的实际效果）\n","source":"_posts/mysql-index.md","raw":"---\ntitle: 【MySQL】索引（Index）\ndate: 2019-03-15 20:10:34\ntags:\n  - mysql\ncategory:\n  - 【MySQL相关】\n---\n\n#### 1.定义：帮助MySQL高效获取数据的**数据结构**\n\n- 目的在于提高查询效率。类似字典\n- 排好序的快速查找数据结构（影响查找和排序）\n  - 数据库系统还维护着满足特定查找算法的数据结构\n- 索引一般是指B树（多路搜索树，并不一定是二叉树）结构组织的索引\n\n<!-- more -->\n\n#### 2.优势：\n\n- 提高数据检索的效率，降低数据库IO成本\n- 通过索引列队数据进行排序，降低数据排序的成本，降低CPU的消耗\n\n#### 3.劣势：\n\n- 实际上索引也是一张表，该表保存了逐渐与索引字段，并指向实体表的记录，索引列也是要占用空间的\n- 虽然索引大大提高了查询速度，但是会降低更新表的速度，如对表进行INSERT、UPDATE、DELETE。 (因为更新表时，不仅要保存数据，还要保存索引文件每次更新添加了索引列的字段)\n- 索引只是提高效率的一个因素，如果有大数据量的表，就需要花时间研究建立最优秀的索引，或优化查询\n\n#### 4.索引分类：\n\n- 单值索引：一个索引只包含单个列，一个表可以有多个单列索引\n- 唯一索引：索引列的值必须唯一，但允许有空值\n- 复合索引：一个索引包含多个列\n\n#### 5.基本语法：\n\n(1)创建\n\n`CREATE [UNIQUE] INDEX indexName ON mytable(columnname(length))`\n\n`ALTER mytable ADD [UNIQUE] INDEX [indexName] ON (columnname(length))`\n\n```sql\nselect * from user where name='';\n-- 单值索引\ncreate index idx_user_name on user(name)\n-- 复合索引\ncreate index idx_user_nameEmail on user(name.email)\n```\n\n索引名称规范：：`idx_`+'表名'+'字段名'\n\n(2)删除\n\n`DROP INDEX [indexName] ON mytable;`\n\n(3)查看\n\n`SHOW INDEX FROM table_name\\G`\n\n#### 6.索引结构\n\n- BTree索引\n    - 原理分析\n- Hash索引\n- full-text全文索引\n- R-Tree索引\n\n#### 7.适合建索引情况\n\n- 主键自动建立唯一索引\n- 频繁作为查询条件的字段\n- 查询中与其他表关联的字段，外键关系建立索引\n- 单键/组合索引的选择问题（高并发下倾向创建组合索引）\n- 查询中排序的字段，排序字段若通过索引去访问將大大提高排序速度\n- 查询中统计或者分组字段\n\n#### 8.不适合创建索引情况\n\n- 表记录太少\n- 频繁更新的字段不适合建索引（每次更新都需要同步更新索引）\n- where条件里用不到的字段不创建索引\n- 数据重复且分布平均的表字段不适合建索引（如果某个数据列包含许多重复的内容，为它创建索引就没有太大的实际效果）\n","slug":"mysql-index","published":1,"updated":"2019-05-12T16:11:53.865Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c407001v2wuu3nfivx3g","content":"<h4 id=\"1定义帮助mysql高效获取数据的数据结构\"><a class=\"markdownIt-Anchor\" href=\"#1定义帮助mysql高效获取数据的数据结构\"></a> 1.定义：帮助MySQL高效获取数据的<strong>数据结构</strong></h4>\n<ul>\n<li>目的在于提高查询效率。类似字典</li>\n<li>排好序的快速查找数据结构（影响查找和排序）\n<ul>\n<li>数据库系统还维护着满足特定查找算法的数据结构</li>\n</ul>\n</li>\n<li>索引一般是指B树（多路搜索树，并不一定是二叉树）结构组织的索引</li>\n</ul>\n<a id=\"more\"></a>\n<h4 id=\"2优势\"><a class=\"markdownIt-Anchor\" href=\"#2优势\"></a> 2.优势：</h4>\n<ul>\n<li>提高数据检索的效率，降低数据库IO成本</li>\n<li>通过索引列队数据进行排序，降低数据排序的成本，降低CPU的消耗</li>\n</ul>\n<h4 id=\"3劣势\"><a class=\"markdownIt-Anchor\" href=\"#3劣势\"></a> 3.劣势：</h4>\n<ul>\n<li>实际上索引也是一张表，该表保存了逐渐与索引字段，并指向实体表的记录，索引列也是要占用空间的</li>\n<li>虽然索引大大提高了查询速度，但是会降低更新表的速度，如对表进行INSERT、UPDATE、DELETE。 (因为更新表时，不仅要保存数据，还要保存索引文件每次更新添加了索引列的字段)</li>\n<li>索引只是提高效率的一个因素，如果有大数据量的表，就需要花时间研究建立最优秀的索引，或优化查询</li>\n</ul>\n<h4 id=\"4索引分类\"><a class=\"markdownIt-Anchor\" href=\"#4索引分类\"></a> 4.索引分类：</h4>\n<ul>\n<li>单值索引：一个索引只包含单个列，一个表可以有多个单列索引</li>\n<li>唯一索引：索引列的值必须唯一，但允许有空值</li>\n<li>复合索引：一个索引包含多个列</li>\n</ul>\n<h4 id=\"5基本语法\"><a class=\"markdownIt-Anchor\" href=\"#5基本语法\"></a> 5.基本语法：</h4>\n<p>(1)创建</p>\n<p><code>CREATE [UNIQUE] INDEX indexName ON mytable(columnname(length))</code></p>\n<p><code>ALTER mytable ADD [UNIQUE] INDEX [indexName] ON (columnname(length))</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> <span class=\"keyword\">name</span>=<span class=\"string\">''</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 单值索引</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">index</span> idx_user_name <span class=\"keyword\">on</span> <span class=\"keyword\">user</span>(<span class=\"keyword\">name</span>)</span><br><span class=\"line\"><span class=\"comment\">-- 复合索引</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">index</span> idx_user_nameEmail <span class=\"keyword\">on</span> <span class=\"keyword\">user</span>(name.email)</span><br></pre></td></tr></table></figure>\n<p>索引名称规范：：<code>idx_</code>+‘表名’+‘字段名’</p>\n<p>(2)删除</p>\n<p><code>DROP INDEX [indexName] ON mytable;</code></p>\n<p>(3)查看</p>\n<p><code>SHOW INDEX FROM table_name\\G</code></p>\n<h4 id=\"6索引结构\"><a class=\"markdownIt-Anchor\" href=\"#6索引结构\"></a> 6.索引结构</h4>\n<ul>\n<li>BTree索引\n<ul>\n<li>原理分析</li>\n</ul>\n</li>\n<li>Hash索引</li>\n<li>full-text全文索引</li>\n<li>R-Tree索引</li>\n</ul>\n<h4 id=\"7适合建索引情况\"><a class=\"markdownIt-Anchor\" href=\"#7适合建索引情况\"></a> 7.适合建索引情况</h4>\n<ul>\n<li>主键自动建立唯一索引</li>\n<li>频繁作为查询条件的字段</li>\n<li>查询中与其他表关联的字段，外键关系建立索引</li>\n<li>单键/组合索引的选择问题（高并发下倾向创建组合索引）</li>\n<li>查询中排序的字段，排序字段若通过索引去访问將大大提高排序速度</li>\n<li>查询中统计或者分组字段</li>\n</ul>\n<h4 id=\"8不适合创建索引情况\"><a class=\"markdownIt-Anchor\" href=\"#8不适合创建索引情况\"></a> 8.不适合创建索引情况</h4>\n<ul>\n<li>表记录太少</li>\n<li>频繁更新的字段不适合建索引（每次更新都需要同步更新索引）</li>\n<li>where条件里用不到的字段不创建索引</li>\n<li>数据重复且分布平均的表字段不适合建索引（如果某个数据列包含许多重复的内容，为它创建索引就没有太大的实际效果）</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h4 id=\"1定义帮助mysql高效获取数据的数据结构\"><a class=\"markdownIt-Anchor\" href=\"#1定义帮助mysql高效获取数据的数据结构\"></a> 1.定义：帮助MySQL高效获取数据的<strong>数据结构</strong></h4>\n<ul>\n<li>目的在于提高查询效率。类似字典</li>\n<li>排好序的快速查找数据结构（影响查找和排序）\n<ul>\n<li>数据库系统还维护着满足特定查找算法的数据结构</li>\n</ul>\n</li>\n<li>索引一般是指B树（多路搜索树，并不一定是二叉树）结构组织的索引</li>\n</ul>","more":"<h4 id=\"2优势\"><a class=\"markdownIt-Anchor\" href=\"#2优势\"></a> 2.优势：</h4>\n<ul>\n<li>提高数据检索的效率，降低数据库IO成本</li>\n<li>通过索引列队数据进行排序，降低数据排序的成本，降低CPU的消耗</li>\n</ul>\n<h4 id=\"3劣势\"><a class=\"markdownIt-Anchor\" href=\"#3劣势\"></a> 3.劣势：</h4>\n<ul>\n<li>实际上索引也是一张表，该表保存了逐渐与索引字段，并指向实体表的记录，索引列也是要占用空间的</li>\n<li>虽然索引大大提高了查询速度，但是会降低更新表的速度，如对表进行INSERT、UPDATE、DELETE。 (因为更新表时，不仅要保存数据，还要保存索引文件每次更新添加了索引列的字段)</li>\n<li>索引只是提高效率的一个因素，如果有大数据量的表，就需要花时间研究建立最优秀的索引，或优化查询</li>\n</ul>\n<h4 id=\"4索引分类\"><a class=\"markdownIt-Anchor\" href=\"#4索引分类\"></a> 4.索引分类：</h4>\n<ul>\n<li>单值索引：一个索引只包含单个列，一个表可以有多个单列索引</li>\n<li>唯一索引：索引列的值必须唯一，但允许有空值</li>\n<li>复合索引：一个索引包含多个列</li>\n</ul>\n<h4 id=\"5基本语法\"><a class=\"markdownIt-Anchor\" href=\"#5基本语法\"></a> 5.基本语法：</h4>\n<p>(1)创建</p>\n<p><code>CREATE [UNIQUE] INDEX indexName ON mytable(columnname(length))</code></p>\n<p><code>ALTER mytable ADD [UNIQUE] INDEX [indexName] ON (columnname(length))</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> <span class=\"keyword\">name</span>=<span class=\"string\">''</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 单值索引</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">index</span> idx_user_name <span class=\"keyword\">on</span> <span class=\"keyword\">user</span>(<span class=\"keyword\">name</span>)</span><br><span class=\"line\"><span class=\"comment\">-- 复合索引</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">index</span> idx_user_nameEmail <span class=\"keyword\">on</span> <span class=\"keyword\">user</span>(name.email)</span><br></pre></td></tr></table></figure>\n<p>索引名称规范：：<code>idx_</code>+‘表名’+‘字段名’</p>\n<p>(2)删除</p>\n<p><code>DROP INDEX [indexName] ON mytable;</code></p>\n<p>(3)查看</p>\n<p><code>SHOW INDEX FROM table_name\\G</code></p>\n<h4 id=\"6索引结构\"><a class=\"markdownIt-Anchor\" href=\"#6索引结构\"></a> 6.索引结构</h4>\n<ul>\n<li>BTree索引\n<ul>\n<li>原理分析</li>\n</ul>\n</li>\n<li>Hash索引</li>\n<li>full-text全文索引</li>\n<li>R-Tree索引</li>\n</ul>\n<h4 id=\"7适合建索引情况\"><a class=\"markdownIt-Anchor\" href=\"#7适合建索引情况\"></a> 7.适合建索引情况</h4>\n<ul>\n<li>主键自动建立唯一索引</li>\n<li>频繁作为查询条件的字段</li>\n<li>查询中与其他表关联的字段，外键关系建立索引</li>\n<li>单键/组合索引的选择问题（高并发下倾向创建组合索引）</li>\n<li>查询中排序的字段，排序字段若通过索引去访问將大大提高排序速度</li>\n<li>查询中统计或者分组字段</li>\n</ul>\n<h4 id=\"8不适合创建索引情况\"><a class=\"markdownIt-Anchor\" href=\"#8不适合创建索引情况\"></a> 8.不适合创建索引情况</h4>\n<ul>\n<li>表记录太少</li>\n<li>频繁更新的字段不适合建索引（每次更新都需要同步更新索引）</li>\n<li>where条件里用不到的字段不创建索引</li>\n<li>数据重复且分布平均的表字段不适合建索引（如果某个数据列包含许多重复的内容，为它创建索引就没有太大的实际效果）</li>\n</ul>"},{"title":"【设计模式】适配器模式","date":"2019-04-27T16:03:57.000Z","_content":"\n适配器模式(Adapter Pattern)：将一个接口转换成客户希望的另一个接口，使接口不兼容的那些类可以一起工作，其别名为包装器(Wrapper)。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。\n\n<!-- more -->\n\n## 应用：数据库适配器\n\n1、定义一个统一方法的数据库接口（目标接口/目标抽象类）\n\n```php\ninterface IDatabase\n{\n    // 数据库连接\n    function connect($host, $user, $passwd, $dbname);\n    // 执行sql\n    function query($sql);\n    // 关闭数据库连接\n    function close();\n}\n```\n\n2、单个数据库类定义\n\n(1) MySQL  （mysql数据库操作适配器类）\n- 类文件\n```php\nclass MySQL implements IDatabase\n{\n    protected $conn;\n    function connect($host, $user, $passwd, $dbname)\n    {\n        $conn = mysql_connect($host, $user, $passwd);\n        mysql_select_db($dbname, $conn);\n        $this->conn = $conn;\n    }\n\n    function query($sql)\n    {\n        return mysql_query($sql, $this->conn);\n    }\n\n    function close()\n    {\n        mysql_close($this->conn);\n    }\n}\n```\n\n- 单一调用\n\n```php\n$db = new MySQL();\n$db->connect('127.0.0.1', 'root', 'root', 'test');\n$db->query('show databases');\n$db->close();\n```\n\n(2) MySQLi  （mysqli数据库操作适配器类）\n- 类文件定义\n```php\nclass MySQL implements IDatabase\n{\n    protected $conn;\n    function connect($host, $user, $passwd, $dbname)\n    {\n        $conn = mysqli_connect($host, $user, $passwd,  $dbname);\n        $this->conn = $conn;\n    }\n\n    function query($sql)\n    {\n        return mysqli_connect($this->conn, $sql);\n    }\n\n    function close()\n    {\n        mysql_close($this->conn);\n    }\n}\n```\n\n(3) PDO （PDO数据库操作适配器类）\n- 类文件定义\n```php\nclass PDO implements IDatabase\n{\n    protected $conn;\n    function connect($host, $user, $passwd, $dbname)\n    {\n        $conn = new \\PDO(\"mysql:host={$host};dbname={$dbname}\",$username, $password);\n        $this->conn = $conn;\n    }\n\n    function query($sql)\n    {\n        return $this->conn->query($sql);\n    }\n\n    function close()\n    {\n        unset($this->conn);\n    }\n}\n```\n\n3、理解\n\n多个类文件定义完成后，需要使用数据库的时候，直接通过类名切换实现不同数据库类的调用\n\nmysql、mysqli、PDO数据库操作类本身的库为适配者\n\n被实现的接口为目标接口\n\n封装的三个数据库操作类为三个适配器\n\n```php\n$db = new MySQL();\n//$db = new MySQLi();\n//$db = new PDO();\n$db->connect('127.0.0.1', 'root', 'root', 'test');\n$db->query('show databases');\n$db->close();\n```","source":"_posts/pattern-adapter.md","raw":"---\ntitle: 【设计模式】适配器模式\ndate: 2019-04-28 00:03:57\ntags:\n  - 适配器模式\ncategory:\n  - 【设计模式】\n---\n\n适配器模式(Adapter Pattern)：将一个接口转换成客户希望的另一个接口，使接口不兼容的那些类可以一起工作，其别名为包装器(Wrapper)。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。\n\n<!-- more -->\n\n## 应用：数据库适配器\n\n1、定义一个统一方法的数据库接口（目标接口/目标抽象类）\n\n```php\ninterface IDatabase\n{\n    // 数据库连接\n    function connect($host, $user, $passwd, $dbname);\n    // 执行sql\n    function query($sql);\n    // 关闭数据库连接\n    function close();\n}\n```\n\n2、单个数据库类定义\n\n(1) MySQL  （mysql数据库操作适配器类）\n- 类文件\n```php\nclass MySQL implements IDatabase\n{\n    protected $conn;\n    function connect($host, $user, $passwd, $dbname)\n    {\n        $conn = mysql_connect($host, $user, $passwd);\n        mysql_select_db($dbname, $conn);\n        $this->conn = $conn;\n    }\n\n    function query($sql)\n    {\n        return mysql_query($sql, $this->conn);\n    }\n\n    function close()\n    {\n        mysql_close($this->conn);\n    }\n}\n```\n\n- 单一调用\n\n```php\n$db = new MySQL();\n$db->connect('127.0.0.1', 'root', 'root', 'test');\n$db->query('show databases');\n$db->close();\n```\n\n(2) MySQLi  （mysqli数据库操作适配器类）\n- 类文件定义\n```php\nclass MySQL implements IDatabase\n{\n    protected $conn;\n    function connect($host, $user, $passwd, $dbname)\n    {\n        $conn = mysqli_connect($host, $user, $passwd,  $dbname);\n        $this->conn = $conn;\n    }\n\n    function query($sql)\n    {\n        return mysqli_connect($this->conn, $sql);\n    }\n\n    function close()\n    {\n        mysql_close($this->conn);\n    }\n}\n```\n\n(3) PDO （PDO数据库操作适配器类）\n- 类文件定义\n```php\nclass PDO implements IDatabase\n{\n    protected $conn;\n    function connect($host, $user, $passwd, $dbname)\n    {\n        $conn = new \\PDO(\"mysql:host={$host};dbname={$dbname}\",$username, $password);\n        $this->conn = $conn;\n    }\n\n    function query($sql)\n    {\n        return $this->conn->query($sql);\n    }\n\n    function close()\n    {\n        unset($this->conn);\n    }\n}\n```\n\n3、理解\n\n多个类文件定义完成后，需要使用数据库的时候，直接通过类名切换实现不同数据库类的调用\n\nmysql、mysqli、PDO数据库操作类本身的库为适配者\n\n被实现的接口为目标接口\n\n封装的三个数据库操作类为三个适配器\n\n```php\n$db = new MySQL();\n//$db = new MySQLi();\n//$db = new PDO();\n$db->connect('127.0.0.1', 'root', 'root', 'test');\n$db->query('show databases');\n$db->close();\n```","slug":"pattern-adapter","published":1,"updated":"2019-05-12T16:08:45.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c40a00202wuulxicfvjh","content":"<p>适配器模式(Adapter Pattern)：将一个接口转换成客户希望的另一个接口，使接口不兼容的那些类可以一起工作，其别名为包装器(Wrapper)。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。</p>\n<a id=\"more\"></a>\n<h2 id=\"应用数据库适配器\"><a class=\"markdownIt-Anchor\" href=\"#应用数据库适配器\"></a> 应用：数据库适配器</h2>\n<p>1、定义一个统一方法的数据库接口（目标接口/目标抽象类）</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IDatabase</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 数据库连接</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connect</span><span class=\"params\">($host, $user, $passwd, $dbname)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// 执行sql</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">query</span><span class=\"params\">($sql)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// 关闭数据库连接</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">close</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、单个数据库类定义</p>\n<p>(1) MySQL  （mysql数据库操作适配器类）</p>\n<ul>\n<li>类文件</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySQL</span> <span class=\"keyword\">implements</span> <span class=\"title\">IDatabase</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $conn;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connect</span><span class=\"params\">($host, $user, $passwd, $dbname)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $conn = mysql_connect($host, $user, $passwd);</span><br><span class=\"line\">        mysql_select_db($dbname, $conn);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;conn = $conn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">query</span><span class=\"params\">($sql)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mysql_query($sql, <span class=\"keyword\">$this</span>-&gt;conn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">close</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        mysql_close(<span class=\"keyword\">$this</span>-&gt;conn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>单一调用</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$db = <span class=\"keyword\">new</span> MySQL();</span><br><span class=\"line\">$db-&gt;connect(<span class=\"string\">'127.0.0.1'</span>, <span class=\"string\">'root'</span>, <span class=\"string\">'root'</span>, <span class=\"string\">'test'</span>);</span><br><span class=\"line\">$db-&gt;query(<span class=\"string\">'show databases'</span>);</span><br><span class=\"line\">$db-&gt;close();</span><br></pre></td></tr></table></figure>\n<p>(2) MySQLi  （mysqli数据库操作适配器类）</p>\n<ul>\n<li>类文件定义</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySQL</span> <span class=\"keyword\">implements</span> <span class=\"title\">IDatabase</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $conn;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connect</span><span class=\"params\">($host, $user, $passwd, $dbname)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $conn = mysqli_connect($host, $user, $passwd,  $dbname);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;conn = $conn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">query</span><span class=\"params\">($sql)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mysqli_connect(<span class=\"keyword\">$this</span>-&gt;conn, $sql);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">close</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        mysql_close(<span class=\"keyword\">$this</span>-&gt;conn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(3) PDO （PDO数据库操作适配器类）</p>\n<ul>\n<li>类文件定义</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PDO</span> <span class=\"keyword\">implements</span> <span class=\"title\">IDatabase</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $conn;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connect</span><span class=\"params\">($host, $user, $passwd, $dbname)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $conn = <span class=\"keyword\">new</span> \\PDO(<span class=\"string\">\"mysql:host=&#123;$host&#125;;dbname=&#123;$dbname&#125;\"</span>,$username, $password);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;conn = $conn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">query</span><span class=\"params\">($sql)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;conn-&gt;query($sql);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">close</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">unset</span>(<span class=\"keyword\">$this</span>-&gt;conn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3、理解</p>\n<p>多个类文件定义完成后，需要使用数据库的时候，直接通过类名切换实现不同数据库类的调用</p>\n<p>mysql、mysqli、PDO数据库操作类本身的库为适配者</p>\n<p>被实现的接口为目标接口</p>\n<p>封装的三个数据库操作类为三个适配器</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$db = <span class=\"keyword\">new</span> MySQL();</span><br><span class=\"line\"><span class=\"comment\">//$db = new MySQLi();</span></span><br><span class=\"line\"><span class=\"comment\">//$db = new PDO();</span></span><br><span class=\"line\">$db-&gt;connect(<span class=\"string\">'127.0.0.1'</span>, <span class=\"string\">'root'</span>, <span class=\"string\">'root'</span>, <span class=\"string\">'test'</span>);</span><br><span class=\"line\">$db-&gt;query(<span class=\"string\">'show databases'</span>);</span><br><span class=\"line\">$db-&gt;close();</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>适配器模式(Adapter Pattern)：将一个接口转换成客户希望的另一个接口，使接口不兼容的那些类可以一起工作，其别名为包装器(Wrapper)。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。</p>","more":"<h2 id=\"应用数据库适配器\"><a class=\"markdownIt-Anchor\" href=\"#应用数据库适配器\"></a> 应用：数据库适配器</h2>\n<p>1、定义一个统一方法的数据库接口（目标接口/目标抽象类）</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IDatabase</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 数据库连接</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connect</span><span class=\"params\">($host, $user, $passwd, $dbname)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// 执行sql</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">query</span><span class=\"params\">($sql)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// 关闭数据库连接</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">close</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、单个数据库类定义</p>\n<p>(1) MySQL  （mysql数据库操作适配器类）</p>\n<ul>\n<li>类文件</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySQL</span> <span class=\"keyword\">implements</span> <span class=\"title\">IDatabase</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $conn;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connect</span><span class=\"params\">($host, $user, $passwd, $dbname)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $conn = mysql_connect($host, $user, $passwd);</span><br><span class=\"line\">        mysql_select_db($dbname, $conn);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;conn = $conn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">query</span><span class=\"params\">($sql)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mysql_query($sql, <span class=\"keyword\">$this</span>-&gt;conn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">close</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        mysql_close(<span class=\"keyword\">$this</span>-&gt;conn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>单一调用</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$db = <span class=\"keyword\">new</span> MySQL();</span><br><span class=\"line\">$db-&gt;connect(<span class=\"string\">'127.0.0.1'</span>, <span class=\"string\">'root'</span>, <span class=\"string\">'root'</span>, <span class=\"string\">'test'</span>);</span><br><span class=\"line\">$db-&gt;query(<span class=\"string\">'show databases'</span>);</span><br><span class=\"line\">$db-&gt;close();</span><br></pre></td></tr></table></figure>\n<p>(2) MySQLi  （mysqli数据库操作适配器类）</p>\n<ul>\n<li>类文件定义</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySQL</span> <span class=\"keyword\">implements</span> <span class=\"title\">IDatabase</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $conn;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connect</span><span class=\"params\">($host, $user, $passwd, $dbname)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $conn = mysqli_connect($host, $user, $passwd,  $dbname);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;conn = $conn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">query</span><span class=\"params\">($sql)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mysqli_connect(<span class=\"keyword\">$this</span>-&gt;conn, $sql);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">close</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        mysql_close(<span class=\"keyword\">$this</span>-&gt;conn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(3) PDO （PDO数据库操作适配器类）</p>\n<ul>\n<li>类文件定义</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PDO</span> <span class=\"keyword\">implements</span> <span class=\"title\">IDatabase</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $conn;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connect</span><span class=\"params\">($host, $user, $passwd, $dbname)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $conn = <span class=\"keyword\">new</span> \\PDO(<span class=\"string\">\"mysql:host=&#123;$host&#125;;dbname=&#123;$dbname&#125;\"</span>,$username, $password);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;conn = $conn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">query</span><span class=\"params\">($sql)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;conn-&gt;query($sql);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">close</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">unset</span>(<span class=\"keyword\">$this</span>-&gt;conn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3、理解</p>\n<p>多个类文件定义完成后，需要使用数据库的时候，直接通过类名切换实现不同数据库类的调用</p>\n<p>mysql、mysqli、PDO数据库操作类本身的库为适配者</p>\n<p>被实现的接口为目标接口</p>\n<p>封装的三个数据库操作类为三个适配器</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$db = <span class=\"keyword\">new</span> MySQL();</span><br><span class=\"line\"><span class=\"comment\">//$db = new MySQLi();</span></span><br><span class=\"line\"><span class=\"comment\">//$db = new PDO();</span></span><br><span class=\"line\">$db-&gt;connect(<span class=\"string\">'127.0.0.1'</span>, <span class=\"string\">'root'</span>, <span class=\"string\">'root'</span>, <span class=\"string\">'test'</span>);</span><br><span class=\"line\">$db-&gt;query(<span class=\"string\">'show databases'</span>);</span><br><span class=\"line\">$db-&gt;close();</span><br></pre></td></tr></table></figure>"},{"title":"【设计模式】观察者模式","date":"2019-05-06T16:02:15.000Z","_content":"\n## 基本介绍\n\n1、观察者模式（Observer）：当一个对象状态发生改变时，依赖它的对象全部会收到通知，并自动更新\n\n2、场景： 当一个事件发生后，要执行一连串更新操作。传统的编程方式，就是在事件的代码之后直接加入处理逻辑。当更新的逻辑增多之后，代码会变得难以维护。这种方式是耦合的，侵入式的，增加新的逻辑需要修改事件主体的代码。\n\n3、观察者模式实现了低耦合，非侵入式的通知与更新机制。\n\n<!-- more -->\n\n## 简单代码实现\n\n### （抽象）目标\n定义一个观察者集合，并提供方法来增加和删除观察者对象，还包括通知方法\n```php\nabstract class Subject\n{\n    private $observers = [];\n    function addObserver(Observer $observer)\n    {\n        $this->observers[] = $observer;\n    }\n\n    function notify()\n    {\n        foreach ($this->observers as $observer) {\n            $observer->update();\n        }\n    }\n}\n```\n\n### 具体目标\n\n```php\nclass ConcreteSubject extends Subject\n{\n    function trigger()\n    {\n        echo \"本身的动作 <br />\\n\";\n    }\n}\n```\n\n### （抽象）观察者\n\n对观察目标的改变做出反应，只申明更新数据的方法\n\n```php\ninterface Observer\n{\n    function update($event_info = null);\n}\n```\n\n### 具体观察者\n\n观察到目标变化后需要执行的具体动作。可添加到目标类的观察者集合中，或从目标类的观察者集合中删除\n\n具体动作1：\n```php\nclass Observer1 implement Observer\n{\n    function update($event_info = null)\n    {\n        echo \"逻辑1 <br />\\n\";\n    }\n}\n```\n\n具体动作2：\n```php\nclass Observer2 implement Observer\n{\n    function update($event_info = null)\n    {\n        echo \"逻辑2 <br />\\n\";\n    }\n}\n```\n\n### 调用与实现\n\n```php\n$event = new Event;\n$event->addObserver(new Observer1);\n$event->addObserver(new Observer2);\n$event->trigger();\n```\n\n## 扩展\n\n实际情况中，具体观察者类的update()方法在执行时需要使用到具体目标类中的状态或属性。\n\n所以，具体观察者和具体目标类之间有时候还需要存在关联或依赖关系。在具体观察者类中定义一个具体目标实例，通过该实例获取存储在具体目标类中的状态或属性值。\n\n## 举例\n\n> 订单流程中，当订单审核拒绝时，除了更新**主订单表**中的状态，可能还需要添加一条拒绝理由的**订单备注表**的记录，以及**状态变更日志表**的记录。\n\n此时，\n\n**订单对象**是具体目标，`更新主订单表中的状态`是具体目标需要执行的动作，\n\n**订单备注表**就是观察者1，它执行的动作是`添加一条拒绝理由表记录`，\n\n**状态变更日志表**也是观察者2，它执行的动作是`添加状态变更日志表记录`\n\n<br/>\n\n但是，\n\n观察者1和观察者2往往需要用到具体目标的订单编号和状态值，此时如何进行参数传递？\n\n目前想到的方案：\n- 通过 `$event_info` 参数\n- 在抽象目标中执行notify的时候，可以传递一个update的参数，使其能在具体观察者中使用。\n\n## 参考资料\n\n- [慕课网 - 大话设计模式](https://www.imooc.com/video/5037)\n\n- [史上最全设计模式导学目录（完整版）](https://blog.csdn.net/LoveLion/article/details/17517213)","source":"_posts/pattern-observer.md","raw":"---\ntitle: 【设计模式】观察者模式\ndate: 2019-05-7 00:02:15\ntags:\n  - 观察者模式\ncategory:\n  - 【设计模式】\n---\n\n## 基本介绍\n\n1、观察者模式（Observer）：当一个对象状态发生改变时，依赖它的对象全部会收到通知，并自动更新\n\n2、场景： 当一个事件发生后，要执行一连串更新操作。传统的编程方式，就是在事件的代码之后直接加入处理逻辑。当更新的逻辑增多之后，代码会变得难以维护。这种方式是耦合的，侵入式的，增加新的逻辑需要修改事件主体的代码。\n\n3、观察者模式实现了低耦合，非侵入式的通知与更新机制。\n\n<!-- more -->\n\n## 简单代码实现\n\n### （抽象）目标\n定义一个观察者集合，并提供方法来增加和删除观察者对象，还包括通知方法\n```php\nabstract class Subject\n{\n    private $observers = [];\n    function addObserver(Observer $observer)\n    {\n        $this->observers[] = $observer;\n    }\n\n    function notify()\n    {\n        foreach ($this->observers as $observer) {\n            $observer->update();\n        }\n    }\n}\n```\n\n### 具体目标\n\n```php\nclass ConcreteSubject extends Subject\n{\n    function trigger()\n    {\n        echo \"本身的动作 <br />\\n\";\n    }\n}\n```\n\n### （抽象）观察者\n\n对观察目标的改变做出反应，只申明更新数据的方法\n\n```php\ninterface Observer\n{\n    function update($event_info = null);\n}\n```\n\n### 具体观察者\n\n观察到目标变化后需要执行的具体动作。可添加到目标类的观察者集合中，或从目标类的观察者集合中删除\n\n具体动作1：\n```php\nclass Observer1 implement Observer\n{\n    function update($event_info = null)\n    {\n        echo \"逻辑1 <br />\\n\";\n    }\n}\n```\n\n具体动作2：\n```php\nclass Observer2 implement Observer\n{\n    function update($event_info = null)\n    {\n        echo \"逻辑2 <br />\\n\";\n    }\n}\n```\n\n### 调用与实现\n\n```php\n$event = new Event;\n$event->addObserver(new Observer1);\n$event->addObserver(new Observer2);\n$event->trigger();\n```\n\n## 扩展\n\n实际情况中，具体观察者类的update()方法在执行时需要使用到具体目标类中的状态或属性。\n\n所以，具体观察者和具体目标类之间有时候还需要存在关联或依赖关系。在具体观察者类中定义一个具体目标实例，通过该实例获取存储在具体目标类中的状态或属性值。\n\n## 举例\n\n> 订单流程中，当订单审核拒绝时，除了更新**主订单表**中的状态，可能还需要添加一条拒绝理由的**订单备注表**的记录，以及**状态变更日志表**的记录。\n\n此时，\n\n**订单对象**是具体目标，`更新主订单表中的状态`是具体目标需要执行的动作，\n\n**订单备注表**就是观察者1，它执行的动作是`添加一条拒绝理由表记录`，\n\n**状态变更日志表**也是观察者2，它执行的动作是`添加状态变更日志表记录`\n\n<br/>\n\n但是，\n\n观察者1和观察者2往往需要用到具体目标的订单编号和状态值，此时如何进行参数传递？\n\n目前想到的方案：\n- 通过 `$event_info` 参数\n- 在抽象目标中执行notify的时候，可以传递一个update的参数，使其能在具体观察者中使用。\n\n## 参考资料\n\n- [慕课网 - 大话设计模式](https://www.imooc.com/video/5037)\n\n- [史上最全设计模式导学目录（完整版）](https://blog.csdn.net/LoveLion/article/details/17517213)","slug":"pattern-observer","published":1,"updated":"2019-05-12T16:08:47.463Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c40c00222wuub4hheghe","content":"<h2 id=\"基本介绍\"><a class=\"markdownIt-Anchor\" href=\"#基本介绍\"></a> 基本介绍</h2>\n<p>1、观察者模式（Observer）：当一个对象状态发生改变时，依赖它的对象全部会收到通知，并自动更新</p>\n<p>2、场景： 当一个事件发生后，要执行一连串更新操作。传统的编程方式，就是在事件的代码之后直接加入处理逻辑。当更新的逻辑增多之后，代码会变得难以维护。这种方式是耦合的，侵入式的，增加新的逻辑需要修改事件主体的代码。</p>\n<p>3、观察者模式实现了低耦合，非侵入式的通知与更新机制。</p>\n<a id=\"more\"></a>\n<h2 id=\"简单代码实现\"><a class=\"markdownIt-Anchor\" href=\"#简单代码实现\"></a> 简单代码实现</h2>\n<h3 id=\"抽象目标\"><a class=\"markdownIt-Anchor\" href=\"#抽象目标\"></a> （抽象）目标</h3>\n<p>定义一个观察者集合，并提供方法来增加和删除观察者对象，还包括通知方法</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subject</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $observers = [];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addObserver</span><span class=\"params\">(Observer $observer)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;observers[] = $observer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">notify</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;observers <span class=\"keyword\">as</span> $observer) &#123;</span><br><span class=\"line\">            $observer-&gt;update();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"具体目标\"><a class=\"markdownIt-Anchor\" href=\"#具体目标\"></a> 具体目标</h3>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteSubject</span> <span class=\"keyword\">extends</span> <span class=\"title\">Subject</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trigger</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"本身的动作 &lt;br /&gt;\\n\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"抽象观察者\"><a class=\"markdownIt-Anchor\" href=\"#抽象观察者\"></a> （抽象）观察者</h3>\n<p>对观察目标的改变做出反应，只申明更新数据的方法</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Observer</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span><span class=\"params\">($event_info = null)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"具体观察者\"><a class=\"markdownIt-Anchor\" href=\"#具体观察者\"></a> 具体观察者</h3>\n<p>观察到目标变化后需要执行的具体动作。可添加到目标类的观察者集合中，或从目标类的观察者集合中删除</p>\n<p>具体动作1：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer1</span> <span class=\"title\">implement</span> <span class=\"title\">Observer</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span><span class=\"params\">($event_info = null)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"逻辑1 &lt;br /&gt;\\n\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>具体动作2：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer2</span> <span class=\"title\">implement</span> <span class=\"title\">Observer</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span><span class=\"params\">($event_info = null)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"逻辑2 &lt;br /&gt;\\n\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"调用与实现\"><a class=\"markdownIt-Anchor\" href=\"#调用与实现\"></a> 调用与实现</h3>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$event = <span class=\"keyword\">new</span> Event;</span><br><span class=\"line\">$event-&gt;addObserver(<span class=\"keyword\">new</span> Observer1);</span><br><span class=\"line\">$event-&gt;addObserver(<span class=\"keyword\">new</span> Observer2);</span><br><span class=\"line\">$event-&gt;trigger();</span><br></pre></td></tr></table></figure>\n<h2 id=\"扩展\"><a class=\"markdownIt-Anchor\" href=\"#扩展\"></a> 扩展</h2>\n<p>实际情况中，具体观察者类的update()方法在执行时需要使用到具体目标类中的状态或属性。</p>\n<p>所以，具体观察者和具体目标类之间有时候还需要存在关联或依赖关系。在具体观察者类中定义一个具体目标实例，通过该实例获取存储在具体目标类中的状态或属性值。</p>\n<h2 id=\"举例\"><a class=\"markdownIt-Anchor\" href=\"#举例\"></a> 举例</h2>\n<blockquote>\n<p>订单流程中，当订单审核拒绝时，除了更新<strong>主订单表</strong>中的状态，可能还需要添加一条拒绝理由的<strong>订单备注表</strong>的记录，以及<strong>状态变更日志表</strong>的记录。</p>\n</blockquote>\n<p>此时，</p>\n<p><strong>订单对象</strong>是具体目标，<code>更新主订单表中的状态</code>是具体目标需要执行的动作，</p>\n<p><strong>订单备注表</strong>就是观察者1，它执行的动作是<code>添加一条拒绝理由表记录</code>，</p>\n<p><strong>状态变更日志表</strong>也是观察者2，它执行的动作是<code>添加状态变更日志表记录</code></p>\n<br>\n<p>但是，</p>\n<p>观察者1和观察者2往往需要用到具体目标的订单编号和状态值，此时如何进行参数传递？</p>\n<p>目前想到的方案：</p>\n<ul>\n<li>通过 <code>$event_info</code> 参数</li>\n<li>在抽象目标中执行notify的时候，可以传递一个update的参数，使其能在具体观察者中使用。</li>\n</ul>\n<h2 id=\"参考资料\"><a class=\"markdownIt-Anchor\" href=\"#参考资料\"></a> 参考资料</h2>\n<ul>\n<li>\n<p><a href=\"https://www.imooc.com/video/5037\" target=\"_blank\" rel=\"noopener\">慕课网 - 大话设计模式</a></p>\n</li>\n<li>\n<p><a href=\"https://blog.csdn.net/LoveLion/article/details/17517213\" target=\"_blank\" rel=\"noopener\">史上最全设计模式导学目录（完整版）</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"基本介绍\"><a class=\"markdownIt-Anchor\" href=\"#基本介绍\"></a> 基本介绍</h2>\n<p>1、观察者模式（Observer）：当一个对象状态发生改变时，依赖它的对象全部会收到通知，并自动更新</p>\n<p>2、场景： 当一个事件发生后，要执行一连串更新操作。传统的编程方式，就是在事件的代码之后直接加入处理逻辑。当更新的逻辑增多之后，代码会变得难以维护。这种方式是耦合的，侵入式的，增加新的逻辑需要修改事件主体的代码。</p>\n<p>3、观察者模式实现了低耦合，非侵入式的通知与更新机制。</p>","more":"<h2 id=\"简单代码实现\"><a class=\"markdownIt-Anchor\" href=\"#简单代码实现\"></a> 简单代码实现</h2>\n<h3 id=\"抽象目标\"><a class=\"markdownIt-Anchor\" href=\"#抽象目标\"></a> （抽象）目标</h3>\n<p>定义一个观察者集合，并提供方法来增加和删除观察者对象，还包括通知方法</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subject</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $observers = [];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addObserver</span><span class=\"params\">(Observer $observer)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;observers[] = $observer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">notify</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;observers <span class=\"keyword\">as</span> $observer) &#123;</span><br><span class=\"line\">            $observer-&gt;update();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"具体目标\"><a class=\"markdownIt-Anchor\" href=\"#具体目标\"></a> 具体目标</h3>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteSubject</span> <span class=\"keyword\">extends</span> <span class=\"title\">Subject</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trigger</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"本身的动作 &lt;br /&gt;\\n\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"抽象观察者\"><a class=\"markdownIt-Anchor\" href=\"#抽象观察者\"></a> （抽象）观察者</h3>\n<p>对观察目标的改变做出反应，只申明更新数据的方法</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Observer</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span><span class=\"params\">($event_info = null)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"具体观察者\"><a class=\"markdownIt-Anchor\" href=\"#具体观察者\"></a> 具体观察者</h3>\n<p>观察到目标变化后需要执行的具体动作。可添加到目标类的观察者集合中，或从目标类的观察者集合中删除</p>\n<p>具体动作1：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer1</span> <span class=\"title\">implement</span> <span class=\"title\">Observer</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span><span class=\"params\">($event_info = null)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"逻辑1 &lt;br /&gt;\\n\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>具体动作2：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer2</span> <span class=\"title\">implement</span> <span class=\"title\">Observer</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span><span class=\"params\">($event_info = null)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"逻辑2 &lt;br /&gt;\\n\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"调用与实现\"><a class=\"markdownIt-Anchor\" href=\"#调用与实现\"></a> 调用与实现</h3>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$event = <span class=\"keyword\">new</span> Event;</span><br><span class=\"line\">$event-&gt;addObserver(<span class=\"keyword\">new</span> Observer1);</span><br><span class=\"line\">$event-&gt;addObserver(<span class=\"keyword\">new</span> Observer2);</span><br><span class=\"line\">$event-&gt;trigger();</span><br></pre></td></tr></table></figure>\n<h2 id=\"扩展\"><a class=\"markdownIt-Anchor\" href=\"#扩展\"></a> 扩展</h2>\n<p>实际情况中，具体观察者类的update()方法在执行时需要使用到具体目标类中的状态或属性。</p>\n<p>所以，具体观察者和具体目标类之间有时候还需要存在关联或依赖关系。在具体观察者类中定义一个具体目标实例，通过该实例获取存储在具体目标类中的状态或属性值。</p>\n<h2 id=\"举例\"><a class=\"markdownIt-Anchor\" href=\"#举例\"></a> 举例</h2>\n<blockquote>\n<p>订单流程中，当订单审核拒绝时，除了更新<strong>主订单表</strong>中的状态，可能还需要添加一条拒绝理由的<strong>订单备注表</strong>的记录，以及<strong>状态变更日志表</strong>的记录。</p>\n</blockquote>\n<p>此时，</p>\n<p><strong>订单对象</strong>是具体目标，<code>更新主订单表中的状态</code>是具体目标需要执行的动作，</p>\n<p><strong>订单备注表</strong>就是观察者1，它执行的动作是<code>添加一条拒绝理由表记录</code>，</p>\n<p><strong>状态变更日志表</strong>也是观察者2，它执行的动作是<code>添加状态变更日志表记录</code></p>\n<br>\n<p>但是，</p>\n<p>观察者1和观察者2往往需要用到具体目标的订单编号和状态值，此时如何进行参数传递？</p>\n<p>目前想到的方案：</p>\n<ul>\n<li>通过 <code>$event_info</code> 参数</li>\n<li>在抽象目标中执行notify的时候，可以传递一个update的参数，使其能在具体观察者中使用。</li>\n</ul>\n<h2 id=\"参考资料\"><a class=\"markdownIt-Anchor\" href=\"#参考资料\"></a> 参考资料</h2>\n<ul>\n<li>\n<p><a href=\"https://www.imooc.com/video/5037\" target=\"_blank\" rel=\"noopener\">慕课网 - 大话设计模式</a></p>\n</li>\n<li>\n<p><a href=\"https://blog.csdn.net/LoveLion/article/details/17517213\" target=\"_blank\" rel=\"noopener\">史上最全设计模式导学目录（完整版）</a></p>\n</li>\n</ul>"},{"title":"【转】PHP书单","date":"2018-05-08T08:42:13.000Z","_content":"\nPHP 学习有一段时间了，看过一些书，也还有一些有待阅读的书，希望今后能在工作中不断积累理论和实践知识，并建立起自己的知识体系。\n\n<!-- more   -->\n\n## 【初阶】（基础知识及入门）\n\n1.  《PHP 与 MySQL 程序设计（第 4 版）》 http://item.jd.com/10701892.html\n2.  《深入浅出 MySQL 数据库开发 优化与管理维护 第 2 版》 http://item.jd.com/11381295.html\n3.  《实战 Nginx：取代 Apache 的高性能 Web 服务器》 http://dwz.cn/2K1ryn\n4.  《Redis 实战》 http://item.jd.com/11791607.html\n5.  《MongoDB 权威指南 第 2 版》 http://item.jd.com/11384782.html\n6.  《Linux 系统命令及 Shell 脚本实践指南》 http://item.jd.com/11354663.html\n\n## 【中阶】（基本系统知识相关，可阅读类似书籍）\n\n1.  《图解 HTTP》 http://item.jd.com/11449491.html\n2.  《图解 TCP/IP 第 5 版》 http://item.jd.com/11253710.html\n3.  《大话设计模式》 http://item.jd.com/10079261.html\n4.  《大话数据结构》 http://item.jd.com/10663703.html\n5.  《编译原理（第 2 版）》 http://item.jd.com/10058776.html\n6.  《Linux C 编程一站式学习》 http://dwz.cn/2K1C3n\n7.  《PHP 应用程序安全编程》 http://dwz.cn/2K317p\n8.  《高性能 PHP 应用开发》 http://dwz.cn/2K1kcy\n9.  《PHP 核心技术与最佳实践》 http://item.jd.com/11123177.html\n10. 《高性能 MySQL（第 3 版）》 http://item.jd.com/11220393.html\n11. 《深入理解 MariaDB 与 MySQL》 http://item.jd.com/11835700.html\n12. 《构建高可用 Linux 服务器（第 3 版）》 http://item.jd.com/11557939.html\n\n## 【中高阶】（深入理解系统）\n\n1.  《深入理解计算机系统（原书第 2 版）》 http://item.jd.com/10360906.html\n2.  《现代操作系统（原书第 3 版）》 http://item.jd.com/10058893.html\n3.  《数据库系统概念（原书第 6 版）》 http://item.jd.com/10954261.html\n4.  《数据库系统实现（第 2 版）》 http://item.jd.com/10060181.html\n5.  《UNIX 环境高级编程（第 3 版）》 http://item.jd.com/11469694.html\n6.  《UNIX 网络编程 卷 1 套接字联网 API（第 3 版）》 http://item.jd.com/11728741.html\n7.  《Linux 高性能服务器编程》 http://item.jd.com/11252777.html\n\n## 【高阶】（深入理解服务原理）\n\n1.  《深入理解 PHP 内核》 http://www.php-internals.com/book/\n2.  《深入理解 MySQL》 http://item.jd.com/10063042.html\n3.  《MySQL 技术内幕：InnoDB 存储引擎（第 2 版）》 http://item.jd.com/11252326.html\n4.  《深入剖析 Nginx》 http://item.jd.com/11226514.html\n5.  《深入理解 Nginx：模块开发与架构解析》 http://item.jd.com/11217076.html\n6.  《Redis 设计与实现》 http://item.jd.com/11486101.html\n\n## 【架构及升级】（Web 架构、分布式、云计算、机器学习等方向）\n\n1.  《大规模 Web 服务开发技术》 http://dwz.cn/2K2o1d\n2.  《大型分布式网站架构设计与实践》 http://item.jd.com/11529266.html\n3.  《大型网站技术架构 核心原理与案例分析》 http://item.jd.com/11322972.html\n4.  《大规模分布式系统架构与设计实战》 http://item.jd.com/11417660.html\n5.  《大规模分布式存储系统：原理解析与架构实战》 http://item.jd.com/11310547.html\n6.  《分布式系统：概念与设计（原书第 5 版）》 http://item.jd.com/11194499.html\n7.  《Hadoop 权威指南（第 3 版 修订版）》 http://item.jd.com/11566298.html\n8.  《Cassandra 权威指南》 http://item.jd.com/10794341.html\n\n9.  《云计算架构技术与实践》 http://item.jd.com/11537731.html\n10. 《OpenStack 开源云王者归来》 http://item.jd.com/11521443.html\n\n11. 《数据挖掘 概念与技术（原书第 3 版）》 http://item.jd.com/11056660.html\n12. 《机器学习》 http://item.jd.com/10131321.html\n13. 《图解机器学习》 http://item.jd.com/11676112.html\n14. 《机器学习实战》 http://item.jd.com/11242112.html\n\n## 【番外篇】（可以参考延展学习）\n\n1.  《深入 PHP：面向对象、模式与实践（第 3 版）》 http://item.jd.com/10794350.html\n2.  《Linux 网络编程（第 2 版）》 http://item.jd.com/11397772.html\n3.  《Linux 多线程服务端编程 使用 muduo C++网络库》 http://item.jd.com/11163782.html\n4.  《Linux 运维之道》 http://item.jd.com/11375254.html\n5.  《Linux 性能优化大师》 http://item.jd.com/11734651.html\n6.  《PostgreSQL 修炼之道：从小工到专家》 http://item.jd.com/11684063.html\n7.  《图解网络硬件》 http://item.jd.com/11506709.html\n\n8.  《网络安全基础：网络攻防、协议与安全》 http://item.jd.com/10550797.html\n9.  《密码学原理与实践（第 3 版）》 http://item.jd.com/10067358.html\n10. 《黑客大曝光：网络安全机密与解决方案（第 7 版）》 http://item.jd.com/11307435.html\n11. 《黑客攻防技术宝典 Web 实战篇 第 2 版》 http://item.jd.com/11020022.html\n\n12. 《精通正则表达式（第 3 版）》 http://item.jd.com/11070361.html\n13. 《Go 语言编程》 http://item.jd.com/11067810.html\n14. 《Python 基础教程（第 2 版 修订版）》 http://item.jd.com/11461683.html\n15. 《快学 Scala》 http://item.jd.com/11113845.html\n16. 《Erlang/OTP 并发编程实战》 http://item.jd.com/11037265.html\n17. 《函数式编程思维》 http://item.jd.com/11763847.html\n18. 《Android 从入门到精通》 http://item.jd.com/11078112.html\n19. 《iOS 开发指南》 http://item.jd.com/11681585.html\n\n20. 《搜索引擎：信息检索实践》 http://item.jd.com/10059723.html\n21. 《统计自然语言处理（第 2 版）》 http://item.jd.com/11314362.html\n22. 《这就是搜索引擎：核心技术详解》 http://item.jd.com/10893803.html\n23. 《Elasticsearch 服务器开发（第 2 版）》 http://item.jd.com/11615450.html\n24. 《实战 Elasticsearch、Logstash、Kibana》 http://item.jd.com/11706768.html\n\n25. 《推荐系统实践》 http://item.jd.com/11007625.html\n26. 《机器学习实践指南：案例应用解析》 http://item.jd.com/11447036.html\n27. 《Hadoop 实战（第 2 版）》 http://item.jd.com/11116710.html\n28. 《Hadoop 大数据分析与挖掘实战》 http://item.jd.com/11837003.html\n29. 《Spark 大数据处理：技术、应用与性能优化》 http://item.jd.com/11577088.html\n30. 《Spark 机器学习》 http://item.jd.com/11763016.html\n\n深入理解计算机系统、现代操作系统、C 程序设计语言、C 语言数据结构和算法、Unix 环境高级编程、TCP/IP 网络通信详解。\n另外我建议大家学习一下面向对象方面知识，PHP 这方面的书不太多，建议看 Java 面向对象编程、Java 编程思想、J2EE 这些书。PHP 语言基础方面，建议认真地把**PHP5 权威编程**这本书好好读完。另外不光要读，还要照着书中的讲解动手去编程实践。\n\n来源： [韩天峰--关于 PHP 程序员技术职业生涯规划](http://rango.swoole.com/archives/570)\n","source":"_posts/php-booklist.md","raw":"---\ntitle: 【转】PHP书单\ndate: 2018-05-08 16:42:13\ntags:\n  - book\ncategory:\n  - 【书单】\n---\n\nPHP 学习有一段时间了，看过一些书，也还有一些有待阅读的书，希望今后能在工作中不断积累理论和实践知识，并建立起自己的知识体系。\n\n<!-- more   -->\n\n## 【初阶】（基础知识及入门）\n\n1.  《PHP 与 MySQL 程序设计（第 4 版）》 http://item.jd.com/10701892.html\n2.  《深入浅出 MySQL 数据库开发 优化与管理维护 第 2 版》 http://item.jd.com/11381295.html\n3.  《实战 Nginx：取代 Apache 的高性能 Web 服务器》 http://dwz.cn/2K1ryn\n4.  《Redis 实战》 http://item.jd.com/11791607.html\n5.  《MongoDB 权威指南 第 2 版》 http://item.jd.com/11384782.html\n6.  《Linux 系统命令及 Shell 脚本实践指南》 http://item.jd.com/11354663.html\n\n## 【中阶】（基本系统知识相关，可阅读类似书籍）\n\n1.  《图解 HTTP》 http://item.jd.com/11449491.html\n2.  《图解 TCP/IP 第 5 版》 http://item.jd.com/11253710.html\n3.  《大话设计模式》 http://item.jd.com/10079261.html\n4.  《大话数据结构》 http://item.jd.com/10663703.html\n5.  《编译原理（第 2 版）》 http://item.jd.com/10058776.html\n6.  《Linux C 编程一站式学习》 http://dwz.cn/2K1C3n\n7.  《PHP 应用程序安全编程》 http://dwz.cn/2K317p\n8.  《高性能 PHP 应用开发》 http://dwz.cn/2K1kcy\n9.  《PHP 核心技术与最佳实践》 http://item.jd.com/11123177.html\n10. 《高性能 MySQL（第 3 版）》 http://item.jd.com/11220393.html\n11. 《深入理解 MariaDB 与 MySQL》 http://item.jd.com/11835700.html\n12. 《构建高可用 Linux 服务器（第 3 版）》 http://item.jd.com/11557939.html\n\n## 【中高阶】（深入理解系统）\n\n1.  《深入理解计算机系统（原书第 2 版）》 http://item.jd.com/10360906.html\n2.  《现代操作系统（原书第 3 版）》 http://item.jd.com/10058893.html\n3.  《数据库系统概念（原书第 6 版）》 http://item.jd.com/10954261.html\n4.  《数据库系统实现（第 2 版）》 http://item.jd.com/10060181.html\n5.  《UNIX 环境高级编程（第 3 版）》 http://item.jd.com/11469694.html\n6.  《UNIX 网络编程 卷 1 套接字联网 API（第 3 版）》 http://item.jd.com/11728741.html\n7.  《Linux 高性能服务器编程》 http://item.jd.com/11252777.html\n\n## 【高阶】（深入理解服务原理）\n\n1.  《深入理解 PHP 内核》 http://www.php-internals.com/book/\n2.  《深入理解 MySQL》 http://item.jd.com/10063042.html\n3.  《MySQL 技术内幕：InnoDB 存储引擎（第 2 版）》 http://item.jd.com/11252326.html\n4.  《深入剖析 Nginx》 http://item.jd.com/11226514.html\n5.  《深入理解 Nginx：模块开发与架构解析》 http://item.jd.com/11217076.html\n6.  《Redis 设计与实现》 http://item.jd.com/11486101.html\n\n## 【架构及升级】（Web 架构、分布式、云计算、机器学习等方向）\n\n1.  《大规模 Web 服务开发技术》 http://dwz.cn/2K2o1d\n2.  《大型分布式网站架构设计与实践》 http://item.jd.com/11529266.html\n3.  《大型网站技术架构 核心原理与案例分析》 http://item.jd.com/11322972.html\n4.  《大规模分布式系统架构与设计实战》 http://item.jd.com/11417660.html\n5.  《大规模分布式存储系统：原理解析与架构实战》 http://item.jd.com/11310547.html\n6.  《分布式系统：概念与设计（原书第 5 版）》 http://item.jd.com/11194499.html\n7.  《Hadoop 权威指南（第 3 版 修订版）》 http://item.jd.com/11566298.html\n8.  《Cassandra 权威指南》 http://item.jd.com/10794341.html\n\n9.  《云计算架构技术与实践》 http://item.jd.com/11537731.html\n10. 《OpenStack 开源云王者归来》 http://item.jd.com/11521443.html\n\n11. 《数据挖掘 概念与技术（原书第 3 版）》 http://item.jd.com/11056660.html\n12. 《机器学习》 http://item.jd.com/10131321.html\n13. 《图解机器学习》 http://item.jd.com/11676112.html\n14. 《机器学习实战》 http://item.jd.com/11242112.html\n\n## 【番外篇】（可以参考延展学习）\n\n1.  《深入 PHP：面向对象、模式与实践（第 3 版）》 http://item.jd.com/10794350.html\n2.  《Linux 网络编程（第 2 版）》 http://item.jd.com/11397772.html\n3.  《Linux 多线程服务端编程 使用 muduo C++网络库》 http://item.jd.com/11163782.html\n4.  《Linux 运维之道》 http://item.jd.com/11375254.html\n5.  《Linux 性能优化大师》 http://item.jd.com/11734651.html\n6.  《PostgreSQL 修炼之道：从小工到专家》 http://item.jd.com/11684063.html\n7.  《图解网络硬件》 http://item.jd.com/11506709.html\n\n8.  《网络安全基础：网络攻防、协议与安全》 http://item.jd.com/10550797.html\n9.  《密码学原理与实践（第 3 版）》 http://item.jd.com/10067358.html\n10. 《黑客大曝光：网络安全机密与解决方案（第 7 版）》 http://item.jd.com/11307435.html\n11. 《黑客攻防技术宝典 Web 实战篇 第 2 版》 http://item.jd.com/11020022.html\n\n12. 《精通正则表达式（第 3 版）》 http://item.jd.com/11070361.html\n13. 《Go 语言编程》 http://item.jd.com/11067810.html\n14. 《Python 基础教程（第 2 版 修订版）》 http://item.jd.com/11461683.html\n15. 《快学 Scala》 http://item.jd.com/11113845.html\n16. 《Erlang/OTP 并发编程实战》 http://item.jd.com/11037265.html\n17. 《函数式编程思维》 http://item.jd.com/11763847.html\n18. 《Android 从入门到精通》 http://item.jd.com/11078112.html\n19. 《iOS 开发指南》 http://item.jd.com/11681585.html\n\n20. 《搜索引擎：信息检索实践》 http://item.jd.com/10059723.html\n21. 《统计自然语言处理（第 2 版）》 http://item.jd.com/11314362.html\n22. 《这就是搜索引擎：核心技术详解》 http://item.jd.com/10893803.html\n23. 《Elasticsearch 服务器开发（第 2 版）》 http://item.jd.com/11615450.html\n24. 《实战 Elasticsearch、Logstash、Kibana》 http://item.jd.com/11706768.html\n\n25. 《推荐系统实践》 http://item.jd.com/11007625.html\n26. 《机器学习实践指南：案例应用解析》 http://item.jd.com/11447036.html\n27. 《Hadoop 实战（第 2 版）》 http://item.jd.com/11116710.html\n28. 《Hadoop 大数据分析与挖掘实战》 http://item.jd.com/11837003.html\n29. 《Spark 大数据处理：技术、应用与性能优化》 http://item.jd.com/11577088.html\n30. 《Spark 机器学习》 http://item.jd.com/11763016.html\n\n深入理解计算机系统、现代操作系统、C 程序设计语言、C 语言数据结构和算法、Unix 环境高级编程、TCP/IP 网络通信详解。\n另外我建议大家学习一下面向对象方面知识，PHP 这方面的书不太多，建议看 Java 面向对象编程、Java 编程思想、J2EE 这些书。PHP 语言基础方面，建议认真地把**PHP5 权威编程**这本书好好读完。另外不光要读，还要照着书中的讲解动手去编程实践。\n\n来源： [韩天峰--关于 PHP 程序员技术职业生涯规划](http://rango.swoole.com/archives/570)\n","slug":"php-booklist","published":1,"updated":"2019-05-12T15:55:41.403Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c40e00262wuurwgvqy1r","content":"<p>PHP 学习有一段时间了，看过一些书，也还有一些有待阅读的书，希望今后能在工作中不断积累理论和实践知识，并建立起自己的知识体系。</p>\n<a id=\"more\"></a>\n<h2 id=\"初阶基础知识及入门\"><a class=\"markdownIt-Anchor\" href=\"#初阶基础知识及入门\"></a> 【初阶】（基础知识及入门）</h2>\n<ol>\n<li>《PHP 与 MySQL 程序设计（第 4 版）》 <a href=\"http://item.jd.com/10701892.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/10701892.html</a></li>\n<li>《深入浅出 MySQL 数据库开发 优化与管理维护 第 2 版》 <a href=\"http://item.jd.com/11381295.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11381295.html</a></li>\n<li>《实战 Nginx：取代 Apache 的高性能 Web 服务器》 <a href=\"http://dwz.cn/2K1ryn\" target=\"_blank\" rel=\"noopener\">http://dwz.cn/2K1ryn</a></li>\n<li>《Redis 实战》 <a href=\"http://item.jd.com/11791607.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11791607.html</a></li>\n<li>《MongoDB 权威指南 第 2 版》 <a href=\"http://item.jd.com/11384782.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11384782.html</a></li>\n<li>《Linux 系统命令及 Shell 脚本实践指南》 <a href=\"http://item.jd.com/11354663.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11354663.html</a></li>\n</ol>\n<h2 id=\"中阶基本系统知识相关可阅读类似书籍\"><a class=\"markdownIt-Anchor\" href=\"#中阶基本系统知识相关可阅读类似书籍\"></a> 【中阶】（基本系统知识相关，可阅读类似书籍）</h2>\n<ol>\n<li>《图解 HTTP》 <a href=\"http://item.jd.com/11449491.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11449491.html</a></li>\n<li>《图解 TCP/IP 第 5 版》 <a href=\"http://item.jd.com/11253710.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11253710.html</a></li>\n<li>《大话设计模式》 <a href=\"http://item.jd.com/10079261.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/10079261.html</a></li>\n<li>《大话数据结构》 <a href=\"http://item.jd.com/10663703.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/10663703.html</a></li>\n<li>《编译原理（第 2 版）》 <a href=\"http://item.jd.com/10058776.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/10058776.html</a></li>\n<li>《Linux C 编程一站式学习》 <a href=\"http://dwz.cn/2K1C3n\" target=\"_blank\" rel=\"noopener\">http://dwz.cn/2K1C3n</a></li>\n<li>《PHP 应用程序安全编程》 <a href=\"http://dwz.cn/2K317p\" target=\"_blank\" rel=\"noopener\">http://dwz.cn/2K317p</a></li>\n<li>《高性能 PHP 应用开发》 <a href=\"http://dwz.cn/2K1kcy\" target=\"_blank\" rel=\"noopener\">http://dwz.cn/2K1kcy</a></li>\n<li>《PHP 核心技术与最佳实践》 <a href=\"http://item.jd.com/11123177.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11123177.html</a></li>\n<li>《高性能 MySQL（第 3 版）》 <a href=\"http://item.jd.com/11220393.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11220393.html</a></li>\n<li>《深入理解 MariaDB 与 MySQL》 <a href=\"http://item.jd.com/11835700.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11835700.html</a></li>\n<li>《构建高可用 Linux 服务器（第 3 版）》 <a href=\"http://item.jd.com/11557939.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11557939.html</a></li>\n</ol>\n<h2 id=\"中高阶深入理解系统\"><a class=\"markdownIt-Anchor\" href=\"#中高阶深入理解系统\"></a> 【中高阶】（深入理解系统）</h2>\n<ol>\n<li>《深入理解计算机系统（原书第 2 版）》 <a href=\"http://item.jd.com/10360906.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/10360906.html</a></li>\n<li>《现代操作系统（原书第 3 版）》 <a href=\"http://item.jd.com/10058893.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/10058893.html</a></li>\n<li>《数据库系统概念（原书第 6 版）》 <a href=\"http://item.jd.com/10954261.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/10954261.html</a></li>\n<li>《数据库系统实现（第 2 版）》 <a href=\"http://item.jd.com/10060181.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/10060181.html</a></li>\n<li>《UNIX 环境高级编程（第 3 版）》 <a href=\"http://item.jd.com/11469694.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11469694.html</a></li>\n<li>《UNIX 网络编程 卷 1 套接字联网 API（第 3 版）》 <a href=\"http://item.jd.com/11728741.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11728741.html</a></li>\n<li>《Linux 高性能服务器编程》 <a href=\"http://item.jd.com/11252777.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11252777.html</a></li>\n</ol>\n<h2 id=\"高阶深入理解服务原理\"><a class=\"markdownIt-Anchor\" href=\"#高阶深入理解服务原理\"></a> 【高阶】（深入理解服务原理）</h2>\n<ol>\n<li>《深入理解 PHP 内核》 <a href=\"http://www.php-internals.com/book/\" target=\"_blank\" rel=\"noopener\">http://www.php-internals.com/book/</a></li>\n<li>《深入理解 MySQL》 <a href=\"http://item.jd.com/10063042.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/10063042.html</a></li>\n<li>《MySQL 技术内幕：InnoDB 存储引擎（第 2 版）》 <a href=\"http://item.jd.com/11252326.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11252326.html</a></li>\n<li>《深入剖析 Nginx》 <a href=\"http://item.jd.com/11226514.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11226514.html</a></li>\n<li>《深入理解 Nginx：模块开发与架构解析》 <a href=\"http://item.jd.com/11217076.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11217076.html</a></li>\n<li>《Redis 设计与实现》 <a href=\"http://item.jd.com/11486101.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11486101.html</a></li>\n</ol>\n<h2 id=\"架构及升级web-架构-分布式-云计算-机器学习等方向\"><a class=\"markdownIt-Anchor\" href=\"#架构及升级web-架构-分布式-云计算-机器学习等方向\"></a> 【架构及升级】（Web 架构、分布式、云计算、机器学习等方向）</h2>\n<ol>\n<li>\n<p>《大规模 Web 服务开发技术》 <a href=\"http://dwz.cn/2K2o1d\" target=\"_blank\" rel=\"noopener\">http://dwz.cn/2K2o1d</a></p>\n</li>\n<li>\n<p>《大型分布式网站架构设计与实践》 <a href=\"http://item.jd.com/11529266.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11529266.html</a></p>\n</li>\n<li>\n<p>《大型网站技术架构 核心原理与案例分析》 <a href=\"http://item.jd.com/11322972.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11322972.html</a></p>\n</li>\n<li>\n<p>《大规模分布式系统架构与设计实战》 <a href=\"http://item.jd.com/11417660.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11417660.html</a></p>\n</li>\n<li>\n<p>《大规模分布式存储系统：原理解析与架构实战》 <a href=\"http://item.jd.com/11310547.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11310547.html</a></p>\n</li>\n<li>\n<p>《分布式系统：概念与设计（原书第 5 版）》 <a href=\"http://item.jd.com/11194499.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11194499.html</a></p>\n</li>\n<li>\n<p>《Hadoop 权威指南（第 3 版 修订版）》 <a href=\"http://item.jd.com/11566298.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11566298.html</a></p>\n</li>\n<li>\n<p>《Cassandra 权威指南》 <a href=\"http://item.jd.com/10794341.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/10794341.html</a></p>\n</li>\n<li>\n<p>《云计算架构技术与实践》 <a href=\"http://item.jd.com/11537731.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11537731.html</a></p>\n</li>\n<li>\n<p>《OpenStack 开源云王者归来》 <a href=\"http://item.jd.com/11521443.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11521443.html</a></p>\n</li>\n<li>\n<p>《数据挖掘 概念与技术（原书第 3 版）》 <a href=\"http://item.jd.com/11056660.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11056660.html</a></p>\n</li>\n<li>\n<p>《机器学习》 <a href=\"http://item.jd.com/10131321.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/10131321.html</a></p>\n</li>\n<li>\n<p>《图解机器学习》 <a href=\"http://item.jd.com/11676112.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11676112.html</a></p>\n</li>\n<li>\n<p>《机器学习实战》 <a href=\"http://item.jd.com/11242112.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11242112.html</a></p>\n</li>\n</ol>\n<h2 id=\"番外篇可以参考延展学习\"><a class=\"markdownIt-Anchor\" href=\"#番外篇可以参考延展学习\"></a> 【番外篇】（可以参考延展学习）</h2>\n<ol>\n<li>\n<p>《深入 PHP：面向对象、模式与实践（第 3 版）》 <a href=\"http://item.jd.com/10794350.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/10794350.html</a></p>\n</li>\n<li>\n<p>《Linux 网络编程（第 2 版）》 <a href=\"http://item.jd.com/11397772.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11397772.html</a></p>\n</li>\n<li>\n<p>《Linux 多线程服务端编程 使用 muduo C++网络库》 <a href=\"http://item.jd.com/11163782.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11163782.html</a></p>\n</li>\n<li>\n<p>《Linux 运维之道》 <a href=\"http://item.jd.com/11375254.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11375254.html</a></p>\n</li>\n<li>\n<p>《Linux 性能优化大师》 <a href=\"http://item.jd.com/11734651.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11734651.html</a></p>\n</li>\n<li>\n<p>《PostgreSQL 修炼之道：从小工到专家》 <a href=\"http://item.jd.com/11684063.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11684063.html</a></p>\n</li>\n<li>\n<p>《图解网络硬件》 <a href=\"http://item.jd.com/11506709.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11506709.html</a></p>\n</li>\n<li>\n<p>《网络安全基础：网络攻防、协议与安全》 <a href=\"http://item.jd.com/10550797.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/10550797.html</a></p>\n</li>\n<li>\n<p>《密码学原理与实践（第 3 版）》 <a href=\"http://item.jd.com/10067358.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/10067358.html</a></p>\n</li>\n<li>\n<p>《黑客大曝光：网络安全机密与解决方案（第 7 版）》 <a href=\"http://item.jd.com/11307435.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11307435.html</a></p>\n</li>\n<li>\n<p>《黑客攻防技术宝典 Web 实战篇 第 2 版》 <a href=\"http://item.jd.com/11020022.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11020022.html</a></p>\n</li>\n<li>\n<p>《精通正则表达式（第 3 版）》 <a href=\"http://item.jd.com/11070361.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11070361.html</a></p>\n</li>\n<li>\n<p>《Go 语言编程》 <a href=\"http://item.jd.com/11067810.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11067810.html</a></p>\n</li>\n<li>\n<p>《Python 基础教程（第 2 版 修订版）》 <a href=\"http://item.jd.com/11461683.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11461683.html</a></p>\n</li>\n<li>\n<p>《快学 Scala》 <a href=\"http://item.jd.com/11113845.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11113845.html</a></p>\n</li>\n<li>\n<p>《Erlang/OTP 并发编程实战》 <a href=\"http://item.jd.com/11037265.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11037265.html</a></p>\n</li>\n<li>\n<p>《函数式编程思维》 <a href=\"http://item.jd.com/11763847.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11763847.html</a></p>\n</li>\n<li>\n<p>《Android 从入门到精通》 <a href=\"http://item.jd.com/11078112.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11078112.html</a></p>\n</li>\n<li>\n<p>《iOS 开发指南》 <a href=\"http://item.jd.com/11681585.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11681585.html</a></p>\n</li>\n<li>\n<p>《搜索引擎：信息检索实践》 <a href=\"http://item.jd.com/10059723.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/10059723.html</a></p>\n</li>\n<li>\n<p>《统计自然语言处理（第 2 版）》 <a href=\"http://item.jd.com/11314362.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11314362.html</a></p>\n</li>\n<li>\n<p>《这就是搜索引擎：核心技术详解》 <a href=\"http://item.jd.com/10893803.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/10893803.html</a></p>\n</li>\n<li>\n<p>《Elasticsearch 服务器开发（第 2 版）》 <a href=\"http://item.jd.com/11615450.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11615450.html</a></p>\n</li>\n<li>\n<p>《实战 Elasticsearch、Logstash、Kibana》 <a href=\"http://item.jd.com/11706768.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11706768.html</a></p>\n</li>\n<li>\n<p>《推荐系统实践》 <a href=\"http://item.jd.com/11007625.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11007625.html</a></p>\n</li>\n<li>\n<p>《机器学习实践指南：案例应用解析》 <a href=\"http://item.jd.com/11447036.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11447036.html</a></p>\n</li>\n<li>\n<p>《Hadoop 实战（第 2 版）》 <a href=\"http://item.jd.com/11116710.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11116710.html</a></p>\n</li>\n<li>\n<p>《Hadoop 大数据分析与挖掘实战》 <a href=\"http://item.jd.com/11837003.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11837003.html</a></p>\n</li>\n<li>\n<p>《Spark 大数据处理：技术、应用与性能优化》 <a href=\"http://item.jd.com/11577088.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11577088.html</a></p>\n</li>\n<li>\n<p>《Spark 机器学习》 <a href=\"http://item.jd.com/11763016.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11763016.html</a></p>\n</li>\n</ol>\n<p>深入理解计算机系统、现代操作系统、C 程序设计语言、C 语言数据结构和算法、Unix 环境高级编程、TCP/IP 网络通信详解。<br>\n另外我建议大家学习一下面向对象方面知识，PHP 这方面的书不太多，建议看 Java 面向对象编程、Java 编程思想、J2EE 这些书。PHP 语言基础方面，建议认真地把<strong>PHP5 权威编程</strong>这本书好好读完。另外不光要读，还要照着书中的讲解动手去编程实践。</p>\n<p>来源： <a href=\"http://rango.swoole.com/archives/570\" target=\"_blank\" rel=\"noopener\">韩天峰–关于 PHP 程序员技术职业生涯规划</a></p>\n","site":{"data":{}},"excerpt":"<p>PHP 学习有一段时间了，看过一些书，也还有一些有待阅读的书，希望今后能在工作中不断积累理论和实践知识，并建立起自己的知识体系。</p>","more":"<h2 id=\"初阶基础知识及入门\"><a class=\"markdownIt-Anchor\" href=\"#初阶基础知识及入门\"></a> 【初阶】（基础知识及入门）</h2>\n<ol>\n<li>《PHP 与 MySQL 程序设计（第 4 版）》 <a href=\"http://item.jd.com/10701892.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/10701892.html</a></li>\n<li>《深入浅出 MySQL 数据库开发 优化与管理维护 第 2 版》 <a href=\"http://item.jd.com/11381295.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11381295.html</a></li>\n<li>《实战 Nginx：取代 Apache 的高性能 Web 服务器》 <a href=\"http://dwz.cn/2K1ryn\" target=\"_blank\" rel=\"noopener\">http://dwz.cn/2K1ryn</a></li>\n<li>《Redis 实战》 <a href=\"http://item.jd.com/11791607.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11791607.html</a></li>\n<li>《MongoDB 权威指南 第 2 版》 <a href=\"http://item.jd.com/11384782.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11384782.html</a></li>\n<li>《Linux 系统命令及 Shell 脚本实践指南》 <a href=\"http://item.jd.com/11354663.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11354663.html</a></li>\n</ol>\n<h2 id=\"中阶基本系统知识相关可阅读类似书籍\"><a class=\"markdownIt-Anchor\" href=\"#中阶基本系统知识相关可阅读类似书籍\"></a> 【中阶】（基本系统知识相关，可阅读类似书籍）</h2>\n<ol>\n<li>《图解 HTTP》 <a href=\"http://item.jd.com/11449491.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11449491.html</a></li>\n<li>《图解 TCP/IP 第 5 版》 <a href=\"http://item.jd.com/11253710.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11253710.html</a></li>\n<li>《大话设计模式》 <a href=\"http://item.jd.com/10079261.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/10079261.html</a></li>\n<li>《大话数据结构》 <a href=\"http://item.jd.com/10663703.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/10663703.html</a></li>\n<li>《编译原理（第 2 版）》 <a href=\"http://item.jd.com/10058776.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/10058776.html</a></li>\n<li>《Linux C 编程一站式学习》 <a href=\"http://dwz.cn/2K1C3n\" target=\"_blank\" rel=\"noopener\">http://dwz.cn/2K1C3n</a></li>\n<li>《PHP 应用程序安全编程》 <a href=\"http://dwz.cn/2K317p\" target=\"_blank\" rel=\"noopener\">http://dwz.cn/2K317p</a></li>\n<li>《高性能 PHP 应用开发》 <a href=\"http://dwz.cn/2K1kcy\" target=\"_blank\" rel=\"noopener\">http://dwz.cn/2K1kcy</a></li>\n<li>《PHP 核心技术与最佳实践》 <a href=\"http://item.jd.com/11123177.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11123177.html</a></li>\n<li>《高性能 MySQL（第 3 版）》 <a href=\"http://item.jd.com/11220393.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11220393.html</a></li>\n<li>《深入理解 MariaDB 与 MySQL》 <a href=\"http://item.jd.com/11835700.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11835700.html</a></li>\n<li>《构建高可用 Linux 服务器（第 3 版）》 <a href=\"http://item.jd.com/11557939.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11557939.html</a></li>\n</ol>\n<h2 id=\"中高阶深入理解系统\"><a class=\"markdownIt-Anchor\" href=\"#中高阶深入理解系统\"></a> 【中高阶】（深入理解系统）</h2>\n<ol>\n<li>《深入理解计算机系统（原书第 2 版）》 <a href=\"http://item.jd.com/10360906.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/10360906.html</a></li>\n<li>《现代操作系统（原书第 3 版）》 <a href=\"http://item.jd.com/10058893.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/10058893.html</a></li>\n<li>《数据库系统概念（原书第 6 版）》 <a href=\"http://item.jd.com/10954261.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/10954261.html</a></li>\n<li>《数据库系统实现（第 2 版）》 <a href=\"http://item.jd.com/10060181.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/10060181.html</a></li>\n<li>《UNIX 环境高级编程（第 3 版）》 <a href=\"http://item.jd.com/11469694.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11469694.html</a></li>\n<li>《UNIX 网络编程 卷 1 套接字联网 API（第 3 版）》 <a href=\"http://item.jd.com/11728741.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11728741.html</a></li>\n<li>《Linux 高性能服务器编程》 <a href=\"http://item.jd.com/11252777.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11252777.html</a></li>\n</ol>\n<h2 id=\"高阶深入理解服务原理\"><a class=\"markdownIt-Anchor\" href=\"#高阶深入理解服务原理\"></a> 【高阶】（深入理解服务原理）</h2>\n<ol>\n<li>《深入理解 PHP 内核》 <a href=\"http://www.php-internals.com/book/\" target=\"_blank\" rel=\"noopener\">http://www.php-internals.com/book/</a></li>\n<li>《深入理解 MySQL》 <a href=\"http://item.jd.com/10063042.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/10063042.html</a></li>\n<li>《MySQL 技术内幕：InnoDB 存储引擎（第 2 版）》 <a href=\"http://item.jd.com/11252326.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11252326.html</a></li>\n<li>《深入剖析 Nginx》 <a href=\"http://item.jd.com/11226514.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11226514.html</a></li>\n<li>《深入理解 Nginx：模块开发与架构解析》 <a href=\"http://item.jd.com/11217076.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11217076.html</a></li>\n<li>《Redis 设计与实现》 <a href=\"http://item.jd.com/11486101.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11486101.html</a></li>\n</ol>\n<h2 id=\"架构及升级web-架构-分布式-云计算-机器学习等方向\"><a class=\"markdownIt-Anchor\" href=\"#架构及升级web-架构-分布式-云计算-机器学习等方向\"></a> 【架构及升级】（Web 架构、分布式、云计算、机器学习等方向）</h2>\n<ol>\n<li>\n<p>《大规模 Web 服务开发技术》 <a href=\"http://dwz.cn/2K2o1d\" target=\"_blank\" rel=\"noopener\">http://dwz.cn/2K2o1d</a></p>\n</li>\n<li>\n<p>《大型分布式网站架构设计与实践》 <a href=\"http://item.jd.com/11529266.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11529266.html</a></p>\n</li>\n<li>\n<p>《大型网站技术架构 核心原理与案例分析》 <a href=\"http://item.jd.com/11322972.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11322972.html</a></p>\n</li>\n<li>\n<p>《大规模分布式系统架构与设计实战》 <a href=\"http://item.jd.com/11417660.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11417660.html</a></p>\n</li>\n<li>\n<p>《大规模分布式存储系统：原理解析与架构实战》 <a href=\"http://item.jd.com/11310547.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11310547.html</a></p>\n</li>\n<li>\n<p>《分布式系统：概念与设计（原书第 5 版）》 <a href=\"http://item.jd.com/11194499.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11194499.html</a></p>\n</li>\n<li>\n<p>《Hadoop 权威指南（第 3 版 修订版）》 <a href=\"http://item.jd.com/11566298.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11566298.html</a></p>\n</li>\n<li>\n<p>《Cassandra 权威指南》 <a href=\"http://item.jd.com/10794341.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/10794341.html</a></p>\n</li>\n<li>\n<p>《云计算架构技术与实践》 <a href=\"http://item.jd.com/11537731.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11537731.html</a></p>\n</li>\n<li>\n<p>《OpenStack 开源云王者归来》 <a href=\"http://item.jd.com/11521443.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11521443.html</a></p>\n</li>\n<li>\n<p>《数据挖掘 概念与技术（原书第 3 版）》 <a href=\"http://item.jd.com/11056660.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11056660.html</a></p>\n</li>\n<li>\n<p>《机器学习》 <a href=\"http://item.jd.com/10131321.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/10131321.html</a></p>\n</li>\n<li>\n<p>《图解机器学习》 <a href=\"http://item.jd.com/11676112.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11676112.html</a></p>\n</li>\n<li>\n<p>《机器学习实战》 <a href=\"http://item.jd.com/11242112.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11242112.html</a></p>\n</li>\n</ol>\n<h2 id=\"番外篇可以参考延展学习\"><a class=\"markdownIt-Anchor\" href=\"#番外篇可以参考延展学习\"></a> 【番外篇】（可以参考延展学习）</h2>\n<ol>\n<li>\n<p>《深入 PHP：面向对象、模式与实践（第 3 版）》 <a href=\"http://item.jd.com/10794350.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/10794350.html</a></p>\n</li>\n<li>\n<p>《Linux 网络编程（第 2 版）》 <a href=\"http://item.jd.com/11397772.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11397772.html</a></p>\n</li>\n<li>\n<p>《Linux 多线程服务端编程 使用 muduo C++网络库》 <a href=\"http://item.jd.com/11163782.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11163782.html</a></p>\n</li>\n<li>\n<p>《Linux 运维之道》 <a href=\"http://item.jd.com/11375254.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11375254.html</a></p>\n</li>\n<li>\n<p>《Linux 性能优化大师》 <a href=\"http://item.jd.com/11734651.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11734651.html</a></p>\n</li>\n<li>\n<p>《PostgreSQL 修炼之道：从小工到专家》 <a href=\"http://item.jd.com/11684063.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11684063.html</a></p>\n</li>\n<li>\n<p>《图解网络硬件》 <a href=\"http://item.jd.com/11506709.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11506709.html</a></p>\n</li>\n<li>\n<p>《网络安全基础：网络攻防、协议与安全》 <a href=\"http://item.jd.com/10550797.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/10550797.html</a></p>\n</li>\n<li>\n<p>《密码学原理与实践（第 3 版）》 <a href=\"http://item.jd.com/10067358.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/10067358.html</a></p>\n</li>\n<li>\n<p>《黑客大曝光：网络安全机密与解决方案（第 7 版）》 <a href=\"http://item.jd.com/11307435.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11307435.html</a></p>\n</li>\n<li>\n<p>《黑客攻防技术宝典 Web 实战篇 第 2 版》 <a href=\"http://item.jd.com/11020022.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11020022.html</a></p>\n</li>\n<li>\n<p>《精通正则表达式（第 3 版）》 <a href=\"http://item.jd.com/11070361.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11070361.html</a></p>\n</li>\n<li>\n<p>《Go 语言编程》 <a href=\"http://item.jd.com/11067810.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11067810.html</a></p>\n</li>\n<li>\n<p>《Python 基础教程（第 2 版 修订版）》 <a href=\"http://item.jd.com/11461683.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11461683.html</a></p>\n</li>\n<li>\n<p>《快学 Scala》 <a href=\"http://item.jd.com/11113845.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11113845.html</a></p>\n</li>\n<li>\n<p>《Erlang/OTP 并发编程实战》 <a href=\"http://item.jd.com/11037265.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11037265.html</a></p>\n</li>\n<li>\n<p>《函数式编程思维》 <a href=\"http://item.jd.com/11763847.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11763847.html</a></p>\n</li>\n<li>\n<p>《Android 从入门到精通》 <a href=\"http://item.jd.com/11078112.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11078112.html</a></p>\n</li>\n<li>\n<p>《iOS 开发指南》 <a href=\"http://item.jd.com/11681585.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11681585.html</a></p>\n</li>\n<li>\n<p>《搜索引擎：信息检索实践》 <a href=\"http://item.jd.com/10059723.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/10059723.html</a></p>\n</li>\n<li>\n<p>《统计自然语言处理（第 2 版）》 <a href=\"http://item.jd.com/11314362.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11314362.html</a></p>\n</li>\n<li>\n<p>《这就是搜索引擎：核心技术详解》 <a href=\"http://item.jd.com/10893803.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/10893803.html</a></p>\n</li>\n<li>\n<p>《Elasticsearch 服务器开发（第 2 版）》 <a href=\"http://item.jd.com/11615450.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11615450.html</a></p>\n</li>\n<li>\n<p>《实战 Elasticsearch、Logstash、Kibana》 <a href=\"http://item.jd.com/11706768.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11706768.html</a></p>\n</li>\n<li>\n<p>《推荐系统实践》 <a href=\"http://item.jd.com/11007625.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11007625.html</a></p>\n</li>\n<li>\n<p>《机器学习实践指南：案例应用解析》 <a href=\"http://item.jd.com/11447036.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11447036.html</a></p>\n</li>\n<li>\n<p>《Hadoop 实战（第 2 版）》 <a href=\"http://item.jd.com/11116710.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11116710.html</a></p>\n</li>\n<li>\n<p>《Hadoop 大数据分析与挖掘实战》 <a href=\"http://item.jd.com/11837003.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11837003.html</a></p>\n</li>\n<li>\n<p>《Spark 大数据处理：技术、应用与性能优化》 <a href=\"http://item.jd.com/11577088.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11577088.html</a></p>\n</li>\n<li>\n<p>《Spark 机器学习》 <a href=\"http://item.jd.com/11763016.html\" target=\"_blank\" rel=\"noopener\">http://item.jd.com/11763016.html</a></p>\n</li>\n</ol>\n<p>深入理解计算机系统、现代操作系统、C 程序设计语言、C 语言数据结构和算法、Unix 环境高级编程、TCP/IP 网络通信详解。<br>\n另外我建议大家学习一下面向对象方面知识，PHP 这方面的书不太多，建议看 Java 面向对象编程、Java 编程思想、J2EE 这些书。PHP 语言基础方面，建议认真地把<strong>PHP5 权威编程</strong>这本书好好读完。另外不光要读，还要照着书中的讲解动手去编程实践。</p>\n<p>来源： <a href=\"http://rango.swoole.com/archives/570\" target=\"_blank\" rel=\"noopener\">韩天峰–关于 PHP 程序员技术职业生涯规划</a></p>"},{"title":"Composer设置国内镜像","date":"2018-04-26T05:20:37.000Z","_content":"\n使用 composer 时，输入命令执行后半天没有反应，并最后是失败的消息。如下载项目中的框架文件时：\n`composer install`\n一直没有反应\n\n<!--more-->\n\n【注】添加参数`-vvv`可尽可能多的输出执行信息，帮助查看问题所在。\n\n如：使用`composer`安装项目的框架文件时，等待时间过长，且没有其它输出。\n\n可使用`-vvv`参数输出详细信息:\n`composer install -vvv`\n\n![](https://images2018.cnblogs.com/blog/1049028/201804/1049028-20180415234535780-570407396.png)\n此时可以发现在做网络请求时出现的长时间等待，于是可以猜测是国内的网络限制的问题。\n\n**解决办法**：\n\n设置国内镜像：[官方介绍][官方介绍]\n\n1、系统全局配置\n\n`composer config -g repo.packagist composer https://packagist.phpcomposer.com`\n\n2、单个项目配置\n\n进入项目目录，执行命令\n\n`composer config repo.packagist composer https://packagist.phpcomposer.com`\n\n设置好镜像以后便可成功执行\n\n![](https://images2018.cnblogs.com/blog/1049028/201804/1049028-20180415234950392-1812401653.png)\n\n[官方介绍]: https://pkg.phpcomposer.com/\n","source":"_posts/php-composer-image.md","raw":"---\ntitle: Composer设置国内镜像\ndate: 2018-04-26 13:20:37\ntags:\n  - composer\n  - 镜像\ncategory:\n  - 【PHP相关】\n---\n\n使用 composer 时，输入命令执行后半天没有反应，并最后是失败的消息。如下载项目中的框架文件时：\n`composer install`\n一直没有反应\n\n<!--more-->\n\n【注】添加参数`-vvv`可尽可能多的输出执行信息，帮助查看问题所在。\n\n如：使用`composer`安装项目的框架文件时，等待时间过长，且没有其它输出。\n\n可使用`-vvv`参数输出详细信息:\n`composer install -vvv`\n\n![](https://images2018.cnblogs.com/blog/1049028/201804/1049028-20180415234535780-570407396.png)\n此时可以发现在做网络请求时出现的长时间等待，于是可以猜测是国内的网络限制的问题。\n\n**解决办法**：\n\n设置国内镜像：[官方介绍][官方介绍]\n\n1、系统全局配置\n\n`composer config -g repo.packagist composer https://packagist.phpcomposer.com`\n\n2、单个项目配置\n\n进入项目目录，执行命令\n\n`composer config repo.packagist composer https://packagist.phpcomposer.com`\n\n设置好镜像以后便可成功执行\n\n![](https://images2018.cnblogs.com/blog/1049028/201804/1049028-20180415234950392-1812401653.png)\n\n[官方介绍]: https://pkg.phpcomposer.com/\n","slug":"php-composer-image","published":1,"updated":"2019-05-12T15:53:41.955Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c40h00292wuukwn8mov3","content":"<p>使用 composer 时，输入命令执行后半天没有反应，并最后是失败的消息。如下载项目中的框架文件时：<br>\n<code>composer install</code><br>\n一直没有反应</p>\n<a id=\"more\"></a>\n<p>【注】添加参数<code>-vvv</code>可尽可能多的输出执行信息，帮助查看问题所在。</p>\n<p>如：使用<code>composer</code>安装项目的框架文件时，等待时间过长，且没有其它输出。</p>\n<p>可使用<code>-vvv</code>参数输出详细信息:<br>\n<code>composer install -vvv</code></p>\n<p><img src=\"https://images2018.cnblogs.com/blog/1049028/201804/1049028-20180415234535780-570407396.png\" alt=\"\"><br>\n此时可以发现在做网络请求时出现的长时间等待，于是可以猜测是国内的网络限制的问题。</p>\n<p><strong>解决办法</strong>：</p>\n<p>设置国内镜像：<a href=\"https://pkg.phpcomposer.com/\" target=\"_blank\" rel=\"noopener\">官方介绍</a></p>\n<p>1、系统全局配置</p>\n<p><code>composer config -g repo.packagist composer https://packagist.phpcomposer.com</code></p>\n<p>2、单个项目配置</p>\n<p>进入项目目录，执行命令</p>\n<p><code>composer config repo.packagist composer https://packagist.phpcomposer.com</code></p>\n<p>设置好镜像以后便可成功执行</p>\n<p><img src=\"https://images2018.cnblogs.com/blog/1049028/201804/1049028-20180415234950392-1812401653.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>使用 composer 时，输入命令执行后半天没有反应，并最后是失败的消息。如下载项目中的框架文件时：<br>\n<code>composer install</code><br>\n一直没有反应</p>","more":"<p>【注】添加参数<code>-vvv</code>可尽可能多的输出执行信息，帮助查看问题所在。</p>\n<p>如：使用<code>composer</code>安装项目的框架文件时，等待时间过长，且没有其它输出。</p>\n<p>可使用<code>-vvv</code>参数输出详细信息:<br>\n<code>composer install -vvv</code></p>\n<p><img src=\"https://images2018.cnblogs.com/blog/1049028/201804/1049028-20180415234535780-570407396.png\" alt=\"\"><br>\n此时可以发现在做网络请求时出现的长时间等待，于是可以猜测是国内的网络限制的问题。</p>\n<p><strong>解决办法</strong>：</p>\n<p>设置国内镜像：<a href=\"https://pkg.phpcomposer.com/\" target=\"_blank\" rel=\"noopener\">官方介绍</a></p>\n<p>1、系统全局配置</p>\n<p><code>composer config -g repo.packagist composer https://packagist.phpcomposer.com</code></p>\n<p>2、单个项目配置</p>\n<p>进入项目目录，执行命令</p>\n<p><code>composer config repo.packagist composer https://packagist.phpcomposer.com</code></p>\n<p>设置好镜像以后便可成功执行</p>\n<p><img src=\"https://images2018.cnblogs.com/blog/1049028/201804/1049028-20180415234950392-1812401653.png\" alt=\"\"></p>"},{"title":"PHP扩展功能--cURL","date":"2018-04-16T05:32:53.000Z","_content":"\ncURL 表示以命令行的形式请求某个 url, 提交数据或获取相应数据。在日常的程序开发中会用到，因此，了解 cURL 的原理和过程，有助于实际工作和项目中的应用。\n\n<!--more-->\n\n## 一、入门三部曲\n\n### 1、cURL 是什么？\n\n[wikipedia 介绍][1]：\n\n    * cURL是一个利用URL语法在命令行下工作的文件传输工具，1997年首次发行。它支持文件上传和下载，所以是综合传输工具，但按传统，习惯称cURL为下载工具。cURL还包含了用于程序开发的libcurl。\n    * cURL支持的通信协议有FTP、FTPS、HTTP、HTTPS、TFTP、SFTP、Gopher、SCP、Telnet、DICT、FILE、LDAP、LDAPS、IMAP、POP3、SMTP和RTSP。\n    * libcurl支持的平台有Solaris、NetBSD、FreeBSD、OpenBSD、Darwin、HP-UX、IRIX、AIX、Tru64、Linux、UnixWare、HURD、Windows、Symbian、Amiga、OS/2、BeOS、Mac OS X、Ultrix、QNX、BlackBerry Tablet OS、OpenVMS、RISC OS、Novell NetWare、DOS等。\n\n简而言之：cURL 是下载工具、传输工具。利用 url 的语法规则传输文件、数据的命令行工具和库。\n\n<!--more-->\n\n### 2、为什么要用 cURL？\n\n通常是通过表单（html）提交数据到 php 文件从而实现数据的交互，但是不能实现**php 文件之间**的数据和文件传输，所以，cURL 的应用场景主要是 php 文件之间的数据和文件传输。\n\n### 3、在 PHP 中怎么用 cURL？\n\n（1）php.ini 中开启 curl 扩展\n\n```ini\nextension=php_curl.dll\n```\n\n然后重启 apache\n\n（2）在 phpinfo()的输出信息中查看是否有 curl 的相关信息\n[![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpinfo_curl.png)][2]\n\n【注】：如果开启无效，可以尝试将 php 安装目录下的 libeay32.dll 、ssleay32.dll 拷贝到 windows 或 windows/system32 目录下\n\n## 二、cURL 在 PHP 中的应用\n\n### 必备函数：\n\n(1)curl_init() --- 初始化 cURL 会话\n\n(2)curl_setopt() --- 设置 cURL 传输选项\n\n参数：\n\n- post 方式：\n  - CURLOPT_POST\n  - CURLOPT_POSTFIELDS\n- get 方式：\n  - CURLOPT_RETURNTRANSFER\n  - CURLOPT_SSL_VERIFYHOST\n- 安全验证：\n  - CURLOPT_SSL_VERIFYPEER\n  - CURLOPT_SSL_VERIFYPEER\n\n(3)curl_exec(); --- 执行 cURL 会话\n\n(4)curl_close() --- 关闭 cURL 会话\n\n### 1、模拟 get 请求\n\n（1）默认是直接显示返回的数据，对于 html 数据，则直接以网页的形式显示。\n\n```php\n//1、初始化curl\n$curl = curl_init();\n\n//2、告诉curl,请求的地址\ncurl_setopt($curl, CURLOPT_URL, 'http://www.baidu.com/index.php');\n\n//3、发送请求\ncurl_exec($curl);\n\n//4、关闭资源\ncurl_close($curl);\n```\n\n（2）设置只获取数据，不直接显示\n\n```php\n//1、初始化curl\n$curl = curl_init();\n\n//2、告诉curl,请求的地址\ncurl_setopt($curl, CURLOPT_URL, 'http://www.baidu.com/index.php');\n//将请求的数据返回，而不是直接输出\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n\n//3、发送请求\n$res = curl_exec($curl);\nvar_dump($res);\n\n//4、关闭资源\ncurl_close($curl);\n```\n\n### 2、模拟 post 请求\n\n```php\n1、初始化curl\n$curl = curl_init();\n\n//2、设置请求的地址\ncurl_setopt($curl, CURLOPT_URL, 'http://localhost/curl_post.php');\n// （1）设置请求的方式为post\ncurl_setopt($curl, CURLOPT_POST, true);\n// （2）设置post提交的数据\n$data = [\n    'username' => 'zqunor',\n    'password' => 'zqunor123'\n];\n// （3）提交数据\ncurl_setopt($curl, CURLOPT_POSTFIELDS, $data);\n\n//3、发送请求\ncurl_exec($curl);\n\n//4、关闭资源\ncurl_close($curl);\n```\n\n### 3、封装成类，兼容 post 和 get 方式\n\n```php\nclass HttpRequest\n{\n    private static $isShow = false;\n\n    public function __set($attr, $value)\n    {\n        $this->$attr = $value;\n    }\n\n    public static function send($url,$data=null)\n    {\n        $curl = curl_init();\n        // 设置请求的url地址\n        curl_setopt($curl, CURLOPT_URL, $url);\n\n        // 直接跳过安全证书的验证\n        curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);\n\n        // 根据$data判断是post还是get方式\n        if (!empty($data)) {\n            // 如果$data非空，则为post方式\n            curl_setopt($curl, CURLOPT_POST, true);\n            curl_setopt($curl, CURLOPT_POSTFIELDS, $data);\n        }\n        // 反之为get方式\n        if (!self::$isShow) {\n            // 不直接显示数据，而是以返回值的形式\n            curl_setopt($curl, CURLOPT_RETURNTRANSFER, $url);\n        }\n        $res = curl_exec($curl);\n        return $res;\n\n        curl_close($curl);\n    }\n}\n```\n\n### 4、实例化进行数据获取\n\n```php\n// 调用封装的类，请求知乎php话题下的数据\n$res = HttpRequest::send('https://www.zhihu.com/search?type=content&q=php');\n\n// 查看需要获取的数据的html样式\n// <a target=\"_blank\" href=\"/question/26498147/answer/33029411\" data-reactid=\"218\"><span class=\"Highlight\" data-reactid=\"219\">「<em>PHP</em> 是最好的语言」这个梗是怎么来的？</span></a>\n// <a target=\"_blank\" href=\"/question/41913568/answer/95778872\" data-reactid=\"366\"><span class=\"Highlight\" data-reactid=\"367\">如何看待天猫彻底抛弃<em>PHP</em>？</span></a>\n// <a target=\"_blank\" href=\"/question/25038841/answer/44396770\" data-reactid=\"292\"><span class=\"Highlight\" data-reactid=\"293\"><em>PHP</em>、Java、Python、C、C++ 这几种编程语言都各有什么特点或优点？</span></a>\n\n// 根据样式设置正则匹配模式，筛选所需数据\n$reg = '/<a[^>]*><span class=\"Highlight\"[^>]*>(.+?)<\\/span><\\/a>/';\n\npreg_match_all($reg, $res, $match);\n\nvar_dump($match);\n```\n\n### 5、查看匹配结果\n\n[![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/curl_result.png)][3]\n\n完成！\n\n[1]: https://zh.wikipedia.org/wiki/CURL\n[2]: https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpinfo_curl.png\n[3]: https://raw.githubusercontent.com/zqunor/MarkdownPic/master/curl_result.png\n","source":"_posts/php-curl.md","raw":"---\ntitle: PHP扩展功能--cURL\ndate: 2018-04-16 13:32:53\ntags:\n  - curl\ncategory:\n  - 【PHP相关】\n---\n\ncURL 表示以命令行的形式请求某个 url, 提交数据或获取相应数据。在日常的程序开发中会用到，因此，了解 cURL 的原理和过程，有助于实际工作和项目中的应用。\n\n<!--more-->\n\n## 一、入门三部曲\n\n### 1、cURL 是什么？\n\n[wikipedia 介绍][1]：\n\n    * cURL是一个利用URL语法在命令行下工作的文件传输工具，1997年首次发行。它支持文件上传和下载，所以是综合传输工具，但按传统，习惯称cURL为下载工具。cURL还包含了用于程序开发的libcurl。\n    * cURL支持的通信协议有FTP、FTPS、HTTP、HTTPS、TFTP、SFTP、Gopher、SCP、Telnet、DICT、FILE、LDAP、LDAPS、IMAP、POP3、SMTP和RTSP。\n    * libcurl支持的平台有Solaris、NetBSD、FreeBSD、OpenBSD、Darwin、HP-UX、IRIX、AIX、Tru64、Linux、UnixWare、HURD、Windows、Symbian、Amiga、OS/2、BeOS、Mac OS X、Ultrix、QNX、BlackBerry Tablet OS、OpenVMS、RISC OS、Novell NetWare、DOS等。\n\n简而言之：cURL 是下载工具、传输工具。利用 url 的语法规则传输文件、数据的命令行工具和库。\n\n<!--more-->\n\n### 2、为什么要用 cURL？\n\n通常是通过表单（html）提交数据到 php 文件从而实现数据的交互，但是不能实现**php 文件之间**的数据和文件传输，所以，cURL 的应用场景主要是 php 文件之间的数据和文件传输。\n\n### 3、在 PHP 中怎么用 cURL？\n\n（1）php.ini 中开启 curl 扩展\n\n```ini\nextension=php_curl.dll\n```\n\n然后重启 apache\n\n（2）在 phpinfo()的输出信息中查看是否有 curl 的相关信息\n[![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpinfo_curl.png)][2]\n\n【注】：如果开启无效，可以尝试将 php 安装目录下的 libeay32.dll 、ssleay32.dll 拷贝到 windows 或 windows/system32 目录下\n\n## 二、cURL 在 PHP 中的应用\n\n### 必备函数：\n\n(1)curl_init() --- 初始化 cURL 会话\n\n(2)curl_setopt() --- 设置 cURL 传输选项\n\n参数：\n\n- post 方式：\n  - CURLOPT_POST\n  - CURLOPT_POSTFIELDS\n- get 方式：\n  - CURLOPT_RETURNTRANSFER\n  - CURLOPT_SSL_VERIFYHOST\n- 安全验证：\n  - CURLOPT_SSL_VERIFYPEER\n  - CURLOPT_SSL_VERIFYPEER\n\n(3)curl_exec(); --- 执行 cURL 会话\n\n(4)curl_close() --- 关闭 cURL 会话\n\n### 1、模拟 get 请求\n\n（1）默认是直接显示返回的数据，对于 html 数据，则直接以网页的形式显示。\n\n```php\n//1、初始化curl\n$curl = curl_init();\n\n//2、告诉curl,请求的地址\ncurl_setopt($curl, CURLOPT_URL, 'http://www.baidu.com/index.php');\n\n//3、发送请求\ncurl_exec($curl);\n\n//4、关闭资源\ncurl_close($curl);\n```\n\n（2）设置只获取数据，不直接显示\n\n```php\n//1、初始化curl\n$curl = curl_init();\n\n//2、告诉curl,请求的地址\ncurl_setopt($curl, CURLOPT_URL, 'http://www.baidu.com/index.php');\n//将请求的数据返回，而不是直接输出\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n\n//3、发送请求\n$res = curl_exec($curl);\nvar_dump($res);\n\n//4、关闭资源\ncurl_close($curl);\n```\n\n### 2、模拟 post 请求\n\n```php\n1、初始化curl\n$curl = curl_init();\n\n//2、设置请求的地址\ncurl_setopt($curl, CURLOPT_URL, 'http://localhost/curl_post.php');\n// （1）设置请求的方式为post\ncurl_setopt($curl, CURLOPT_POST, true);\n// （2）设置post提交的数据\n$data = [\n    'username' => 'zqunor',\n    'password' => 'zqunor123'\n];\n// （3）提交数据\ncurl_setopt($curl, CURLOPT_POSTFIELDS, $data);\n\n//3、发送请求\ncurl_exec($curl);\n\n//4、关闭资源\ncurl_close($curl);\n```\n\n### 3、封装成类，兼容 post 和 get 方式\n\n```php\nclass HttpRequest\n{\n    private static $isShow = false;\n\n    public function __set($attr, $value)\n    {\n        $this->$attr = $value;\n    }\n\n    public static function send($url,$data=null)\n    {\n        $curl = curl_init();\n        // 设置请求的url地址\n        curl_setopt($curl, CURLOPT_URL, $url);\n\n        // 直接跳过安全证书的验证\n        curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);\n\n        // 根据$data判断是post还是get方式\n        if (!empty($data)) {\n            // 如果$data非空，则为post方式\n            curl_setopt($curl, CURLOPT_POST, true);\n            curl_setopt($curl, CURLOPT_POSTFIELDS, $data);\n        }\n        // 反之为get方式\n        if (!self::$isShow) {\n            // 不直接显示数据，而是以返回值的形式\n            curl_setopt($curl, CURLOPT_RETURNTRANSFER, $url);\n        }\n        $res = curl_exec($curl);\n        return $res;\n\n        curl_close($curl);\n    }\n}\n```\n\n### 4、实例化进行数据获取\n\n```php\n// 调用封装的类，请求知乎php话题下的数据\n$res = HttpRequest::send('https://www.zhihu.com/search?type=content&q=php');\n\n// 查看需要获取的数据的html样式\n// <a target=\"_blank\" href=\"/question/26498147/answer/33029411\" data-reactid=\"218\"><span class=\"Highlight\" data-reactid=\"219\">「<em>PHP</em> 是最好的语言」这个梗是怎么来的？</span></a>\n// <a target=\"_blank\" href=\"/question/41913568/answer/95778872\" data-reactid=\"366\"><span class=\"Highlight\" data-reactid=\"367\">如何看待天猫彻底抛弃<em>PHP</em>？</span></a>\n// <a target=\"_blank\" href=\"/question/25038841/answer/44396770\" data-reactid=\"292\"><span class=\"Highlight\" data-reactid=\"293\"><em>PHP</em>、Java、Python、C、C++ 这几种编程语言都各有什么特点或优点？</span></a>\n\n// 根据样式设置正则匹配模式，筛选所需数据\n$reg = '/<a[^>]*><span class=\"Highlight\"[^>]*>(.+?)<\\/span><\\/a>/';\n\npreg_match_all($reg, $res, $match);\n\nvar_dump($match);\n```\n\n### 5、查看匹配结果\n\n[![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/curl_result.png)][3]\n\n完成！\n\n[1]: https://zh.wikipedia.org/wiki/CURL\n[2]: https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpinfo_curl.png\n[3]: https://raw.githubusercontent.com/zqunor/MarkdownPic/master/curl_result.png\n","slug":"php-curl","published":1,"updated":"2019-05-12T15:55:41.403Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c40j002d2wuu93qtmu6d","content":"<p>cURL 表示以命令行的形式请求某个 url, 提交数据或获取相应数据。在日常的程序开发中会用到，因此，了解 cURL 的原理和过程，有助于实际工作和项目中的应用。</p>\n<a id=\"more\"></a>\n<h2 id=\"一-入门三部曲\"><a class=\"markdownIt-Anchor\" href=\"#一-入门三部曲\"></a> 一、入门三部曲</h2>\n<h3 id=\"1-curl-是什么\"><a class=\"markdownIt-Anchor\" href=\"#1-curl-是什么\"></a> 1、cURL 是什么？</h3>\n<p><a href=\"https://zh.wikipedia.org/wiki/CURL\" target=\"_blank\" rel=\"noopener\">wikipedia 介绍</a>：</p>\n<pre><code>* cURL是一个利用URL语法在命令行下工作的文件传输工具，1997年首次发行。它支持文件上传和下载，所以是综合传输工具，但按传统，习惯称cURL为下载工具。cURL还包含了用于程序开发的libcurl。\n* cURL支持的通信协议有FTP、FTPS、HTTP、HTTPS、TFTP、SFTP、Gopher、SCP、Telnet、DICT、FILE、LDAP、LDAPS、IMAP、POP3、SMTP和RTSP。\n* libcurl支持的平台有Solaris、NetBSD、FreeBSD、OpenBSD、Darwin、HP-UX、IRIX、AIX、Tru64、Linux、UnixWare、HURD、Windows、Symbian、Amiga、OS/2、BeOS、Mac OS X、Ultrix、QNX、BlackBerry Tablet OS、OpenVMS、RISC OS、Novell NetWare、DOS等。\n</code></pre>\n<p>简而言之：cURL 是下载工具、传输工具。利用 url 的语法规则传输文件、数据的命令行工具和库。</p>\n<!--more-->\n<h3 id=\"2-为什么要用-curl\"><a class=\"markdownIt-Anchor\" href=\"#2-为什么要用-curl\"></a> 2、为什么要用 cURL？</h3>\n<p>通常是通过表单（html）提交数据到 php 文件从而实现数据的交互，但是不能实现<strong>php 文件之间</strong>的数据和文件传输，所以，cURL 的应用场景主要是 php 文件之间的数据和文件传输。</p>\n<h3 id=\"3-在-php-中怎么用-curl\"><a class=\"markdownIt-Anchor\" href=\"#3-在-php-中怎么用-curl\"></a> 3、在 PHP 中怎么用 cURL？</h3>\n<p>（1）php.ini 中开启 curl 扩展</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">extension</span>=php_curl.dll</span><br></pre></td></tr></table></figure>\n<p>然后重启 apache</p>\n<p>（2）在 phpinfo()的输出信息中查看是否有 curl 的相关信息<br>\n<a href=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpinfo_curl.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpinfo_curl.png\" alt=\"avatar\"></a></p>\n<p>【注】：如果开启无效，可以尝试将 php 安装目录下的 libeay32.dll 、ssleay32.dll 拷贝到 windows 或 windows/system32 目录下</p>\n<h2 id=\"二-curl-在-php-中的应用\"><a class=\"markdownIt-Anchor\" href=\"#二-curl-在-php-中的应用\"></a> 二、cURL 在 PHP 中的应用</h2>\n<h3 id=\"必备函数\"><a class=\"markdownIt-Anchor\" href=\"#必备函数\"></a> 必备函数：</h3>\n<p>(1)curl_init() — 初始化 cURL 会话</p>\n<p>(2)curl_setopt() — 设置 cURL 传输选项</p>\n<p>参数：</p>\n<ul>\n<li>post 方式：\n<ul>\n<li>CURLOPT_POST</li>\n<li>CURLOPT_POSTFIELDS</li>\n</ul>\n</li>\n<li>get 方式：\n<ul>\n<li>CURLOPT_RETURNTRANSFER</li>\n<li>CURLOPT_SSL_VERIFYHOST</li>\n</ul>\n</li>\n<li>安全验证：\n<ul>\n<li>CURLOPT_SSL_VERIFYPEER</li>\n<li>CURLOPT_SSL_VERIFYPEER</li>\n</ul>\n</li>\n</ul>\n<p>(3)curl_exec(); — 执行 cURL 会话</p>\n<p>(4)curl_close() — 关闭 cURL 会话</p>\n<h3 id=\"1-模拟-get-请求\"><a class=\"markdownIt-Anchor\" href=\"#1-模拟-get-请求\"></a> 1、模拟 get 请求</h3>\n<p>（1）默认是直接显示返回的数据，对于 html 数据，则直接以网页的形式显示。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1、初始化curl</span></span><br><span class=\"line\">$curl = curl_init();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2、告诉curl,请求的地址</span></span><br><span class=\"line\">curl_setopt($curl, CURLOPT_URL, <span class=\"string\">'http://www.baidu.com/index.php'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3、发送请求</span></span><br><span class=\"line\">curl_exec($curl);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//4、关闭资源</span></span><br><span class=\"line\">curl_close($curl);</span><br></pre></td></tr></table></figure>\n<p>（2）设置只获取数据，不直接显示</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1、初始化curl</span></span><br><span class=\"line\">$curl = curl_init();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2、告诉curl,请求的地址</span></span><br><span class=\"line\">curl_setopt($curl, CURLOPT_URL, <span class=\"string\">'http://www.baidu.com/index.php'</span>);</span><br><span class=\"line\"><span class=\"comment\">//将请求的数据返回，而不是直接输出</span></span><br><span class=\"line\">curl_setopt($curl, CURLOPT_RETURNTRANSFER, <span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3、发送请求</span></span><br><span class=\"line\">$res = curl_exec($curl);</span><br><span class=\"line\">var_dump($res);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//4、关闭资源</span></span><br><span class=\"line\">curl_close($curl);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-模拟-post-请求\"><a class=\"markdownIt-Anchor\" href=\"#2-模拟-post-请求\"></a> 2、模拟 post 请求</h3>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、初始化curl</span><br><span class=\"line\">$curl = curl_init();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2、设置请求的地址</span></span><br><span class=\"line\">curl_setopt($curl, CURLOPT_URL, <span class=\"string\">'http://localhost/curl_post.php'</span>);</span><br><span class=\"line\"><span class=\"comment\">// （1）设置请求的方式为post</span></span><br><span class=\"line\">curl_setopt($curl, CURLOPT_POST, <span class=\"keyword\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">// （2）设置post提交的数据</span></span><br><span class=\"line\">$data = [</span><br><span class=\"line\">    <span class=\"string\">'username'</span> =&gt; <span class=\"string\">'zqunor'</span>,</span><br><span class=\"line\">    <span class=\"string\">'password'</span> =&gt; <span class=\"string\">'zqunor123'</span></span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"comment\">// （3）提交数据</span></span><br><span class=\"line\">curl_setopt($curl, CURLOPT_POSTFIELDS, $data);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3、发送请求</span></span><br><span class=\"line\">curl_exec($curl);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//4、关闭资源</span></span><br><span class=\"line\">curl_close($curl);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-封装成类兼容-post-和-get-方式\"><a class=\"markdownIt-Anchor\" href=\"#3-封装成类兼容-post-和-get-方式\"></a> 3、封装成类，兼容 post 和 get 方式</h3>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpRequest</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $isShow = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__set</span><span class=\"params\">($attr, $value)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;$attr = $value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send</span><span class=\"params\">($url,$data=null)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $curl = curl_init();</span><br><span class=\"line\">        <span class=\"comment\">// 设置请求的url地址</span></span><br><span class=\"line\">        curl_setopt($curl, CURLOPT_URL, $url);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 直接跳过安全证书的验证</span></span><br><span class=\"line\">        curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, <span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 根据$data判断是post还是get方式</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">empty</span>($data)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果$data非空，则为post方式</span></span><br><span class=\"line\">            curl_setopt($curl, CURLOPT_POST, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            curl_setopt($curl, CURLOPT_POSTFIELDS, $data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 反之为get方式</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">self</span>::$isShow) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 不直接显示数据，而是以返回值的形式</span></span><br><span class=\"line\">            curl_setopt($curl, CURLOPT_RETURNTRANSFER, $url);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $res = curl_exec($curl);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $res;</span><br><span class=\"line\"></span><br><span class=\"line\">        curl_close($curl);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-实例化进行数据获取\"><a class=\"markdownIt-Anchor\" href=\"#4-实例化进行数据获取\"></a> 4、实例化进行数据获取</h3>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用封装的类，请求知乎php话题下的数据</span></span><br><span class=\"line\">$res = HttpRequest::send(<span class=\"string\">'https://www.zhihu.com/search?type=content&amp;q=php'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查看需要获取的数据的html样式</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;a target=\"_blank\" href=\"/question/26498147/answer/33029411\" data-reactid=\"218\"&gt;&lt;span class=\"Highlight\" data-reactid=\"219\"&gt;「&lt;em&gt;PHP&lt;/em&gt; 是最好的语言」这个梗是怎么来的？&lt;/span&gt;&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;a target=\"_blank\" href=\"/question/41913568/answer/95778872\" data-reactid=\"366\"&gt;&lt;span class=\"Highlight\" data-reactid=\"367\"&gt;如何看待天猫彻底抛弃&lt;em&gt;PHP&lt;/em&gt;？&lt;/span&gt;&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;a target=\"_blank\" href=\"/question/25038841/answer/44396770\" data-reactid=\"292\"&gt;&lt;span class=\"Highlight\" data-reactid=\"293\"&gt;&lt;em&gt;PHP&lt;/em&gt;、Java、Python、C、C++ 这几种编程语言都各有什么特点或优点？&lt;/span&gt;&lt;/a&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据样式设置正则匹配模式，筛选所需数据</span></span><br><span class=\"line\">$reg = <span class=\"string\">'/&lt;a[^&gt;]*&gt;&lt;span class=\"Highlight\"[^&gt;]*&gt;(.+?)&lt;\\/span&gt;&lt;\\/a&gt;/'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">preg_match_all($reg, $res, $match);</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump($match);</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-查看匹配结果\"><a class=\"markdownIt-Anchor\" href=\"#5-查看匹配结果\"></a> 5、查看匹配结果</h3>\n<p><a href=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/curl_result.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/curl_result.png\" alt=\"avatar\"></a></p>\n<p>完成！</p>\n","site":{"data":{}},"excerpt":"<p>cURL 表示以命令行的形式请求某个 url, 提交数据或获取相应数据。在日常的程序开发中会用到，因此，了解 cURL 的原理和过程，有助于实际工作和项目中的应用。</p>","more":"<h2 id=\"一-入门三部曲\"><a class=\"markdownIt-Anchor\" href=\"#一-入门三部曲\"></a> 一、入门三部曲</h2>\n<h3 id=\"1-curl-是什么\"><a class=\"markdownIt-Anchor\" href=\"#1-curl-是什么\"></a> 1、cURL 是什么？</h3>\n<p><a href=\"https://zh.wikipedia.org/wiki/CURL\" target=\"_blank\" rel=\"noopener\">wikipedia 介绍</a>：</p>\n<pre><code>* cURL是一个利用URL语法在命令行下工作的文件传输工具，1997年首次发行。它支持文件上传和下载，所以是综合传输工具，但按传统，习惯称cURL为下载工具。cURL还包含了用于程序开发的libcurl。\n* cURL支持的通信协议有FTP、FTPS、HTTP、HTTPS、TFTP、SFTP、Gopher、SCP、Telnet、DICT、FILE、LDAP、LDAPS、IMAP、POP3、SMTP和RTSP。\n* libcurl支持的平台有Solaris、NetBSD、FreeBSD、OpenBSD、Darwin、HP-UX、IRIX、AIX、Tru64、Linux、UnixWare、HURD、Windows、Symbian、Amiga、OS/2、BeOS、Mac OS X、Ultrix、QNX、BlackBerry Tablet OS、OpenVMS、RISC OS、Novell NetWare、DOS等。\n</code></pre>\n<p>简而言之：cURL 是下载工具、传输工具。利用 url 的语法规则传输文件、数据的命令行工具和库。</p>\n<!--more-->\n<h3 id=\"2-为什么要用-curl\"><a class=\"markdownIt-Anchor\" href=\"#2-为什么要用-curl\"></a> 2、为什么要用 cURL？</h3>\n<p>通常是通过表单（html）提交数据到 php 文件从而实现数据的交互，但是不能实现<strong>php 文件之间</strong>的数据和文件传输，所以，cURL 的应用场景主要是 php 文件之间的数据和文件传输。</p>\n<h3 id=\"3-在-php-中怎么用-curl\"><a class=\"markdownIt-Anchor\" href=\"#3-在-php-中怎么用-curl\"></a> 3、在 PHP 中怎么用 cURL？</h3>\n<p>（1）php.ini 中开启 curl 扩展</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">extension</span>=php_curl.dll</span><br></pre></td></tr></table></figure>\n<p>然后重启 apache</p>\n<p>（2）在 phpinfo()的输出信息中查看是否有 curl 的相关信息<br>\n<a href=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpinfo_curl.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpinfo_curl.png\" alt=\"avatar\"></a></p>\n<p>【注】：如果开启无效，可以尝试将 php 安装目录下的 libeay32.dll 、ssleay32.dll 拷贝到 windows 或 windows/system32 目录下</p>\n<h2 id=\"二-curl-在-php-中的应用\"><a class=\"markdownIt-Anchor\" href=\"#二-curl-在-php-中的应用\"></a> 二、cURL 在 PHP 中的应用</h2>\n<h3 id=\"必备函数\"><a class=\"markdownIt-Anchor\" href=\"#必备函数\"></a> 必备函数：</h3>\n<p>(1)curl_init() — 初始化 cURL 会话</p>\n<p>(2)curl_setopt() — 设置 cURL 传输选项</p>\n<p>参数：</p>\n<ul>\n<li>post 方式：\n<ul>\n<li>CURLOPT_POST</li>\n<li>CURLOPT_POSTFIELDS</li>\n</ul>\n</li>\n<li>get 方式：\n<ul>\n<li>CURLOPT_RETURNTRANSFER</li>\n<li>CURLOPT_SSL_VERIFYHOST</li>\n</ul>\n</li>\n<li>安全验证：\n<ul>\n<li>CURLOPT_SSL_VERIFYPEER</li>\n<li>CURLOPT_SSL_VERIFYPEER</li>\n</ul>\n</li>\n</ul>\n<p>(3)curl_exec(); — 执行 cURL 会话</p>\n<p>(4)curl_close() — 关闭 cURL 会话</p>\n<h3 id=\"1-模拟-get-请求\"><a class=\"markdownIt-Anchor\" href=\"#1-模拟-get-请求\"></a> 1、模拟 get 请求</h3>\n<p>（1）默认是直接显示返回的数据，对于 html 数据，则直接以网页的形式显示。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1、初始化curl</span></span><br><span class=\"line\">$curl = curl_init();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2、告诉curl,请求的地址</span></span><br><span class=\"line\">curl_setopt($curl, CURLOPT_URL, <span class=\"string\">'http://www.baidu.com/index.php'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3、发送请求</span></span><br><span class=\"line\">curl_exec($curl);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//4、关闭资源</span></span><br><span class=\"line\">curl_close($curl);</span><br></pre></td></tr></table></figure>\n<p>（2）设置只获取数据，不直接显示</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1、初始化curl</span></span><br><span class=\"line\">$curl = curl_init();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2、告诉curl,请求的地址</span></span><br><span class=\"line\">curl_setopt($curl, CURLOPT_URL, <span class=\"string\">'http://www.baidu.com/index.php'</span>);</span><br><span class=\"line\"><span class=\"comment\">//将请求的数据返回，而不是直接输出</span></span><br><span class=\"line\">curl_setopt($curl, CURLOPT_RETURNTRANSFER, <span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3、发送请求</span></span><br><span class=\"line\">$res = curl_exec($curl);</span><br><span class=\"line\">var_dump($res);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//4、关闭资源</span></span><br><span class=\"line\">curl_close($curl);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-模拟-post-请求\"><a class=\"markdownIt-Anchor\" href=\"#2-模拟-post-请求\"></a> 2、模拟 post 请求</h3>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、初始化curl</span><br><span class=\"line\">$curl = curl_init();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2、设置请求的地址</span></span><br><span class=\"line\">curl_setopt($curl, CURLOPT_URL, <span class=\"string\">'http://localhost/curl_post.php'</span>);</span><br><span class=\"line\"><span class=\"comment\">// （1）设置请求的方式为post</span></span><br><span class=\"line\">curl_setopt($curl, CURLOPT_POST, <span class=\"keyword\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">// （2）设置post提交的数据</span></span><br><span class=\"line\">$data = [</span><br><span class=\"line\">    <span class=\"string\">'username'</span> =&gt; <span class=\"string\">'zqunor'</span>,</span><br><span class=\"line\">    <span class=\"string\">'password'</span> =&gt; <span class=\"string\">'zqunor123'</span></span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"comment\">// （3）提交数据</span></span><br><span class=\"line\">curl_setopt($curl, CURLOPT_POSTFIELDS, $data);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3、发送请求</span></span><br><span class=\"line\">curl_exec($curl);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//4、关闭资源</span></span><br><span class=\"line\">curl_close($curl);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-封装成类兼容-post-和-get-方式\"><a class=\"markdownIt-Anchor\" href=\"#3-封装成类兼容-post-和-get-方式\"></a> 3、封装成类，兼容 post 和 get 方式</h3>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpRequest</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $isShow = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__set</span><span class=\"params\">($attr, $value)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;$attr = $value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send</span><span class=\"params\">($url,$data=null)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $curl = curl_init();</span><br><span class=\"line\">        <span class=\"comment\">// 设置请求的url地址</span></span><br><span class=\"line\">        curl_setopt($curl, CURLOPT_URL, $url);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 直接跳过安全证书的验证</span></span><br><span class=\"line\">        curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, <span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 根据$data判断是post还是get方式</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">empty</span>($data)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果$data非空，则为post方式</span></span><br><span class=\"line\">            curl_setopt($curl, CURLOPT_POST, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            curl_setopt($curl, CURLOPT_POSTFIELDS, $data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 反之为get方式</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">self</span>::$isShow) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 不直接显示数据，而是以返回值的形式</span></span><br><span class=\"line\">            curl_setopt($curl, CURLOPT_RETURNTRANSFER, $url);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $res = curl_exec($curl);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $res;</span><br><span class=\"line\"></span><br><span class=\"line\">        curl_close($curl);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-实例化进行数据获取\"><a class=\"markdownIt-Anchor\" href=\"#4-实例化进行数据获取\"></a> 4、实例化进行数据获取</h3>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用封装的类，请求知乎php话题下的数据</span></span><br><span class=\"line\">$res = HttpRequest::send(<span class=\"string\">'https://www.zhihu.com/search?type=content&amp;q=php'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查看需要获取的数据的html样式</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;a target=\"_blank\" href=\"/question/26498147/answer/33029411\" data-reactid=\"218\"&gt;&lt;span class=\"Highlight\" data-reactid=\"219\"&gt;「&lt;em&gt;PHP&lt;/em&gt; 是最好的语言」这个梗是怎么来的？&lt;/span&gt;&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;a target=\"_blank\" href=\"/question/41913568/answer/95778872\" data-reactid=\"366\"&gt;&lt;span class=\"Highlight\" data-reactid=\"367\"&gt;如何看待天猫彻底抛弃&lt;em&gt;PHP&lt;/em&gt;？&lt;/span&gt;&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;a target=\"_blank\" href=\"/question/25038841/answer/44396770\" data-reactid=\"292\"&gt;&lt;span class=\"Highlight\" data-reactid=\"293\"&gt;&lt;em&gt;PHP&lt;/em&gt;、Java、Python、C、C++ 这几种编程语言都各有什么特点或优点？&lt;/span&gt;&lt;/a&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据样式设置正则匹配模式，筛选所需数据</span></span><br><span class=\"line\">$reg = <span class=\"string\">'/&lt;a[^&gt;]*&gt;&lt;span class=\"Highlight\"[^&gt;]*&gt;(.+?)&lt;\\/span&gt;&lt;\\/a&gt;/'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">preg_match_all($reg, $res, $match);</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump($match);</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-查看匹配结果\"><a class=\"markdownIt-Anchor\" href=\"#5-查看匹配结果\"></a> 5、查看匹配结果</h3>\n<p><a href=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/curl_result.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/curl_result.png\" alt=\"avatar\"></a></p>\n<p>完成！</p>"},{"title":"PHP扩展功能--发送邮件","date":"2018-04-16T05:38:54.000Z","_content":"\n### 1、下载 PHPMailer 源码\n\n[github 下载]\n（测试使用的是 5.2.2 版本）\n\n### 2、注册并登录网易邮箱\n\n（其他邮箱均可）【用于配置用户名和三方登录授权码，以及发送人邮箱地址】\n\n（1）开启 POP3 协议 定位到开启页面\n\n<!--more-->\n\n![](https://images2018.cnblogs.com/blog/1049028/201803/1049028-20180327171400339-1436550372.png)\n\n（2）开启三方登录授权，并获取授权码（一串字符串）\n![](https://images2018.cnblogs.com/blog/1049028/201803/1049028-20180327171327537-1436075640.png)\n\n### 3、自定义封装邮件类\n\n（1）核心文件（进行重命名）：\n\n![](https://images2018.cnblogs.com/blog/1049028/201803/1049028-20180327163714902-341662125.png)\n\n```ini\nclass.phpmailer.php   ====》  PHPMailer.class.php\n\nclass.pop3.php  ====》POP3.class.php\n\nclass.smtp.php  ====》SMTP.class.php\n```\n\n并拷贝到 PHPMailer 目录下\n![](https://images2018.cnblogs.com/blog/1049028/201803/1049028-20180327163714902-341662125.png)\n（2）邮件发送类封装：\n\n```php\n<?php\nrequire_once 'PHPMailer/PHPMailer.class.php';\nrequire_once 'PHPMailer/SMTP.class.php';\nrequire_once 'PHPMailer/POP3.class.php';\n\nclass Email\n{\n    public static function sendMail($title,$content,$to)\n    {\n        $mail = new PHPMailer();\n        $mail -> IsSMTP();                       //告诉服务器使用smtp协议发送\n        $mail -> SMTPAuth = true;                //开启SMTP授权\n        $mail -> Host = 'smtp.163.com';          //告诉我们的服务器使用163的smtp服务器发送\n        $mail -> From = 'Muse_girlo@163.com';    //发送者的邮件地址\n        $mail -> FromName = 'Muse_girlo';        //发送邮件的用户昵称\n        $mail -> Username = 'Muse_girlo';        //登录到邮箱的用户名\n        $mail -> Password = 'xxxxxxxxxx';        //第三方登录的授权码，在邮箱里面设置\n        //编辑发送的邮件内容\n        $mail -> IsHTML(true);            //发送的内容使用html编写\n        $mail -> CharSet = 'utf-8';                //设置发送内容的编码\n        $mail -> Subject = $title;                //设置邮件的主题、标题\n        $mail -> MsgHTML($content);                //发送的邮件内容主体\n        //告诉服务器接收人的邮件地址\n        $mail -> AddAddress($to);\n        //调用send方法，执行发送\n        $result = $mail -> Send();\n        if($result){\n            return true;\n        }else{\n            return $mail -> ErrorInfo;\n        }\n    }\n}\n```\n\n### 4、发送邮件，调用邮件发送类\n\n```php\n$title = \"测试邮件发送功能\";\n$content = \"脚踏实地，坚持学习！\";\n$to = \"zqunor@foxmail.com\";\n\n$res = Email::sendMail($title, $content, $to);\nif ($res) {\n    echo '邮件发送成功！';\n    } else {\n    echo \"邮件发送失败！\";\n}\n```\n\n### 5、浏览器测试\n\n![](https://images2018.cnblogs.com/blog/1049028/201803/1049028-20180327170739982-368374531.png)\n\n![](https://images2018.cnblogs.com/blog/1049028/201803/1049028-20180327170830831-1433469872.png)\n\n[github下载]: https://github.com/PHPMailer/PHPMailer\n","source":"_posts/php-email.md","raw":"---\ntitle: PHP扩展功能--发送邮件\ndate: 2018-04-16 13:38:54\ntags:\n  - email\ncategory:\n  - 【PHP相关】\n---\n\n### 1、下载 PHPMailer 源码\n\n[github 下载]\n（测试使用的是 5.2.2 版本）\n\n### 2、注册并登录网易邮箱\n\n（其他邮箱均可）【用于配置用户名和三方登录授权码，以及发送人邮箱地址】\n\n（1）开启 POP3 协议 定位到开启页面\n\n<!--more-->\n\n![](https://images2018.cnblogs.com/blog/1049028/201803/1049028-20180327171400339-1436550372.png)\n\n（2）开启三方登录授权，并获取授权码（一串字符串）\n![](https://images2018.cnblogs.com/blog/1049028/201803/1049028-20180327171327537-1436075640.png)\n\n### 3、自定义封装邮件类\n\n（1）核心文件（进行重命名）：\n\n![](https://images2018.cnblogs.com/blog/1049028/201803/1049028-20180327163714902-341662125.png)\n\n```ini\nclass.phpmailer.php   ====》  PHPMailer.class.php\n\nclass.pop3.php  ====》POP3.class.php\n\nclass.smtp.php  ====》SMTP.class.php\n```\n\n并拷贝到 PHPMailer 目录下\n![](https://images2018.cnblogs.com/blog/1049028/201803/1049028-20180327163714902-341662125.png)\n（2）邮件发送类封装：\n\n```php\n<?php\nrequire_once 'PHPMailer/PHPMailer.class.php';\nrequire_once 'PHPMailer/SMTP.class.php';\nrequire_once 'PHPMailer/POP3.class.php';\n\nclass Email\n{\n    public static function sendMail($title,$content,$to)\n    {\n        $mail = new PHPMailer();\n        $mail -> IsSMTP();                       //告诉服务器使用smtp协议发送\n        $mail -> SMTPAuth = true;                //开启SMTP授权\n        $mail -> Host = 'smtp.163.com';          //告诉我们的服务器使用163的smtp服务器发送\n        $mail -> From = 'Muse_girlo@163.com';    //发送者的邮件地址\n        $mail -> FromName = 'Muse_girlo';        //发送邮件的用户昵称\n        $mail -> Username = 'Muse_girlo';        //登录到邮箱的用户名\n        $mail -> Password = 'xxxxxxxxxx';        //第三方登录的授权码，在邮箱里面设置\n        //编辑发送的邮件内容\n        $mail -> IsHTML(true);            //发送的内容使用html编写\n        $mail -> CharSet = 'utf-8';                //设置发送内容的编码\n        $mail -> Subject = $title;                //设置邮件的主题、标题\n        $mail -> MsgHTML($content);                //发送的邮件内容主体\n        //告诉服务器接收人的邮件地址\n        $mail -> AddAddress($to);\n        //调用send方法，执行发送\n        $result = $mail -> Send();\n        if($result){\n            return true;\n        }else{\n            return $mail -> ErrorInfo;\n        }\n    }\n}\n```\n\n### 4、发送邮件，调用邮件发送类\n\n```php\n$title = \"测试邮件发送功能\";\n$content = \"脚踏实地，坚持学习！\";\n$to = \"zqunor@foxmail.com\";\n\n$res = Email::sendMail($title, $content, $to);\nif ($res) {\n    echo '邮件发送成功！';\n    } else {\n    echo \"邮件发送失败！\";\n}\n```\n\n### 5、浏览器测试\n\n![](https://images2018.cnblogs.com/blog/1049028/201803/1049028-20180327170739982-368374531.png)\n\n![](https://images2018.cnblogs.com/blog/1049028/201803/1049028-20180327170830831-1433469872.png)\n\n[github下载]: https://github.com/PHPMailer/PHPMailer\n","slug":"php-email","published":1,"updated":"2019-05-12T15:55:41.403Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c40l002g2wuuu9q5cciw","content":"<h3 id=\"1-下载-phpmailer-源码\"><a class=\"markdownIt-Anchor\" href=\"#1-下载-phpmailer-源码\"></a> 1、下载 PHPMailer 源码</h3>\n<p>[github 下载]<br>\n（测试使用的是 5.2.2 版本）</p>\n<h3 id=\"2-注册并登录网易邮箱\"><a class=\"markdownIt-Anchor\" href=\"#2-注册并登录网易邮箱\"></a> 2、注册并登录网易邮箱</h3>\n<p>（其他邮箱均可）【用于配置用户名和三方登录授权码，以及发送人邮箱地址】</p>\n<p>（1）开启 POP3 协议 定位到开启页面</p>\n<a id=\"more\"></a>\n<p><img src=\"https://images2018.cnblogs.com/blog/1049028/201803/1049028-20180327171400339-1436550372.png\" alt=\"\"></p>\n<p>（2）开启三方登录授权，并获取授权码（一串字符串）<br>\n<img src=\"https://images2018.cnblogs.com/blog/1049028/201803/1049028-20180327171327537-1436075640.png\" alt=\"\"></p>\n<h3 id=\"3-自定义封装邮件类\"><a class=\"markdownIt-Anchor\" href=\"#3-自定义封装邮件类\"></a> 3、自定义封装邮件类</h3>\n<p>（1）核心文件（进行重命名）：</p>\n<p><img src=\"https://images2018.cnblogs.com/blog/1049028/201803/1049028-20180327163714902-341662125.png\" alt=\"\"></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class.phpmailer.php   ====》  PHPMailer.class.php</span><br><span class=\"line\"></span><br><span class=\"line\">class.pop3.php  ====》POP3.class.php</span><br><span class=\"line\"></span><br><span class=\"line\">class.smtp.php  ====》SMTP.class.php</span><br></pre></td></tr></table></figure>\n<p>并拷贝到 PHPMailer 目录下<br>\n<img src=\"https://images2018.cnblogs.com/blog/1049028/201803/1049028-20180327163714902-341662125.png\" alt=\"\"><br>\n（2）邮件发送类封装：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">require_once</span> <span class=\"string\">'PHPMailer/PHPMailer.class.php'</span>;</span><br><span class=\"line\"><span class=\"keyword\">require_once</span> <span class=\"string\">'PHPMailer/SMTP.class.php'</span>;</span><br><span class=\"line\"><span class=\"keyword\">require_once</span> <span class=\"string\">'PHPMailer/POP3.class.php'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Email</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendMail</span><span class=\"params\">($title,$content,$to)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $mail = <span class=\"keyword\">new</span> PHPMailer();</span><br><span class=\"line\">        $mail -&gt; IsSMTP();                       <span class=\"comment\">//告诉服务器使用smtp协议发送</span></span><br><span class=\"line\">        $mail -&gt; SMTPAuth = <span class=\"keyword\">true</span>;                <span class=\"comment\">//开启SMTP授权</span></span><br><span class=\"line\">        $mail -&gt; Host = <span class=\"string\">'smtp.163.com'</span>;          <span class=\"comment\">//告诉我们的服务器使用163的smtp服务器发送</span></span><br><span class=\"line\">        $mail -&gt; From = <span class=\"string\">'Muse_girlo@163.com'</span>;    <span class=\"comment\">//发送者的邮件地址</span></span><br><span class=\"line\">        $mail -&gt; FromName = <span class=\"string\">'Muse_girlo'</span>;        <span class=\"comment\">//发送邮件的用户昵称</span></span><br><span class=\"line\">        $mail -&gt; Username = <span class=\"string\">'Muse_girlo'</span>;        <span class=\"comment\">//登录到邮箱的用户名</span></span><br><span class=\"line\">        $mail -&gt; Password = <span class=\"string\">'xxxxxxxxxx'</span>;        <span class=\"comment\">//第三方登录的授权码，在邮箱里面设置</span></span><br><span class=\"line\">        <span class=\"comment\">//编辑发送的邮件内容</span></span><br><span class=\"line\">        $mail -&gt; IsHTML(<span class=\"keyword\">true</span>);            <span class=\"comment\">//发送的内容使用html编写</span></span><br><span class=\"line\">        $mail -&gt; CharSet = <span class=\"string\">'utf-8'</span>;                <span class=\"comment\">//设置发送内容的编码</span></span><br><span class=\"line\">        $mail -&gt; Subject = $title;                <span class=\"comment\">//设置邮件的主题、标题</span></span><br><span class=\"line\">        $mail -&gt; MsgHTML($content);                <span class=\"comment\">//发送的邮件内容主体</span></span><br><span class=\"line\">        <span class=\"comment\">//告诉服务器接收人的邮件地址</span></span><br><span class=\"line\">        $mail -&gt; AddAddress($to);</span><br><span class=\"line\">        <span class=\"comment\">//调用send方法，执行发送</span></span><br><span class=\"line\">        $result = $mail -&gt; Send();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>($result)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> $mail -&gt; ErrorInfo;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-发送邮件调用邮件发送类\"><a class=\"markdownIt-Anchor\" href=\"#4-发送邮件调用邮件发送类\"></a> 4、发送邮件，调用邮件发送类</h3>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$title = <span class=\"string\">\"测试邮件发送功能\"</span>;</span><br><span class=\"line\">$content = <span class=\"string\">\"脚踏实地，坚持学习！\"</span>;</span><br><span class=\"line\">$to = <span class=\"string\">\"zqunor@foxmail.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">$res = Email::sendMail($title, $content, $to);</span><br><span class=\"line\"><span class=\"keyword\">if</span> ($res) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'邮件发送成功！'</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"邮件发送失败！\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-浏览器测试\"><a class=\"markdownIt-Anchor\" href=\"#5-浏览器测试\"></a> 5、浏览器测试</h3>\n<p><img src=\"https://images2018.cnblogs.com/blog/1049028/201803/1049028-20180327170739982-368374531.png\" alt=\"\"></p>\n<p><img src=\"https://images2018.cnblogs.com/blog/1049028/201803/1049028-20180327170830831-1433469872.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"1-下载-phpmailer-源码\"><a class=\"markdownIt-Anchor\" href=\"#1-下载-phpmailer-源码\"></a> 1、下载 PHPMailer 源码</h3>\n<p>[github 下载]<br>\n（测试使用的是 5.2.2 版本）</p>\n<h3 id=\"2-注册并登录网易邮箱\"><a class=\"markdownIt-Anchor\" href=\"#2-注册并登录网易邮箱\"></a> 2、注册并登录网易邮箱</h3>\n<p>（其他邮箱均可）【用于配置用户名和三方登录授权码，以及发送人邮箱地址】</p>\n<p>（1）开启 POP3 协议 定位到开启页面</p>","more":"<p><img src=\"https://images2018.cnblogs.com/blog/1049028/201803/1049028-20180327171400339-1436550372.png\" alt=\"\"></p>\n<p>（2）开启三方登录授权，并获取授权码（一串字符串）<br>\n<img src=\"https://images2018.cnblogs.com/blog/1049028/201803/1049028-20180327171327537-1436075640.png\" alt=\"\"></p>\n<h3 id=\"3-自定义封装邮件类\"><a class=\"markdownIt-Anchor\" href=\"#3-自定义封装邮件类\"></a> 3、自定义封装邮件类</h3>\n<p>（1）核心文件（进行重命名）：</p>\n<p><img src=\"https://images2018.cnblogs.com/blog/1049028/201803/1049028-20180327163714902-341662125.png\" alt=\"\"></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class.phpmailer.php   ====》  PHPMailer.class.php</span><br><span class=\"line\"></span><br><span class=\"line\">class.pop3.php  ====》POP3.class.php</span><br><span class=\"line\"></span><br><span class=\"line\">class.smtp.php  ====》SMTP.class.php</span><br></pre></td></tr></table></figure>\n<p>并拷贝到 PHPMailer 目录下<br>\n<img src=\"https://images2018.cnblogs.com/blog/1049028/201803/1049028-20180327163714902-341662125.png\" alt=\"\"><br>\n（2）邮件发送类封装：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">require_once</span> <span class=\"string\">'PHPMailer/PHPMailer.class.php'</span>;</span><br><span class=\"line\"><span class=\"keyword\">require_once</span> <span class=\"string\">'PHPMailer/SMTP.class.php'</span>;</span><br><span class=\"line\"><span class=\"keyword\">require_once</span> <span class=\"string\">'PHPMailer/POP3.class.php'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Email</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendMail</span><span class=\"params\">($title,$content,$to)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $mail = <span class=\"keyword\">new</span> PHPMailer();</span><br><span class=\"line\">        $mail -&gt; IsSMTP();                       <span class=\"comment\">//告诉服务器使用smtp协议发送</span></span><br><span class=\"line\">        $mail -&gt; SMTPAuth = <span class=\"keyword\">true</span>;                <span class=\"comment\">//开启SMTP授权</span></span><br><span class=\"line\">        $mail -&gt; Host = <span class=\"string\">'smtp.163.com'</span>;          <span class=\"comment\">//告诉我们的服务器使用163的smtp服务器发送</span></span><br><span class=\"line\">        $mail -&gt; From = <span class=\"string\">'Muse_girlo@163.com'</span>;    <span class=\"comment\">//发送者的邮件地址</span></span><br><span class=\"line\">        $mail -&gt; FromName = <span class=\"string\">'Muse_girlo'</span>;        <span class=\"comment\">//发送邮件的用户昵称</span></span><br><span class=\"line\">        $mail -&gt; Username = <span class=\"string\">'Muse_girlo'</span>;        <span class=\"comment\">//登录到邮箱的用户名</span></span><br><span class=\"line\">        $mail -&gt; Password = <span class=\"string\">'xxxxxxxxxx'</span>;        <span class=\"comment\">//第三方登录的授权码，在邮箱里面设置</span></span><br><span class=\"line\">        <span class=\"comment\">//编辑发送的邮件内容</span></span><br><span class=\"line\">        $mail -&gt; IsHTML(<span class=\"keyword\">true</span>);            <span class=\"comment\">//发送的内容使用html编写</span></span><br><span class=\"line\">        $mail -&gt; CharSet = <span class=\"string\">'utf-8'</span>;                <span class=\"comment\">//设置发送内容的编码</span></span><br><span class=\"line\">        $mail -&gt; Subject = $title;                <span class=\"comment\">//设置邮件的主题、标题</span></span><br><span class=\"line\">        $mail -&gt; MsgHTML($content);                <span class=\"comment\">//发送的邮件内容主体</span></span><br><span class=\"line\">        <span class=\"comment\">//告诉服务器接收人的邮件地址</span></span><br><span class=\"line\">        $mail -&gt; AddAddress($to);</span><br><span class=\"line\">        <span class=\"comment\">//调用send方法，执行发送</span></span><br><span class=\"line\">        $result = $mail -&gt; Send();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>($result)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> $mail -&gt; ErrorInfo;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-发送邮件调用邮件发送类\"><a class=\"markdownIt-Anchor\" href=\"#4-发送邮件调用邮件发送类\"></a> 4、发送邮件，调用邮件发送类</h3>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$title = <span class=\"string\">\"测试邮件发送功能\"</span>;</span><br><span class=\"line\">$content = <span class=\"string\">\"脚踏实地，坚持学习！\"</span>;</span><br><span class=\"line\">$to = <span class=\"string\">\"zqunor@foxmail.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">$res = Email::sendMail($title, $content, $to);</span><br><span class=\"line\"><span class=\"keyword\">if</span> ($res) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'邮件发送成功！'</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"邮件发送失败！\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-浏览器测试\"><a class=\"markdownIt-Anchor\" href=\"#5-浏览器测试\"></a> 5、浏览器测试</h3>\n<p><img src=\"https://images2018.cnblogs.com/blog/1049028/201803/1049028-20180327170739982-368374531.png\" alt=\"\"></p>\n<p><img src=\"https://images2018.cnblogs.com/blog/1049028/201803/1049028-20180327170830831-1433469872.png\" alt=\"\"></p>"},{"title":"【实战】Tp5+小程序(一)--数据库访问与ORM","date":"2018-07-01T08:26:58.000Z","_content":"\nThinkPHP5 从入门到深入学习，结合实战项目深入理解 ThinkPHP5 的特性和使用方法，了解 ThinkPHP5 的数据库访问和 ORM 思想，学习使用查询构造器、日志以及初步了解异常处理机制。\n\n<!--more-->\n\n## 7.2 从一个错误了解 Exception 的继承关系\n\n1.将`Exception`修改为全局`Exception`基类，而不是`think\\Exception`\n\n    `think\\Exception => \\Exception =>  Throwable`\n    `HttpException => \\RuntimeException =>  \\Exception =>  Throwable`\n\n**当访问的控制器不存在、url 错误时，属于 HttpException 异常。** 而原先定义的`render()`和`recordErrorLog()`方法要求接收的参数类型是`think\\Exception`，由于`HttpException`不是继承于`think\\Exception`，不能转化为`think\\Exception`，所以会报错。\n\n> 解决：使用全局 Exception 基类后，既支持 HttpException，又支持 think\\Exception。子类可以自动被转化为父类的类型。\n> Exception 基类是所有异常类的基类。\n\n2.**补充**：PHPStrom 快捷键：\n\n- ctrl+alt+O => 快速删除没有 use 的类\n\n## 7.3 TP5 数据库中间层架构解析\n\n![tp5数据库架构](https://ws1.sinaimg.cn/large/005EgYNMgy1fucheex8nsj30g10cxt9l.jpg)\n\n## 7.4 查询构造器一\n\n1、为什么不使用原生的查询语句而使用查询构造器？\n\n- 简洁方便\n- 对不同数据库的操作进行了封装，使用统一的数据库操作标准\n\n2、对查询构造器的理解\n\n- 查询构造器不仅仅是对数据库进行读操作，还包括数据库的写操作\n- 查询构造器仅仅是语法，最终都是通过 Builder 翻译成 SQL 语句来执行\n\n## 7.5 查询构造器二\n\n1.查询语句 = 链式方法 + 执行方法\n\n2.链式方法：\n\n- where\n- whereOr\n- field\n- ...\n\n只会返回 Query 对象，不是查询结果\n\n3.执行方法：\n\n- find\n- select\n- update\n- delete\n- insert\n\n  4.**在执行方法调用前，查询状态是保留的，直到调用执行方法后，状态才会被清除**\n\n## 7.6 查询构造器三\n\n1.链式方法说明（where）：\n\n> where('字段名','表达式','查询条件')\n\n2.三种实现方式：\n\n- 表达式\n\n- 数组法（不够灵活，且存在一定的安全问题）\n\n- 闭包（最灵活）\n\n```php\n// 通过use来使用外部的数据\nwhere(function ($query) use ($id){\n    $query->where('banner_id', '=', $id)\n})\n```\n\n## 7.7 开启 SQL 日志记录\n\n1.database.php =》 debug=true\n\n2.config.php =》 app_debug=true\n\n3.config.php =》 log =》 level =》sql\n\n```php\n'log'                    => [\n     日志记录方式，内置 file socket 支持扩展\n    'type'  => 'File',\n     日志保存目录\n    'path'  => LOG_PATH,\n     日志记录级别\n    'level' => ['error', 'sql'],\n],\n```\n\n不在配置文件中开启日志\n\n`ExceptionHandler`=>`recordErrorLog` 方法中开启日志仅仅在发生异常时写入。\n\n所以对于全局的情况，将日志手动添加到入口文件中，对所有调用都开启 sql 日志\n\n？？这样和在配置文件中开启日志有什么区别？\n\n## 7-8 ORM 与模型\n\n1.ORM 理解：\n\nORM = `Object Relationship Map`\n\n对象关系映射:将每张数据表看作是一个对象\n\n2.模型（TP5 模型）--ORM 实现的具体机制\n=> `业务的集合= 数据库查询+业务逻辑+...`\n\n【注】模型与数据表不是一一对应的关系，简单的业务逻辑看上去是一张表对应一个模型，但复杂的业务逻辑（需要分层）可能是横跨多个表。\n\n模型不仅仅只是 model 这一层，复杂的业务还可以继续划分，tp5 中有 `model`(数据层，细)，`service`(服务层，粗)，`logic`(逻辑层)\n\n## 7-9 初识模型\n\n1.`model/Banner.php` 继承 Model 类之后，就成为了模型，就可以使用模型类已经封装好的方法(`get`)，而不用自定义方法(`getBannerById`)。\n\n```php\n$banner = BannerModel::getBannerById($id);\n // => 返回数组\n //等价于\n$banner = BannerModel::get($id);\n// => 返回对象，便于处理查询结果\n```\n\n2.tp5 自动将对象序列化，序列化的格式根据配置文件中的配置项`default_return_type`转化为相应的格式。\n\n```php\n// config.php\n'default_return_type' => 'html'\n```\n\n3.自定义模型方法(`getBannerById`)调用的是指定的数据表，而模型类自动的方法(`get`)调用的是模型类名对应的数据表。\n","source":"_posts/php-practice-wx-tp5-1.md","raw":"---\ntitle: 【实战】tp5+小程序(一)--数据库访问与ORM\ndate: 2018-07-1 16:26:58\ntags:\n  - thinkphp5\n  - 微信小程序\ncategory:\n  - 【PHP框架】\n---\n\nThinkPHP5 从入门到深入学习，结合实战项目深入理解 ThinkPHP5 的特性和使用方法，了解 ThinkPHP5 的数据库访问和 ORM 思想，学习使用查询构造器、日志以及初步了解异常处理机制。\n\n<!--more-->\n\n## 7.2 从一个错误了解 Exception 的继承关系\n\n1.将`Exception`修改为全局`Exception`基类，而不是`think\\Exception`\n\n    `think\\Exception => \\Exception =>  Throwable`\n    `HttpException => \\RuntimeException =>  \\Exception =>  Throwable`\n\n**当访问的控制器不存在、url 错误时，属于 HttpException 异常。** 而原先定义的`render()`和`recordErrorLog()`方法要求接收的参数类型是`think\\Exception`，由于`HttpException`不是继承于`think\\Exception`，不能转化为`think\\Exception`，所以会报错。\n\n> 解决：使用全局 Exception 基类后，既支持 HttpException，又支持 think\\Exception。子类可以自动被转化为父类的类型。\n> Exception 基类是所有异常类的基类。\n\n2.**补充**：PHPStrom 快捷键：\n\n- ctrl+alt+O => 快速删除没有 use 的类\n\n## 7.3 TP5 数据库中间层架构解析\n\n![tp5数据库架构](https://ws1.sinaimg.cn/large/005EgYNMgy1fucheex8nsj30g10cxt9l.jpg)\n\n## 7.4 查询构造器一\n\n1、为什么不使用原生的查询语句而使用查询构造器？\n\n- 简洁方便\n- 对不同数据库的操作进行了封装，使用统一的数据库操作标准\n\n2、对查询构造器的理解\n\n- 查询构造器不仅仅是对数据库进行读操作，还包括数据库的写操作\n- 查询构造器仅仅是语法，最终都是通过 Builder 翻译成 SQL 语句来执行\n\n## 7.5 查询构造器二\n\n1.查询语句 = 链式方法 + 执行方法\n\n2.链式方法：\n\n- where\n- whereOr\n- field\n- ...\n\n只会返回 Query 对象，不是查询结果\n\n3.执行方法：\n\n- find\n- select\n- update\n- delete\n- insert\n\n  4.**在执行方法调用前，查询状态是保留的，直到调用执行方法后，状态才会被清除**\n\n## 7.6 查询构造器三\n\n1.链式方法说明（where）：\n\n> where('字段名','表达式','查询条件')\n\n2.三种实现方式：\n\n- 表达式\n\n- 数组法（不够灵活，且存在一定的安全问题）\n\n- 闭包（最灵活）\n\n```php\n// 通过use来使用外部的数据\nwhere(function ($query) use ($id){\n    $query->where('banner_id', '=', $id)\n})\n```\n\n## 7.7 开启 SQL 日志记录\n\n1.database.php =》 debug=true\n\n2.config.php =》 app_debug=true\n\n3.config.php =》 log =》 level =》sql\n\n```php\n'log'                    => [\n     日志记录方式，内置 file socket 支持扩展\n    'type'  => 'File',\n     日志保存目录\n    'path'  => LOG_PATH,\n     日志记录级别\n    'level' => ['error', 'sql'],\n],\n```\n\n不在配置文件中开启日志\n\n`ExceptionHandler`=>`recordErrorLog` 方法中开启日志仅仅在发生异常时写入。\n\n所以对于全局的情况，将日志手动添加到入口文件中，对所有调用都开启 sql 日志\n\n？？这样和在配置文件中开启日志有什么区别？\n\n## 7-8 ORM 与模型\n\n1.ORM 理解：\n\nORM = `Object Relationship Map`\n\n对象关系映射:将每张数据表看作是一个对象\n\n2.模型（TP5 模型）--ORM 实现的具体机制\n=> `业务的集合= 数据库查询+业务逻辑+...`\n\n【注】模型与数据表不是一一对应的关系，简单的业务逻辑看上去是一张表对应一个模型，但复杂的业务逻辑（需要分层）可能是横跨多个表。\n\n模型不仅仅只是 model 这一层，复杂的业务还可以继续划分，tp5 中有 `model`(数据层，细)，`service`(服务层，粗)，`logic`(逻辑层)\n\n## 7-9 初识模型\n\n1.`model/Banner.php` 继承 Model 类之后，就成为了模型，就可以使用模型类已经封装好的方法(`get`)，而不用自定义方法(`getBannerById`)。\n\n```php\n$banner = BannerModel::getBannerById($id);\n // => 返回数组\n //等价于\n$banner = BannerModel::get($id);\n// => 返回对象，便于处理查询结果\n```\n\n2.tp5 自动将对象序列化，序列化的格式根据配置文件中的配置项`default_return_type`转化为相应的格式。\n\n```php\n// config.php\n'default_return_type' => 'html'\n```\n\n3.自定义模型方法(`getBannerById`)调用的是指定的数据表，而模型类自动的方法(`get`)调用的是模型类名对应的数据表。\n","slug":"php-practice-wx-tp5-1","published":1,"updated":"2019-05-12T15:48:57.864Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c40n002k2wuu0qfe311b","content":"<p>ThinkPHP5 从入门到深入学习，结合实战项目深入理解 ThinkPHP5 的特性和使用方法，了解 ThinkPHP5 的数据库访问和 ORM 思想，学习使用查询构造器、日志以及初步了解异常处理机制。</p>\n<a id=\"more\"></a>\n<h2 id=\"72-从一个错误了解-exception-的继承关系\"><a class=\"markdownIt-Anchor\" href=\"#72-从一个错误了解-exception-的继承关系\"></a> 7.2 从一个错误了解 Exception 的继承关系</h2>\n<p>1.将<code>Exception</code>修改为全局<code>Exception</code>基类，而不是<code>think\\Exception</code></p>\n<pre><code>`think\\Exception =&gt; \\Exception =&gt;  Throwable`\n`HttpException =&gt; \\RuntimeException =&gt;  \\Exception =&gt;  Throwable`\n</code></pre>\n<p><strong>当访问的控制器不存在、url 错误时，属于 HttpException 异常。</strong> 而原先定义的<code>render()</code>和<code>recordErrorLog()</code>方法要求接收的参数类型是<code>think\\Exception</code>，由于<code>HttpException</code>不是继承于<code>think\\Exception</code>，不能转化为<code>think\\Exception</code>，所以会报错。</p>\n<blockquote>\n<p>解决：使用全局 Exception 基类后，既支持 HttpException，又支持 think\\Exception。子类可以自动被转化为父类的类型。<br>\nException 基类是所有异常类的基类。</p>\n</blockquote>\n<p>2.<strong>补充</strong>：PHPStrom 快捷键：</p>\n<ul>\n<li>ctrl+alt+O =&gt; 快速删除没有 use 的类</li>\n</ul>\n<h2 id=\"73-tp5-数据库中间层架构解析\"><a class=\"markdownIt-Anchor\" href=\"#73-tp5-数据库中间层架构解析\"></a> 7.3 TP5 数据库中间层架构解析</h2>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fucheex8nsj30g10cxt9l.jpg\" alt=\"tp5数据库架构\"></p>\n<h2 id=\"74-查询构造器一\"><a class=\"markdownIt-Anchor\" href=\"#74-查询构造器一\"></a> 7.4 查询构造器一</h2>\n<p>1、为什么不使用原生的查询语句而使用查询构造器？</p>\n<ul>\n<li>简洁方便</li>\n<li>对不同数据库的操作进行了封装，使用统一的数据库操作标准</li>\n</ul>\n<p>2、对查询构造器的理解</p>\n<ul>\n<li>查询构造器不仅仅是对数据库进行读操作，还包括数据库的写操作</li>\n<li>查询构造器仅仅是语法，最终都是通过 Builder 翻译成 SQL 语句来执行</li>\n</ul>\n<h2 id=\"75-查询构造器二\"><a class=\"markdownIt-Anchor\" href=\"#75-查询构造器二\"></a> 7.5 查询构造器二</h2>\n<p>1.查询语句 = 链式方法 + 执行方法</p>\n<p>2.链式方法：</p>\n<ul>\n<li>where</li>\n<li>whereOr</li>\n<li>field</li>\n<li>…</li>\n</ul>\n<p>只会返回 Query 对象，不是查询结果</p>\n<p>3.执行方法：</p>\n<ul>\n<li>\n<p>find</p>\n</li>\n<li>\n<p>select</p>\n</li>\n<li>\n<p>update</p>\n</li>\n<li>\n<p>delete</p>\n</li>\n<li>\n<p>insert</p>\n<p>4.<strong>在执行方法调用前，查询状态是保留的，直到调用执行方法后，状态才会被清除</strong></p>\n</li>\n</ul>\n<h2 id=\"76-查询构造器三\"><a class=\"markdownIt-Anchor\" href=\"#76-查询构造器三\"></a> 7.6 查询构造器三</h2>\n<p>1.链式方法说明（where）：</p>\n<blockquote>\n<p>where(‘字段名’,‘表达式’,‘查询条件’)</p>\n</blockquote>\n<p>2.三种实现方式：</p>\n<ul>\n<li>\n<p>表达式</p>\n</li>\n<li>\n<p>数组法（不够灵活，且存在一定的安全问题）</p>\n</li>\n<li>\n<p>闭包（最灵活）</p>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过use来使用外部的数据</span></span><br><span class=\"line\">where(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($query)</span> <span class=\"title\">use</span> <span class=\"params\">($id)</span></span>&#123;</span><br><span class=\"line\">    $query-&gt;where(<span class=\"string\">'banner_id'</span>, <span class=\"string\">'='</span>, $id)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"77-开启-sql-日志记录\"><a class=\"markdownIt-Anchor\" href=\"#77-开启-sql-日志记录\"></a> 7.7 开启 SQL 日志记录</h2>\n<p>1.database.php =》 debug=true</p>\n<p>2.config.php =》 app_debug=true</p>\n<p>3.config.php =》 log =》 level =》sql</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'log'</span>                    =&gt; [</span><br><span class=\"line\">     日志记录方式，内置 file socket 支持扩展</span><br><span class=\"line\">    <span class=\"string\">'type'</span>  =&gt; <span class=\"string\">'File'</span>,</span><br><span class=\"line\">     日志保存目录</span><br><span class=\"line\">    <span class=\"string\">'path'</span>  =&gt; LOG_PATH,</span><br><span class=\"line\">     日志记录级别</span><br><span class=\"line\">    <span class=\"string\">'level'</span> =&gt; [<span class=\"string\">'error'</span>, <span class=\"string\">'sql'</span>],</span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n<p>不在配置文件中开启日志</p>\n<p><code>ExceptionHandler</code>=&gt;<code>recordErrorLog</code> 方法中开启日志仅仅在发生异常时写入。</p>\n<p>所以对于全局的情况，将日志手动添加到入口文件中，对所有调用都开启 sql 日志</p>\n<p>？？这样和在配置文件中开启日志有什么区别？</p>\n<h2 id=\"7-8-orm-与模型\"><a class=\"markdownIt-Anchor\" href=\"#7-8-orm-与模型\"></a> 7-8 ORM 与模型</h2>\n<p>1.ORM 理解：</p>\n<p>ORM = <code>Object Relationship Map</code></p>\n<p>对象关系映射:将每张数据表看作是一个对象</p>\n<p>2.模型（TP5 模型）–ORM 实现的具体机制<br>\n=&gt; <code>业务的集合= 数据库查询+业务逻辑+...</code></p>\n<p>【注】模型与数据表不是一一对应的关系，简单的业务逻辑看上去是一张表对应一个模型，但复杂的业务逻辑（需要分层）可能是横跨多个表。</p>\n<p>模型不仅仅只是 model 这一层，复杂的业务还可以继续划分，tp5 中有 <code>model</code>(数据层，细)，<code>service</code>(服务层，粗)，<code>logic</code>(逻辑层)</p>\n<h2 id=\"7-9-初识模型\"><a class=\"markdownIt-Anchor\" href=\"#7-9-初识模型\"></a> 7-9 初识模型</h2>\n<p>1.<code>model/Banner.php</code> 继承 Model 类之后，就成为了模型，就可以使用模型类已经封装好的方法(<code>get</code>)，而不用自定义方法(<code>getBannerById</code>)。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$banner = BannerModel::getBannerById($id);</span><br><span class=\"line\"> <span class=\"comment\">// =&gt; 返回数组</span></span><br><span class=\"line\"> <span class=\"comment\">//等价于</span></span><br><span class=\"line\">$banner = BannerModel::get($id);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 返回对象，便于处理查询结果</span></span><br></pre></td></tr></table></figure>\n<p>2.tp5 自动将对象序列化，序列化的格式根据配置文件中的配置项<code>default_return_type</code>转化为相应的格式。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// config.php</span></span><br><span class=\"line\"><span class=\"string\">'default_return_type'</span> =&gt; <span class=\"string\">'html'</span></span><br></pre></td></tr></table></figure>\n<p>3.自定义模型方法(<code>getBannerById</code>)调用的是指定的数据表，而模型类自动的方法(<code>get</code>)调用的是模型类名对应的数据表。</p>\n","site":{"data":{}},"excerpt":"<p>ThinkPHP5 从入门到深入学习，结合实战项目深入理解 ThinkPHP5 的特性和使用方法，了解 ThinkPHP5 的数据库访问和 ORM 思想，学习使用查询构造器、日志以及初步了解异常处理机制。</p>","more":"<h2 id=\"72-从一个错误了解-exception-的继承关系\"><a class=\"markdownIt-Anchor\" href=\"#72-从一个错误了解-exception-的继承关系\"></a> 7.2 从一个错误了解 Exception 的继承关系</h2>\n<p>1.将<code>Exception</code>修改为全局<code>Exception</code>基类，而不是<code>think\\Exception</code></p>\n<pre><code>`think\\Exception =&gt; \\Exception =&gt;  Throwable`\n`HttpException =&gt; \\RuntimeException =&gt;  \\Exception =&gt;  Throwable`\n</code></pre>\n<p><strong>当访问的控制器不存在、url 错误时，属于 HttpException 异常。</strong> 而原先定义的<code>render()</code>和<code>recordErrorLog()</code>方法要求接收的参数类型是<code>think\\Exception</code>，由于<code>HttpException</code>不是继承于<code>think\\Exception</code>，不能转化为<code>think\\Exception</code>，所以会报错。</p>\n<blockquote>\n<p>解决：使用全局 Exception 基类后，既支持 HttpException，又支持 think\\Exception。子类可以自动被转化为父类的类型。<br>\nException 基类是所有异常类的基类。</p>\n</blockquote>\n<p>2.<strong>补充</strong>：PHPStrom 快捷键：</p>\n<ul>\n<li>ctrl+alt+O =&gt; 快速删除没有 use 的类</li>\n</ul>\n<h2 id=\"73-tp5-数据库中间层架构解析\"><a class=\"markdownIt-Anchor\" href=\"#73-tp5-数据库中间层架构解析\"></a> 7.3 TP5 数据库中间层架构解析</h2>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fucheex8nsj30g10cxt9l.jpg\" alt=\"tp5数据库架构\"></p>\n<h2 id=\"74-查询构造器一\"><a class=\"markdownIt-Anchor\" href=\"#74-查询构造器一\"></a> 7.4 查询构造器一</h2>\n<p>1、为什么不使用原生的查询语句而使用查询构造器？</p>\n<ul>\n<li>简洁方便</li>\n<li>对不同数据库的操作进行了封装，使用统一的数据库操作标准</li>\n</ul>\n<p>2、对查询构造器的理解</p>\n<ul>\n<li>查询构造器不仅仅是对数据库进行读操作，还包括数据库的写操作</li>\n<li>查询构造器仅仅是语法，最终都是通过 Builder 翻译成 SQL 语句来执行</li>\n</ul>\n<h2 id=\"75-查询构造器二\"><a class=\"markdownIt-Anchor\" href=\"#75-查询构造器二\"></a> 7.5 查询构造器二</h2>\n<p>1.查询语句 = 链式方法 + 执行方法</p>\n<p>2.链式方法：</p>\n<ul>\n<li>where</li>\n<li>whereOr</li>\n<li>field</li>\n<li>…</li>\n</ul>\n<p>只会返回 Query 对象，不是查询结果</p>\n<p>3.执行方法：</p>\n<ul>\n<li>\n<p>find</p>\n</li>\n<li>\n<p>select</p>\n</li>\n<li>\n<p>update</p>\n</li>\n<li>\n<p>delete</p>\n</li>\n<li>\n<p>insert</p>\n<p>4.<strong>在执行方法调用前，查询状态是保留的，直到调用执行方法后，状态才会被清除</strong></p>\n</li>\n</ul>\n<h2 id=\"76-查询构造器三\"><a class=\"markdownIt-Anchor\" href=\"#76-查询构造器三\"></a> 7.6 查询构造器三</h2>\n<p>1.链式方法说明（where）：</p>\n<blockquote>\n<p>where(‘字段名’,‘表达式’,‘查询条件’)</p>\n</blockquote>\n<p>2.三种实现方式：</p>\n<ul>\n<li>\n<p>表达式</p>\n</li>\n<li>\n<p>数组法（不够灵活，且存在一定的安全问题）</p>\n</li>\n<li>\n<p>闭包（最灵活）</p>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过use来使用外部的数据</span></span><br><span class=\"line\">where(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($query)</span> <span class=\"title\">use</span> <span class=\"params\">($id)</span></span>&#123;</span><br><span class=\"line\">    $query-&gt;where(<span class=\"string\">'banner_id'</span>, <span class=\"string\">'='</span>, $id)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"77-开启-sql-日志记录\"><a class=\"markdownIt-Anchor\" href=\"#77-开启-sql-日志记录\"></a> 7.7 开启 SQL 日志记录</h2>\n<p>1.database.php =》 debug=true</p>\n<p>2.config.php =》 app_debug=true</p>\n<p>3.config.php =》 log =》 level =》sql</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'log'</span>                    =&gt; [</span><br><span class=\"line\">     日志记录方式，内置 file socket 支持扩展</span><br><span class=\"line\">    <span class=\"string\">'type'</span>  =&gt; <span class=\"string\">'File'</span>,</span><br><span class=\"line\">     日志保存目录</span><br><span class=\"line\">    <span class=\"string\">'path'</span>  =&gt; LOG_PATH,</span><br><span class=\"line\">     日志记录级别</span><br><span class=\"line\">    <span class=\"string\">'level'</span> =&gt; [<span class=\"string\">'error'</span>, <span class=\"string\">'sql'</span>],</span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n<p>不在配置文件中开启日志</p>\n<p><code>ExceptionHandler</code>=&gt;<code>recordErrorLog</code> 方法中开启日志仅仅在发生异常时写入。</p>\n<p>所以对于全局的情况，将日志手动添加到入口文件中，对所有调用都开启 sql 日志</p>\n<p>？？这样和在配置文件中开启日志有什么区别？</p>\n<h2 id=\"7-8-orm-与模型\"><a class=\"markdownIt-Anchor\" href=\"#7-8-orm-与模型\"></a> 7-8 ORM 与模型</h2>\n<p>1.ORM 理解：</p>\n<p>ORM = <code>Object Relationship Map</code></p>\n<p>对象关系映射:将每张数据表看作是一个对象</p>\n<p>2.模型（TP5 模型）–ORM 实现的具体机制<br>\n=&gt; <code>业务的集合= 数据库查询+业务逻辑+...</code></p>\n<p>【注】模型与数据表不是一一对应的关系，简单的业务逻辑看上去是一张表对应一个模型，但复杂的业务逻辑（需要分层）可能是横跨多个表。</p>\n<p>模型不仅仅只是 model 这一层，复杂的业务还可以继续划分，tp5 中有 <code>model</code>(数据层，细)，<code>service</code>(服务层，粗)，<code>logic</code>(逻辑层)</p>\n<h2 id=\"7-9-初识模型\"><a class=\"markdownIt-Anchor\" href=\"#7-9-初识模型\"></a> 7-9 初识模型</h2>\n<p>1.<code>model/Banner.php</code> 继承 Model 类之后，就成为了模型，就可以使用模型类已经封装好的方法(<code>get</code>)，而不用自定义方法(<code>getBannerById</code>)。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$banner = BannerModel::getBannerById($id);</span><br><span class=\"line\"> <span class=\"comment\">// =&gt; 返回数组</span></span><br><span class=\"line\"> <span class=\"comment\">//等价于</span></span><br><span class=\"line\">$banner = BannerModel::get($id);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 返回对象，便于处理查询结果</span></span><br></pre></td></tr></table></figure>\n<p>2.tp5 自动将对象序列化，序列化的格式根据配置文件中的配置项<code>default_return_type</code>转化为相应的格式。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// config.php</span></span><br><span class=\"line\"><span class=\"string\">'default_return_type'</span> =&gt; <span class=\"string\">'html'</span></span><br></pre></td></tr></table></figure>\n<p>3.自定义模型方法(<code>getBannerById</code>)调用的是指定的数据表，而模型类自动的方法(<code>get</code>)调用的是模型类名对应的数据表。</p>"},{"title":"【TP5深入理解】控制器(三)--前置操作","date":"2018-08-07T12:26:33.000Z","_content":"\ntp5 框架的前置操作可以用于对某些方法进行通用的预处理，比如登录状态的判断[session 处理]、用户权限的卡控[cache/session 的处理]，通过控制器的前置操作，将公用代码进行封装，简化了调用流程[直接设定前置关系即可实现前置方法的自动调用]。\n\n<!--more-->\n\n## 基本用法\n\n### 使用示例：\n\n```php\nprotected $beforeActionList = [\n    'userBeforeAction1' => ['only' => 'function1NeedDoBeforeAction1, function2DoNeedBeforeAction1'],\n    'userBeforeAction2' => ['except' => 'function1NotNeedBeforeAction2, function2NotNeedBeforeAction2'],\n    'userBeforeAction3'\n];\n```\n\n### 使用说明：\n\n(1) `only` => 当调用 api 接口方法`function1NeedDoBeforeAction1()`和`function1NeedDoBeforeAction1`时，都会自动调用不公开[`protected`]的前置方法`userBeforeAction1()`，并且该前置方法只在访问这两个 api 方法时执行。\n\n(2) `except` => api 接口方法`function1NotNeedBeforeAction2()`和`function1NotNeedBeforeAction2()`时，不会执行前置方法`userBeforeAction2()`\n\n## 使用介绍\n\n> 可以为某个或者某些操作指定前置执行的操作方法，设置 beforeActionList 属性可以指定某个方法为其他方法的前置操作，数组键名为需要调用的前置方法名，无值的话为当前控制器下所有方法的前置方法。\n\n### 控制器类属性: $beforeActionList\n\n### 属性值： 键值对\n\n- 键：前置方法名\n- 值：前置方法作用域[键值对|无]\n\n  - 无值时： 对当前控制器所有 api 方法都执行前置\n  - 有值[键值对]：\n\n    - 键：\n      - except：除某些 api 方法执行前置\n      - only：只对某些 api 方法执行前置\n    - 值：需要进行前置操作的 api 方法 [当该项值为多个时，用半角,进行间隔]\n\n### 【注意点】：\n\n（1）由于 TP5 框架对 url 的处理是全部转化为小写，并且执行前置操作时，也是通过 url 中参数获取当前调用的 api 方法，并判断是否需要进行前置操作的，所以定义需要执行前置方法的 api 方法时，都需要使用小写[针对 TP5.0 版本]\n\n（2）前置方法的访问方式为`private`时，则无法调用。\n\n## 实现原理[源码阅读]\n\n### 框架类库\n\n基类控制器`thinkphp\\library\\think\\Controller.php`\n\n### 相关介绍\n\n(1) 属性名：`$beforeActionList`\n\n前置方法列表：\n\n```php\nprotected $beforeActionList = [];\n```\n\n(2) 构造方法：`__construc()`\n\n```php\n// 遍历前置方法列表，并对每个前置方法进行前置处理\nif ($this->beforeActionList) {\n    foreach ($this->beforeActionList as $method => $options) {\n        is_numeric($method) ?\n        $this->beforeAction($options) :\n        $this->beforeAction($method, $options);\n    }\n}\n```\n\n【逻辑分析】：\n\n- 判断前置数组的键是否为数值\n\n- 如果是数值，直接对前置方法键值对的值进行处理\n\n- 如果不是数值，则对每组前置关系进行处理\n\n### 实现方法：`beforeAction()`\n\n(1) 当**前置方法**[每组前置关系的键]是数值时 【键为数值的情况即 **该组前置关系** 没有指定前置方法的作用域，是对所有方法执行该前置方法】\n\n- 调用 -- `$this->beforeAction($options)`\n\n- 实际执行过程为\n\n```php\nprotected function beforeAction($options)\n{\n    call_user_func([$this, $options]);\n}\n```\n\n(2) 当**前置方法**[每组前置关系的键]不是数值时\n\n- 调用 -- `$this->beforeAction($method, $options)`\n\n- 完整执行过程为\n\n```php\nprotected function beforeAction($method, $options = [])\n{\n    if (isset($options['only'])) {\n        if (is_string($options['only'])) {\n            $options['only'] = explode(',', $options['only']);\n        }\n\n        if (!in_array($this->request->action(), $options['only'])) {\n            return;\n        }\n    } elseif (isset($options['except'])) {\n        if (is_string($options['except'])) {\n            $options['except'] = explode(',', $options['except']);\n        }\n\n        if (in_array($this->request->action(), $options['except'])) {\n            return;\n        }\n    }\n\n    call_user_func([$this, $method]);\n}\n```\n\n（3）函数 [[call_user_func](http://php.net/manual/en/function.call-user-func.php)]功能：把第一个参数作为回调函数调用\n\n- 参数说明：\n\n  当传入的参数为一个数组时，则将数组的\n\n  - 第一个元素作为 **类名** 或 **类的实例化对象**\n  - 第二个元素作为类的方法名 [一般方法和静态方法均可以]\n\n- 调用结果：\n\n  就是直接执行该类下的相应方法的结果\n\n[全程学习+笔记时长：100min]\n\n【声明】\n\n我的博客即将搬运同步至腾讯云+社区，邀请大家一同入驻：[https://cloud.tencent.com/developer/support-plan?invite_code=89fda9dsh3d0](https://cloud.tencent.com/developer/support-plan?invite_code=89fda9dsh3d0)\n","source":"_posts/php-tp5-controller3.md","raw":"---\ntitle: 【TP5深入理解】控制器(三)--前置操作\ndate: 2018-08-07 20:26:33\ntags:\n  - thinkphp5\ncategory:\n  - 【PHP框架】\n---\n\ntp5 框架的前置操作可以用于对某些方法进行通用的预处理，比如登录状态的判断[session 处理]、用户权限的卡控[cache/session 的处理]，通过控制器的前置操作，将公用代码进行封装，简化了调用流程[直接设定前置关系即可实现前置方法的自动调用]。\n\n<!--more-->\n\n## 基本用法\n\n### 使用示例：\n\n```php\nprotected $beforeActionList = [\n    'userBeforeAction1' => ['only' => 'function1NeedDoBeforeAction1, function2DoNeedBeforeAction1'],\n    'userBeforeAction2' => ['except' => 'function1NotNeedBeforeAction2, function2NotNeedBeforeAction2'],\n    'userBeforeAction3'\n];\n```\n\n### 使用说明：\n\n(1) `only` => 当调用 api 接口方法`function1NeedDoBeforeAction1()`和`function1NeedDoBeforeAction1`时，都会自动调用不公开[`protected`]的前置方法`userBeforeAction1()`，并且该前置方法只在访问这两个 api 方法时执行。\n\n(2) `except` => api 接口方法`function1NotNeedBeforeAction2()`和`function1NotNeedBeforeAction2()`时，不会执行前置方法`userBeforeAction2()`\n\n## 使用介绍\n\n> 可以为某个或者某些操作指定前置执行的操作方法，设置 beforeActionList 属性可以指定某个方法为其他方法的前置操作，数组键名为需要调用的前置方法名，无值的话为当前控制器下所有方法的前置方法。\n\n### 控制器类属性: $beforeActionList\n\n### 属性值： 键值对\n\n- 键：前置方法名\n- 值：前置方法作用域[键值对|无]\n\n  - 无值时： 对当前控制器所有 api 方法都执行前置\n  - 有值[键值对]：\n\n    - 键：\n      - except：除某些 api 方法执行前置\n      - only：只对某些 api 方法执行前置\n    - 值：需要进行前置操作的 api 方法 [当该项值为多个时，用半角,进行间隔]\n\n### 【注意点】：\n\n（1）由于 TP5 框架对 url 的处理是全部转化为小写，并且执行前置操作时，也是通过 url 中参数获取当前调用的 api 方法，并判断是否需要进行前置操作的，所以定义需要执行前置方法的 api 方法时，都需要使用小写[针对 TP5.0 版本]\n\n（2）前置方法的访问方式为`private`时，则无法调用。\n\n## 实现原理[源码阅读]\n\n### 框架类库\n\n基类控制器`thinkphp\\library\\think\\Controller.php`\n\n### 相关介绍\n\n(1) 属性名：`$beforeActionList`\n\n前置方法列表：\n\n```php\nprotected $beforeActionList = [];\n```\n\n(2) 构造方法：`__construc()`\n\n```php\n// 遍历前置方法列表，并对每个前置方法进行前置处理\nif ($this->beforeActionList) {\n    foreach ($this->beforeActionList as $method => $options) {\n        is_numeric($method) ?\n        $this->beforeAction($options) :\n        $this->beforeAction($method, $options);\n    }\n}\n```\n\n【逻辑分析】：\n\n- 判断前置数组的键是否为数值\n\n- 如果是数值，直接对前置方法键值对的值进行处理\n\n- 如果不是数值，则对每组前置关系进行处理\n\n### 实现方法：`beforeAction()`\n\n(1) 当**前置方法**[每组前置关系的键]是数值时 【键为数值的情况即 **该组前置关系** 没有指定前置方法的作用域，是对所有方法执行该前置方法】\n\n- 调用 -- `$this->beforeAction($options)`\n\n- 实际执行过程为\n\n```php\nprotected function beforeAction($options)\n{\n    call_user_func([$this, $options]);\n}\n```\n\n(2) 当**前置方法**[每组前置关系的键]不是数值时\n\n- 调用 -- `$this->beforeAction($method, $options)`\n\n- 完整执行过程为\n\n```php\nprotected function beforeAction($method, $options = [])\n{\n    if (isset($options['only'])) {\n        if (is_string($options['only'])) {\n            $options['only'] = explode(',', $options['only']);\n        }\n\n        if (!in_array($this->request->action(), $options['only'])) {\n            return;\n        }\n    } elseif (isset($options['except'])) {\n        if (is_string($options['except'])) {\n            $options['except'] = explode(',', $options['except']);\n        }\n\n        if (in_array($this->request->action(), $options['except'])) {\n            return;\n        }\n    }\n\n    call_user_func([$this, $method]);\n}\n```\n\n（3）函数 [[call_user_func](http://php.net/manual/en/function.call-user-func.php)]功能：把第一个参数作为回调函数调用\n\n- 参数说明：\n\n  当传入的参数为一个数组时，则将数组的\n\n  - 第一个元素作为 **类名** 或 **类的实例化对象**\n  - 第二个元素作为类的方法名 [一般方法和静态方法均可以]\n\n- 调用结果：\n\n  就是直接执行该类下的相应方法的结果\n\n[全程学习+笔记时长：100min]\n\n【声明】\n\n我的博客即将搬运同步至腾讯云+社区，邀请大家一同入驻：[https://cloud.tencent.com/developer/support-plan?invite_code=89fda9dsh3d0](https://cloud.tencent.com/developer/support-plan?invite_code=89fda9dsh3d0)\n","slug":"php-tp5-controller3","published":1,"updated":"2019-05-12T16:17:16.640Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c40p002n2wuuofawl999","content":"<p>tp5 框架的前置操作可以用于对某些方法进行通用的预处理，比如登录状态的判断[session 处理]、用户权限的卡控[cache/session 的处理]，通过控制器的前置操作，将公用代码进行封装，简化了调用流程[直接设定前置关系即可实现前置方法的自动调用]。</p>\n<a id=\"more\"></a>\n<h2 id=\"基本用法\"><a class=\"markdownIt-Anchor\" href=\"#基本用法\"></a> 基本用法</h2>\n<h3 id=\"使用示例\"><a class=\"markdownIt-Anchor\" href=\"#使用示例\"></a> 使用示例：</h3>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> $beforeActionList = [</span><br><span class=\"line\">    <span class=\"string\">'userBeforeAction1'</span> =&gt; [<span class=\"string\">'only'</span> =&gt; <span class=\"string\">'function1NeedDoBeforeAction1, function2DoNeedBeforeAction1'</span>],</span><br><span class=\"line\">    <span class=\"string\">'userBeforeAction2'</span> =&gt; [<span class=\"string\">'except'</span> =&gt; <span class=\"string\">'function1NotNeedBeforeAction2, function2NotNeedBeforeAction2'</span>],</span><br><span class=\"line\">    <span class=\"string\">'userBeforeAction3'</span></span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用说明\"><a class=\"markdownIt-Anchor\" href=\"#使用说明\"></a> 使用说明：</h3>\n<p>(1) <code>only</code> =&gt; 当调用 api 接口方法<code>function1NeedDoBeforeAction1()</code>和<code>function1NeedDoBeforeAction1</code>时，都会自动调用不公开[<code>protected</code>]的前置方法<code>userBeforeAction1()</code>，并且该前置方法只在访问这两个 api 方法时执行。</p>\n<p>(2) <code>except</code> =&gt; api 接口方法<code>function1NotNeedBeforeAction2()</code>和<code>function1NotNeedBeforeAction2()</code>时，不会执行前置方法<code>userBeforeAction2()</code></p>\n<h2 id=\"使用介绍\"><a class=\"markdownIt-Anchor\" href=\"#使用介绍\"></a> 使用介绍</h2>\n<blockquote>\n<p>可以为某个或者某些操作指定前置执行的操作方法，设置 beforeActionList 属性可以指定某个方法为其他方法的前置操作，数组键名为需要调用的前置方法名，无值的话为当前控制器下所有方法的前置方法。</p>\n</blockquote>\n<h3 id=\"控制器类属性-beforeactionlist\"><a class=\"markdownIt-Anchor\" href=\"#控制器类属性-beforeactionlist\"></a> 控制器类属性: $beforeActionList</h3>\n<h3 id=\"属性值-键值对\"><a class=\"markdownIt-Anchor\" href=\"#属性值-键值对\"></a> 属性值： 键值对</h3>\n<ul>\n<li>\n<p>键：前置方法名</p>\n</li>\n<li>\n<p>值：前置方法作用域[键值对|无]</p>\n<ul>\n<li>\n<p>无值时： 对当前控制器所有 api 方法都执行前置</p>\n</li>\n<li>\n<p>有值[键值对]：</p>\n<ul>\n<li>键：\n<ul>\n<li>except：除某些 api 方法执行前置</li>\n<li>only：只对某些 api 方法执行前置</li>\n</ul>\n</li>\n<li>值：需要进行前置操作的 api 方法 [当该项值为多个时，用半角,进行间隔]</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"注意点\"><a class=\"markdownIt-Anchor\" href=\"#注意点\"></a> 【注意点】：</h3>\n<p>（1）由于 TP5 框架对 url 的处理是全部转化为小写，并且执行前置操作时，也是通过 url 中参数获取当前调用的 api 方法，并判断是否需要进行前置操作的，所以定义需要执行前置方法的 api 方法时，都需要使用小写[针对 TP5.0 版本]</p>\n<p>（2）前置方法的访问方式为<code>private</code>时，则无法调用。</p>\n<h2 id=\"实现原理源码阅读\"><a class=\"markdownIt-Anchor\" href=\"#实现原理源码阅读\"></a> 实现原理[源码阅读]</h2>\n<h3 id=\"框架类库\"><a class=\"markdownIt-Anchor\" href=\"#框架类库\"></a> 框架类库</h3>\n<p>基类控制器<code>thinkphp\\library\\think\\Controller.php</code></p>\n<h3 id=\"相关介绍\"><a class=\"markdownIt-Anchor\" href=\"#相关介绍\"></a> 相关介绍</h3>\n<p>(1) 属性名：<code>$beforeActionList</code></p>\n<p>前置方法列表：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> $beforeActionList = [];</span><br></pre></td></tr></table></figure>\n<p>(2) 构造方法：<code>__construc()</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 遍历前置方法列表，并对每个前置方法进行前置处理</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;beforeActionList) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;beforeActionList <span class=\"keyword\">as</span> $method =&gt; $options) &#123;</span><br><span class=\"line\">        is_numeric($method) ?</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;beforeAction($options) :</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;beforeAction($method, $options);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>【逻辑分析】：</p>\n<ul>\n<li>\n<p>判断前置数组的键是否为数值</p>\n</li>\n<li>\n<p>如果是数值，直接对前置方法键值对的值进行处理</p>\n</li>\n<li>\n<p>如果不是数值，则对每组前置关系进行处理</p>\n</li>\n</ul>\n<h3 id=\"实现方法beforeaction\"><a class=\"markdownIt-Anchor\" href=\"#实现方法beforeaction\"></a> 实现方法：<code>beforeAction()</code></h3>\n<p>(1) 当<strong>前置方法</strong>[每组前置关系的键]是数值时 【键为数值的情况即 <strong>该组前置关系</strong> 没有指定前置方法的作用域，是对所有方法执行该前置方法】</p>\n<ul>\n<li>\n<p>调用 – <code>$this-&gt;beforeAction($options)</code></p>\n</li>\n<li>\n<p>实际执行过程为</p>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">beforeAction</span><span class=\"params\">($options)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    call_user_func([<span class=\"keyword\">$this</span>, $options]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(2) 当<strong>前置方法</strong>[每组前置关系的键]不是数值时</p>\n<ul>\n<li>\n<p>调用 – <code>$this-&gt;beforeAction($method, $options)</code></p>\n</li>\n<li>\n<p>完整执行过程为</p>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">beforeAction</span><span class=\"params\">($method, $options = [])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($options[<span class=\"string\">'only'</span>])) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (is_string($options[<span class=\"string\">'only'</span>])) &#123;</span><br><span class=\"line\">            $options[<span class=\"string\">'only'</span>] = explode(<span class=\"string\">','</span>, $options[<span class=\"string\">'only'</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!in_array(<span class=\"keyword\">$this</span>-&gt;request-&gt;action(), $options[<span class=\"string\">'only'</span>])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">elseif</span> (<span class=\"keyword\">isset</span>($options[<span class=\"string\">'except'</span>])) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (is_string($options[<span class=\"string\">'except'</span>])) &#123;</span><br><span class=\"line\">            $options[<span class=\"string\">'except'</span>] = explode(<span class=\"string\">','</span>, $options[<span class=\"string\">'except'</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (in_array(<span class=\"keyword\">$this</span>-&gt;request-&gt;action(), $options[<span class=\"string\">'except'</span>])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    call_user_func([<span class=\"keyword\">$this</span>, $method]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（3）函数 [<a href=\"http://php.net/manual/en/function.call-user-func.php\" target=\"_blank\" rel=\"noopener\">call_user_func</a>]功能：把第一个参数作为回调函数调用</p>\n<ul>\n<li>\n<p>参数说明：</p>\n<p>当传入的参数为一个数组时，则将数组的</p>\n<ul>\n<li>第一个元素作为 <strong>类名</strong> 或 <strong>类的实例化对象</strong></li>\n<li>第二个元素作为类的方法名 [一般方法和静态方法均可以]</li>\n</ul>\n</li>\n<li>\n<p>调用结果：</p>\n<p>就是直接执行该类下的相应方法的结果</p>\n</li>\n</ul>\n<p>[全程学习+笔记时长：100min]</p>\n<p>【声明】</p>\n<p>我的博客即将搬运同步至腾讯云+社区，邀请大家一同入驻：<a href=\"https://cloud.tencent.com/developer/support-plan?invite_code=89fda9dsh3d0\" target=\"_blank\" rel=\"noopener\">https://cloud.tencent.com/developer/support-plan?invite_code=89fda9dsh3d0</a></p>\n","site":{"data":{}},"excerpt":"<p>tp5 框架的前置操作可以用于对某些方法进行通用的预处理，比如登录状态的判断[session 处理]、用户权限的卡控[cache/session 的处理]，通过控制器的前置操作，将公用代码进行封装，简化了调用流程[直接设定前置关系即可实现前置方法的自动调用]。</p>","more":"<h2 id=\"基本用法\"><a class=\"markdownIt-Anchor\" href=\"#基本用法\"></a> 基本用法</h2>\n<h3 id=\"使用示例\"><a class=\"markdownIt-Anchor\" href=\"#使用示例\"></a> 使用示例：</h3>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> $beforeActionList = [</span><br><span class=\"line\">    <span class=\"string\">'userBeforeAction1'</span> =&gt; [<span class=\"string\">'only'</span> =&gt; <span class=\"string\">'function1NeedDoBeforeAction1, function2DoNeedBeforeAction1'</span>],</span><br><span class=\"line\">    <span class=\"string\">'userBeforeAction2'</span> =&gt; [<span class=\"string\">'except'</span> =&gt; <span class=\"string\">'function1NotNeedBeforeAction2, function2NotNeedBeforeAction2'</span>],</span><br><span class=\"line\">    <span class=\"string\">'userBeforeAction3'</span></span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用说明\"><a class=\"markdownIt-Anchor\" href=\"#使用说明\"></a> 使用说明：</h3>\n<p>(1) <code>only</code> =&gt; 当调用 api 接口方法<code>function1NeedDoBeforeAction1()</code>和<code>function1NeedDoBeforeAction1</code>时，都会自动调用不公开[<code>protected</code>]的前置方法<code>userBeforeAction1()</code>，并且该前置方法只在访问这两个 api 方法时执行。</p>\n<p>(2) <code>except</code> =&gt; api 接口方法<code>function1NotNeedBeforeAction2()</code>和<code>function1NotNeedBeforeAction2()</code>时，不会执行前置方法<code>userBeforeAction2()</code></p>\n<h2 id=\"使用介绍\"><a class=\"markdownIt-Anchor\" href=\"#使用介绍\"></a> 使用介绍</h2>\n<blockquote>\n<p>可以为某个或者某些操作指定前置执行的操作方法，设置 beforeActionList 属性可以指定某个方法为其他方法的前置操作，数组键名为需要调用的前置方法名，无值的话为当前控制器下所有方法的前置方法。</p>\n</blockquote>\n<h3 id=\"控制器类属性-beforeactionlist\"><a class=\"markdownIt-Anchor\" href=\"#控制器类属性-beforeactionlist\"></a> 控制器类属性: $beforeActionList</h3>\n<h3 id=\"属性值-键值对\"><a class=\"markdownIt-Anchor\" href=\"#属性值-键值对\"></a> 属性值： 键值对</h3>\n<ul>\n<li>\n<p>键：前置方法名</p>\n</li>\n<li>\n<p>值：前置方法作用域[键值对|无]</p>\n<ul>\n<li>\n<p>无值时： 对当前控制器所有 api 方法都执行前置</p>\n</li>\n<li>\n<p>有值[键值对]：</p>\n<ul>\n<li>键：\n<ul>\n<li>except：除某些 api 方法执行前置</li>\n<li>only：只对某些 api 方法执行前置</li>\n</ul>\n</li>\n<li>值：需要进行前置操作的 api 方法 [当该项值为多个时，用半角,进行间隔]</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"注意点\"><a class=\"markdownIt-Anchor\" href=\"#注意点\"></a> 【注意点】：</h3>\n<p>（1）由于 TP5 框架对 url 的处理是全部转化为小写，并且执行前置操作时，也是通过 url 中参数获取当前调用的 api 方法，并判断是否需要进行前置操作的，所以定义需要执行前置方法的 api 方法时，都需要使用小写[针对 TP5.0 版本]</p>\n<p>（2）前置方法的访问方式为<code>private</code>时，则无法调用。</p>\n<h2 id=\"实现原理源码阅读\"><a class=\"markdownIt-Anchor\" href=\"#实现原理源码阅读\"></a> 实现原理[源码阅读]</h2>\n<h3 id=\"框架类库\"><a class=\"markdownIt-Anchor\" href=\"#框架类库\"></a> 框架类库</h3>\n<p>基类控制器<code>thinkphp\\library\\think\\Controller.php</code></p>\n<h3 id=\"相关介绍\"><a class=\"markdownIt-Anchor\" href=\"#相关介绍\"></a> 相关介绍</h3>\n<p>(1) 属性名：<code>$beforeActionList</code></p>\n<p>前置方法列表：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> $beforeActionList = [];</span><br></pre></td></tr></table></figure>\n<p>(2) 构造方法：<code>__construc()</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 遍历前置方法列表，并对每个前置方法进行前置处理</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;beforeActionList) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;beforeActionList <span class=\"keyword\">as</span> $method =&gt; $options) &#123;</span><br><span class=\"line\">        is_numeric($method) ?</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;beforeAction($options) :</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;beforeAction($method, $options);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>【逻辑分析】：</p>\n<ul>\n<li>\n<p>判断前置数组的键是否为数值</p>\n</li>\n<li>\n<p>如果是数值，直接对前置方法键值对的值进行处理</p>\n</li>\n<li>\n<p>如果不是数值，则对每组前置关系进行处理</p>\n</li>\n</ul>\n<h3 id=\"实现方法beforeaction\"><a class=\"markdownIt-Anchor\" href=\"#实现方法beforeaction\"></a> 实现方法：<code>beforeAction()</code></h3>\n<p>(1) 当<strong>前置方法</strong>[每组前置关系的键]是数值时 【键为数值的情况即 <strong>该组前置关系</strong> 没有指定前置方法的作用域，是对所有方法执行该前置方法】</p>\n<ul>\n<li>\n<p>调用 – <code>$this-&gt;beforeAction($options)</code></p>\n</li>\n<li>\n<p>实际执行过程为</p>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">beforeAction</span><span class=\"params\">($options)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    call_user_func([<span class=\"keyword\">$this</span>, $options]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(2) 当<strong>前置方法</strong>[每组前置关系的键]不是数值时</p>\n<ul>\n<li>\n<p>调用 – <code>$this-&gt;beforeAction($method, $options)</code></p>\n</li>\n<li>\n<p>完整执行过程为</p>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">beforeAction</span><span class=\"params\">($method, $options = [])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($options[<span class=\"string\">'only'</span>])) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (is_string($options[<span class=\"string\">'only'</span>])) &#123;</span><br><span class=\"line\">            $options[<span class=\"string\">'only'</span>] = explode(<span class=\"string\">','</span>, $options[<span class=\"string\">'only'</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!in_array(<span class=\"keyword\">$this</span>-&gt;request-&gt;action(), $options[<span class=\"string\">'only'</span>])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">elseif</span> (<span class=\"keyword\">isset</span>($options[<span class=\"string\">'except'</span>])) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (is_string($options[<span class=\"string\">'except'</span>])) &#123;</span><br><span class=\"line\">            $options[<span class=\"string\">'except'</span>] = explode(<span class=\"string\">','</span>, $options[<span class=\"string\">'except'</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (in_array(<span class=\"keyword\">$this</span>-&gt;request-&gt;action(), $options[<span class=\"string\">'except'</span>])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    call_user_func([<span class=\"keyword\">$this</span>, $method]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（3）函数 [<a href=\"http://php.net/manual/en/function.call-user-func.php\" target=\"_blank\" rel=\"noopener\">call_user_func</a>]功能：把第一个参数作为回调函数调用</p>\n<ul>\n<li>\n<p>参数说明：</p>\n<p>当传入的参数为一个数组时，则将数组的</p>\n<ul>\n<li>第一个元素作为 <strong>类名</strong> 或 <strong>类的实例化对象</strong></li>\n<li>第二个元素作为类的方法名 [一般方法和静态方法均可以]</li>\n</ul>\n</li>\n<li>\n<p>调用结果：</p>\n<p>就是直接执行该类下的相应方法的结果</p>\n</li>\n</ul>\n<p>[全程学习+笔记时长：100min]</p>\n<p>【声明】</p>\n<p>我的博客即将搬运同步至腾讯云+社区，邀请大家一同入驻：<a href=\"https://cloud.tencent.com/developer/support-plan?invite_code=89fda9dsh3d0\" target=\"_blank\" rel=\"noopener\">https://cloud.tencent.com/developer/support-plan?invite_code=89fda9dsh3d0</a></p>"},{"title":"PHP实现无限级分类 -- Path标识","date":"2018-05-16T05:30:34.000Z","_content":"\n在实际项目中经常要用到无限级分类，如多级分类、导航表等。PHP 实现无限级分类通常有两种实现方式，一种是利用`path`字段（pid+id）标识当前层级；另一种是利用递归循环`pid`的方式。此处介绍前种方式。\n\n<!--more-->\n\n# PHP 实现无限级分类 -- `path`标识\n\n## 1、数据库设计\n\n```sql\n--创建分类表\ncreate table `b_category`(\n`id` int primary key not null auto_increment,\n`cat_name` varchar(20) not null default '',\n`cat_description` text default '',\n`level` int not null default 0 comment '等级',\n`pid` int comment '父级id',\n`path` varchar(10) comment 'pid+,+id标识，用于无限级分类'\n);\n```\n\n## 2、PHP 代码实现\n\n```php\n$data = $m->field(\"*, concat(path,',',id) as paths \")->order('paths')->select();\n\nforeach($data as $k=>$v ){\n    $data[$k]['name'] = str_repeat(\"   \", $v['level']) . $v['name'];\n}\n```\n\n## 3、视图层显示\n\n```php\n<div class=\"row cl\">\n  <label class=\"dorm-label col-2\">描述：</lable>\n  <div class=\"formControls col-5\">\n      <span class=\"select-box\">\n         <select class=\"select\" size=\"1\" name=\"pid\">\n            <option value=\"0\" selected>顶级分类</option>\n            {foreach $data as $item}\n               <option value=\"{$item.id}\">{$item.name}</option>\n            {/foreach}\n         </select>\n      </span>\n   </div>\n  </div>\n```\n","source":"_posts/php-无限级分类.md","raw":"---\ntitle: PHP实现无限级分类 -- path标识\ndate: 2018-05-16 13:30:34\ntags:\n  - 无限级分类\ncategory:\n  - 【PHP相关】\n---\n\n在实际项目中经常要用到无限级分类，如多级分类、导航表等。PHP 实现无限级分类通常有两种实现方式，一种是利用`path`字段（pid+id）标识当前层级；另一种是利用递归循环`pid`的方式。此处介绍前种方式。\n\n<!--more-->\n\n# PHP 实现无限级分类 -- `path`标识\n\n## 1、数据库设计\n\n```sql\n--创建分类表\ncreate table `b_category`(\n`id` int primary key not null auto_increment,\n`cat_name` varchar(20) not null default '',\n`cat_description` text default '',\n`level` int not null default 0 comment '等级',\n`pid` int comment '父级id',\n`path` varchar(10) comment 'pid+,+id标识，用于无限级分类'\n);\n```\n\n## 2、PHP 代码实现\n\n```php\n$data = $m->field(\"*, concat(path,',',id) as paths \")->order('paths')->select();\n\nforeach($data as $k=>$v ){\n    $data[$k]['name'] = str_repeat(\"   \", $v['level']) . $v['name'];\n}\n```\n\n## 3、视图层显示\n\n```php\n<div class=\"row cl\">\n  <label class=\"dorm-label col-2\">描述：</lable>\n  <div class=\"formControls col-5\">\n      <span class=\"select-box\">\n         <select class=\"select\" size=\"1\" name=\"pid\">\n            <option value=\"0\" selected>顶级分类</option>\n            {foreach $data as $item}\n               <option value=\"{$item.id}\">{$item.name}</option>\n            {/foreach}\n         </select>\n      </span>\n   </div>\n  </div>\n```\n","slug":"php-无限级分类","published":1,"updated":"2019-05-12T15:56:59.741Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c40r002p2wuuofowsfuc","content":"<p>在实际项目中经常要用到无限级分类，如多级分类、导航表等。PHP 实现无限级分类通常有两种实现方式，一种是利用<code>path</code>字段（pid+id）标识当前层级；另一种是利用递归循环<code>pid</code>的方式。此处介绍前种方式。</p>\n<a id=\"more\"></a>\n<h1 id=\"php-实现无限级分类-path标识\"><a class=\"markdownIt-Anchor\" href=\"#php-实现无限级分类-path标识\"></a> PHP 实现无限级分类 – <code>path</code>标识</h1>\n<h2 id=\"1-数据库设计\"><a class=\"markdownIt-Anchor\" href=\"#1-数据库设计\"></a> 1、数据库设计</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建分类表</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> <span class=\"string\">`b_category`</span>(</span><br><span class=\"line\"><span class=\"string\">`id`</span> <span class=\"built_in\">int</span> primary <span class=\"keyword\">key</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> auto_increment,</span><br><span class=\"line\"><span class=\"string\">`cat_name`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">default</span> <span class=\"string\">''</span>,</span><br><span class=\"line\"><span class=\"string\">`cat_description`</span> <span class=\"built_in\">text</span> <span class=\"keyword\">default</span> <span class=\"string\">''</span>,</span><br><span class=\"line\"><span class=\"string\">`level`</span> <span class=\"built_in\">int</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">default</span> <span class=\"number\">0</span> <span class=\"keyword\">comment</span> <span class=\"string\">'等级'</span>,</span><br><span class=\"line\"><span class=\"string\">`pid`</span> <span class=\"built_in\">int</span> <span class=\"keyword\">comment</span> <span class=\"string\">'父级id'</span>,</span><br><span class=\"line\"><span class=\"string\">`path`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">10</span>) <span class=\"keyword\">comment</span> <span class=\"string\">'pid+,+id标识，用于无限级分类'</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-php-代码实现\"><a class=\"markdownIt-Anchor\" href=\"#2-php-代码实现\"></a> 2、PHP 代码实现</h2>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$data = $m-&gt;field(<span class=\"string\">\"*, concat(path,',',id) as paths \"</span>)-&gt;order(<span class=\"string\">'paths'</span>)-&gt;select();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span>($data <span class=\"keyword\">as</span> $k=&gt;$v )&#123;</span><br><span class=\"line\">    $data[$k][<span class=\"string\">'name'</span>] = str_repeat(<span class=\"string\">\"   \"</span>, $v[<span class=\"string\">'level'</span>]) . $v[<span class=\"string\">'name'</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-视图层显示\"><a class=\"markdownIt-Anchor\" href=\"#3-视图层显示\"></a> 3、视图层显示</h2>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=\"row cl\"&gt;</span><br><span class=\"line\">  &lt;label class=\"dorm-label col-2\"&gt;描述：&lt;/lable&gt;</span><br><span class=\"line\">  &lt;div class=\"formControls col-5\"&gt;</span><br><span class=\"line\">      &lt;span class=\"select-box\"&gt;</span><br><span class=\"line\">         &lt;select class=\"select\" size=\"1\" name=\"pid\"&gt;</span><br><span class=\"line\">            &lt;option value=<span class=\"string\">\"0\"</span> selected&gt;顶级分类&lt;/option&gt;</span><br><span class=\"line\">            &#123;<span class=\"keyword\">foreach</span> $data <span class=\"keyword\">as</span> $item&#125;</span><br><span class=\"line\">               &lt;option value=<span class=\"string\">\"&#123;$item.id&#125;\"</span>&gt;&#123;$item.name&#125;&lt;/option&gt;</span><br><span class=\"line\">            &#123;/<span class=\"keyword\">foreach</span>&#125;</span><br><span class=\"line\">         &lt;/select&gt;</span><br><span class=\"line\">      &lt;/span&gt;</span><br><span class=\"line\">   &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>在实际项目中经常要用到无限级分类，如多级分类、导航表等。PHP 实现无限级分类通常有两种实现方式，一种是利用<code>path</code>字段（pid+id）标识当前层级；另一种是利用递归循环<code>pid</code>的方式。此处介绍前种方式。</p>","more":"<h1 id=\"php-实现无限级分类-path标识\"><a class=\"markdownIt-Anchor\" href=\"#php-实现无限级分类-path标识\"></a> PHP 实现无限级分类 – <code>path</code>标识</h1>\n<h2 id=\"1-数据库设计\"><a class=\"markdownIt-Anchor\" href=\"#1-数据库设计\"></a> 1、数据库设计</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建分类表</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> <span class=\"string\">`b_category`</span>(</span><br><span class=\"line\"><span class=\"string\">`id`</span> <span class=\"built_in\">int</span> primary <span class=\"keyword\">key</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> auto_increment,</span><br><span class=\"line\"><span class=\"string\">`cat_name`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">default</span> <span class=\"string\">''</span>,</span><br><span class=\"line\"><span class=\"string\">`cat_description`</span> <span class=\"built_in\">text</span> <span class=\"keyword\">default</span> <span class=\"string\">''</span>,</span><br><span class=\"line\"><span class=\"string\">`level`</span> <span class=\"built_in\">int</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">default</span> <span class=\"number\">0</span> <span class=\"keyword\">comment</span> <span class=\"string\">'等级'</span>,</span><br><span class=\"line\"><span class=\"string\">`pid`</span> <span class=\"built_in\">int</span> <span class=\"keyword\">comment</span> <span class=\"string\">'父级id'</span>,</span><br><span class=\"line\"><span class=\"string\">`path`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">10</span>) <span class=\"keyword\">comment</span> <span class=\"string\">'pid+,+id标识，用于无限级分类'</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-php-代码实现\"><a class=\"markdownIt-Anchor\" href=\"#2-php-代码实现\"></a> 2、PHP 代码实现</h2>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$data = $m-&gt;field(<span class=\"string\">\"*, concat(path,',',id) as paths \"</span>)-&gt;order(<span class=\"string\">'paths'</span>)-&gt;select();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span>($data <span class=\"keyword\">as</span> $k=&gt;$v )&#123;</span><br><span class=\"line\">    $data[$k][<span class=\"string\">'name'</span>] = str_repeat(<span class=\"string\">\"   \"</span>, $v[<span class=\"string\">'level'</span>]) . $v[<span class=\"string\">'name'</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-视图层显示\"><a class=\"markdownIt-Anchor\" href=\"#3-视图层显示\"></a> 3、视图层显示</h2>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=\"row cl\"&gt;</span><br><span class=\"line\">  &lt;label class=\"dorm-label col-2\"&gt;描述：&lt;/lable&gt;</span><br><span class=\"line\">  &lt;div class=\"formControls col-5\"&gt;</span><br><span class=\"line\">      &lt;span class=\"select-box\"&gt;</span><br><span class=\"line\">         &lt;select class=\"select\" size=\"1\" name=\"pid\"&gt;</span><br><span class=\"line\">            &lt;option value=<span class=\"string\">\"0\"</span> selected&gt;顶级分类&lt;/option&gt;</span><br><span class=\"line\">            &#123;<span class=\"keyword\">foreach</span> $data <span class=\"keyword\">as</span> $item&#125;</span><br><span class=\"line\">               &lt;option value=<span class=\"string\">\"&#123;$item.id&#125;\"</span>&gt;&#123;$item.name&#125;&lt;/option&gt;</span><br><span class=\"line\">            &#123;/<span class=\"keyword\">foreach</span>&#125;</span><br><span class=\"line\">         &lt;/select&gt;</span><br><span class=\"line\">      &lt;/span&gt;</span><br><span class=\"line\">   &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br></pre></td></tr></table></figure>"},{"title":"PHPStorm 配置 xdebug(phpStudy/wamp)","date":"2018-05-05T09:44:49.000Z","_content":"\nPHPStorm 是一款功能强大的 PHP 开发工具，自动补全、格式化样式等，以及最主要的 XDebug 功能，是开发中非常有用的功能，能有效查看程序代码的问题所在，并了解程序的执行过程。\n\n<!-- more -->\n\n## 一、下载并配置 XDebug\n\n**wamp 环境**：\n1、获取 xdebug\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/01.png)\n\n官网地址：https://xdebug.org/wizard.php\n\n**注**：需要将 phpinfo()输出的信息通过查看源码的方式将所有信息复制粘贴到 XDebug 的下载界面，以选择合适的版本进行下载和配置\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fucho9kapjj30oi0gu40u.jpg)\n\n将 phpinfo()的查看网页源代码的信息复制粘贴进后出现上述检测信息，然后进行下载，并按提示操作。\n\n2、下载 dll 文件到扩展目录\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/03.png)\n\n3、修改 php.ini 文件\n\n（1）将 xdebug 文件引入\n[avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/04.png)\n\n（2）开启 xdebug\n\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/05.png)\n如果需要调试 Joomla 代码，则开启 XDebug profiling 。但是不用的情况下开启这个功能会降低系统稳定性，所以如果不是需要请勿开启。\n\n（3）开启自动刷新\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchoygxclj30ht056q39.jpg)\n\n**phpStudy 环境**：\nphpStudy 集成环境已经集成了 xdebug 扩展，只需开启即可。\n\n1、开启方式：\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/07.png)\n2、修改 php.ini 配置文件【XDebug 模块】\n\n```ini\n[XDebug]\nzend_extension=\"D:\\phpStudy\\PHPTutorial\\php\\php-5.6.27-nts\\ext\\php_xdebug.dll\"\n;是否允许Xdebug跟踪函数调用，跟踪信息以文件形式存储，默认值为0\nxdebug.auto_trace=1\n;是否允许Xdebug跟踪函数参数，默认值为0\nxdebug.collect_params=1\n;是否允许Xdebug跟踪函数返回值，默认值为0\nxdebug.collect_return=1\n;函数调用跟踪信息输出文件目录，默认值为/tmp\nxdebug.trace_output_dir =\"D:\\phpStudy\\tmp\\xdebug\"\n;性能分析文件的存放位置，默认值为/tmp\nxdebug.profiler_output_dir =\"D:\\phpStudy\\tmp\\xdebug\"\n;打开xdebug的性能分析器，以文件形式存储，这项配置是不能以ini_set()函数配置的，默认值为0\nxdebug.profiler_enable = 1\n;性能分析文件的命名规则，默认值为cachegrind.out.%p\nxdebug.profiler_output_name = \"cachegrind.out.%t.%p\"\nxdebug.remote_enable = 1\n;用于zend studio远程调试的应用层通信协议\nxdebug.remote_handler = \"dbgp\"\nxdebug.idekey = PHPSTORM\nxdebug.remote_host = \"127.0.0.1\"\n;\nxdebug.remote_port = 9000\n```\n\n【注意】路径目录需要修改为自己对应的位置。\n\n## 二、验证安装成功\n\n1、修改配置后重启 apache 服务\n\n2、在 phpinfo()的输出信息中查看 xdebug 信息\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchppegacj30e802yjrl.jpg)\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchq03aygj30oi03e74b.jpg)\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchq788x8j30oi086ab2.jpg)\n\n## 三、在 PHPStorm 中配置 xdebug\n\n1、配置 PHP 版本信息\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/11.png)\n\n2、设置 xdebug 端口（phpinfo()中显示默认 9000 端口）\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/12.png)\n\n3、配置项目的服务器虚拟域名\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/13.png)\n\n4、设置监听的域名和端口\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/14.png)\n\n5、配置 xdebug\n\n（1）进入配置\n\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/15.png)\n\n（2）添加配置项，选择 PHP Web Page\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchqnh71cj306k0dz3za.jpg)\n\n（3）配置参数\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchqxhn3oj30f80c974q.jpg)\n\n## 四、安装浏览器插件（xdebug helper）\n\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/18.png)\n\n## 五、在项目中使用 XDebug\n\n1、开启浏览器中的 xdebug 插件\n\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/19.png)\n\n2、在 PHPStorm 中进行监听\n\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/20.png)\n\n3、在项目中设置断点标记\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/21.png)\n\n4、在浏览器中访问项目\n\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/22.png)\n\n5、运行后发现会在断电处停止\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchrcso89j30bt00wa9u.jpg)\n\n6、开始调试\n\nF7 键：单步调试\n\nShift+F8：按区块调试\n\n下方的调试面板会出现一下调试信息\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchrnbc2fj30m508dgma.jpg)\n\n## 六、完成\n\n现在即可通过调试查看项目的运行步骤和文件跳转情况。\n\n参考资料：查看[1] 查看[2]\n\n[1]: https://segmentfault.com/a/1190000011907425?XDEBUG_SESSION_START=phpstorm\n[2]: https://blog.csdn.net/zz_buddha/article/details/54096000\n","source":"_posts/phpstorm-xdebug.md","raw":"---\ntitle: PHPStorm 配置 xdebug(phpStudy/wamp)\ndate: 2018-05-05 17:44:49\ntags:\n  - phpstrom\n  - xdebug\ncategory:\n  - 【开发工具】\n---\n\nPHPStorm 是一款功能强大的 PHP 开发工具，自动补全、格式化样式等，以及最主要的 XDebug 功能，是开发中非常有用的功能，能有效查看程序代码的问题所在，并了解程序的执行过程。\n\n<!-- more -->\n\n## 一、下载并配置 XDebug\n\n**wamp 环境**：\n1、获取 xdebug\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/01.png)\n\n官网地址：https://xdebug.org/wizard.php\n\n**注**：需要将 phpinfo()输出的信息通过查看源码的方式将所有信息复制粘贴到 XDebug 的下载界面，以选择合适的版本进行下载和配置\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fucho9kapjj30oi0gu40u.jpg)\n\n将 phpinfo()的查看网页源代码的信息复制粘贴进后出现上述检测信息，然后进行下载，并按提示操作。\n\n2、下载 dll 文件到扩展目录\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/03.png)\n\n3、修改 php.ini 文件\n\n（1）将 xdebug 文件引入\n[avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/04.png)\n\n（2）开启 xdebug\n\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/05.png)\n如果需要调试 Joomla 代码，则开启 XDebug profiling 。但是不用的情况下开启这个功能会降低系统稳定性，所以如果不是需要请勿开启。\n\n（3）开启自动刷新\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchoygxclj30ht056q39.jpg)\n\n**phpStudy 环境**：\nphpStudy 集成环境已经集成了 xdebug 扩展，只需开启即可。\n\n1、开启方式：\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/07.png)\n2、修改 php.ini 配置文件【XDebug 模块】\n\n```ini\n[XDebug]\nzend_extension=\"D:\\phpStudy\\PHPTutorial\\php\\php-5.6.27-nts\\ext\\php_xdebug.dll\"\n;是否允许Xdebug跟踪函数调用，跟踪信息以文件形式存储，默认值为0\nxdebug.auto_trace=1\n;是否允许Xdebug跟踪函数参数，默认值为0\nxdebug.collect_params=1\n;是否允许Xdebug跟踪函数返回值，默认值为0\nxdebug.collect_return=1\n;函数调用跟踪信息输出文件目录，默认值为/tmp\nxdebug.trace_output_dir =\"D:\\phpStudy\\tmp\\xdebug\"\n;性能分析文件的存放位置，默认值为/tmp\nxdebug.profiler_output_dir =\"D:\\phpStudy\\tmp\\xdebug\"\n;打开xdebug的性能分析器，以文件形式存储，这项配置是不能以ini_set()函数配置的，默认值为0\nxdebug.profiler_enable = 1\n;性能分析文件的命名规则，默认值为cachegrind.out.%p\nxdebug.profiler_output_name = \"cachegrind.out.%t.%p\"\nxdebug.remote_enable = 1\n;用于zend studio远程调试的应用层通信协议\nxdebug.remote_handler = \"dbgp\"\nxdebug.idekey = PHPSTORM\nxdebug.remote_host = \"127.0.0.1\"\n;\nxdebug.remote_port = 9000\n```\n\n【注意】路径目录需要修改为自己对应的位置。\n\n## 二、验证安装成功\n\n1、修改配置后重启 apache 服务\n\n2、在 phpinfo()的输出信息中查看 xdebug 信息\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchppegacj30e802yjrl.jpg)\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchq03aygj30oi03e74b.jpg)\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchq788x8j30oi086ab2.jpg)\n\n## 三、在 PHPStorm 中配置 xdebug\n\n1、配置 PHP 版本信息\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/11.png)\n\n2、设置 xdebug 端口（phpinfo()中显示默认 9000 端口）\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/12.png)\n\n3、配置项目的服务器虚拟域名\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/13.png)\n\n4、设置监听的域名和端口\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/14.png)\n\n5、配置 xdebug\n\n（1）进入配置\n\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/15.png)\n\n（2）添加配置项，选择 PHP Web Page\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchqnh71cj306k0dz3za.jpg)\n\n（3）配置参数\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchqxhn3oj30f80c974q.jpg)\n\n## 四、安装浏览器插件（xdebug helper）\n\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/18.png)\n\n## 五、在项目中使用 XDebug\n\n1、开启浏览器中的 xdebug 插件\n\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/19.png)\n\n2、在 PHPStorm 中进行监听\n\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/20.png)\n\n3、在项目中设置断点标记\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/21.png)\n\n4、在浏览器中访问项目\n\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/22.png)\n\n5、运行后发现会在断电处停止\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchrcso89j30bt00wa9u.jpg)\n\n6、开始调试\n\nF7 键：单步调试\n\nShift+F8：按区块调试\n\n下方的调试面板会出现一下调试信息\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchrnbc2fj30m508dgma.jpg)\n\n## 六、完成\n\n现在即可通过调试查看项目的运行步骤和文件跳转情况。\n\n参考资料：查看[1] 查看[2]\n\n[1]: https://segmentfault.com/a/1190000011907425?XDEBUG_SESSION_START=phpstorm\n[2]: https://blog.csdn.net/zz_buddha/article/details/54096000\n","slug":"phpstorm-xdebug","published":1,"updated":"2019-05-12T15:56:59.741Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c40t002s2wuuvltdyg0r","content":"<p>PHPStorm 是一款功能强大的 PHP 开发工具，自动补全、格式化样式等，以及最主要的 XDebug 功能，是开发中非常有用的功能，能有效查看程序代码的问题所在，并了解程序的执行过程。</p>\n<a id=\"more\"></a>\n<h2 id=\"一-下载并配置-xdebug\"><a class=\"markdownIt-Anchor\" href=\"#一-下载并配置-xdebug\"></a> 一、下载并配置 XDebug</h2>\n<p><strong>wamp 环境</strong>：<br>\n1、获取 xdebug<br>\n<img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/01.png\" alt=\"avatar\"></p>\n<p>官网地址：<a href=\"https://xdebug.org/wizard.php\" target=\"_blank\" rel=\"noopener\">https://xdebug.org/wizard.php</a></p>\n<p><strong>注</strong>：需要将 phpinfo()输出的信息通过查看源码的方式将所有信息复制粘贴到 XDebug 的下载界面，以选择合适的版本进行下载和配置<br>\n<img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fucho9kapjj30oi0gu40u.jpg\" alt=\"\"></p>\n<p>将 phpinfo()的查看网页源代码的信息复制粘贴进后出现上述检测信息，然后进行下载，并按提示操作。</p>\n<p>2、下载 dll 文件到扩展目录<br>\n<img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/03.png\" alt=\"avatar\"></p>\n<p>3、修改 php.ini 文件</p>\n<p>（1）将 xdebug 文件引入<br>\n<a href=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/04.png\" target=\"_blank\" rel=\"noopener\">avatar</a></p>\n<p>（2）开启 xdebug</p>\n<p><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/05.png\" alt=\"avatar\"><br>\n如果需要调试 Joomla 代码，则开启 XDebug profiling 。但是不用的情况下开启这个功能会降低系统稳定性，所以如果不是需要请勿开启。</p>\n<p>（3）开启自动刷新</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchoygxclj30ht056q39.jpg\" alt=\"\"></p>\n<p><strong>phpStudy 环境</strong>：<br>\nphpStudy 集成环境已经集成了 xdebug 扩展，只需开启即可。</p>\n<p>1、开启方式：<br>\n<img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/07.png\" alt=\"avatar\"><br>\n2、修改 php.ini 配置文件【XDebug 模块】</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[XDebug]</span></span><br><span class=\"line\"><span class=\"attr\">zend_extension</span>=<span class=\"string\">\"D:\\phpStudy\\PHPTutorial\\php\\php-5.6.27-nts\\ext\\php_xdebug.dll\"</span></span><br><span class=\"line\"><span class=\"comment\">;是否允许Xdebug跟踪函数调用，跟踪信息以文件形式存储，默认值为0</span></span><br><span class=\"line\">xdebug.auto_trace=1</span><br><span class=\"line\"><span class=\"comment\">;是否允许Xdebug跟踪函数参数，默认值为0</span></span><br><span class=\"line\">xdebug.collect_params=1</span><br><span class=\"line\"><span class=\"comment\">;是否允许Xdebug跟踪函数返回值，默认值为0</span></span><br><span class=\"line\">xdebug.collect_return=1</span><br><span class=\"line\"><span class=\"comment\">;函数调用跟踪信息输出文件目录，默认值为/tmp</span></span><br><span class=\"line\">xdebug.trace_output_dir =\"D:\\phpStudy\\tmp\\xdebug\"</span><br><span class=\"line\"><span class=\"comment\">;性能分析文件的存放位置，默认值为/tmp</span></span><br><span class=\"line\">xdebug.profiler_output_dir =\"D:\\phpStudy\\tmp\\xdebug\"</span><br><span class=\"line\"><span class=\"comment\">;打开xdebug的性能分析器，以文件形式存储，这项配置是不能以ini_set()函数配置的，默认值为0</span></span><br><span class=\"line\">xdebug.profiler_enable = 1</span><br><span class=\"line\"><span class=\"comment\">;性能分析文件的命名规则，默认值为cachegrind.out.%p</span></span><br><span class=\"line\">xdebug.profiler_output_name = \"cachegrind.out.%t.%p\"</span><br><span class=\"line\">xdebug.remote_enable = 1</span><br><span class=\"line\"><span class=\"comment\">;用于zend studio远程调试的应用层通信协议</span></span><br><span class=\"line\">xdebug.remote_handler = \"dbgp\"</span><br><span class=\"line\">xdebug.idekey = PHPSTORM</span><br><span class=\"line\">xdebug.remote_host = \"127.0.0.1\"</span><br><span class=\"line\"><span class=\"comment\">;</span></span><br><span class=\"line\">xdebug.remote_port = 9000</span><br></pre></td></tr></table></figure>\n<p>【注意】路径目录需要修改为自己对应的位置。</p>\n<h2 id=\"二-验证安装成功\"><a class=\"markdownIt-Anchor\" href=\"#二-验证安装成功\"></a> 二、验证安装成功</h2>\n<p>1、修改配置后重启 apache 服务</p>\n<p>2、在 phpinfo()的输出信息中查看 xdebug 信息<br>\n<img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchppegacj30e802yjrl.jpg\" alt=\"\"></p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchq03aygj30oi03e74b.jpg\" alt=\"\"></p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchq788x8j30oi086ab2.jpg\" alt=\"\"></p>\n<h2 id=\"三-在-phpstorm-中配置-xdebug\"><a class=\"markdownIt-Anchor\" href=\"#三-在-phpstorm-中配置-xdebug\"></a> 三、在 PHPStorm 中配置 xdebug</h2>\n<p>1、配置 PHP 版本信息<br>\n<img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/11.png\" alt=\"avatar\"></p>\n<p>2、设置 xdebug 端口（phpinfo()中显示默认 9000 端口）<br>\n<img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/12.png\" alt=\"avatar\"></p>\n<p>3、配置项目的服务器虚拟域名<br>\n<img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/13.png\" alt=\"avatar\"></p>\n<p>4、设置监听的域名和端口<br>\n<img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/14.png\" alt=\"avatar\"></p>\n<p>5、配置 xdebug</p>\n<p>（1）进入配置</p>\n<p><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/15.png\" alt=\"avatar\"></p>\n<p>（2）添加配置项，选择 PHP Web Page</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchqnh71cj306k0dz3za.jpg\" alt=\"\"></p>\n<p>（3）配置参数<br>\n<img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchqxhn3oj30f80c974q.jpg\" alt=\"\"></p>\n<h2 id=\"四-安装浏览器插件xdebug-helper\"><a class=\"markdownIt-Anchor\" href=\"#四-安装浏览器插件xdebug-helper\"></a> 四、安装浏览器插件（xdebug helper）</h2>\n<p><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/18.png\" alt=\"avatar\"></p>\n<h2 id=\"五-在项目中使用-xdebug\"><a class=\"markdownIt-Anchor\" href=\"#五-在项目中使用-xdebug\"></a> 五、在项目中使用 XDebug</h2>\n<p>1、开启浏览器中的 xdebug 插件</p>\n<p><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/19.png\" alt=\"avatar\"></p>\n<p>2、在 PHPStorm 中进行监听</p>\n<p><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/20.png\" alt=\"avatar\"></p>\n<p>3、在项目中设置断点标记<br>\n<img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/21.png\" alt=\"avatar\"></p>\n<p>4、在浏览器中访问项目</p>\n<p><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/22.png\" alt=\"avatar\"></p>\n<p>5、运行后发现会在断电处停止<br>\n<img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchrcso89j30bt00wa9u.jpg\" alt=\"\"></p>\n<p>6、开始调试</p>\n<p>F7 键：单步调试</p>\n<p>Shift+F8：按区块调试</p>\n<p>下方的调试面板会出现一下调试信息</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchrnbc2fj30m508dgma.jpg\" alt=\"\"></p>\n<h2 id=\"六-完成\"><a class=\"markdownIt-Anchor\" href=\"#六-完成\"></a> 六、完成</h2>\n<p>现在即可通过调试查看项目的运行步骤和文件跳转情况。</p>\n<p>参考资料：查看<a href=\"https://segmentfault.com/a/1190000011907425?XDEBUG_SESSION_START=phpstorm\" target=\"_blank\" rel=\"noopener\">1</a> 查看<a href=\"https://blog.csdn.net/zz_buddha/article/details/54096000\" target=\"_blank\" rel=\"noopener\">2</a></p>\n","site":{"data":{}},"excerpt":"<p>PHPStorm 是一款功能强大的 PHP 开发工具，自动补全、格式化样式等，以及最主要的 XDebug 功能，是开发中非常有用的功能，能有效查看程序代码的问题所在，并了解程序的执行过程。</p>","more":"<h2 id=\"一-下载并配置-xdebug\"><a class=\"markdownIt-Anchor\" href=\"#一-下载并配置-xdebug\"></a> 一、下载并配置 XDebug</h2>\n<p><strong>wamp 环境</strong>：<br>\n1、获取 xdebug<br>\n<img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/01.png\" alt=\"avatar\"></p>\n<p>官网地址：<a href=\"https://xdebug.org/wizard.php\" target=\"_blank\" rel=\"noopener\">https://xdebug.org/wizard.php</a></p>\n<p><strong>注</strong>：需要将 phpinfo()输出的信息通过查看源码的方式将所有信息复制粘贴到 XDebug 的下载界面，以选择合适的版本进行下载和配置<br>\n<img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fucho9kapjj30oi0gu40u.jpg\" alt=\"\"></p>\n<p>将 phpinfo()的查看网页源代码的信息复制粘贴进后出现上述检测信息，然后进行下载，并按提示操作。</p>\n<p>2、下载 dll 文件到扩展目录<br>\n<img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/03.png\" alt=\"avatar\"></p>\n<p>3、修改 php.ini 文件</p>\n<p>（1）将 xdebug 文件引入<br>\n<a href=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/04.png\" target=\"_blank\" rel=\"noopener\">avatar</a></p>\n<p>（2）开启 xdebug</p>\n<p><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/05.png\" alt=\"avatar\"><br>\n如果需要调试 Joomla 代码，则开启 XDebug profiling 。但是不用的情况下开启这个功能会降低系统稳定性，所以如果不是需要请勿开启。</p>\n<p>（3）开启自动刷新</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchoygxclj30ht056q39.jpg\" alt=\"\"></p>\n<p><strong>phpStudy 环境</strong>：<br>\nphpStudy 集成环境已经集成了 xdebug 扩展，只需开启即可。</p>\n<p>1、开启方式：<br>\n<img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/07.png\" alt=\"avatar\"><br>\n2、修改 php.ini 配置文件【XDebug 模块】</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[XDebug]</span></span><br><span class=\"line\"><span class=\"attr\">zend_extension</span>=<span class=\"string\">\"D:\\phpStudy\\PHPTutorial\\php\\php-5.6.27-nts\\ext\\php_xdebug.dll\"</span></span><br><span class=\"line\"><span class=\"comment\">;是否允许Xdebug跟踪函数调用，跟踪信息以文件形式存储，默认值为0</span></span><br><span class=\"line\">xdebug.auto_trace=1</span><br><span class=\"line\"><span class=\"comment\">;是否允许Xdebug跟踪函数参数，默认值为0</span></span><br><span class=\"line\">xdebug.collect_params=1</span><br><span class=\"line\"><span class=\"comment\">;是否允许Xdebug跟踪函数返回值，默认值为0</span></span><br><span class=\"line\">xdebug.collect_return=1</span><br><span class=\"line\"><span class=\"comment\">;函数调用跟踪信息输出文件目录，默认值为/tmp</span></span><br><span class=\"line\">xdebug.trace_output_dir =\"D:\\phpStudy\\tmp\\xdebug\"</span><br><span class=\"line\"><span class=\"comment\">;性能分析文件的存放位置，默认值为/tmp</span></span><br><span class=\"line\">xdebug.profiler_output_dir =\"D:\\phpStudy\\tmp\\xdebug\"</span><br><span class=\"line\"><span class=\"comment\">;打开xdebug的性能分析器，以文件形式存储，这项配置是不能以ini_set()函数配置的，默认值为0</span></span><br><span class=\"line\">xdebug.profiler_enable = 1</span><br><span class=\"line\"><span class=\"comment\">;性能分析文件的命名规则，默认值为cachegrind.out.%p</span></span><br><span class=\"line\">xdebug.profiler_output_name = \"cachegrind.out.%t.%p\"</span><br><span class=\"line\">xdebug.remote_enable = 1</span><br><span class=\"line\"><span class=\"comment\">;用于zend studio远程调试的应用层通信协议</span></span><br><span class=\"line\">xdebug.remote_handler = \"dbgp\"</span><br><span class=\"line\">xdebug.idekey = PHPSTORM</span><br><span class=\"line\">xdebug.remote_host = \"127.0.0.1\"</span><br><span class=\"line\"><span class=\"comment\">;</span></span><br><span class=\"line\">xdebug.remote_port = 9000</span><br></pre></td></tr></table></figure>\n<p>【注意】路径目录需要修改为自己对应的位置。</p>\n<h2 id=\"二-验证安装成功\"><a class=\"markdownIt-Anchor\" href=\"#二-验证安装成功\"></a> 二、验证安装成功</h2>\n<p>1、修改配置后重启 apache 服务</p>\n<p>2、在 phpinfo()的输出信息中查看 xdebug 信息<br>\n<img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchppegacj30e802yjrl.jpg\" alt=\"\"></p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchq03aygj30oi03e74b.jpg\" alt=\"\"></p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchq788x8j30oi086ab2.jpg\" alt=\"\"></p>\n<h2 id=\"三-在-phpstorm-中配置-xdebug\"><a class=\"markdownIt-Anchor\" href=\"#三-在-phpstorm-中配置-xdebug\"></a> 三、在 PHPStorm 中配置 xdebug</h2>\n<p>1、配置 PHP 版本信息<br>\n<img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/11.png\" alt=\"avatar\"></p>\n<p>2、设置 xdebug 端口（phpinfo()中显示默认 9000 端口）<br>\n<img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/12.png\" alt=\"avatar\"></p>\n<p>3、配置项目的服务器虚拟域名<br>\n<img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/13.png\" alt=\"avatar\"></p>\n<p>4、设置监听的域名和端口<br>\n<img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/14.png\" alt=\"avatar\"></p>\n<p>5、配置 xdebug</p>\n<p>（1）进入配置</p>\n<p><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/15.png\" alt=\"avatar\"></p>\n<p>（2）添加配置项，选择 PHP Web Page</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchqnh71cj306k0dz3za.jpg\" alt=\"\"></p>\n<p>（3）配置参数<br>\n<img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchqxhn3oj30f80c974q.jpg\" alt=\"\"></p>\n<h2 id=\"四-安装浏览器插件xdebug-helper\"><a class=\"markdownIt-Anchor\" href=\"#四-安装浏览器插件xdebug-helper\"></a> 四、安装浏览器插件（xdebug helper）</h2>\n<p><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/18.png\" alt=\"avatar\"></p>\n<h2 id=\"五-在项目中使用-xdebug\"><a class=\"markdownIt-Anchor\" href=\"#五-在项目中使用-xdebug\"></a> 五、在项目中使用 XDebug</h2>\n<p>1、开启浏览器中的 xdebug 插件</p>\n<p><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/19.png\" alt=\"avatar\"></p>\n<p>2、在 PHPStorm 中进行监听</p>\n<p><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/20.png\" alt=\"avatar\"></p>\n<p>3、在项目中设置断点标记<br>\n<img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/21.png\" alt=\"avatar\"></p>\n<p>4、在浏览器中访问项目</p>\n<p><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/22.png\" alt=\"avatar\"></p>\n<p>5、运行后发现会在断电处停止<br>\n<img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchrcso89j30bt00wa9u.jpg\" alt=\"\"></p>\n<p>6、开始调试</p>\n<p>F7 键：单步调试</p>\n<p>Shift+F8：按区块调试</p>\n<p>下方的调试面板会出现一下调试信息</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchrnbc2fj30m508dgma.jpg\" alt=\"\"></p>\n<h2 id=\"六-完成\"><a class=\"markdownIt-Anchor\" href=\"#六-完成\"></a> 六、完成</h2>\n<p>现在即可通过调试查看项目的运行步骤和文件跳转情况。</p>\n<p>参考资料：查看<a href=\"https://segmentfault.com/a/1190000011907425?XDEBUG_SESSION_START=phpstorm\" target=\"_blank\" rel=\"noopener\">1</a> 查看<a href=\"https://blog.csdn.net/zz_buddha/article/details/54096000\" target=\"_blank\" rel=\"noopener\">2</a></p>"},{"title":"【Python】安装与配置","date":"2018-07-30T12:02:53.000Z","_content":"\n拓展自己对语言的认识和理解，开始学点其他的语言，不给自己的技术栈设限，有更多的思考和认识。学习python, 了解些机器学习，人工智能方面的知识，希望自己可以坚持深入学习。\n\n<!--more-->\n\n## 下载安装\n\n1、下载源码包：\n\n```bash\nwget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz\n```\n\n2、解压缩：\n\n```bash\ntar -zxvf Python-3.7.0.tgz\n```\n\n然后进入到解压缩后的目录`cd Python-3.7.0`\n\n3、安装配置：\n\n```bash\n./configure --prefix=/usr/local/python37/\n```\n\n> --prefix 是指定安装目录\n\n> 执行前确保系统已安装了编译器gcc `sudo yum install -y make gcc gcc-c++`\n\n4、编译，并安装：\n```bash\nmake && make install\n```\n\n## 将默认的python2.7换成新版python3.7\n\n(1) 查看当前系统python执行程序的位置\n\n```bash\nlocate */bin/python\n```\n\n定位到加载的python目录是`/usr/bin/python`\n\n(2) 查看环境变量的值`$PATH`\n\n```bash\necho $PATH\n```\n\n有一行是`/usr/bin`, 说明直接运行的是`/usr/bin/python`， 并且当前`/usr/bin/python`是软连接到`/usr/bin/python2.7`的\n\n(3) 建立新的软连接\n\n使`/usr/bin/python`指向`/usr/local/python37/bin/python3.7`\n\n```bash\nln -sb /usr/local/python37/bin/python3.7 /usr/bin/python\n```\n\n> -s: 表示建立的是软连接（快捷方式指向），不加表示是硬连接（即复制一份的）\n> -b：表示删除、覆盖以前建立的链接\n\n参考: [博客园 -- 每天一个linux命令（35）：ln 命令](https://www.cnblogs.com/peida/archive/2012/12/11/2812294.html)\n\n\n此时执行python即是python3.7版本\n![](https://ws1.sinaimg.cn/mw690/005EgYNMly1g2ynt37gvzj30i102vmx4.jpg)\n\n## 操作遇到的问题：\n\n1、make install安装python3.7时报 No module named '_ctypes' 错误的解决办法：\n\n答：`yum install libffi-devel`\n\n参考： [StackOverflow -- Python3: ImportError: No module named '_ctypes' when using Value from module multiprocessing](https://stackoverflow.com/questions/27022373/python3-importerror-no-module-named-ctypes-when-using-value-from-module-mul)\n","source":"_posts/python-base.md","raw":"---\ntitle: 【Python】安装与配置\ndate: 2018-07-30 20:02:53\ntags:\n  - python\ncategory:\n  - 【Python相关】\n---\n\n拓展自己对语言的认识和理解，开始学点其他的语言，不给自己的技术栈设限，有更多的思考和认识。学习python, 了解些机器学习，人工智能方面的知识，希望自己可以坚持深入学习。\n\n<!--more-->\n\n## 下载安装\n\n1、下载源码包：\n\n```bash\nwget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz\n```\n\n2、解压缩：\n\n```bash\ntar -zxvf Python-3.7.0.tgz\n```\n\n然后进入到解压缩后的目录`cd Python-3.7.0`\n\n3、安装配置：\n\n```bash\n./configure --prefix=/usr/local/python37/\n```\n\n> --prefix 是指定安装目录\n\n> 执行前确保系统已安装了编译器gcc `sudo yum install -y make gcc gcc-c++`\n\n4、编译，并安装：\n```bash\nmake && make install\n```\n\n## 将默认的python2.7换成新版python3.7\n\n(1) 查看当前系统python执行程序的位置\n\n```bash\nlocate */bin/python\n```\n\n定位到加载的python目录是`/usr/bin/python`\n\n(2) 查看环境变量的值`$PATH`\n\n```bash\necho $PATH\n```\n\n有一行是`/usr/bin`, 说明直接运行的是`/usr/bin/python`， 并且当前`/usr/bin/python`是软连接到`/usr/bin/python2.7`的\n\n(3) 建立新的软连接\n\n使`/usr/bin/python`指向`/usr/local/python37/bin/python3.7`\n\n```bash\nln -sb /usr/local/python37/bin/python3.7 /usr/bin/python\n```\n\n> -s: 表示建立的是软连接（快捷方式指向），不加表示是硬连接（即复制一份的）\n> -b：表示删除、覆盖以前建立的链接\n\n参考: [博客园 -- 每天一个linux命令（35）：ln 命令](https://www.cnblogs.com/peida/archive/2012/12/11/2812294.html)\n\n\n此时执行python即是python3.7版本\n![](https://ws1.sinaimg.cn/mw690/005EgYNMly1g2ynt37gvzj30i102vmx4.jpg)\n\n## 操作遇到的问题：\n\n1、make install安装python3.7时报 No module named '_ctypes' 错误的解决办法：\n\n答：`yum install libffi-devel`\n\n参考： [StackOverflow -- Python3: ImportError: No module named '_ctypes' when using Value from module multiprocessing](https://stackoverflow.com/questions/27022373/python3-importerror-no-module-named-ctypes-when-using-value-from-module-mul)\n","slug":"python-base","published":1,"updated":"2019-05-12T16:01:12.501Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c40u002u2wuuuhh1hdu7","content":"<p>拓展自己对语言的认识和理解，开始学点其他的语言，不给自己的技术栈设限，有更多的思考和认识。学习python, 了解些机器学习，人工智能方面的知识，希望自己可以坚持深入学习。</p>\n<a id=\"more\"></a>\n<h2 id=\"下载安装\"><a class=\"markdownIt-Anchor\" href=\"#下载安装\"></a> 下载安装</h2>\n<p>1、下载源码包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz</span><br></pre></td></tr></table></figure>\n<p>2、解压缩：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf Python-3.7.0.tgz</span><br></pre></td></tr></table></figure>\n<p>然后进入到解压缩后的目录<code>cd Python-3.7.0</code></p>\n<p>3、安装配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/<span class=\"built_in\">local</span>/python37/</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>–prefix 是指定安装目录</p>\n</blockquote>\n<blockquote>\n<p>执行前确保系统已安装了编译器gcc <code>sudo yum install -y make gcc gcc-c++</code></p>\n</blockquote>\n<p>4、编译，并安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<h2 id=\"将默认的python27换成新版python37\"><a class=\"markdownIt-Anchor\" href=\"#将默认的python27换成新版python37\"></a> 将默认的python2.7换成新版python3.7</h2>\n<p>(1) 查看当前系统python执行程序的位置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">locate */bin/python</span><br></pre></td></tr></table></figure>\n<p>定位到加载的python目录是<code>/usr/bin/python</code></p>\n<p>(2) 查看环境变量的值<code>$PATH</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$PATH</span></span><br></pre></td></tr></table></figure>\n<p>有一行是<code>/usr/bin</code>, 说明直接运行的是<code>/usr/bin/python</code>， 并且当前<code>/usr/bin/python</code>是软连接到<code>/usr/bin/python2.7</code>的</p>\n<p>(3) 建立新的软连接</p>\n<p>使<code>/usr/bin/python</code>指向<code>/usr/local/python37/bin/python3.7</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -sb /usr/<span class=\"built_in\">local</span>/python37/bin/python3.7 /usr/bin/python</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>-s: 表示建立的是软连接（快捷方式指向），不加表示是硬连接（即复制一份的）<br>\n-b：表示删除、覆盖以前建立的链接</p>\n</blockquote>\n<p>参考: <a href=\"https://www.cnblogs.com/peida/archive/2012/12/11/2812294.html\" target=\"_blank\" rel=\"noopener\">博客园 – 每天一个linux命令（35）：ln 命令</a></p>\n<p>此时执行python即是python3.7版本<br>\n<img src=\"https://ws1.sinaimg.cn/mw690/005EgYNMly1g2ynt37gvzj30i102vmx4.jpg\" alt=\"\"></p>\n<h2 id=\"操作遇到的问题\"><a class=\"markdownIt-Anchor\" href=\"#操作遇到的问题\"></a> 操作遇到的问题：</h2>\n<p>1、make install安装python3.7时报 No module named ‘_ctypes’ 错误的解决办法：</p>\n<p>答：<code>yum install libffi-devel</code></p>\n<p>参考： <a href=\"https://stackoverflow.com/questions/27022373/python3-importerror-no-module-named-ctypes-when-using-value-from-module-mul\" target=\"_blank\" rel=\"noopener\">StackOverflow – Python3: ImportError: No module named ‘_ctypes’ when using Value from module multiprocessing</a></p>\n","site":{"data":{}},"excerpt":"<p>拓展自己对语言的认识和理解，开始学点其他的语言，不给自己的技术栈设限，有更多的思考和认识。学习python, 了解些机器学习，人工智能方面的知识，希望自己可以坚持深入学习。</p>","more":"<h2 id=\"下载安装\"><a class=\"markdownIt-Anchor\" href=\"#下载安装\"></a> 下载安装</h2>\n<p>1、下载源码包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz</span><br></pre></td></tr></table></figure>\n<p>2、解压缩：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf Python-3.7.0.tgz</span><br></pre></td></tr></table></figure>\n<p>然后进入到解压缩后的目录<code>cd Python-3.7.0</code></p>\n<p>3、安装配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/<span class=\"built_in\">local</span>/python37/</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>–prefix 是指定安装目录</p>\n</blockquote>\n<blockquote>\n<p>执行前确保系统已安装了编译器gcc <code>sudo yum install -y make gcc gcc-c++</code></p>\n</blockquote>\n<p>4、编译，并安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<h2 id=\"将默认的python27换成新版python37\"><a class=\"markdownIt-Anchor\" href=\"#将默认的python27换成新版python37\"></a> 将默认的python2.7换成新版python3.7</h2>\n<p>(1) 查看当前系统python执行程序的位置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">locate */bin/python</span><br></pre></td></tr></table></figure>\n<p>定位到加载的python目录是<code>/usr/bin/python</code></p>\n<p>(2) 查看环境变量的值<code>$PATH</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$PATH</span></span><br></pre></td></tr></table></figure>\n<p>有一行是<code>/usr/bin</code>, 说明直接运行的是<code>/usr/bin/python</code>， 并且当前<code>/usr/bin/python</code>是软连接到<code>/usr/bin/python2.7</code>的</p>\n<p>(3) 建立新的软连接</p>\n<p>使<code>/usr/bin/python</code>指向<code>/usr/local/python37/bin/python3.7</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -sb /usr/<span class=\"built_in\">local</span>/python37/bin/python3.7 /usr/bin/python</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>-s: 表示建立的是软连接（快捷方式指向），不加表示是硬连接（即复制一份的）<br>\n-b：表示删除、覆盖以前建立的链接</p>\n</blockquote>\n<p>参考: <a href=\"https://www.cnblogs.com/peida/archive/2012/12/11/2812294.html\" target=\"_blank\" rel=\"noopener\">博客园 – 每天一个linux命令（35）：ln 命令</a></p>\n<p>此时执行python即是python3.7版本<br>\n<img src=\"https://ws1.sinaimg.cn/mw690/005EgYNMly1g2ynt37gvzj30i102vmx4.jpg\" alt=\"\"></p>\n<h2 id=\"操作遇到的问题\"><a class=\"markdownIt-Anchor\" href=\"#操作遇到的问题\"></a> 操作遇到的问题：</h2>\n<p>1、make install安装python3.7时报 No module named ‘_ctypes’ 错误的解决办法：</p>\n<p>答：<code>yum install libffi-devel</code></p>\n<p>参考： <a href=\"https://stackoverflow.com/questions/27022373/python3-importerror-no-module-named-ctypes-when-using-value-from-module-mul\" target=\"_blank\" rel=\"noopener\">StackOverflow – Python3: ImportError: No module named ‘_ctypes’ when using Value from module multiprocessing</a></p>"},{"title":"【Redis】 特性","date":"2019-05-11T02:06:32.000Z","_content":"\n- 速度快\n- 持久化\n- 多种数据结构\n- 支持多种编辑语言（协议简单）\n- 功能丰富\n- 简单\n- 主从复制\n\n<!-- more -->\n\n### 速度快\n\n官方：10w OPS (读写)\n\n- 数据存储位置：内存（主要原因）\n- 实现语言：C语言(50000 line)\n- +5线程模型：单线程（会是并发的瓶颈，但是）\n\n### 持久化（断电不丢数据）\n\n内存的数据在机器断电后是无法恢复的，但是Redis将所有数据保存在内存中，而对数据的更新将异步地保存到磁盘上。\n\n### 多种数据结构\n\nkey-value形式\n\nvalue的类型可以是：\n- 字符串（string）\n- 散列（hash）\n- 链表（list）\n- 集合（set）\n- 有序集合（sorted set）\n- 位图 （bit map)\n- hyper log log 超小内存唯一值计数\n- GEO：地理信息定位\n\n### 支持多种客户端语言\n\n### 功能丰富\n\n- 发布订阅\n- Lua 脚本\n- 事务\n- pipeline\n","source":"_posts/redis-base.md","raw":"---\ntitle: 【Redis】 特性\ndate: 2019-05-11 10:06:32\ntags:\n  - redis\ncategory:\n  - 【Redis相关】\n---\n\n- 速度快\n- 持久化\n- 多种数据结构\n- 支持多种编辑语言（协议简单）\n- 功能丰富\n- 简单\n- 主从复制\n\n<!-- more -->\n\n### 速度快\n\n官方：10w OPS (读写)\n\n- 数据存储位置：内存（主要原因）\n- 实现语言：C语言(50000 line)\n- +5线程模型：单线程（会是并发的瓶颈，但是）\n\n### 持久化（断电不丢数据）\n\n内存的数据在机器断电后是无法恢复的，但是Redis将所有数据保存在内存中，而对数据的更新将异步地保存到磁盘上。\n\n### 多种数据结构\n\nkey-value形式\n\nvalue的类型可以是：\n- 字符串（string）\n- 散列（hash）\n- 链表（list）\n- 集合（set）\n- 有序集合（sorted set）\n- 位图 （bit map)\n- hyper log log 超小内存唯一值计数\n- GEO：地理信息定位\n\n### 支持多种客户端语言\n\n### 功能丰富\n\n- 发布订阅\n- Lua 脚本\n- 事务\n- pipeline\n","slug":"redis-base","published":1,"updated":"2019-05-12T16:20:58.408Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c40x002z2wuu7vi9ti15","content":"<ul>\n<li>速度快</li>\n<li>持久化</li>\n<li>多种数据结构</li>\n<li>支持多种编辑语言（协议简单）</li>\n<li>功能丰富</li>\n<li>简单</li>\n<li>主从复制</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"速度快\"><a class=\"markdownIt-Anchor\" href=\"#速度快\"></a> 速度快</h3>\n<p>官方：10w OPS (读写)</p>\n<ul>\n<li>数据存储位置：内存（主要原因）</li>\n<li>实现语言：C语言(50000 line)</li>\n<li>+5线程模型：单线程（会是并发的瓶颈，但是）</li>\n</ul>\n<h3 id=\"持久化断电不丢数据\"><a class=\"markdownIt-Anchor\" href=\"#持久化断电不丢数据\"></a> 持久化（断电不丢数据）</h3>\n<p>内存的数据在机器断电后是无法恢复的，但是Redis将所有数据保存在内存中，而对数据的更新将异步地保存到磁盘上。</p>\n<h3 id=\"多种数据结构\"><a class=\"markdownIt-Anchor\" href=\"#多种数据结构\"></a> 多种数据结构</h3>\n<p>key-value形式</p>\n<p>value的类型可以是：</p>\n<ul>\n<li>字符串（string）</li>\n<li>散列（hash）</li>\n<li>链表（list）</li>\n<li>集合（set）</li>\n<li>有序集合（sorted set）</li>\n<li>位图 （bit map)</li>\n<li>hyper log log 超小内存唯一值计数</li>\n<li>GEO：地理信息定位</li>\n</ul>\n<h3 id=\"支持多种客户端语言\"><a class=\"markdownIt-Anchor\" href=\"#支持多种客户端语言\"></a> 支持多种客户端语言</h3>\n<h3 id=\"功能丰富\"><a class=\"markdownIt-Anchor\" href=\"#功能丰富\"></a> 功能丰富</h3>\n<ul>\n<li>发布订阅</li>\n<li>Lua 脚本</li>\n<li>事务</li>\n<li>pipeline</li>\n</ul>\n","site":{"data":{}},"excerpt":"<ul>\n<li>速度快</li>\n<li>持久化</li>\n<li>多种数据结构</li>\n<li>支持多种编辑语言（协议简单）</li>\n<li>功能丰富</li>\n<li>简单</li>\n<li>主从复制</li>\n</ul>","more":"<h3 id=\"速度快\"><a class=\"markdownIt-Anchor\" href=\"#速度快\"></a> 速度快</h3>\n<p>官方：10w OPS (读写)</p>\n<ul>\n<li>数据存储位置：内存（主要原因）</li>\n<li>实现语言：C语言(50000 line)</li>\n<li>+5线程模型：单线程（会是并发的瓶颈，但是）</li>\n</ul>\n<h3 id=\"持久化断电不丢数据\"><a class=\"markdownIt-Anchor\" href=\"#持久化断电不丢数据\"></a> 持久化（断电不丢数据）</h3>\n<p>内存的数据在机器断电后是无法恢复的，但是Redis将所有数据保存在内存中，而对数据的更新将异步地保存到磁盘上。</p>\n<h3 id=\"多种数据结构\"><a class=\"markdownIt-Anchor\" href=\"#多种数据结构\"></a> 多种数据结构</h3>\n<p>key-value形式</p>\n<p>value的类型可以是：</p>\n<ul>\n<li>字符串（string）</li>\n<li>散列（hash）</li>\n<li>链表（list）</li>\n<li>集合（set）</li>\n<li>有序集合（sorted set）</li>\n<li>位图 （bit map)</li>\n<li>hyper log log 超小内存唯一值计数</li>\n<li>GEO：地理信息定位</li>\n</ul>\n<h3 id=\"支持多种客户端语言\"><a class=\"markdownIt-Anchor\" href=\"#支持多种客户端语言\"></a> 支持多种客户端语言</h3>\n<h3 id=\"功能丰富\"><a class=\"markdownIt-Anchor\" href=\"#功能丰富\"></a> 功能丰富</h3>\n<ul>\n<li>发布订阅</li>\n<li>Lua 脚本</li>\n<li>事务</li>\n<li>pipeline</li>\n</ul>"},{"title":"【总结】四个月的工作任务总结","date":"2018-07-28T01:41:33.000Z","_content":"\n这个阶段主要开始完成 Facebook 的项目，基于第三方 api 进行开发，完成和 Facebook 平台的对接，实现 Facebook 业务迁移。需要强化英文文档阅读能力和业务理解和构思业务实现流程的能力，并提高代码质量，高效完成任务。养成知识迁移能力和相关知识点强关联能力。\n\n<!--more -->\n\n# 功能模块介绍\n\n## 1.文案图片管理\n\n### 需求分析\n\n对每个设计人员设计的文案图片进行统计分析，包括设计人员的总数据和每个文案图片对应的数据\n\n### 数据表设计\n\n(1) 设计人员表 [关联用户表和文案表和记录统计数据]\n\n(2) 文案统计表 [文案图片和文案的 adset 和 campaign]\n\n## 2.同步 facebook 数据 [campaign adset ad]\n\n实现和 facebook 的对接，拿到 ad_account 下对应的 campaign 信息，adset 信息和 ad 信息。[access_token]\n\n[facebook 开发者文档](https://developers.facebook.com/docs/marketing-api/reference/v3.1)\n\n### 数据表设计 [主要依据[facebook的数据结构](https://developers.facebook.com/docs/marketing-api/reference/adgroup)设计表结构]\n\n## 3.规则模块\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1furhyuby3zj30l50ihaao.jpg)\n\n### 创建规则及设置规则触发条件\n\n1）应用对象 [campaign|adset active|paused]\n\n2）触发规则后的处理方式 [开启|关闭|发送通知|修改名称|拷贝|...]\n\n3）触发条件 [广告花费|点击量|购买量|单项收益|加入购物车量|...]\n\n4）生效期 [整个|today|yesterday|last 7 day|...]\n\n5）额外的条件限制 [限定 id 范围|限定拷贝数量范围]\n\n6）规则执行周期`schedule` [手动执行|定点执行|5 分钟一次|...]\n\n7）规则名称和所属规则分类\n\n### 执行规则，查看执行结果\n\n根据创建规则时设置的执行周期手动或自动执行相应规则，获得效益比较好的广告相关信息, 进而优化广告投放策略。\n\n## 4.文案模块\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1furi6njmqaj30d90chjy9.jpg)\n\n### 需求分析\n\n同步 Facebook 文案信息，获取所有文案信息并展示，创建文案并同步应用到 facebook 平台。\n\n### 组成结构\n\n- 文本部分 [广告宣言 优惠信息 标题 CTA]\n\n- 图片部分\n\n## 5.关键词功能（评论模块下）\n\n5.1 应用场景\n\n对 Facebook 文案下的评论进行关键词屏蔽。含有相应关键词的评论则隐藏。\n\n5.2 实现功能\n\n- 对关键词设置 redis 缓存\n- 设置新增和更新时\n\n# 总结整理\n\n## 日常业务实现总结\n\n### 查询\n\n1.关联查询时字段名相同导致数据覆盖\n\n2.排序方式\n\n3.适当使用column()和value()[单纯的值或某列的数组]取代select()和find()[数据集对象]\n\n### 查询和编辑\n\n3.where 条件是否混杂[多处表查询的$where 没有区分导致不同表使用相同的查询条件导致字段不存在或多余的查询限制）\n\n### 新增和编辑\n\n4.用户提交数据验证 [post]\n\n4.1 提交的数据是否是数组\n\n4.2 编辑时提交的 id 是否存在\n\n4.3 名称已存在 [新增和编辑的验证不同]\n\n## 基于第三方 api 开发\n\n### 1.阅读第三方开发者文档\n\n- 有哪些接口？可以实现哪些功能？\n- 需要用到哪些功能(哪些接口)？\n- 接口需要的参数（准确理解）\n- 调用接口后返回的参数\n\n### 2.下载 SDK, 封装成框架的第三方扩展类库，概览可以实现的功能\n\n- 有哪些文件？有哪些类？有哪些方法？\n- 方法对应的功能？需要传入的参数？返回的结果形式？\n\n### 3.封装成通用方法，后期直接调用\n\n## 知识体系的建立\n\n### 知识体系\n\n知识体系是对一个概念进行发散性学习，对概念本身和与其具有相关性的概念进行联系，进行全方位的学习和理解。\n\n### 如何建立知识体系\n\n1.具体的东西 or 泛泛的概念？\n\n2.怎么来的(发展历史和发展过程)？\n\n3.处于知识体系的什么位置？[是由什么扩散开的知识点或者可以扩展出什么知识点]\n\n4.知识（概念）本身[外部关联 和 内部关联]\n\n- 外部：为什么它好？同类的其他概念为什么不好？\n- 内部：它究竟在讲什么东西？解决什么问题？怎么解决的？\n\n5.建立知识体系的优势\n\n- 系统、完整的理解某个概念\n- 知识点串联，提升知识迁移能力\n- 提升学习能力，和学习效率，扩展知识面\n\n# 项目展示\n\n## 1.后台概览图\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fup8sr9hxhj31g30hwwfz.jpg)\n\n## 2.规则列表\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1furkvqigj0j31hc0jyq5o.jpg)\n","source":"_posts/summary-monthly4.md","raw":"---\ntitle: 【总结】四个月的工作任务总结\ndate: 2018-07-28 09:41:33\ntags:\n  - 工作总结\ncategory:\n  - 【工作总结】\n---\n\n这个阶段主要开始完成 Facebook 的项目，基于第三方 api 进行开发，完成和 Facebook 平台的对接，实现 Facebook 业务迁移。需要强化英文文档阅读能力和业务理解和构思业务实现流程的能力，并提高代码质量，高效完成任务。养成知识迁移能力和相关知识点强关联能力。\n\n<!--more -->\n\n# 功能模块介绍\n\n## 1.文案图片管理\n\n### 需求分析\n\n对每个设计人员设计的文案图片进行统计分析，包括设计人员的总数据和每个文案图片对应的数据\n\n### 数据表设计\n\n(1) 设计人员表 [关联用户表和文案表和记录统计数据]\n\n(2) 文案统计表 [文案图片和文案的 adset 和 campaign]\n\n## 2.同步 facebook 数据 [campaign adset ad]\n\n实现和 facebook 的对接，拿到 ad_account 下对应的 campaign 信息，adset 信息和 ad 信息。[access_token]\n\n[facebook 开发者文档](https://developers.facebook.com/docs/marketing-api/reference/v3.1)\n\n### 数据表设计 [主要依据[facebook的数据结构](https://developers.facebook.com/docs/marketing-api/reference/adgroup)设计表结构]\n\n## 3.规则模块\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1furhyuby3zj30l50ihaao.jpg)\n\n### 创建规则及设置规则触发条件\n\n1）应用对象 [campaign|adset active|paused]\n\n2）触发规则后的处理方式 [开启|关闭|发送通知|修改名称|拷贝|...]\n\n3）触发条件 [广告花费|点击量|购买量|单项收益|加入购物车量|...]\n\n4）生效期 [整个|today|yesterday|last 7 day|...]\n\n5）额外的条件限制 [限定 id 范围|限定拷贝数量范围]\n\n6）规则执行周期`schedule` [手动执行|定点执行|5 分钟一次|...]\n\n7）规则名称和所属规则分类\n\n### 执行规则，查看执行结果\n\n根据创建规则时设置的执行周期手动或自动执行相应规则，获得效益比较好的广告相关信息, 进而优化广告投放策略。\n\n## 4.文案模块\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1furi6njmqaj30d90chjy9.jpg)\n\n### 需求分析\n\n同步 Facebook 文案信息，获取所有文案信息并展示，创建文案并同步应用到 facebook 平台。\n\n### 组成结构\n\n- 文本部分 [广告宣言 优惠信息 标题 CTA]\n\n- 图片部分\n\n## 5.关键词功能（评论模块下）\n\n5.1 应用场景\n\n对 Facebook 文案下的评论进行关键词屏蔽。含有相应关键词的评论则隐藏。\n\n5.2 实现功能\n\n- 对关键词设置 redis 缓存\n- 设置新增和更新时\n\n# 总结整理\n\n## 日常业务实现总结\n\n### 查询\n\n1.关联查询时字段名相同导致数据覆盖\n\n2.排序方式\n\n3.适当使用column()和value()[单纯的值或某列的数组]取代select()和find()[数据集对象]\n\n### 查询和编辑\n\n3.where 条件是否混杂[多处表查询的$where 没有区分导致不同表使用相同的查询条件导致字段不存在或多余的查询限制）\n\n### 新增和编辑\n\n4.用户提交数据验证 [post]\n\n4.1 提交的数据是否是数组\n\n4.2 编辑时提交的 id 是否存在\n\n4.3 名称已存在 [新增和编辑的验证不同]\n\n## 基于第三方 api 开发\n\n### 1.阅读第三方开发者文档\n\n- 有哪些接口？可以实现哪些功能？\n- 需要用到哪些功能(哪些接口)？\n- 接口需要的参数（准确理解）\n- 调用接口后返回的参数\n\n### 2.下载 SDK, 封装成框架的第三方扩展类库，概览可以实现的功能\n\n- 有哪些文件？有哪些类？有哪些方法？\n- 方法对应的功能？需要传入的参数？返回的结果形式？\n\n### 3.封装成通用方法，后期直接调用\n\n## 知识体系的建立\n\n### 知识体系\n\n知识体系是对一个概念进行发散性学习，对概念本身和与其具有相关性的概念进行联系，进行全方位的学习和理解。\n\n### 如何建立知识体系\n\n1.具体的东西 or 泛泛的概念？\n\n2.怎么来的(发展历史和发展过程)？\n\n3.处于知识体系的什么位置？[是由什么扩散开的知识点或者可以扩展出什么知识点]\n\n4.知识（概念）本身[外部关联 和 内部关联]\n\n- 外部：为什么它好？同类的其他概念为什么不好？\n- 内部：它究竟在讲什么东西？解决什么问题？怎么解决的？\n\n5.建立知识体系的优势\n\n- 系统、完整的理解某个概念\n- 知识点串联，提升知识迁移能力\n- 提升学习能力，和学习效率，扩展知识面\n\n# 项目展示\n\n## 1.后台概览图\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fup8sr9hxhj31g30hwwfz.jpg)\n\n## 2.规则列表\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1furkvqigj0j31hc0jyq5o.jpg)\n","slug":"summary-monthly4","published":1,"updated":"2019-05-12T15:52:20.391Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c40z00312wuum7lccy1c","content":"<p>这个阶段主要开始完成 Facebook 的项目，基于第三方 api 进行开发，完成和 Facebook 平台的对接，实现 Facebook 业务迁移。需要强化英文文档阅读能力和业务理解和构思业务实现流程的能力，并提高代码质量，高效完成任务。养成知识迁移能力和相关知识点强关联能力。</p>\n<a id=\"more\"></a>\n<h1 id=\"功能模块介绍\"><a class=\"markdownIt-Anchor\" href=\"#功能模块介绍\"></a> 功能模块介绍</h1>\n<h2 id=\"1文案图片管理\"><a class=\"markdownIt-Anchor\" href=\"#1文案图片管理\"></a> 1.文案图片管理</h2>\n<h3 id=\"需求分析\"><a class=\"markdownIt-Anchor\" href=\"#需求分析\"></a> 需求分析</h3>\n<p>对每个设计人员设计的文案图片进行统计分析，包括设计人员的总数据和每个文案图片对应的数据</p>\n<h3 id=\"数据表设计\"><a class=\"markdownIt-Anchor\" href=\"#数据表设计\"></a> 数据表设计</h3>\n<p>(1) 设计人员表 [关联用户表和文案表和记录统计数据]</p>\n<p>(2) 文案统计表 [文案图片和文案的 adset 和 campaign]</p>\n<h2 id=\"2同步-facebook-数据-campaign-adset-ad\"><a class=\"markdownIt-Anchor\" href=\"#2同步-facebook-数据-campaign-adset-ad\"></a> 2.同步 facebook 数据 [campaign adset ad]</h2>\n<p>实现和 facebook 的对接，拿到 ad_account 下对应的 campaign 信息，adset 信息和 ad 信息。[access_token]</p>\n<p><a href=\"https://developers.facebook.com/docs/marketing-api/reference/v3.1\" target=\"_blank\" rel=\"noopener\">facebook 开发者文档</a></p>\n<h3 id=\"数据表设计-主要依据facebook的数据结构设计表结构\"><a class=\"markdownIt-Anchor\" href=\"#数据表设计-主要依据facebook的数据结构设计表结构\"></a> 数据表设计 [主要依据<a href=\"https://developers.facebook.com/docs/marketing-api/reference/adgroup\" target=\"_blank\" rel=\"noopener\">facebook的数据结构</a>设计表结构]</h3>\n<h2 id=\"3规则模块\"><a class=\"markdownIt-Anchor\" href=\"#3规则模块\"></a> 3.规则模块</h2>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1furhyuby3zj30l50ihaao.jpg\" alt=\"\"></p>\n<h3 id=\"创建规则及设置规则触发条件\"><a class=\"markdownIt-Anchor\" href=\"#创建规则及设置规则触发条件\"></a> 创建规则及设置规则触发条件</h3>\n<p>1）应用对象 [campaign|adset active|paused]</p>\n<p>2）触发规则后的处理方式 [开启|关闭|发送通知|修改名称|拷贝|…]</p>\n<p>3）触发条件 [广告花费|点击量|购买量|单项收益|加入购物车量|…]</p>\n<p>4）生效期 [整个|today|yesterday|last 7 day|…]</p>\n<p>5）额外的条件限制 [限定 id 范围|限定拷贝数量范围]</p>\n<p>6）规则执行周期<code>schedule</code> [手动执行|定点执行|5 分钟一次|…]</p>\n<p>7）规则名称和所属规则分类</p>\n<h3 id=\"执行规则查看执行结果\"><a class=\"markdownIt-Anchor\" href=\"#执行规则查看执行结果\"></a> 执行规则，查看执行结果</h3>\n<p>根据创建规则时设置的执行周期手动或自动执行相应规则，获得效益比较好的广告相关信息, 进而优化广告投放策略。</p>\n<h2 id=\"4文案模块\"><a class=\"markdownIt-Anchor\" href=\"#4文案模块\"></a> 4.文案模块</h2>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1furi6njmqaj30d90chjy9.jpg\" alt=\"\"></p>\n<h3 id=\"需求分析-2\"><a class=\"markdownIt-Anchor\" href=\"#需求分析-2\"></a> 需求分析</h3>\n<p>同步 Facebook 文案信息，获取所有文案信息并展示，创建文案并同步应用到 facebook 平台。</p>\n<h3 id=\"组成结构\"><a class=\"markdownIt-Anchor\" href=\"#组成结构\"></a> 组成结构</h3>\n<ul>\n<li>\n<p>文本部分 [广告宣言 优惠信息 标题 CTA]</p>\n</li>\n<li>\n<p>图片部分</p>\n</li>\n</ul>\n<h2 id=\"5关键词功能评论模块下\"><a class=\"markdownIt-Anchor\" href=\"#5关键词功能评论模块下\"></a> 5.关键词功能（评论模块下）</h2>\n<p>5.1 应用场景</p>\n<p>对 Facebook 文案下的评论进行关键词屏蔽。含有相应关键词的评论则隐藏。</p>\n<p>5.2 实现功能</p>\n<ul>\n<li>对关键词设置 redis 缓存</li>\n<li>设置新增和更新时</li>\n</ul>\n<h1 id=\"总结整理\"><a class=\"markdownIt-Anchor\" href=\"#总结整理\"></a> 总结整理</h1>\n<h2 id=\"日常业务实现总结\"><a class=\"markdownIt-Anchor\" href=\"#日常业务实现总结\"></a> 日常业务实现总结</h2>\n<h3 id=\"查询\"><a class=\"markdownIt-Anchor\" href=\"#查询\"></a> 查询</h3>\n<p>1.关联查询时字段名相同导致数据覆盖</p>\n<p>2.排序方式</p>\n<p>3.适当使用column()和value()[单纯的值或某列的数组]取代select()和find()[数据集对象]</p>\n<h3 id=\"查询和编辑\"><a class=\"markdownIt-Anchor\" href=\"#查询和编辑\"></a> 查询和编辑</h3>\n<p>3.where 条件是否混杂[多处表查询的$where 没有区分导致不同表使用相同的查询条件导致字段不存在或多余的查询限制）</p>\n<h3 id=\"新增和编辑\"><a class=\"markdownIt-Anchor\" href=\"#新增和编辑\"></a> 新增和编辑</h3>\n<p>4.用户提交数据验证 [post]</p>\n<p>4.1 提交的数据是否是数组</p>\n<p>4.2 编辑时提交的 id 是否存在</p>\n<p>4.3 名称已存在 [新增和编辑的验证不同]</p>\n<h2 id=\"基于第三方-api-开发\"><a class=\"markdownIt-Anchor\" href=\"#基于第三方-api-开发\"></a> 基于第三方 api 开发</h2>\n<h3 id=\"1阅读第三方开发者文档\"><a class=\"markdownIt-Anchor\" href=\"#1阅读第三方开发者文档\"></a> 1.阅读第三方开发者文档</h3>\n<ul>\n<li>有哪些接口？可以实现哪些功能？</li>\n<li>需要用到哪些功能(哪些接口)？</li>\n<li>接口需要的参数（准确理解）</li>\n<li>调用接口后返回的参数</li>\n</ul>\n<h3 id=\"2下载-sdk-封装成框架的第三方扩展类库概览可以实现的功能\"><a class=\"markdownIt-Anchor\" href=\"#2下载-sdk-封装成框架的第三方扩展类库概览可以实现的功能\"></a> 2.下载 SDK, 封装成框架的第三方扩展类库，概览可以实现的功能</h3>\n<ul>\n<li>有哪些文件？有哪些类？有哪些方法？</li>\n<li>方法对应的功能？需要传入的参数？返回的结果形式？</li>\n</ul>\n<h3 id=\"3封装成通用方法后期直接调用\"><a class=\"markdownIt-Anchor\" href=\"#3封装成通用方法后期直接调用\"></a> 3.封装成通用方法，后期直接调用</h3>\n<h2 id=\"知识体系的建立\"><a class=\"markdownIt-Anchor\" href=\"#知识体系的建立\"></a> 知识体系的建立</h2>\n<h3 id=\"知识体系\"><a class=\"markdownIt-Anchor\" href=\"#知识体系\"></a> 知识体系</h3>\n<p>知识体系是对一个概念进行发散性学习，对概念本身和与其具有相关性的概念进行联系，进行全方位的学习和理解。</p>\n<h3 id=\"如何建立知识体系\"><a class=\"markdownIt-Anchor\" href=\"#如何建立知识体系\"></a> 如何建立知识体系</h3>\n<p>1.具体的东西 or 泛泛的概念？</p>\n<p>2.怎么来的(发展历史和发展过程)？</p>\n<p>3.处于知识体系的什么位置？[是由什么扩散开的知识点或者可以扩展出什么知识点]</p>\n<p>4.知识（概念）本身[外部关联 和 内部关联]</p>\n<ul>\n<li>外部：为什么它好？同类的其他概念为什么不好？</li>\n<li>内部：它究竟在讲什么东西？解决什么问题？怎么解决的？</li>\n</ul>\n<p>5.建立知识体系的优势</p>\n<ul>\n<li>系统、完整的理解某个概念</li>\n<li>知识点串联，提升知识迁移能力</li>\n<li>提升学习能力，和学习效率，扩展知识面</li>\n</ul>\n<h1 id=\"项目展示\"><a class=\"markdownIt-Anchor\" href=\"#项目展示\"></a> 项目展示</h1>\n<h2 id=\"1后台概览图\"><a class=\"markdownIt-Anchor\" href=\"#1后台概览图\"></a> 1.后台概览图</h2>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fup8sr9hxhj31g30hwwfz.jpg\" alt=\"\"></p>\n<h2 id=\"2规则列表\"><a class=\"markdownIt-Anchor\" href=\"#2规则列表\"></a> 2.规则列表</h2>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1furkvqigj0j31hc0jyq5o.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>这个阶段主要开始完成 Facebook 的项目，基于第三方 api 进行开发，完成和 Facebook 平台的对接，实现 Facebook 业务迁移。需要强化英文文档阅读能力和业务理解和构思业务实现流程的能力，并提高代码质量，高效完成任务。养成知识迁移能力和相关知识点强关联能力。</p>","more":"<h1 id=\"功能模块介绍\"><a class=\"markdownIt-Anchor\" href=\"#功能模块介绍\"></a> 功能模块介绍</h1>\n<h2 id=\"1文案图片管理\"><a class=\"markdownIt-Anchor\" href=\"#1文案图片管理\"></a> 1.文案图片管理</h2>\n<h3 id=\"需求分析\"><a class=\"markdownIt-Anchor\" href=\"#需求分析\"></a> 需求分析</h3>\n<p>对每个设计人员设计的文案图片进行统计分析，包括设计人员的总数据和每个文案图片对应的数据</p>\n<h3 id=\"数据表设计\"><a class=\"markdownIt-Anchor\" href=\"#数据表设计\"></a> 数据表设计</h3>\n<p>(1) 设计人员表 [关联用户表和文案表和记录统计数据]</p>\n<p>(2) 文案统计表 [文案图片和文案的 adset 和 campaign]</p>\n<h2 id=\"2同步-facebook-数据-campaign-adset-ad\"><a class=\"markdownIt-Anchor\" href=\"#2同步-facebook-数据-campaign-adset-ad\"></a> 2.同步 facebook 数据 [campaign adset ad]</h2>\n<p>实现和 facebook 的对接，拿到 ad_account 下对应的 campaign 信息，adset 信息和 ad 信息。[access_token]</p>\n<p><a href=\"https://developers.facebook.com/docs/marketing-api/reference/v3.1\" target=\"_blank\" rel=\"noopener\">facebook 开发者文档</a></p>\n<h3 id=\"数据表设计-主要依据facebook的数据结构设计表结构\"><a class=\"markdownIt-Anchor\" href=\"#数据表设计-主要依据facebook的数据结构设计表结构\"></a> 数据表设计 [主要依据<a href=\"https://developers.facebook.com/docs/marketing-api/reference/adgroup\" target=\"_blank\" rel=\"noopener\">facebook的数据结构</a>设计表结构]</h3>\n<h2 id=\"3规则模块\"><a class=\"markdownIt-Anchor\" href=\"#3规则模块\"></a> 3.规则模块</h2>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1furhyuby3zj30l50ihaao.jpg\" alt=\"\"></p>\n<h3 id=\"创建规则及设置规则触发条件\"><a class=\"markdownIt-Anchor\" href=\"#创建规则及设置规则触发条件\"></a> 创建规则及设置规则触发条件</h3>\n<p>1）应用对象 [campaign|adset active|paused]</p>\n<p>2）触发规则后的处理方式 [开启|关闭|发送通知|修改名称|拷贝|…]</p>\n<p>3）触发条件 [广告花费|点击量|购买量|单项收益|加入购物车量|…]</p>\n<p>4）生效期 [整个|today|yesterday|last 7 day|…]</p>\n<p>5）额外的条件限制 [限定 id 范围|限定拷贝数量范围]</p>\n<p>6）规则执行周期<code>schedule</code> [手动执行|定点执行|5 分钟一次|…]</p>\n<p>7）规则名称和所属规则分类</p>\n<h3 id=\"执行规则查看执行结果\"><a class=\"markdownIt-Anchor\" href=\"#执行规则查看执行结果\"></a> 执行规则，查看执行结果</h3>\n<p>根据创建规则时设置的执行周期手动或自动执行相应规则，获得效益比较好的广告相关信息, 进而优化广告投放策略。</p>\n<h2 id=\"4文案模块\"><a class=\"markdownIt-Anchor\" href=\"#4文案模块\"></a> 4.文案模块</h2>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1furi6njmqaj30d90chjy9.jpg\" alt=\"\"></p>\n<h3 id=\"需求分析-2\"><a class=\"markdownIt-Anchor\" href=\"#需求分析-2\"></a> 需求分析</h3>\n<p>同步 Facebook 文案信息，获取所有文案信息并展示，创建文案并同步应用到 facebook 平台。</p>\n<h3 id=\"组成结构\"><a class=\"markdownIt-Anchor\" href=\"#组成结构\"></a> 组成结构</h3>\n<ul>\n<li>\n<p>文本部分 [广告宣言 优惠信息 标题 CTA]</p>\n</li>\n<li>\n<p>图片部分</p>\n</li>\n</ul>\n<h2 id=\"5关键词功能评论模块下\"><a class=\"markdownIt-Anchor\" href=\"#5关键词功能评论模块下\"></a> 5.关键词功能（评论模块下）</h2>\n<p>5.1 应用场景</p>\n<p>对 Facebook 文案下的评论进行关键词屏蔽。含有相应关键词的评论则隐藏。</p>\n<p>5.2 实现功能</p>\n<ul>\n<li>对关键词设置 redis 缓存</li>\n<li>设置新增和更新时</li>\n</ul>\n<h1 id=\"总结整理\"><a class=\"markdownIt-Anchor\" href=\"#总结整理\"></a> 总结整理</h1>\n<h2 id=\"日常业务实现总结\"><a class=\"markdownIt-Anchor\" href=\"#日常业务实现总结\"></a> 日常业务实现总结</h2>\n<h3 id=\"查询\"><a class=\"markdownIt-Anchor\" href=\"#查询\"></a> 查询</h3>\n<p>1.关联查询时字段名相同导致数据覆盖</p>\n<p>2.排序方式</p>\n<p>3.适当使用column()和value()[单纯的值或某列的数组]取代select()和find()[数据集对象]</p>\n<h3 id=\"查询和编辑\"><a class=\"markdownIt-Anchor\" href=\"#查询和编辑\"></a> 查询和编辑</h3>\n<p>3.where 条件是否混杂[多处表查询的$where 没有区分导致不同表使用相同的查询条件导致字段不存在或多余的查询限制）</p>\n<h3 id=\"新增和编辑\"><a class=\"markdownIt-Anchor\" href=\"#新增和编辑\"></a> 新增和编辑</h3>\n<p>4.用户提交数据验证 [post]</p>\n<p>4.1 提交的数据是否是数组</p>\n<p>4.2 编辑时提交的 id 是否存在</p>\n<p>4.3 名称已存在 [新增和编辑的验证不同]</p>\n<h2 id=\"基于第三方-api-开发\"><a class=\"markdownIt-Anchor\" href=\"#基于第三方-api-开发\"></a> 基于第三方 api 开发</h2>\n<h3 id=\"1阅读第三方开发者文档\"><a class=\"markdownIt-Anchor\" href=\"#1阅读第三方开发者文档\"></a> 1.阅读第三方开发者文档</h3>\n<ul>\n<li>有哪些接口？可以实现哪些功能？</li>\n<li>需要用到哪些功能(哪些接口)？</li>\n<li>接口需要的参数（准确理解）</li>\n<li>调用接口后返回的参数</li>\n</ul>\n<h3 id=\"2下载-sdk-封装成框架的第三方扩展类库概览可以实现的功能\"><a class=\"markdownIt-Anchor\" href=\"#2下载-sdk-封装成框架的第三方扩展类库概览可以实现的功能\"></a> 2.下载 SDK, 封装成框架的第三方扩展类库，概览可以实现的功能</h3>\n<ul>\n<li>有哪些文件？有哪些类？有哪些方法？</li>\n<li>方法对应的功能？需要传入的参数？返回的结果形式？</li>\n</ul>\n<h3 id=\"3封装成通用方法后期直接调用\"><a class=\"markdownIt-Anchor\" href=\"#3封装成通用方法后期直接调用\"></a> 3.封装成通用方法，后期直接调用</h3>\n<h2 id=\"知识体系的建立\"><a class=\"markdownIt-Anchor\" href=\"#知识体系的建立\"></a> 知识体系的建立</h2>\n<h3 id=\"知识体系\"><a class=\"markdownIt-Anchor\" href=\"#知识体系\"></a> 知识体系</h3>\n<p>知识体系是对一个概念进行发散性学习，对概念本身和与其具有相关性的概念进行联系，进行全方位的学习和理解。</p>\n<h3 id=\"如何建立知识体系\"><a class=\"markdownIt-Anchor\" href=\"#如何建立知识体系\"></a> 如何建立知识体系</h3>\n<p>1.具体的东西 or 泛泛的概念？</p>\n<p>2.怎么来的(发展历史和发展过程)？</p>\n<p>3.处于知识体系的什么位置？[是由什么扩散开的知识点或者可以扩展出什么知识点]</p>\n<p>4.知识（概念）本身[外部关联 和 内部关联]</p>\n<ul>\n<li>外部：为什么它好？同类的其他概念为什么不好？</li>\n<li>内部：它究竟在讲什么东西？解决什么问题？怎么解决的？</li>\n</ul>\n<p>5.建立知识体系的优势</p>\n<ul>\n<li>系统、完整的理解某个概念</li>\n<li>知识点串联，提升知识迁移能力</li>\n<li>提升学习能力，和学习效率，扩展知识面</li>\n</ul>\n<h1 id=\"项目展示\"><a class=\"markdownIt-Anchor\" href=\"#项目展示\"></a> 项目展示</h1>\n<h2 id=\"1后台概览图\"><a class=\"markdownIt-Anchor\" href=\"#1后台概览图\"></a> 1.后台概览图</h2>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fup8sr9hxhj31g30hwwfz.jpg\" alt=\"\"></p>\n<h2 id=\"2规则列表\"><a class=\"markdownIt-Anchor\" href=\"#2规则列表\"></a> 2.规则列表</h2>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1furkvqigj0j31hc0jyq5o.jpg\" alt=\"\"></p>"},{"title":"【VSCode插件】background添加编辑器背景","date":"2018-06-22T03:48:26.000Z","_content":"\nVScode 编辑器对中文支持很好，插件丰富，主题也好看，所以目前已经由 sublime 转投 Vscode 了。在插件搜集中找到了可以自定义编辑器背景的插件`background`，炫酷的界面又可以优雅的装个叉了，所以立马上手尝试了一下。也对相关设置和过程进行一下记录。\n\n<!--more-->\n\n# 一、安装插件\n\n## 1.下载地址\n\nVsCode 插件 Background 官方介绍：[探个鲜](!https://marketplace.visualstudio.com/items?itemName=shalldie.background)\n\n## 2.安装扩展\n\n(1) 打开扩展列表\n\n1). 快捷键打开\n\n- 快捷键 `Ctrl+Shift+P`\n- 键入`install`找到`安装扩展`\n\n  2). 直接打开左侧最下方的图标\n\n(2) 搜索`background`\n\n(3)安装并重新加载\n\n# 二、使用方法\n\n## 1.打开配置文件\n\n1). 快捷键打开\n\n- 快捷键 `Ctrl+Shift+P`\n- 键入`settings`找到`首选项:打开设置`\n\n> 快捷键`Ctrl+,`可以直接打开(我的这个快捷键无效)\n\n2). 目录栏 `文件 》 首选项 》 设置`\n\n## 2.配置项参数\n\n```json\n// 是否开启背景图显示\n\"background.enabled\": true,\n// true-显示默认的图片  false-显示用户自定义的图片\n\"background.useDefault\": false,\n// 自定义显示的图片，【路径要用双引号】\n\"background.customImages\": [\n    // 最多设置三张图片，默认显示最上方的图片，当打开多个侧边栏时再依次显示后面的背景图片\n    \"D:/UserData/My Documents/My Pictures/man.jpg\",\n    \"D:/UserData/My Documents/My Pictures/geek2.jpg\",\n    \"D:/UserData/My Documents/My Pictures/jizhi.jpg\",\n],\n\"background.useFront\": false,\n// 默认透明度是100%，看起来生硬，不够炫酷\n\"background.style\":{\n    // 编辑器显示文字，默认在左上角\n    \"content\":\"'HELLO WORLD'\",\n    \"pointer-events\":\"none\",\n    // 以下都是CSS显示样式设置\n    \"position\":\"absolute\",\n    \"top\":\"0\",\n    \"right\":\"0\",\n    \"width\":\"100%\",\n    \"height\":\"100%\",\n    \"z-index\":\"99999\",\n    \"background.repeat\":\"no-repeat\",\n    \"background-size\":\"contain\",\n    // 设置透明度\n    \"opacity\":0.1\n}\n```\n\n每次修改后都需要重启 VSCode 使修改生效。\n","source":"_posts/vscode-background.md","raw":"---\ntitle: 【VSCode插件】background添加编辑器背景\ndate: 2018-06-22 11:48:26\ntags:\n  - vscoode\n  - plugin\ncategory:\n  - 【开发工具】\n---\n\nVScode 编辑器对中文支持很好，插件丰富，主题也好看，所以目前已经由 sublime 转投 Vscode 了。在插件搜集中找到了可以自定义编辑器背景的插件`background`，炫酷的界面又可以优雅的装个叉了，所以立马上手尝试了一下。也对相关设置和过程进行一下记录。\n\n<!--more-->\n\n# 一、安装插件\n\n## 1.下载地址\n\nVsCode 插件 Background 官方介绍：[探个鲜](!https://marketplace.visualstudio.com/items?itemName=shalldie.background)\n\n## 2.安装扩展\n\n(1) 打开扩展列表\n\n1). 快捷键打开\n\n- 快捷键 `Ctrl+Shift+P`\n- 键入`install`找到`安装扩展`\n\n  2). 直接打开左侧最下方的图标\n\n(2) 搜索`background`\n\n(3)安装并重新加载\n\n# 二、使用方法\n\n## 1.打开配置文件\n\n1). 快捷键打开\n\n- 快捷键 `Ctrl+Shift+P`\n- 键入`settings`找到`首选项:打开设置`\n\n> 快捷键`Ctrl+,`可以直接打开(我的这个快捷键无效)\n\n2). 目录栏 `文件 》 首选项 》 设置`\n\n## 2.配置项参数\n\n```json\n// 是否开启背景图显示\n\"background.enabled\": true,\n// true-显示默认的图片  false-显示用户自定义的图片\n\"background.useDefault\": false,\n// 自定义显示的图片，【路径要用双引号】\n\"background.customImages\": [\n    // 最多设置三张图片，默认显示最上方的图片，当打开多个侧边栏时再依次显示后面的背景图片\n    \"D:/UserData/My Documents/My Pictures/man.jpg\",\n    \"D:/UserData/My Documents/My Pictures/geek2.jpg\",\n    \"D:/UserData/My Documents/My Pictures/jizhi.jpg\",\n],\n\"background.useFront\": false,\n// 默认透明度是100%，看起来生硬，不够炫酷\n\"background.style\":{\n    // 编辑器显示文字，默认在左上角\n    \"content\":\"'HELLO WORLD'\",\n    \"pointer-events\":\"none\",\n    // 以下都是CSS显示样式设置\n    \"position\":\"absolute\",\n    \"top\":\"0\",\n    \"right\":\"0\",\n    \"width\":\"100%\",\n    \"height\":\"100%\",\n    \"z-index\":\"99999\",\n    \"background.repeat\":\"no-repeat\",\n    \"background-size\":\"contain\",\n    // 设置透明度\n    \"opacity\":0.1\n}\n```\n\n每次修改后都需要重启 VSCode 使修改生效。\n","slug":"vscode-background","published":1,"updated":"2019-05-12T16:16:42.403Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c41100352wuuytcmeaku","content":"<p>VScode 编辑器对中文支持很好，插件丰富，主题也好看，所以目前已经由 sublime 转投 Vscode 了。在插件搜集中找到了可以自定义编辑器背景的插件<code>background</code>，炫酷的界面又可以优雅的装个叉了，所以立马上手尝试了一下。也对相关设置和过程进行一下记录。</p>\n<a id=\"more\"></a>\n<h1 id=\"一-安装插件\"><a class=\"markdownIt-Anchor\" href=\"#一-安装插件\"></a> 一、安装插件</h1>\n<h2 id=\"1下载地址\"><a class=\"markdownIt-Anchor\" href=\"#1下载地址\"></a> 1.下载地址</h2>\n<p>VsCode 插件 Background 官方介绍：<a href=\"!https://marketplace.visualstudio.com/items?itemName=shalldie.background\">探个鲜</a></p>\n<h2 id=\"2安装扩展\"><a class=\"markdownIt-Anchor\" href=\"#2安装扩展\"></a> 2.安装扩展</h2>\n<p>(1) 打开扩展列表</p>\n<p>1). 快捷键打开</p>\n<ul>\n<li>\n<p>快捷键 <code>Ctrl+Shift+P</code></p>\n</li>\n<li>\n<p>键入<code>install</code>找到<code>安装扩展</code></p>\n<p>2). 直接打开左侧最下方的图标</p>\n</li>\n</ul>\n<p>(2) 搜索<code>background</code></p>\n<p>(3)安装并重新加载</p>\n<h1 id=\"二-使用方法\"><a class=\"markdownIt-Anchor\" href=\"#二-使用方法\"></a> 二、使用方法</h1>\n<h2 id=\"1打开配置文件\"><a class=\"markdownIt-Anchor\" href=\"#1打开配置文件\"></a> 1.打开配置文件</h2>\n<p>1). 快捷键打开</p>\n<ul>\n<li>快捷键 <code>Ctrl+Shift+P</code></li>\n<li>键入<code>settings</code>找到<code>首选项:打开设置</code></li>\n</ul>\n<blockquote>\n<p>快捷键<code>Ctrl+,</code>可以直接打开(我的这个快捷键无效)</p>\n</blockquote>\n<p>2). 目录栏 <code>文件 》 首选项 》 设置</code></p>\n<h2 id=\"2配置项参数\"><a class=\"markdownIt-Anchor\" href=\"#2配置项参数\"></a> 2.配置项参数</h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 是否开启背景图显示</span><br><span class=\"line\">\"background.enabled\": true,</span><br><span class=\"line\">// true-显示默认的图片  false-显示用户自定义的图片</span><br><span class=\"line\">\"background.useDefault\": false,</span><br><span class=\"line\">// 自定义显示的图片，【路径要用双引号】</span><br><span class=\"line\">\"background.customImages\": [</span><br><span class=\"line\">    // 最多设置三张图片，默认显示最上方的图片，当打开多个侧边栏时再依次显示后面的背景图片</span><br><span class=\"line\">    \"D:/UserData/My Documents/My Pictures/man.jpg\",</span><br><span class=\"line\">    \"D:/UserData/My Documents/My Pictures/geek2.jpg\",</span><br><span class=\"line\">    \"D:/UserData/My Documents/My Pictures/jizhi.jpg\",</span><br><span class=\"line\">],</span><br><span class=\"line\">\"background.useFront\": false,</span><br><span class=\"line\">// 默认透明度是100%，看起来生硬，不够炫酷</span><br><span class=\"line\">\"background.style\":&#123;</span><br><span class=\"line\">    // 编辑器显示文字，默认在左上角</span><br><span class=\"line\">    \"content\":\"'HELLO WORLD'\",</span><br><span class=\"line\">    \"pointer-events\":\"none\",</span><br><span class=\"line\">    // 以下都是CSS显示样式设置</span><br><span class=\"line\">    \"position\":\"absolute\",</span><br><span class=\"line\">    \"top\":\"0\",</span><br><span class=\"line\">    \"right\":\"0\",</span><br><span class=\"line\">    \"width\":\"100%\",</span><br><span class=\"line\">    \"height\":\"100%\",</span><br><span class=\"line\">    \"z-index\":\"99999\",</span><br><span class=\"line\">    \"background.repeat\":\"no-repeat\",</span><br><span class=\"line\">    \"background-size\":\"contain\",</span><br><span class=\"line\">    // 设置透明度</span><br><span class=\"line\">    \"opacity\":0.1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>每次修改后都需要重启 VSCode 使修改生效。</p>\n","site":{"data":{}},"excerpt":"<p>VScode 编辑器对中文支持很好，插件丰富，主题也好看，所以目前已经由 sublime 转投 Vscode 了。在插件搜集中找到了可以自定义编辑器背景的插件<code>background</code>，炫酷的界面又可以优雅的装个叉了，所以立马上手尝试了一下。也对相关设置和过程进行一下记录。</p>","more":"<h1 id=\"一-安装插件\"><a class=\"markdownIt-Anchor\" href=\"#一-安装插件\"></a> 一、安装插件</h1>\n<h2 id=\"1下载地址\"><a class=\"markdownIt-Anchor\" href=\"#1下载地址\"></a> 1.下载地址</h2>\n<p>VsCode 插件 Background 官方介绍：<a href=\"!https://marketplace.visualstudio.com/items?itemName=shalldie.background\">探个鲜</a></p>\n<h2 id=\"2安装扩展\"><a class=\"markdownIt-Anchor\" href=\"#2安装扩展\"></a> 2.安装扩展</h2>\n<p>(1) 打开扩展列表</p>\n<p>1). 快捷键打开</p>\n<ul>\n<li>\n<p>快捷键 <code>Ctrl+Shift+P</code></p>\n</li>\n<li>\n<p>键入<code>install</code>找到<code>安装扩展</code></p>\n<p>2). 直接打开左侧最下方的图标</p>\n</li>\n</ul>\n<p>(2) 搜索<code>background</code></p>\n<p>(3)安装并重新加载</p>\n<h1 id=\"二-使用方法\"><a class=\"markdownIt-Anchor\" href=\"#二-使用方法\"></a> 二、使用方法</h1>\n<h2 id=\"1打开配置文件\"><a class=\"markdownIt-Anchor\" href=\"#1打开配置文件\"></a> 1.打开配置文件</h2>\n<p>1). 快捷键打开</p>\n<ul>\n<li>快捷键 <code>Ctrl+Shift+P</code></li>\n<li>键入<code>settings</code>找到<code>首选项:打开设置</code></li>\n</ul>\n<blockquote>\n<p>快捷键<code>Ctrl+,</code>可以直接打开(我的这个快捷键无效)</p>\n</blockquote>\n<p>2). 目录栏 <code>文件 》 首选项 》 设置</code></p>\n<h2 id=\"2配置项参数\"><a class=\"markdownIt-Anchor\" href=\"#2配置项参数\"></a> 2.配置项参数</h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 是否开启背景图显示</span><br><span class=\"line\">\"background.enabled\": true,</span><br><span class=\"line\">// true-显示默认的图片  false-显示用户自定义的图片</span><br><span class=\"line\">\"background.useDefault\": false,</span><br><span class=\"line\">// 自定义显示的图片，【路径要用双引号】</span><br><span class=\"line\">\"background.customImages\": [</span><br><span class=\"line\">    // 最多设置三张图片，默认显示最上方的图片，当打开多个侧边栏时再依次显示后面的背景图片</span><br><span class=\"line\">    \"D:/UserData/My Documents/My Pictures/man.jpg\",</span><br><span class=\"line\">    \"D:/UserData/My Documents/My Pictures/geek2.jpg\",</span><br><span class=\"line\">    \"D:/UserData/My Documents/My Pictures/jizhi.jpg\",</span><br><span class=\"line\">],</span><br><span class=\"line\">\"background.useFront\": false,</span><br><span class=\"line\">// 默认透明度是100%，看起来生硬，不够炫酷</span><br><span class=\"line\">\"background.style\":&#123;</span><br><span class=\"line\">    // 编辑器显示文字，默认在左上角</span><br><span class=\"line\">    \"content\":\"'HELLO WORLD'\",</span><br><span class=\"line\">    \"pointer-events\":\"none\",</span><br><span class=\"line\">    // 以下都是CSS显示样式设置</span><br><span class=\"line\">    \"position\":\"absolute\",</span><br><span class=\"line\">    \"top\":\"0\",</span><br><span class=\"line\">    \"right\":\"0\",</span><br><span class=\"line\">    \"width\":\"100%\",</span><br><span class=\"line\">    \"height\":\"100%\",</span><br><span class=\"line\">    \"z-index\":\"99999\",</span><br><span class=\"line\">    \"background.repeat\":\"no-repeat\",</span><br><span class=\"line\">    \"background-size\":\"contain\",</span><br><span class=\"line\">    // 设置透明度</span><br><span class=\"line\">    \"opacity\":0.1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>每次修改后都需要重启 VSCode 使修改生效。</p>"},{"title":"【VSCode插件】xdebug开发调试PHP","date":"2018-05-09T08:09:38.000Z","_content":"\nXdebug 在开发过程中可以帮我们查看具体的运行和步骤，以及每行代码执行的结果，在学习和解决代码问题的时候可以提供非常大的便利。PHPStorm 也可以进行 Xdebug 调试，VScode 也可以进行配置调试，且比 PHPStorm 的配置简单很多，不用每次去创建一个 Server，再创建一个 web page 服务。相比之下，VSCode 的界面好看，且简单方便，值得学习一下。\n\n使用了一段时间，但是偶尔还是会出现一些问题，故而进行了整理总结。\n\n<!-- more -->\n\n## 一.插件准备\n\n### 1.查看插件列表\n\n[[avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-01.png)\n\n### 2.搜索并安装`PHP Debug` (安装 VScode 时选择 PHP 开发相关的话会自动安装)\n\n**PHP Debug**\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-02.png)\n\n## 二.进行配置\n\n### 1.给 PHP 安装 Xdebug 扩展(此处使用的是 PHPstudy 集成开发环境)\n\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-04xdebug.png)\n\n### 2.在 php.ini 中添加相关配置\n\n```ini\n[XDebug]\n# xdebug扩展的位置，phpstudy已经默认设置好\nzend_extension=\"D:\\phpStudy\\PHPTutorial\\php\\php-5.6.27-nts\\ext\\php_xdebug.dll\"\nxdebug.auto_trace=1\nxdebug.collect_params=1\nxdebug.collect_return=1\nxdebug.trace_output_dir =\"D\\phpStudy\\tmp\\xdebug\"\nxdebug.profiler_output_dir =\"D:\\phpStudy\\tmp\\xdebug\"\nxdebug.profiler_output_name = \"cachegrind.out.%t.%p\"\nxdebug.remote_enable = 1\nxdebug.remote_autostart = 1\nxdebug.remote_handler = \"dbgp\"\nxdebug.remote_host = \"127.0.0.1\"\n# 设置端口号，默认是9000，此处因为本地环境端口冲突故设置为9001（在vscode配置中需要用到）\nxdebug.remote_port = 9001\n# 这是用于phpstorm中xdebug调试的配置，在vscode中没有用到\nxdebug.idekey = phpstorm\n```\n\n### 3.在 phpinfo 中查看 xdebug 扩展的信息，验证是否开启成功\n\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/08.png)\n\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/09.png)\n\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/10.png)\n\n### 4.查看 vscode 中 debug 页面\n\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-03.png)\n\n### 5.新建 debug 配置,并选择调试语言\n\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-05choose.png)\n\n### 6.进行配置\n\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-05setting.png)\n相关配置信息参考：（注意 port 端口号的值，需要与 php.ini 中设置的一样）\n\n```json\n{\n  // 使用 IntelliSense 了解相关属性。\n  // 悬停以查看现有属性的描述。\n  // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Listen for XDebug\",\n      \"type\": \"php\",\n      \"request\": \"launch\",\n      \"port\": 9001\n    },\n    {\n      \"name\": \"Launch currently open script\",\n      \"type\": \"php\",\n      \"request\": \"launch\",\n      \"program\": \"${file}\",\n      \"cwd\": \"${fileDirname}\",\n      \"port\": 9001\n    }\n  ]\n}\n```\n\n## 三.开启调试\n\n### 1.启动 debug(点击绿色小箭头启动)\n\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-06start.png)\n\n显示出`调试小窗口`\n\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-06startbanner.png)\n\n### 2.开启自动附加(单击即可切换开关)\n\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-06startfooter.png)\n\n### 3.设置断点(行号前点击即可出现红色小断点)\n\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-07duandian.png)\n\n### 4.在浏览器中访问设置断点的程序\n\n### 5.访问后会自动跳转到 VSCode，并显示出断点标记，并显示相关执行结果\n\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-07start.png)\n\n### 6.在`调试小窗口`中进行单步调试或单步跳过等操作\n\n## 注意\n\n1.注意**自动附加**是否是开启状态\n\n2.注意端口号是否冲突（点击下部玫红色状态栏的`Listen for XDebug`后，会弹出选择 debug 设置如果端口设置有问题的话，会在选择后弹出错误提示）\n\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-08port.png)\n\n(设置小图标后打开调试控制台也可以显示相关错误提示，注意查看即可)\n将`launch.json`的端口号修改未被占用的号，并且修改`php.ini`中 xdebug 的配置\n","source":"_posts/vscode-xdebug.md","raw":"---\ntitle: 【VSCode插件】xdebug开发调试PHP\ndate: 2018-05-09 16:09:38\ntags:\n  - vscoode\n  - xdebug\ncategory:\n  - 【开发工具】\n---\n\nXdebug 在开发过程中可以帮我们查看具体的运行和步骤，以及每行代码执行的结果，在学习和解决代码问题的时候可以提供非常大的便利。PHPStorm 也可以进行 Xdebug 调试，VScode 也可以进行配置调试，且比 PHPStorm 的配置简单很多，不用每次去创建一个 Server，再创建一个 web page 服务。相比之下，VSCode 的界面好看，且简单方便，值得学习一下。\n\n使用了一段时间，但是偶尔还是会出现一些问题，故而进行了整理总结。\n\n<!-- more -->\n\n## 一.插件准备\n\n### 1.查看插件列表\n\n[[avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-01.png)\n\n### 2.搜索并安装`PHP Debug` (安装 VScode 时选择 PHP 开发相关的话会自动安装)\n\n**PHP Debug**\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-02.png)\n\n## 二.进行配置\n\n### 1.给 PHP 安装 Xdebug 扩展(此处使用的是 PHPstudy 集成开发环境)\n\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-04xdebug.png)\n\n### 2.在 php.ini 中添加相关配置\n\n```ini\n[XDebug]\n# xdebug扩展的位置，phpstudy已经默认设置好\nzend_extension=\"D:\\phpStudy\\PHPTutorial\\php\\php-5.6.27-nts\\ext\\php_xdebug.dll\"\nxdebug.auto_trace=1\nxdebug.collect_params=1\nxdebug.collect_return=1\nxdebug.trace_output_dir =\"D\\phpStudy\\tmp\\xdebug\"\nxdebug.profiler_output_dir =\"D:\\phpStudy\\tmp\\xdebug\"\nxdebug.profiler_output_name = \"cachegrind.out.%t.%p\"\nxdebug.remote_enable = 1\nxdebug.remote_autostart = 1\nxdebug.remote_handler = \"dbgp\"\nxdebug.remote_host = \"127.0.0.1\"\n# 设置端口号，默认是9000，此处因为本地环境端口冲突故设置为9001（在vscode配置中需要用到）\nxdebug.remote_port = 9001\n# 这是用于phpstorm中xdebug调试的配置，在vscode中没有用到\nxdebug.idekey = phpstorm\n```\n\n### 3.在 phpinfo 中查看 xdebug 扩展的信息，验证是否开启成功\n\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/08.png)\n\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/09.png)\n\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/10.png)\n\n### 4.查看 vscode 中 debug 页面\n\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-03.png)\n\n### 5.新建 debug 配置,并选择调试语言\n\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-05choose.png)\n\n### 6.进行配置\n\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-05setting.png)\n相关配置信息参考：（注意 port 端口号的值，需要与 php.ini 中设置的一样）\n\n```json\n{\n  // 使用 IntelliSense 了解相关属性。\n  // 悬停以查看现有属性的描述。\n  // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Listen for XDebug\",\n      \"type\": \"php\",\n      \"request\": \"launch\",\n      \"port\": 9001\n    },\n    {\n      \"name\": \"Launch currently open script\",\n      \"type\": \"php\",\n      \"request\": \"launch\",\n      \"program\": \"${file}\",\n      \"cwd\": \"${fileDirname}\",\n      \"port\": 9001\n    }\n  ]\n}\n```\n\n## 三.开启调试\n\n### 1.启动 debug(点击绿色小箭头启动)\n\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-06start.png)\n\n显示出`调试小窗口`\n\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-06startbanner.png)\n\n### 2.开启自动附加(单击即可切换开关)\n\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-06startfooter.png)\n\n### 3.设置断点(行号前点击即可出现红色小断点)\n\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-07duandian.png)\n\n### 4.在浏览器中访问设置断点的程序\n\n### 5.访问后会自动跳转到 VSCode，并显示出断点标记，并显示相关执行结果\n\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-07start.png)\n\n### 6.在`调试小窗口`中进行单步调试或单步跳过等操作\n\n## 注意\n\n1.注意**自动附加**是否是开启状态\n\n2.注意端口号是否冲突（点击下部玫红色状态栏的`Listen for XDebug`后，会弹出选择 debug 设置如果端口设置有问题的话，会在选择后弹出错误提示）\n\n![avatar](https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-08port.png)\n\n(设置小图标后打开调试控制台也可以显示相关错误提示，注意查看即可)\n将`launch.json`的端口号修改未被占用的号，并且修改`php.ini`中 xdebug 的配置\n","slug":"vscode-xdebug","published":1,"updated":"2019-05-12T16:14:46.893Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c41400382wuuzf3tn7zh","content":"<p>Xdebug 在开发过程中可以帮我们查看具体的运行和步骤，以及每行代码执行的结果，在学习和解决代码问题的时候可以提供非常大的便利。PHPStorm 也可以进行 Xdebug 调试，VScode 也可以进行配置调试，且比 PHPStorm 的配置简单很多，不用每次去创建一个 Server，再创建一个 web page 服务。相比之下，VSCode 的界面好看，且简单方便，值得学习一下。</p>\n<p>使用了一段时间，但是偶尔还是会出现一些问题，故而进行了整理总结。</p>\n<a id=\"more\"></a>\n<h2 id=\"一插件准备\"><a class=\"markdownIt-Anchor\" href=\"#一插件准备\"></a> 一.插件准备</h2>\n<h3 id=\"1查看插件列表\"><a class=\"markdownIt-Anchor\" href=\"#1查看插件列表\"></a> 1.查看插件列表</h3>\n<p>[<a href=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-01.png\" target=\"_blank\" rel=\"noopener\">avatar</a></p>\n<h3 id=\"2搜索并安装php-debug-安装-vscode-时选择-php-开发相关的话会自动安装\"><a class=\"markdownIt-Anchor\" href=\"#2搜索并安装php-debug-安装-vscode-时选择-php-开发相关的话会自动安装\"></a> 2.搜索并安装<code>PHP Debug</code> (安装 VScode 时选择 PHP 开发相关的话会自动安装)</h3>\n<p><strong>PHP Debug</strong><br>\n<img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-02.png\" alt=\"avatar\"></p>\n<h2 id=\"二进行配置\"><a class=\"markdownIt-Anchor\" href=\"#二进行配置\"></a> 二.进行配置</h2>\n<h3 id=\"1给-php-安装-xdebug-扩展此处使用的是-phpstudy-集成开发环境\"><a class=\"markdownIt-Anchor\" href=\"#1给-php-安装-xdebug-扩展此处使用的是-phpstudy-集成开发环境\"></a> 1.给 PHP 安装 Xdebug 扩展(此处使用的是 PHPstudy 集成开发环境)</h3>\n<p><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-04xdebug.png\" alt=\"avatar\"></p>\n<h3 id=\"2在-phpini-中添加相关配置\"><a class=\"markdownIt-Anchor\" href=\"#2在-phpini-中添加相关配置\"></a> 2.在 php.ini 中添加相关配置</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[XDebug]</span></span><br><span class=\"line\"><span class=\"comment\"># xdebug扩展的位置，phpstudy已经默认设置好</span></span><br><span class=\"line\"><span class=\"attr\">zend_extension</span>=<span class=\"string\">\"D:\\phpStudy\\PHPTutorial\\php\\php-5.6.27-nts\\ext\\php_xdebug.dll\"</span></span><br><span class=\"line\">xdebug.auto_trace=1</span><br><span class=\"line\">xdebug.collect_params=1</span><br><span class=\"line\">xdebug.collect_return=1</span><br><span class=\"line\">xdebug.trace_output_dir =\"D\\phpStudy\\tmp\\xdebug\"</span><br><span class=\"line\">xdebug.profiler_output_dir =\"D:\\phpStudy\\tmp\\xdebug\"</span><br><span class=\"line\">xdebug.profiler_output_name = \"cachegrind.out.%t.%p\"</span><br><span class=\"line\">xdebug.remote_enable = 1</span><br><span class=\"line\">xdebug.remote_autostart = 1</span><br><span class=\"line\">xdebug.remote_handler = \"dbgp\"</span><br><span class=\"line\">xdebug.remote_host = \"127.0.0.1\"</span><br><span class=\"line\"><span class=\"comment\"># 设置端口号，默认是9000，此处因为本地环境端口冲突故设置为9001（在vscode配置中需要用到）</span></span><br><span class=\"line\">xdebug.remote_port = 9001</span><br><span class=\"line\"><span class=\"comment\"># 这是用于phpstorm中xdebug调试的配置，在vscode中没有用到</span></span><br><span class=\"line\">xdebug.idekey = phpstorm</span><br></pre></td></tr></table></figure>\n<h3 id=\"3在-phpinfo-中查看-xdebug-扩展的信息验证是否开启成功\"><a class=\"markdownIt-Anchor\" href=\"#3在-phpinfo-中查看-xdebug-扩展的信息验证是否开启成功\"></a> 3.在 phpinfo 中查看 xdebug 扩展的信息，验证是否开启成功</h3>\n<p><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/08.png\" alt=\"avatar\"></p>\n<p><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/09.png\" alt=\"avatar\"></p>\n<p><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/10.png\" alt=\"avatar\"></p>\n<h3 id=\"4查看-vscode-中-debug-页面\"><a class=\"markdownIt-Anchor\" href=\"#4查看-vscode-中-debug-页面\"></a> 4.查看 vscode 中 debug 页面</h3>\n<p><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-03.png\" alt=\"avatar\"></p>\n<h3 id=\"5新建-debug-配置并选择调试语言\"><a class=\"markdownIt-Anchor\" href=\"#5新建-debug-配置并选择调试语言\"></a> 5.新建 debug 配置,并选择调试语言</h3>\n<p><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-05choose.png\" alt=\"avatar\"></p>\n<h3 id=\"6进行配置\"><a class=\"markdownIt-Anchor\" href=\"#6进行配置\"></a> 6.进行配置</h3>\n<p><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-05setting.png\" alt=\"avatar\"><br>\n相关配置信息参考：（注意 port 端口号的值，需要与 php.ini 中设置的一样）</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  // 使用 IntelliSense 了解相关属性。</span><br><span class=\"line\">  // 悬停以查看现有属性的描述。</span><br><span class=\"line\">  // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class=\"line\">  \"version\": \"0.2.0\",</span><br><span class=\"line\">  \"configurations\": [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Listen for XDebug\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"php\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"request\"</span>: <span class=\"string\">\"launch\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"port\"</span>: <span class=\"number\">9001</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Launch currently open script\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"php\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"request\"</span>: <span class=\"string\">\"launch\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"program\"</span>: <span class=\"string\">\"$&#123;file&#125;\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"cwd\"</span>: <span class=\"string\">\"$&#123;fileDirname&#125;\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"port\"</span>: <span class=\"number\">9001</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"三开启调试\"><a class=\"markdownIt-Anchor\" href=\"#三开启调试\"></a> 三.开启调试</h2>\n<h3 id=\"1启动-debug点击绿色小箭头启动\"><a class=\"markdownIt-Anchor\" href=\"#1启动-debug点击绿色小箭头启动\"></a> 1.启动 debug(点击绿色小箭头启动)</h3>\n<p><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-06start.png\" alt=\"avatar\"></p>\n<p>显示出<code>调试小窗口</code></p>\n<p><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-06startbanner.png\" alt=\"avatar\"></p>\n<h3 id=\"2开启自动附加单击即可切换开关\"><a class=\"markdownIt-Anchor\" href=\"#2开启自动附加单击即可切换开关\"></a> 2.开启自动附加(单击即可切换开关)</h3>\n<p><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-06startfooter.png\" alt=\"avatar\"></p>\n<h3 id=\"3设置断点行号前点击即可出现红色小断点\"><a class=\"markdownIt-Anchor\" href=\"#3设置断点行号前点击即可出现红色小断点\"></a> 3.设置断点(行号前点击即可出现红色小断点)</h3>\n<p><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-07duandian.png\" alt=\"avatar\"></p>\n<h3 id=\"4在浏览器中访问设置断点的程序\"><a class=\"markdownIt-Anchor\" href=\"#4在浏览器中访问设置断点的程序\"></a> 4.在浏览器中访问设置断点的程序</h3>\n<h3 id=\"5访问后会自动跳转到-vscode并显示出断点标记并显示相关执行结果\"><a class=\"markdownIt-Anchor\" href=\"#5访问后会自动跳转到-vscode并显示出断点标记并显示相关执行结果\"></a> 5.访问后会自动跳转到 VSCode，并显示出断点标记，并显示相关执行结果</h3>\n<p><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-07start.png\" alt=\"avatar\"></p>\n<h3 id=\"6在调试小窗口中进行单步调试或单步跳过等操作\"><a class=\"markdownIt-Anchor\" href=\"#6在调试小窗口中进行单步调试或单步跳过等操作\"></a> 6.在<code>调试小窗口</code>中进行单步调试或单步跳过等操作</h3>\n<h2 id=\"注意\"><a class=\"markdownIt-Anchor\" href=\"#注意\"></a> 注意</h2>\n<p>1.注意<strong>自动附加</strong>是否是开启状态</p>\n<p>2.注意端口号是否冲突（点击下部玫红色状态栏的<code>Listen for XDebug</code>后，会弹出选择 debug 设置如果端口设置有问题的话，会在选择后弹出错误提示）</p>\n<p><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-08port.png\" alt=\"avatar\"></p>\n<p>(设置小图标后打开调试控制台也可以显示相关错误提示，注意查看即可)<br>\n将<code>launch.json</code>的端口号修改未被占用的号，并且修改<code>php.ini</code>中 xdebug 的配置</p>\n","site":{"data":{}},"excerpt":"<p>Xdebug 在开发过程中可以帮我们查看具体的运行和步骤，以及每行代码执行的结果，在学习和解决代码问题的时候可以提供非常大的便利。PHPStorm 也可以进行 Xdebug 调试，VScode 也可以进行配置调试，且比 PHPStorm 的配置简单很多，不用每次去创建一个 Server，再创建一个 web page 服务。相比之下，VSCode 的界面好看，且简单方便，值得学习一下。</p>\n<p>使用了一段时间，但是偶尔还是会出现一些问题，故而进行了整理总结。</p>","more":"<h2 id=\"一插件准备\"><a class=\"markdownIt-Anchor\" href=\"#一插件准备\"></a> 一.插件准备</h2>\n<h3 id=\"1查看插件列表\"><a class=\"markdownIt-Anchor\" href=\"#1查看插件列表\"></a> 1.查看插件列表</h3>\n<p>[<a href=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-01.png\" target=\"_blank\" rel=\"noopener\">avatar</a></p>\n<h3 id=\"2搜索并安装php-debug-安装-vscode-时选择-php-开发相关的话会自动安装\"><a class=\"markdownIt-Anchor\" href=\"#2搜索并安装php-debug-安装-vscode-时选择-php-开发相关的话会自动安装\"></a> 2.搜索并安装<code>PHP Debug</code> (安装 VScode 时选择 PHP 开发相关的话会自动安装)</h3>\n<p><strong>PHP Debug</strong><br>\n<img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-02.png\" alt=\"avatar\"></p>\n<h2 id=\"二进行配置\"><a class=\"markdownIt-Anchor\" href=\"#二进行配置\"></a> 二.进行配置</h2>\n<h3 id=\"1给-php-安装-xdebug-扩展此处使用的是-phpstudy-集成开发环境\"><a class=\"markdownIt-Anchor\" href=\"#1给-php-安装-xdebug-扩展此处使用的是-phpstudy-集成开发环境\"></a> 1.给 PHP 安装 Xdebug 扩展(此处使用的是 PHPstudy 集成开发环境)</h3>\n<p><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-04xdebug.png\" alt=\"avatar\"></p>\n<h3 id=\"2在-phpini-中添加相关配置\"><a class=\"markdownIt-Anchor\" href=\"#2在-phpini-中添加相关配置\"></a> 2.在 php.ini 中添加相关配置</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[XDebug]</span></span><br><span class=\"line\"><span class=\"comment\"># xdebug扩展的位置，phpstudy已经默认设置好</span></span><br><span class=\"line\"><span class=\"attr\">zend_extension</span>=<span class=\"string\">\"D:\\phpStudy\\PHPTutorial\\php\\php-5.6.27-nts\\ext\\php_xdebug.dll\"</span></span><br><span class=\"line\">xdebug.auto_trace=1</span><br><span class=\"line\">xdebug.collect_params=1</span><br><span class=\"line\">xdebug.collect_return=1</span><br><span class=\"line\">xdebug.trace_output_dir =\"D\\phpStudy\\tmp\\xdebug\"</span><br><span class=\"line\">xdebug.profiler_output_dir =\"D:\\phpStudy\\tmp\\xdebug\"</span><br><span class=\"line\">xdebug.profiler_output_name = \"cachegrind.out.%t.%p\"</span><br><span class=\"line\">xdebug.remote_enable = 1</span><br><span class=\"line\">xdebug.remote_autostart = 1</span><br><span class=\"line\">xdebug.remote_handler = \"dbgp\"</span><br><span class=\"line\">xdebug.remote_host = \"127.0.0.1\"</span><br><span class=\"line\"><span class=\"comment\"># 设置端口号，默认是9000，此处因为本地环境端口冲突故设置为9001（在vscode配置中需要用到）</span></span><br><span class=\"line\">xdebug.remote_port = 9001</span><br><span class=\"line\"><span class=\"comment\"># 这是用于phpstorm中xdebug调试的配置，在vscode中没有用到</span></span><br><span class=\"line\">xdebug.idekey = phpstorm</span><br></pre></td></tr></table></figure>\n<h3 id=\"3在-phpinfo-中查看-xdebug-扩展的信息验证是否开启成功\"><a class=\"markdownIt-Anchor\" href=\"#3在-phpinfo-中查看-xdebug-扩展的信息验证是否开启成功\"></a> 3.在 phpinfo 中查看 xdebug 扩展的信息，验证是否开启成功</h3>\n<p><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/08.png\" alt=\"avatar\"></p>\n<p><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/09.png\" alt=\"avatar\"></p>\n<p><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/phpstrom_xdebug/10.png\" alt=\"avatar\"></p>\n<h3 id=\"4查看-vscode-中-debug-页面\"><a class=\"markdownIt-Anchor\" href=\"#4查看-vscode-中-debug-页面\"></a> 4.查看 vscode 中 debug 页面</h3>\n<p><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-03.png\" alt=\"avatar\"></p>\n<h3 id=\"5新建-debug-配置并选择调试语言\"><a class=\"markdownIt-Anchor\" href=\"#5新建-debug-配置并选择调试语言\"></a> 5.新建 debug 配置,并选择调试语言</h3>\n<p><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-05choose.png\" alt=\"avatar\"></p>\n<h3 id=\"6进行配置\"><a class=\"markdownIt-Anchor\" href=\"#6进行配置\"></a> 6.进行配置</h3>\n<p><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-05setting.png\" alt=\"avatar\"><br>\n相关配置信息参考：（注意 port 端口号的值，需要与 php.ini 中设置的一样）</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  // 使用 IntelliSense 了解相关属性。</span><br><span class=\"line\">  // 悬停以查看现有属性的描述。</span><br><span class=\"line\">  // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class=\"line\">  \"version\": \"0.2.0\",</span><br><span class=\"line\">  \"configurations\": [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Listen for XDebug\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"php\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"request\"</span>: <span class=\"string\">\"launch\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"port\"</span>: <span class=\"number\">9001</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Launch currently open script\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"php\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"request\"</span>: <span class=\"string\">\"launch\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"program\"</span>: <span class=\"string\">\"$&#123;file&#125;\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"cwd\"</span>: <span class=\"string\">\"$&#123;fileDirname&#125;\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"port\"</span>: <span class=\"number\">9001</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"三开启调试\"><a class=\"markdownIt-Anchor\" href=\"#三开启调试\"></a> 三.开启调试</h2>\n<h3 id=\"1启动-debug点击绿色小箭头启动\"><a class=\"markdownIt-Anchor\" href=\"#1启动-debug点击绿色小箭头启动\"></a> 1.启动 debug(点击绿色小箭头启动)</h3>\n<p><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-06start.png\" alt=\"avatar\"></p>\n<p>显示出<code>调试小窗口</code></p>\n<p><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-06startbanner.png\" alt=\"avatar\"></p>\n<h3 id=\"2开启自动附加单击即可切换开关\"><a class=\"markdownIt-Anchor\" href=\"#2开启自动附加单击即可切换开关\"></a> 2.开启自动附加(单击即可切换开关)</h3>\n<p><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-06startfooter.png\" alt=\"avatar\"></p>\n<h3 id=\"3设置断点行号前点击即可出现红色小断点\"><a class=\"markdownIt-Anchor\" href=\"#3设置断点行号前点击即可出现红色小断点\"></a> 3.设置断点(行号前点击即可出现红色小断点)</h3>\n<p><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-07duandian.png\" alt=\"avatar\"></p>\n<h3 id=\"4在浏览器中访问设置断点的程序\"><a class=\"markdownIt-Anchor\" href=\"#4在浏览器中访问设置断点的程序\"></a> 4.在浏览器中访问设置断点的程序</h3>\n<h3 id=\"5访问后会自动跳转到-vscode并显示出断点标记并显示相关执行结果\"><a class=\"markdownIt-Anchor\" href=\"#5访问后会自动跳转到-vscode并显示出断点标记并显示相关执行结果\"></a> 5.访问后会自动跳转到 VSCode，并显示出断点标记，并显示相关执行结果</h3>\n<p><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-07start.png\" alt=\"avatar\"></p>\n<h3 id=\"6在调试小窗口中进行单步调试或单步跳过等操作\"><a class=\"markdownIt-Anchor\" href=\"#6在调试小窗口中进行单步调试或单步跳过等操作\"></a> 6.在<code>调试小窗口</code>中进行单步调试或单步跳过等操作</h3>\n<h2 id=\"注意\"><a class=\"markdownIt-Anchor\" href=\"#注意\"></a> 注意</h2>\n<p>1.注意<strong>自动附加</strong>是否是开启状态</p>\n<p>2.注意端口号是否冲突（点击下部玫红色状态栏的<code>Listen for XDebug</code>后，会弹出选择 debug 设置如果端口设置有问题的话，会在选择后弹出错误提示）</p>\n<p><img src=\"https://raw.githubusercontent.com/zqunor/MarkdownPic/master/vscode-debug-08port.png\" alt=\"avatar\"></p>\n<p>(设置小图标后打开调试控制台也可以显示相关错误提示，注意查看即可)<br>\n将<code>launch.json</code>的端口号修改未被占用的号，并且修改<code>php.ini</code>中 xdebug 的配置</p>"},{"title":"【转】Windows系统下的高效工具","date":"2018-06-29T10:50:47.000Z","_content":"\n正所谓：工欲善其事，必先利其器\n花点时间来折腾一下还是非常有必要。\n\nMac 之所以 **高效**，实际上是藉其自带特色功能以及原生的命令行支持\n（当然也有它脑残的一面，例如：自带的窗口管理基本没带；新建文件只能使用命令 `touch` ······）\n\n<!--more-->\n\n# ※ 高效特性\n\n下面列出 Mac 相对高效的特性：\n\n- 多工作区支持（实际上 Ubuntu 等都有此功能）\n- 原生支持 Unix like 命令环境，且自带众多的运行环境及命令行工具\n- 强大的 Spotlight 全局搜索框\n- 强大的第三方神级软件：Homebrew / Alfred / iTerm2 ...\n- ······\n\n我们来把上述特性一一加装在 Windows 上。\n\nP.S 首选 免费 / 开源 的，且在同类软件中脱颖而出的\n\n# ※ 实现方案\n\n## 多工作区（多桌面）支持：Dexpot\n\n没有 Mac 的好用，但绝对够用了\n商业软件推荐：AltDesk（不推荐使用 MS 自家的）\n\n## 命令行环境：Babun（Cygwin + Oh-my-zsh + git + 众多运行环境）\n\nBabun 自带包管理工具 pact，极其方便\n[P.S] Babun 使用 Ctrl + C 中断 node 进程，实际上 node 依旧还在运行，见 issue\n\n因此最终建议使用超级好用的 Git Bash\n\n## 全局搜索框 / 快速启动器：Wox（Alfred for Windows，开源）\n\n而且还捎带上文件搜索神器 `Everything`，因此除了没有工作流外，基本满足开发需求。\n该项的选择非常多， `Launchy`、`ALTRun`、`FARR`，以及大神们最喜欢用的 win + R\n\n## 其余效率相关\n\n- 护眼神器：f.lux。不用多介绍了吧\n\n- 增强型文件管理器：Total Commander 及其 教程。不过我用的是稍微简单一点的 Directory Opus\n\n- 触发角与手势：WGestures\n\n可媲美 Mac 的体验，甚至还有所加强！设置滑到边角就锁屏，懒得按键盘 win + L 了有木有！还可以配置写命令，国产开源的良心之作！快点去人家的 Github 上面点个星星吧亲！\n\n- 历史剪贴板：**Ditto**，媲美 Mac 上的 ClipMenu，但又有所增强（带历史搜索功能）\n\n- 简约又强大的卸载器：GeekUninstaller，可让你避免全家桶套餐\n\nWAMP 集成环境：Mac 下自带 Apache 与 PHP，但我相信 WampServer 的使用会更方便\n\n快捷键：实际上这才是最重要的，详请知乎\n\n转自：[github](https://github.com/kenberkeley/make-windows-development-mac-like)\n","source":"_posts/windows-tool.md","raw":"---\ntitle: 【转】windows系统下的高效工具\ndate: 2018-06-29 18:50:47\ntags:\n  - tool\ncategory:\n  - 【开发工具】\n---\n\n正所谓：工欲善其事，必先利其器\n花点时间来折腾一下还是非常有必要。\n\nMac 之所以 **高效**，实际上是藉其自带特色功能以及原生的命令行支持\n（当然也有它脑残的一面，例如：自带的窗口管理基本没带；新建文件只能使用命令 `touch` ······）\n\n<!--more-->\n\n# ※ 高效特性\n\n下面列出 Mac 相对高效的特性：\n\n- 多工作区支持（实际上 Ubuntu 等都有此功能）\n- 原生支持 Unix like 命令环境，且自带众多的运行环境及命令行工具\n- 强大的 Spotlight 全局搜索框\n- 强大的第三方神级软件：Homebrew / Alfred / iTerm2 ...\n- ······\n\n我们来把上述特性一一加装在 Windows 上。\n\nP.S 首选 免费 / 开源 的，且在同类软件中脱颖而出的\n\n# ※ 实现方案\n\n## 多工作区（多桌面）支持：Dexpot\n\n没有 Mac 的好用，但绝对够用了\n商业软件推荐：AltDesk（不推荐使用 MS 自家的）\n\n## 命令行环境：Babun（Cygwin + Oh-my-zsh + git + 众多运行环境）\n\nBabun 自带包管理工具 pact，极其方便\n[P.S] Babun 使用 Ctrl + C 中断 node 进程，实际上 node 依旧还在运行，见 issue\n\n因此最终建议使用超级好用的 Git Bash\n\n## 全局搜索框 / 快速启动器：Wox（Alfred for Windows，开源）\n\n而且还捎带上文件搜索神器 `Everything`，因此除了没有工作流外，基本满足开发需求。\n该项的选择非常多， `Launchy`、`ALTRun`、`FARR`，以及大神们最喜欢用的 win + R\n\n## 其余效率相关\n\n- 护眼神器：f.lux。不用多介绍了吧\n\n- 增强型文件管理器：Total Commander 及其 教程。不过我用的是稍微简单一点的 Directory Opus\n\n- 触发角与手势：WGestures\n\n可媲美 Mac 的体验，甚至还有所加强！设置滑到边角就锁屏，懒得按键盘 win + L 了有木有！还可以配置写命令，国产开源的良心之作！快点去人家的 Github 上面点个星星吧亲！\n\n- 历史剪贴板：**Ditto**，媲美 Mac 上的 ClipMenu，但又有所增强（带历史搜索功能）\n\n- 简约又强大的卸载器：GeekUninstaller，可让你避免全家桶套餐\n\nWAMP 集成环境：Mac 下自带 Apache 与 PHP，但我相信 WampServer 的使用会更方便\n\n快捷键：实际上这才是最重要的，详请知乎\n\n转自：[github](https://github.com/kenberkeley/make-windows-development-mac-like)\n","slug":"windows-tool","published":1,"updated":"2019-05-12T16:16:44.690Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c416003b2wuu1uuvrh75","content":"<p>正所谓：工欲善其事，必先利其器<br>\n花点时间来折腾一下还是非常有必要。</p>\n<p>Mac 之所以 <strong>高效</strong>，实际上是藉其自带特色功能以及原生的命令行支持<br>\n（当然也有它脑残的一面，例如：自带的窗口管理基本没带；新建文件只能使用命令 <code>touch</code> ······）</p>\n<a id=\"more\"></a>\n<h1 id=\"高效特性\"><a class=\"markdownIt-Anchor\" href=\"#高效特性\"></a> ※ 高效特性</h1>\n<p>下面列出 Mac 相对高效的特性：</p>\n<ul>\n<li>多工作区支持（实际上 Ubuntu 等都有此功能）</li>\n<li>原生支持 Unix like 命令环境，且自带众多的运行环境及命令行工具</li>\n<li>强大的 Spotlight 全局搜索框</li>\n<li>强大的第三方神级软件：Homebrew / Alfred / iTerm2 …</li>\n<li>······</li>\n</ul>\n<p>我们来把上述特性一一加装在 Windows 上。</p>\n<p>P.S 首选 免费 / 开源 的，且在同类软件中脱颖而出的</p>\n<h1 id=\"实现方案\"><a class=\"markdownIt-Anchor\" href=\"#实现方案\"></a> ※ 实现方案</h1>\n<h2 id=\"多工作区多桌面支持dexpot\"><a class=\"markdownIt-Anchor\" href=\"#多工作区多桌面支持dexpot\"></a> 多工作区（多桌面）支持：Dexpot</h2>\n<p>没有 Mac 的好用，但绝对够用了<br>\n商业软件推荐：AltDesk（不推荐使用 MS 自家的）</p>\n<h2 id=\"命令行环境babuncygwin-oh-my-zsh-git-众多运行环境\"><a class=\"markdownIt-Anchor\" href=\"#命令行环境babuncygwin-oh-my-zsh-git-众多运行环境\"></a> 命令行环境：Babun（Cygwin + Oh-my-zsh + git + 众多运行环境）</h2>\n<p>Babun 自带包管理工具 pact，极其方便<br>\n[P.S] Babun 使用 Ctrl + C 中断 node 进程，实际上 node 依旧还在运行，见 issue</p>\n<p>因此最终建议使用超级好用的 Git Bash</p>\n<h2 id=\"全局搜索框-快速启动器woxalfred-for-windows开源\"><a class=\"markdownIt-Anchor\" href=\"#全局搜索框-快速启动器woxalfred-for-windows开源\"></a> 全局搜索框 / 快速启动器：Wox（Alfred for Windows，开源）</h2>\n<p>而且还捎带上文件搜索神器 <code>Everything</code>，因此除了没有工作流外，基本满足开发需求。<br>\n该项的选择非常多， <code>Launchy</code>、<code>ALTRun</code>、<code>FARR</code>，以及大神们最喜欢用的 win + R</p>\n<h2 id=\"其余效率相关\"><a class=\"markdownIt-Anchor\" href=\"#其余效率相关\"></a> 其余效率相关</h2>\n<ul>\n<li>\n<p>护眼神器：f.lux。不用多介绍了吧</p>\n</li>\n<li>\n<p>增强型文件管理器：Total Commander 及其 教程。不过我用的是稍微简单一点的 Directory Opus</p>\n</li>\n<li>\n<p>触发角与手势：WGestures</p>\n</li>\n</ul>\n<p>可媲美 Mac 的体验，甚至还有所加强！设置滑到边角就锁屏，懒得按键盘 win + L 了有木有！还可以配置写命令，国产开源的良心之作！快点去人家的 Github 上面点个星星吧亲！</p>\n<ul>\n<li>\n<p>历史剪贴板：<strong>Ditto</strong>，媲美 Mac 上的 ClipMenu，但又有所增强（带历史搜索功能）</p>\n</li>\n<li>\n<p>简约又强大的卸载器：GeekUninstaller，可让你避免全家桶套餐</p>\n</li>\n</ul>\n<p>WAMP 集成环境：Mac 下自带 Apache 与 PHP，但我相信 WampServer 的使用会更方便</p>\n<p>快捷键：实际上这才是最重要的，详请知乎</p>\n<p>转自：<a href=\"https://github.com/kenberkeley/make-windows-development-mac-like\" target=\"_blank\" rel=\"noopener\">github</a></p>\n","site":{"data":{}},"excerpt":"<p>正所谓：工欲善其事，必先利其器<br>\n花点时间来折腾一下还是非常有必要。</p>\n<p>Mac 之所以 <strong>高效</strong>，实际上是藉其自带特色功能以及原生的命令行支持<br>\n（当然也有它脑残的一面，例如：自带的窗口管理基本没带；新建文件只能使用命令 <code>touch</code> ······）</p>","more":"<h1 id=\"高效特性\"><a class=\"markdownIt-Anchor\" href=\"#高效特性\"></a> ※ 高效特性</h1>\n<p>下面列出 Mac 相对高效的特性：</p>\n<ul>\n<li>多工作区支持（实际上 Ubuntu 等都有此功能）</li>\n<li>原生支持 Unix like 命令环境，且自带众多的运行环境及命令行工具</li>\n<li>强大的 Spotlight 全局搜索框</li>\n<li>强大的第三方神级软件：Homebrew / Alfred / iTerm2 …</li>\n<li>······</li>\n</ul>\n<p>我们来把上述特性一一加装在 Windows 上。</p>\n<p>P.S 首选 免费 / 开源 的，且在同类软件中脱颖而出的</p>\n<h1 id=\"实现方案\"><a class=\"markdownIt-Anchor\" href=\"#实现方案\"></a> ※ 实现方案</h1>\n<h2 id=\"多工作区多桌面支持dexpot\"><a class=\"markdownIt-Anchor\" href=\"#多工作区多桌面支持dexpot\"></a> 多工作区（多桌面）支持：Dexpot</h2>\n<p>没有 Mac 的好用，但绝对够用了<br>\n商业软件推荐：AltDesk（不推荐使用 MS 自家的）</p>\n<h2 id=\"命令行环境babuncygwin-oh-my-zsh-git-众多运行环境\"><a class=\"markdownIt-Anchor\" href=\"#命令行环境babuncygwin-oh-my-zsh-git-众多运行环境\"></a> 命令行环境：Babun（Cygwin + Oh-my-zsh + git + 众多运行环境）</h2>\n<p>Babun 自带包管理工具 pact，极其方便<br>\n[P.S] Babun 使用 Ctrl + C 中断 node 进程，实际上 node 依旧还在运行，见 issue</p>\n<p>因此最终建议使用超级好用的 Git Bash</p>\n<h2 id=\"全局搜索框-快速启动器woxalfred-for-windows开源\"><a class=\"markdownIt-Anchor\" href=\"#全局搜索框-快速启动器woxalfred-for-windows开源\"></a> 全局搜索框 / 快速启动器：Wox（Alfred for Windows，开源）</h2>\n<p>而且还捎带上文件搜索神器 <code>Everything</code>，因此除了没有工作流外，基本满足开发需求。<br>\n该项的选择非常多， <code>Launchy</code>、<code>ALTRun</code>、<code>FARR</code>，以及大神们最喜欢用的 win + R</p>\n<h2 id=\"其余效率相关\"><a class=\"markdownIt-Anchor\" href=\"#其余效率相关\"></a> 其余效率相关</h2>\n<ul>\n<li>\n<p>护眼神器：f.lux。不用多介绍了吧</p>\n</li>\n<li>\n<p>增强型文件管理器：Total Commander 及其 教程。不过我用的是稍微简单一点的 Directory Opus</p>\n</li>\n<li>\n<p>触发角与手势：WGestures</p>\n</li>\n</ul>\n<p>可媲美 Mac 的体验，甚至还有所加强！设置滑到边角就锁屏，懒得按键盘 win + L 了有木有！还可以配置写命令，国产开源的良心之作！快点去人家的 Github 上面点个星星吧亲！</p>\n<ul>\n<li>\n<p>历史剪贴板：<strong>Ditto</strong>，媲美 Mac 上的 ClipMenu，但又有所增强（带历史搜索功能）</p>\n</li>\n<li>\n<p>简约又强大的卸载器：GeekUninstaller，可让你避免全家桶套餐</p>\n</li>\n</ul>\n<p>WAMP 集成环境：Mac 下自带 Apache 与 PHP，但我相信 WampServer 的使用会更方便</p>\n<p>快捷键：实际上这才是最重要的，详请知乎</p>\n<p>转自：<a href=\"https://github.com/kenberkeley/make-windows-development-mac-like\" target=\"_blank\" rel=\"noopener\">github</a></p>"},{"title":"【Docker】系统学习 Docker 践行 DevOps 理念","date":"2018-12-11T13:02:12.000Z","_content":"\nDocker容器化技术已经越来越成为环境部署的主流趋势，一键式部署，并且保证线上线下环境的一致性，节省问题排查的时间，维护效率高，并且对底层硬件的要求比传统虚拟机低，可以提升系统资源的利用率，开发 Docker容器技术所实现的微服务架构，即：将一个环境的各个部分（nginx网络服务、web网站代码数据、mysql/redis/elasticsearch等数据库服务）进行分离，再通过网络架构实现网络通信。\n\n<!--more-->\n\n## Vagrant基本使用\n\n`vagrant --help`\n\n指定虚拟机的目录：\n`cd ~/Vagrant/centos7/`\n`vagrant init centos/7`\n创建一个 centos 7 的虚拟机，在当前目录初始化一个 Vagrantfile 文件，\n描述了需要创建的虚拟机\nconfig.vm.box = \"centos/7\"\n\n`vagrant up`\n启动 centos 7 的 VM，如果有的话直接加载，如果没有的话要去网上下载\n，启动完成之后，就可以在 virtualbox 中看到成功创建了一个 centos7 的虚拟机\n\n然后在 centos7 目录下执行：\n`vagrant ssh`\n进入到 centos7 的 VM 中\n\n查看当前已经有的虚拟机：\n`vagrant status`\n\n停掉运行的 VM\n`vagrant halt`\n\n删除创建的 VM\n`vagrant destroy`\n\n通过 Vagrantfile 可以创建各种虚拟机，\n可以从 vagrant cloud 网上找相应的 Vagrantfile 来创建相应环境的虚拟机\n\n在 Vagrantfile 中配置 provision,使得启动虚拟机时可以自动运行相关命令\n\n示例，配置 Vagrantfile 文件，使得启动虚拟机时自动安装配置好环境：\n\n```bash\nconfig.vm.provision \"shell\", inline: <<-SHELL\n    sudo yum update\n    sudo yum remove docker \\\n                docker-client \\\n                docker-client-latest \\\n                docker-common \\\n                docker-latest \\\n                docker-latest-logrotate \\\n                docker-logrotate \\\n                docker-selinux \\\n                docker-engine-selinux \\\n                docker-engine\n    sudo yum install -y yum-utils \\\n                device-mapper-persistent-data \\\n                lvm2\n    sudo yum-config-manager \\\n                --add-repo \\\n                https://download.docker.com/linux/centos/docker-ce.repo\n    sudo yum install -y docker-ce\n    sudo groupadd docker\n    sudo gpasswd -a docker vagrant\n    sudo service docker restart\nSHELL\n```\n\n## Docker Machine\n\n### 1、在虚拟机中自动安装 Docker Engine 的工具\n\n```bash\n#创建一个安装好docker的linux虚拟机，命名为demo\ndocker-machine create {demo}\n\n#查看当前创建的虚拟机和相应的状态\ndocker-machine ls\n\n#进入到相应的虚拟机\ndocker-machine ssh {demo}\n```\n\n### 2、docker-machine 在 mac 中的应用：\n\n```bash\n#查看mac上的docker信息\ndocker version\n\n#将mac的服务器端连上demo的里的docker服务器端,实现远程管理docker machine\ndocker-machine env {demo}\neval $(docker-machine env {demo})\n#此时在mac上运行docker version查看的server端的信息就是demo这台虚拟机中的docker server信息\n\n#\ndocker-machine env --unset\neval $(docker-machine env --unset)\n```\n\n### 3、docker machine 在阿里云上的使用\n\ndocker machine 可以通过这种方式实现本地 docker 命令远程管理 docker machine\n\n在本地运行 docker 命令创建远程服务器上的 docker 容器：\n使用 driver（在官网上找第三方 driver: 阿里云`docker-machine-driver-aliyunecs`）\n\n安装目录：`/usr/local/bin/docker-machine-driver-aliyunecs`\n\n验证阿里云 ecs driver 安装成功\n`docker-machine create -d aliyunecs --help`\n\n#### 使用\n\n- 前提：账户余额大于 100\n\n- 步骤：\n\n（1）阿里云控制台： 创建用户的 access key(访问控制=》用户管理=》创建用户=》创建 AccessKey)\n\n（2）本地命令行，创建阿里云的 docker host：\n\n```bash\n#执行的命令：\n`docker-machine create -d aliyunecs --aliyunecs-io-optimized=optimized --aliyunecs-instance-type=ecs.c5.large --aliyunecs-access-key-id=L{access-key-id} --aliyunecs-access-key-secret={access-key-secret} --aliyunecs-region={region} {name}\n```\n\n参数说明：\n\n`--aliyunecs-io-optimized=optimized` io 优化的参数，必须要添加\n`--aliyunecs-instance-type=ecs.c5.large` 实例的类型\n`--aliyunecs-region={region}` 创建的实例所属地域\n`{imooc}` 创建的实例名称\n\n（3）本地命令行，连接阿里云的 docker server\n\n```bash\ndocker-machine env {imooc}\neval $(docker-machine env {imooc})\n```\n\n创建完成之后就可以在阿里云的控制台中看到刚刚创建的实例。但是不用的时候及时删除，以免产生不必要的收费。\n\n## Docker 架构和底层技术简介\n\n## 镜像 Image\n\n### 1.什么是 Image\n\n- 文件和 meta data 的集合（root filesystem）\n- 分层的，并且每一层都可以添加、改变、删除文件，成为一个新的 image\n- 不同的 image 可以共享相同的 layer\n- Image 本身是 read-only 的\n\n### 2.Image 的获取\n\n（1）自行编译创建\n\n```bash\n#1.创建Dockerfile\nFROM ubuntu:14.04\nLABEL maintainer=\"zqunor@gmail.com\"\nRUN apt-get update && aput-get install -y redis-server\nEXPOSE 6379\n#启动redis-server\nENTRYPOINT [ \"/usr/bin/redis-server\" ]\n\n#2.build镜像 .表示根据当前目录下的Dockerfile进行build\ndocker built -t zqunor/redis:latest .\n#5行Dockerfile，对应5步build过程，5步对应5层\n```\n\n（2）从 Docker 仓库中拉取\n\n```bash\ndocker pull ubuntu:18.04\n```\n\n### 3.创建 Image\n\n每一个 base image 都是一个可执行文件，执行 image 就是创建一个容器\n\n（1）创建 docker 用户组和用户，避免每次使用 docker 命令都需要加 sudo\n\n```bash\n#创建docker用户组\nsudo groupadd docker\n\n#将当前用户家到docker的用户组中，使当前用户有使用docker的权限\nsudo gpasswd -a vagrant docker\n\n#创建完成之后，重启docker服务\nsudo service docker restart\n```\n\n（2）Image 体验: hello-world\n\n```bash\n#获取镜像\ndocker pull hello-world\n#查看镜像的基本信息\ndocker image ls\n#执行image,创建容器\ndocker hello-world\n```\n\n（3）制作 Image\n\n```bash\n#准备工作：创建一个单独的目录，编写.c文件，并执行生成可执行文件，将这个可执行文件\nvim hello.c\n#include<stdio.h>\nint main()\n{\n    printf(\"hello docker\\n\");\n}\n#配置c语言执行环境\nsudo yum install gcc glibc-static\n#执行生成可执行程序hello\ngcc -static hello.c -o hello\n#生成可执行文件以后，就可以在当前目录下创建Dockerfile文件\nFROM scratch\nADD hello /\nCMD [\"/hello\"]\n#build成image\ndocker build -t zqunor/hello-world .\n#查看image层级\ndocker history {image_id}\n#执行image\ndocker run zqunor/hello-world\n```\n\n## 容器 Container\n\n### 1.什么是 Container\n\n- 通过 Image 创建（copy）\n- 在 Image layer 之上建立一个 container layer(可读写)\n- 类比面向对象：类和实例\n- Image 负责 app 的存储和分发，Container 负责运行 app\n\n### 2.相关命令\n\n```bash\n# 查看当前所有的容器，运行中和退出的\ndocker container ls -a = docker ps -a\n#查看正在运行的所有容器\ndocker containrt ls = docker ps\n#删除一个容器\ndocker container rm {container_id} = docker rm {container_id}\n#删除一个镜像\ndocker image rm {image_id} = docker rmi {image_id}\n#列出所有的container id\ndocker container ls -aq = docke container ls -a | awk {'print$1'}\n#删除所有的container\ndocker rm $(docker container ls -aq)\n#删除所有退出的container\ndocker rm $(docker container ls -f \"status=existed\" -q) = docker container prune\n```\n\n## 构建 Docker 镜像\n\n(1)建立在已有的 image 上，创建 container, 然后在 container 中执行操作，操作完后，创建一个新的 image【不推荐，不安全】\n\n```bash\ndocker commit {container_name} {repository:tag}\n```\n\n这样生成的 image 通过`docker history {container_id}`可以看到有相同的历史版本信息\n\n(2)通过 Dockerfile 中的配置命令进行构建【推荐，安全】\n\n```bash\n> cd docker-centos-vim\n> vim Dockerfile\n\nFROM centos\nRUN yum install vim\n\n> docker build -t zqunor/centos-vim-new .\n```\n\n分析：\n\nDockerfile 构建镜像过程中，执行安装操作时对 image 的写操作，而 image 本身是只读的，所以在执行安装 vim 之前，先创建了临时的 container, 然后在 container 中执行安装 vim 的命令，之后再删除临时的 container，安装完成后再 commit 一个新的镜像。\n\n## Dockerfile 语法梳理\n\n### 关键字\n\n(1) FROM image 来源\n\n```bash\nFROM scratch  # 制作base image\n\nFROM centos # 使用base image\n```\n\n尽量使用官方的 image 作为 base image，安全\n\n(2) LABEL 标签备注记录信息\n\n```bash\nLABEL maintaner=\"xiaoquwl@gmail.com\"\nLABEL verion=\"1.0\"\nLABEL description=\"This is description\"\n```\n\n备注 image 的基本信息。\n\n(3) RUN 执行命令,并创建新的 Image Layer\n\n```bash\nRUN yum update && yum install -y vim \\\n    python-dev # 反斜线换行\n```\n\n执行命令，每 run 一次，就会产生一个分层，为了避免产生无用分层，应该合并成一个 run，负责的 RUN 使用反斜线\"\\\"换行\n\n(4) WORKDIR 跳转或创建目录\n\n```bash\nWORKDIE /test\nWORKDIR tmp\nRUN pwd\n# 输出/test/tmp\n```\n\n进入到相应目录下，没有的话就创建该目录。\n\n尽量使用绝对路径，并且不要用`RUN cd`跳转目录\n\n(5) ADD and COPY 拷贝\n\n```bash\nWORKDIR /root\nADD hello test/\n# /root/test/hello\n\nWORKDIR /root\nCOPY hello test/\n# ?? /root/test/hello\n```\n\n- ADD|COPY：把本地的文件添加到 docker 中\n\n- ADD：\n\n  - 如果是压缩文件，会添加到 docker 并解压；\n  - 如果添加的目录不存在，会创建该目录\n\n- COPY\n\n  - 大部分情况，COPY 由于 ADD\n\n- 添加远程文件/目录要使用 curl 或者 wget\n\n(6) ENV 设置常量，环境变量\n\n```bash\nENV MYSQL_VERSION 5.6\nRUN apt-get install -y mysql-server= \"${MYSQL_VERSION}\" \\\n    && rm -rf /var/lib/apt/lists/*\n# 引用常量，在RUN中可以直接使用\n```\n\n(7) VOLUME and EXPOSE 存储和网络\n\n(8) CMD and ENTRYPOINT\n\n- CMD：设置容器启动后默认执行的命令和参数\n  - 容器启动时默认执行的命令\n  - 如果 docker run 指定了其他命令，CMD 命令被忽视\n  - 如果定义了多个 CMD，只有最后一个会执行\n\n- ENTRYPOINT：设置容器启动时运行的命令\n  - 让容器以应用程序或者服务的形式运行\n  - 不会被忽略，一定会执行\n\n### Dockerfile 格式： Shell 格式和 Exec 格式\n\n(1) 基本样式\n\n- Shell 格式\n\n```bash\nRUN apt-get install -y vim\nCMD echo \"hello docker\"\nENTRYPOINT echo \"hello docker\"\n#输出 hello docker\n```\n\n- Exec 格式\n\n```bash\nRUN [ \"apt-get\", \"install\", \"-y\", \"vim\" ]\nCMD [ \"/bin/echo\", \"hello docker\" ]\nENTRYPOINT [ \"/bin/bash\", \"-c\", \"echo hello $name\" ]\n#输出 hello docker\n\nENTRYPOINT [\"/bin/echo\", \"hello $name\"]\n#输出hello $name [echo指令未被识别]\n```\n\n(2) shell 格式示例\n\n```bash\nFROM centos\nENV name Docker\nENTRYPOINT echo \"hello ${name}\"\n```\n\n## Dockerfile实践\n\n### 将python程序打包成image，并运行成为container\n\n准备：\n1.python环境\n2.flask框架\n\n编写Dockerfile\n\n```bash\nFROM python:2.7\nLABEL  maintainer=\"zqunor<zqunor@gmail.com>\"\nRUN pip install flask\nCOPY app.py /app\nWORKDIE /app\nCMD [\"python\", \"app.py\"]\n```\n\n```python\nfrom flask import flask\napp = Flask(__name__)\n@app.route('/')\ndef hello():\n    return 'hello docker\"\nif __name__ == '__main__':\n    app.run();\n```\n\n\n## Dockerfile实战2\n\n```bash\n#进入到ubuntu容器中\ndocker run -it ubuntu\n#安装stress压力测试工具\napt-get update && apt-get install -y stress\n#查看stress安装目录\nwhich stress\n#查看stress命令帮助信息\nstress --help\n#启动一个进程，并输出debug信息（默认为进程分配256MB）\nstress -vm 1 --verbose\n```\n\n\n## 遇到的问题\n\n### 1.编辑 Vagrantfile，设置启动虚拟机时自动执行的命令，但是进入到虚拟机中后，docker 没有启动，手动启动 docker 后，有报错:\n\n`Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.39/version: dial unix /var/run/docker.sock: connect: permission denied`\n\n=> 1.需要将当前用户加入到docker用户组，或者在执行的docker命令前加sudo\n\n未完待续....","source":"_posts/docker-devops.md","raw":"---\ntitle: 【Docker】系统学习 Docker 践行 DevOps 理念\ndate: 2018-12-11 21:02:12\ntags:\n  - Docker\n  - DevOps\ncategory:\n  - 【Docker相关】\n---\n\nDocker容器化技术已经越来越成为环境部署的主流趋势，一键式部署，并且保证线上线下环境的一致性，节省问题排查的时间，维护效率高，并且对底层硬件的要求比传统虚拟机低，可以提升系统资源的利用率，开发 Docker容器技术所实现的微服务架构，即：将一个环境的各个部分（nginx网络服务、web网站代码数据、mysql/redis/elasticsearch等数据库服务）进行分离，再通过网络架构实现网络通信。\n\n<!--more-->\n\n## Vagrant基本使用\n\n`vagrant --help`\n\n指定虚拟机的目录：\n`cd ~/Vagrant/centos7/`\n`vagrant init centos/7`\n创建一个 centos 7 的虚拟机，在当前目录初始化一个 Vagrantfile 文件，\n描述了需要创建的虚拟机\nconfig.vm.box = \"centos/7\"\n\n`vagrant up`\n启动 centos 7 的 VM，如果有的话直接加载，如果没有的话要去网上下载\n，启动完成之后，就可以在 virtualbox 中看到成功创建了一个 centos7 的虚拟机\n\n然后在 centos7 目录下执行：\n`vagrant ssh`\n进入到 centos7 的 VM 中\n\n查看当前已经有的虚拟机：\n`vagrant status`\n\n停掉运行的 VM\n`vagrant halt`\n\n删除创建的 VM\n`vagrant destroy`\n\n通过 Vagrantfile 可以创建各种虚拟机，\n可以从 vagrant cloud 网上找相应的 Vagrantfile 来创建相应环境的虚拟机\n\n在 Vagrantfile 中配置 provision,使得启动虚拟机时可以自动运行相关命令\n\n示例，配置 Vagrantfile 文件，使得启动虚拟机时自动安装配置好环境：\n\n```bash\nconfig.vm.provision \"shell\", inline: <<-SHELL\n    sudo yum update\n    sudo yum remove docker \\\n                docker-client \\\n                docker-client-latest \\\n                docker-common \\\n                docker-latest \\\n                docker-latest-logrotate \\\n                docker-logrotate \\\n                docker-selinux \\\n                docker-engine-selinux \\\n                docker-engine\n    sudo yum install -y yum-utils \\\n                device-mapper-persistent-data \\\n                lvm2\n    sudo yum-config-manager \\\n                --add-repo \\\n                https://download.docker.com/linux/centos/docker-ce.repo\n    sudo yum install -y docker-ce\n    sudo groupadd docker\n    sudo gpasswd -a docker vagrant\n    sudo service docker restart\nSHELL\n```\n\n## Docker Machine\n\n### 1、在虚拟机中自动安装 Docker Engine 的工具\n\n```bash\n#创建一个安装好docker的linux虚拟机，命名为demo\ndocker-machine create {demo}\n\n#查看当前创建的虚拟机和相应的状态\ndocker-machine ls\n\n#进入到相应的虚拟机\ndocker-machine ssh {demo}\n```\n\n### 2、docker-machine 在 mac 中的应用：\n\n```bash\n#查看mac上的docker信息\ndocker version\n\n#将mac的服务器端连上demo的里的docker服务器端,实现远程管理docker machine\ndocker-machine env {demo}\neval $(docker-machine env {demo})\n#此时在mac上运行docker version查看的server端的信息就是demo这台虚拟机中的docker server信息\n\n#\ndocker-machine env --unset\neval $(docker-machine env --unset)\n```\n\n### 3、docker machine 在阿里云上的使用\n\ndocker machine 可以通过这种方式实现本地 docker 命令远程管理 docker machine\n\n在本地运行 docker 命令创建远程服务器上的 docker 容器：\n使用 driver（在官网上找第三方 driver: 阿里云`docker-machine-driver-aliyunecs`）\n\n安装目录：`/usr/local/bin/docker-machine-driver-aliyunecs`\n\n验证阿里云 ecs driver 安装成功\n`docker-machine create -d aliyunecs --help`\n\n#### 使用\n\n- 前提：账户余额大于 100\n\n- 步骤：\n\n（1）阿里云控制台： 创建用户的 access key(访问控制=》用户管理=》创建用户=》创建 AccessKey)\n\n（2）本地命令行，创建阿里云的 docker host：\n\n```bash\n#执行的命令：\n`docker-machine create -d aliyunecs --aliyunecs-io-optimized=optimized --aliyunecs-instance-type=ecs.c5.large --aliyunecs-access-key-id=L{access-key-id} --aliyunecs-access-key-secret={access-key-secret} --aliyunecs-region={region} {name}\n```\n\n参数说明：\n\n`--aliyunecs-io-optimized=optimized` io 优化的参数，必须要添加\n`--aliyunecs-instance-type=ecs.c5.large` 实例的类型\n`--aliyunecs-region={region}` 创建的实例所属地域\n`{imooc}` 创建的实例名称\n\n（3）本地命令行，连接阿里云的 docker server\n\n```bash\ndocker-machine env {imooc}\neval $(docker-machine env {imooc})\n```\n\n创建完成之后就可以在阿里云的控制台中看到刚刚创建的实例。但是不用的时候及时删除，以免产生不必要的收费。\n\n## Docker 架构和底层技术简介\n\n## 镜像 Image\n\n### 1.什么是 Image\n\n- 文件和 meta data 的集合（root filesystem）\n- 分层的，并且每一层都可以添加、改变、删除文件，成为一个新的 image\n- 不同的 image 可以共享相同的 layer\n- Image 本身是 read-only 的\n\n### 2.Image 的获取\n\n（1）自行编译创建\n\n```bash\n#1.创建Dockerfile\nFROM ubuntu:14.04\nLABEL maintainer=\"zqunor@gmail.com\"\nRUN apt-get update && aput-get install -y redis-server\nEXPOSE 6379\n#启动redis-server\nENTRYPOINT [ \"/usr/bin/redis-server\" ]\n\n#2.build镜像 .表示根据当前目录下的Dockerfile进行build\ndocker built -t zqunor/redis:latest .\n#5行Dockerfile，对应5步build过程，5步对应5层\n```\n\n（2）从 Docker 仓库中拉取\n\n```bash\ndocker pull ubuntu:18.04\n```\n\n### 3.创建 Image\n\n每一个 base image 都是一个可执行文件，执行 image 就是创建一个容器\n\n（1）创建 docker 用户组和用户，避免每次使用 docker 命令都需要加 sudo\n\n```bash\n#创建docker用户组\nsudo groupadd docker\n\n#将当前用户家到docker的用户组中，使当前用户有使用docker的权限\nsudo gpasswd -a vagrant docker\n\n#创建完成之后，重启docker服务\nsudo service docker restart\n```\n\n（2）Image 体验: hello-world\n\n```bash\n#获取镜像\ndocker pull hello-world\n#查看镜像的基本信息\ndocker image ls\n#执行image,创建容器\ndocker hello-world\n```\n\n（3）制作 Image\n\n```bash\n#准备工作：创建一个单独的目录，编写.c文件，并执行生成可执行文件，将这个可执行文件\nvim hello.c\n#include<stdio.h>\nint main()\n{\n    printf(\"hello docker\\n\");\n}\n#配置c语言执行环境\nsudo yum install gcc glibc-static\n#执行生成可执行程序hello\ngcc -static hello.c -o hello\n#生成可执行文件以后，就可以在当前目录下创建Dockerfile文件\nFROM scratch\nADD hello /\nCMD [\"/hello\"]\n#build成image\ndocker build -t zqunor/hello-world .\n#查看image层级\ndocker history {image_id}\n#执行image\ndocker run zqunor/hello-world\n```\n\n## 容器 Container\n\n### 1.什么是 Container\n\n- 通过 Image 创建（copy）\n- 在 Image layer 之上建立一个 container layer(可读写)\n- 类比面向对象：类和实例\n- Image 负责 app 的存储和分发，Container 负责运行 app\n\n### 2.相关命令\n\n```bash\n# 查看当前所有的容器，运行中和退出的\ndocker container ls -a = docker ps -a\n#查看正在运行的所有容器\ndocker containrt ls = docker ps\n#删除一个容器\ndocker container rm {container_id} = docker rm {container_id}\n#删除一个镜像\ndocker image rm {image_id} = docker rmi {image_id}\n#列出所有的container id\ndocker container ls -aq = docke container ls -a | awk {'print$1'}\n#删除所有的container\ndocker rm $(docker container ls -aq)\n#删除所有退出的container\ndocker rm $(docker container ls -f \"status=existed\" -q) = docker container prune\n```\n\n## 构建 Docker 镜像\n\n(1)建立在已有的 image 上，创建 container, 然后在 container 中执行操作，操作完后，创建一个新的 image【不推荐，不安全】\n\n```bash\ndocker commit {container_name} {repository:tag}\n```\n\n这样生成的 image 通过`docker history {container_id}`可以看到有相同的历史版本信息\n\n(2)通过 Dockerfile 中的配置命令进行构建【推荐，安全】\n\n```bash\n> cd docker-centos-vim\n> vim Dockerfile\n\nFROM centos\nRUN yum install vim\n\n> docker build -t zqunor/centos-vim-new .\n```\n\n分析：\n\nDockerfile 构建镜像过程中，执行安装操作时对 image 的写操作，而 image 本身是只读的，所以在执行安装 vim 之前，先创建了临时的 container, 然后在 container 中执行安装 vim 的命令，之后再删除临时的 container，安装完成后再 commit 一个新的镜像。\n\n## Dockerfile 语法梳理\n\n### 关键字\n\n(1) FROM image 来源\n\n```bash\nFROM scratch  # 制作base image\n\nFROM centos # 使用base image\n```\n\n尽量使用官方的 image 作为 base image，安全\n\n(2) LABEL 标签备注记录信息\n\n```bash\nLABEL maintaner=\"xiaoquwl@gmail.com\"\nLABEL verion=\"1.0\"\nLABEL description=\"This is description\"\n```\n\n备注 image 的基本信息。\n\n(3) RUN 执行命令,并创建新的 Image Layer\n\n```bash\nRUN yum update && yum install -y vim \\\n    python-dev # 反斜线换行\n```\n\n执行命令，每 run 一次，就会产生一个分层，为了避免产生无用分层，应该合并成一个 run，负责的 RUN 使用反斜线\"\\\"换行\n\n(4) WORKDIR 跳转或创建目录\n\n```bash\nWORKDIE /test\nWORKDIR tmp\nRUN pwd\n# 输出/test/tmp\n```\n\n进入到相应目录下，没有的话就创建该目录。\n\n尽量使用绝对路径，并且不要用`RUN cd`跳转目录\n\n(5) ADD and COPY 拷贝\n\n```bash\nWORKDIR /root\nADD hello test/\n# /root/test/hello\n\nWORKDIR /root\nCOPY hello test/\n# ?? /root/test/hello\n```\n\n- ADD|COPY：把本地的文件添加到 docker 中\n\n- ADD：\n\n  - 如果是压缩文件，会添加到 docker 并解压；\n  - 如果添加的目录不存在，会创建该目录\n\n- COPY\n\n  - 大部分情况，COPY 由于 ADD\n\n- 添加远程文件/目录要使用 curl 或者 wget\n\n(6) ENV 设置常量，环境变量\n\n```bash\nENV MYSQL_VERSION 5.6\nRUN apt-get install -y mysql-server= \"${MYSQL_VERSION}\" \\\n    && rm -rf /var/lib/apt/lists/*\n# 引用常量，在RUN中可以直接使用\n```\n\n(7) VOLUME and EXPOSE 存储和网络\n\n(8) CMD and ENTRYPOINT\n\n- CMD：设置容器启动后默认执行的命令和参数\n  - 容器启动时默认执行的命令\n  - 如果 docker run 指定了其他命令，CMD 命令被忽视\n  - 如果定义了多个 CMD，只有最后一个会执行\n\n- ENTRYPOINT：设置容器启动时运行的命令\n  - 让容器以应用程序或者服务的形式运行\n  - 不会被忽略，一定会执行\n\n### Dockerfile 格式： Shell 格式和 Exec 格式\n\n(1) 基本样式\n\n- Shell 格式\n\n```bash\nRUN apt-get install -y vim\nCMD echo \"hello docker\"\nENTRYPOINT echo \"hello docker\"\n#输出 hello docker\n```\n\n- Exec 格式\n\n```bash\nRUN [ \"apt-get\", \"install\", \"-y\", \"vim\" ]\nCMD [ \"/bin/echo\", \"hello docker\" ]\nENTRYPOINT [ \"/bin/bash\", \"-c\", \"echo hello $name\" ]\n#输出 hello docker\n\nENTRYPOINT [\"/bin/echo\", \"hello $name\"]\n#输出hello $name [echo指令未被识别]\n```\n\n(2) shell 格式示例\n\n```bash\nFROM centos\nENV name Docker\nENTRYPOINT echo \"hello ${name}\"\n```\n\n## Dockerfile实践\n\n### 将python程序打包成image，并运行成为container\n\n准备：\n1.python环境\n2.flask框架\n\n编写Dockerfile\n\n```bash\nFROM python:2.7\nLABEL  maintainer=\"zqunor<zqunor@gmail.com>\"\nRUN pip install flask\nCOPY app.py /app\nWORKDIE /app\nCMD [\"python\", \"app.py\"]\n```\n\n```python\nfrom flask import flask\napp = Flask(__name__)\n@app.route('/')\ndef hello():\n    return 'hello docker\"\nif __name__ == '__main__':\n    app.run();\n```\n\n\n## Dockerfile实战2\n\n```bash\n#进入到ubuntu容器中\ndocker run -it ubuntu\n#安装stress压力测试工具\napt-get update && apt-get install -y stress\n#查看stress安装目录\nwhich stress\n#查看stress命令帮助信息\nstress --help\n#启动一个进程，并输出debug信息（默认为进程分配256MB）\nstress -vm 1 --verbose\n```\n\n\n## 遇到的问题\n\n### 1.编辑 Vagrantfile，设置启动虚拟机时自动执行的命令，但是进入到虚拟机中后，docker 没有启动，手动启动 docker 后，有报错:\n\n`Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.39/version: dial unix /var/run/docker.sock: connect: permission denied`\n\n=> 1.需要将当前用户加入到docker用户组，或者在执行的docker命令前加sudo\n\n未完待续....","slug":"docker-devops","published":1,"updated":"2019-05-12T15:53:30.763Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c42t005y2wuu56yxzx1s","content":"<p>Docker容器化技术已经越来越成为环境部署的主流趋势，一键式部署，并且保证线上线下环境的一致性，节省问题排查的时间，维护效率高，并且对底层硬件的要求比传统虚拟机低，可以提升系统资源的利用率，开发 Docker容器技术所实现的微服务架构，即：将一个环境的各个部分（nginx网络服务、web网站代码数据、mysql/redis/elasticsearch等数据库服务）进行分离，再通过网络架构实现网络通信。</p>\n<a id=\"more\"></a>\n<h2 id=\"vagrant基本使用\"><a class=\"markdownIt-Anchor\" href=\"#vagrant基本使用\"></a> Vagrant基本使用</h2>\n<p><code>vagrant --help</code></p>\n<p>指定虚拟机的目录：<br>\n<code>cd ~/Vagrant/centos7/</code><br>\n<code>vagrant init centos/7</code><br>\n创建一个 centos 7 的虚拟机，在当前目录初始化一个 Vagrantfile 文件，<br>\n描述了需要创建的虚拟机<br>\nconfig.vm.box = “centos/7”</p>\n<p><code>vagrant up</code><br>\n启动 centos 7 的 VM，如果有的话直接加载，如果没有的话要去网上下载<br>\n，启动完成之后，就可以在 virtualbox 中看到成功创建了一个 centos7 的虚拟机</p>\n<p>然后在 centos7 目录下执行：<br>\n<code>vagrant ssh</code><br>\n进入到 centos7 的 VM 中</p>\n<p>查看当前已经有的虚拟机：<br>\n<code>vagrant status</code></p>\n<p>停掉运行的 VM<br>\n<code>vagrant halt</code></p>\n<p>删除创建的 VM<br>\n<code>vagrant destroy</code></p>\n<p>通过 Vagrantfile 可以创建各种虚拟机，<br>\n可以从 vagrant cloud 网上找相应的 Vagrantfile 来创建相应环境的虚拟机</p>\n<p>在 Vagrantfile 中配置 provision,使得启动虚拟机时可以自动运行相关命令</p>\n<p>示例，配置 Vagrantfile 文件，使得启动虚拟机时自动安装配置好环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config.vm.provision <span class=\"string\">\"shell\"</span>, inline: &lt;&lt;-SHELL</span><br><span class=\"line\">    sudo yum update</span><br><span class=\"line\">    sudo yum remove docker \\</span><br><span class=\"line\">                docker-client \\</span><br><span class=\"line\">                docker-client-latest \\</span><br><span class=\"line\">                docker-common \\</span><br><span class=\"line\">                docker-latest \\</span><br><span class=\"line\">                docker-latest-logrotate \\</span><br><span class=\"line\">                docker-logrotate \\</span><br><span class=\"line\">                docker-selinux \\</span><br><span class=\"line\">                docker-engine-selinux \\</span><br><span class=\"line\">                docker-engine</span><br><span class=\"line\">    sudo yum install -y yum-utils \\</span><br><span class=\"line\">                device-mapper-persistent-data \\</span><br><span class=\"line\">                lvm2</span><br><span class=\"line\">    sudo yum-config-manager \\</span><br><span class=\"line\">                --add-repo \\</span><br><span class=\"line\">                https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\">    sudo yum install -y docker-ce</span><br><span class=\"line\">    sudo groupadd docker</span><br><span class=\"line\">    sudo gpasswd -a docker vagrant</span><br><span class=\"line\">    sudo service docker restart</span><br><span class=\"line\">SHELL</span><br></pre></td></tr></table></figure>\n<h2 id=\"docker-machine\"><a class=\"markdownIt-Anchor\" href=\"#docker-machine\"></a> Docker Machine</h2>\n<h3 id=\"1-在虚拟机中自动安装-docker-engine-的工具\"><a class=\"markdownIt-Anchor\" href=\"#1-在虚拟机中自动安装-docker-engine-的工具\"></a> 1、在虚拟机中自动安装 Docker Engine 的工具</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建一个安装好docker的linux虚拟机，命名为demo</span></span><br><span class=\"line\">docker-machine create &#123;demo&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看当前创建的虚拟机和相应的状态</span></span><br><span class=\"line\">docker-machine ls</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#进入到相应的虚拟机</span></span><br><span class=\"line\">docker-machine ssh &#123;demo&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-docker-machine-在-mac-中的应用\"><a class=\"markdownIt-Anchor\" href=\"#2-docker-machine-在-mac-中的应用\"></a> 2、docker-machine 在 mac 中的应用：</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查看mac上的docker信息</span></span><br><span class=\"line\">docker version</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#将mac的服务器端连上demo的里的docker服务器端,实现远程管理docker machine</span></span><br><span class=\"line\">docker-machine env &#123;demo&#125;</span><br><span class=\"line\"><span class=\"built_in\">eval</span> $(docker-machine env &#123;demo&#125;)</span><br><span class=\"line\"><span class=\"comment\">#此时在mac上运行docker version查看的server端的信息就是demo这台虚拟机中的docker server信息</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">docker-machine env --<span class=\"built_in\">unset</span></span><br><span class=\"line\"><span class=\"built_in\">eval</span> $(docker-machine env --<span class=\"built_in\">unset</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-docker-machine-在阿里云上的使用\"><a class=\"markdownIt-Anchor\" href=\"#3-docker-machine-在阿里云上的使用\"></a> 3、docker machine 在阿里云上的使用</h3>\n<p>docker machine 可以通过这种方式实现本地 docker 命令远程管理 docker machine</p>\n<p>在本地运行 docker 命令创建远程服务器上的 docker 容器：<br>\n使用 driver（在官网上找第三方 driver: 阿里云<code>docker-machine-driver-aliyunecs</code>）</p>\n<p>安装目录：<code>/usr/local/bin/docker-machine-driver-aliyunecs</code></p>\n<p>验证阿里云 ecs driver 安装成功<br>\n<code>docker-machine create -d aliyunecs --help</code></p>\n<h4 id=\"使用\"><a class=\"markdownIt-Anchor\" href=\"#使用\"></a> 使用</h4>\n<ul>\n<li>\n<p>前提：账户余额大于 100</p>\n</li>\n<li>\n<p>步骤：</p>\n</li>\n</ul>\n<p>（1）阿里云控制台： 创建用户的 access key(访问控制=》用户管理=》创建用户=》创建 AccessKey)</p>\n<p>（2）本地命令行，创建阿里云的 docker host：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#执行的命令：</span></span><br><span class=\"line\">`docker-machine create -d aliyunecs --aliyunecs-io-optimized=optimized --aliyunecs-instance-type=ecs.c5.large --aliyunecs-access-key-id=L&#123;access-key-id&#125; --aliyunecs-access-key-secret=&#123;access-key-secret&#125; --aliyunecs-region=&#123;region&#125; &#123;name&#125;</span><br></pre></td></tr></table></figure>\n<p>参数说明：</p>\n<p><code>--aliyunecs-io-optimized=optimized</code> io 优化的参数，必须要添加<br>\n<code>--aliyunecs-instance-type=ecs.c5.large</code> 实例的类型<br>\n<code>--aliyunecs-region={region}</code> 创建的实例所属地域<br>\n<code>{imooc}</code> 创建的实例名称</p>\n<p>（3）本地命令行，连接阿里云的 docker server</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-machine env &#123;imooc&#125;</span><br><span class=\"line\"><span class=\"built_in\">eval</span> $(docker-machine env &#123;imooc&#125;)</span><br></pre></td></tr></table></figure>\n<p>创建完成之后就可以在阿里云的控制台中看到刚刚创建的实例。但是不用的时候及时删除，以免产生不必要的收费。</p>\n<h2 id=\"docker-架构和底层技术简介\"><a class=\"markdownIt-Anchor\" href=\"#docker-架构和底层技术简介\"></a> Docker 架构和底层技术简介</h2>\n<h2 id=\"镜像-image\"><a class=\"markdownIt-Anchor\" href=\"#镜像-image\"></a> 镜像 Image</h2>\n<h3 id=\"1什么是-image\"><a class=\"markdownIt-Anchor\" href=\"#1什么是-image\"></a> 1.什么是 Image</h3>\n<ul>\n<li>文件和 meta data 的集合（root filesystem）</li>\n<li>分层的，并且每一层都可以添加、改变、删除文件，成为一个新的 image</li>\n<li>不同的 image 可以共享相同的 layer</li>\n<li>Image 本身是 read-only 的</li>\n</ul>\n<h3 id=\"2image-的获取\"><a class=\"markdownIt-Anchor\" href=\"#2image-的获取\"></a> 2.Image 的获取</h3>\n<p>（1）自行编译创建</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1.创建Dockerfile</span></span><br><span class=\"line\">FROM ubuntu:14.04</span><br><span class=\"line\">LABEL maintainer=<span class=\"string\">\"zqunor@gmail.com\"</span></span><br><span class=\"line\">RUN apt-get update &amp;&amp; aput-get install -y redis-server</span><br><span class=\"line\">EXPOSE 6379</span><br><span class=\"line\"><span class=\"comment\">#启动redis-server</span></span><br><span class=\"line\">ENTRYPOINT [ <span class=\"string\">\"/usr/bin/redis-server\"</span> ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2.build镜像 .表示根据当前目录下的Dockerfile进行build</span></span><br><span class=\"line\">docker built -t zqunor/redis:latest .</span><br><span class=\"line\"><span class=\"comment\">#5行Dockerfile，对应5步build过程，5步对应5层</span></span><br></pre></td></tr></table></figure>\n<p>（2）从 Docker 仓库中拉取</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull ubuntu:18.04</span><br></pre></td></tr></table></figure>\n<h3 id=\"3创建-image\"><a class=\"markdownIt-Anchor\" href=\"#3创建-image\"></a> 3.创建 Image</h3>\n<p>每一个 base image 都是一个可执行文件，执行 image 就是创建一个容器</p>\n<p>（1）创建 docker 用户组和用户，避免每次使用 docker 命令都需要加 sudo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建docker用户组</span></span><br><span class=\"line\">sudo groupadd docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#将当前用户家到docker的用户组中，使当前用户有使用docker的权限</span></span><br><span class=\"line\">sudo gpasswd -a vagrant docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#创建完成之后，重启docker服务</span></span><br><span class=\"line\">sudo service docker restart</span><br></pre></td></tr></table></figure>\n<p>（2）Image 体验: hello-world</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#获取镜像</span></span><br><span class=\"line\">docker pull hello-world</span><br><span class=\"line\"><span class=\"comment\">#查看镜像的基本信息</span></span><br><span class=\"line\">docker image ls</span><br><span class=\"line\"><span class=\"comment\">#执行image,创建容器</span></span><br><span class=\"line\">docker hello-world</span><br></pre></td></tr></table></figure>\n<p>（3）制作 Image</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#准备工作：创建一个单独的目录，编写.c文件，并执行生成可执行文件，将这个可执行文件</span></span><br><span class=\"line\">vim hello.c</span><br><span class=\"line\"><span class=\"comment\">#include&lt;stdio.h&gt;</span></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"hello docker\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">#配置c语言执行环境</span></span><br><span class=\"line\">sudo yum install gcc glibc-static</span><br><span class=\"line\"><span class=\"comment\">#执行生成可执行程序hello</span></span><br><span class=\"line\">gcc -static hello.c -o hello</span><br><span class=\"line\"><span class=\"comment\">#生成可执行文件以后，就可以在当前目录下创建Dockerfile文件</span></span><br><span class=\"line\">FROM scratch</span><br><span class=\"line\">ADD hello /</span><br><span class=\"line\">CMD [<span class=\"string\">\"/hello\"</span>]</span><br><span class=\"line\"><span class=\"comment\">#build成image</span></span><br><span class=\"line\">docker build -t zqunor/hello-world .</span><br><span class=\"line\"><span class=\"comment\">#查看image层级</span></span><br><span class=\"line\">docker <span class=\"built_in\">history</span> &#123;image_id&#125;</span><br><span class=\"line\"><span class=\"comment\">#执行image</span></span><br><span class=\"line\">docker run zqunor/hello-world</span><br></pre></td></tr></table></figure>\n<h2 id=\"容器-container\"><a class=\"markdownIt-Anchor\" href=\"#容器-container\"></a> 容器 Container</h2>\n<h3 id=\"1什么是-container\"><a class=\"markdownIt-Anchor\" href=\"#1什么是-container\"></a> 1.什么是 Container</h3>\n<ul>\n<li>通过 Image 创建（copy）</li>\n<li>在 Image layer 之上建立一个 container layer(可读写)</li>\n<li>类比面向对象：类和实例</li>\n<li>Image 负责 app 的存储和分发，Container 负责运行 app</li>\n</ul>\n<h3 id=\"2相关命令\"><a class=\"markdownIt-Anchor\" href=\"#2相关命令\"></a> 2.相关命令</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看当前所有的容器，运行中和退出的</span></span><br><span class=\"line\">docker container ls -a = docker ps -a</span><br><span class=\"line\"><span class=\"comment\">#查看正在运行的所有容器</span></span><br><span class=\"line\">docker containrt ls = docker ps</span><br><span class=\"line\"><span class=\"comment\">#删除一个容器</span></span><br><span class=\"line\">docker container rm &#123;container_id&#125; = docker rm &#123;container_id&#125;</span><br><span class=\"line\"><span class=\"comment\">#删除一个镜像</span></span><br><span class=\"line\">docker image rm &#123;image_id&#125; = docker rmi &#123;image_id&#125;</span><br><span class=\"line\"><span class=\"comment\">#列出所有的container id</span></span><br><span class=\"line\">docker container ls -aq = docke container ls -a | awk &#123;<span class=\"string\">'print$1'</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">#删除所有的container</span></span><br><span class=\"line\">docker rm $(docker container ls -aq)</span><br><span class=\"line\"><span class=\"comment\">#删除所有退出的container</span></span><br><span class=\"line\">docker rm $(docker container ls -f <span class=\"string\">\"status=existed\"</span> -q) = docker container prune</span><br></pre></td></tr></table></figure>\n<h2 id=\"构建-docker-镜像\"><a class=\"markdownIt-Anchor\" href=\"#构建-docker-镜像\"></a> 构建 Docker 镜像</h2>\n<p>(1)建立在已有的 image 上，创建 container, 然后在 container 中执行操作，操作完后，创建一个新的 image【不推荐，不安全】</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit &#123;container_name&#125; &#123;repository:tag&#125;</span><br></pre></td></tr></table></figure>\n<p>这样生成的 image 通过<code>docker history {container_id}</code>可以看到有相同的历史版本信息</p>\n<p>(2)通过 Dockerfile 中的配置命令进行构建【推荐，安全】</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"built_in\">cd</span> docker-centos-vim</span><br><span class=\"line\">&gt; vim Dockerfile</span><br><span class=\"line\"></span><br><span class=\"line\">FROM centos</span><br><span class=\"line\">RUN yum install vim</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; docker build -t zqunor/centos-vim-new .</span><br></pre></td></tr></table></figure>\n<p>分析：</p>\n<p>Dockerfile 构建镜像过程中，执行安装操作时对 image 的写操作，而 image 本身是只读的，所以在执行安装 vim 之前，先创建了临时的 container, 然后在 container 中执行安装 vim 的命令，之后再删除临时的 container，安装完成后再 commit 一个新的镜像。</p>\n<h2 id=\"dockerfile-语法梳理\"><a class=\"markdownIt-Anchor\" href=\"#dockerfile-语法梳理\"></a> Dockerfile 语法梳理</h2>\n<h3 id=\"关键字\"><a class=\"markdownIt-Anchor\" href=\"#关键字\"></a> 关键字</h3>\n<p>(1) FROM image 来源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM scratch  <span class=\"comment\"># 制作base image</span></span><br><span class=\"line\"></span><br><span class=\"line\">FROM centos <span class=\"comment\"># 使用base image</span></span><br></pre></td></tr></table></figure>\n<p>尽量使用官方的 image 作为 base image，安全</p>\n<p>(2) LABEL 标签备注记录信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LABEL maintaner=<span class=\"string\">\"xiaoquwl@gmail.com\"</span></span><br><span class=\"line\">LABEL verion=<span class=\"string\">\"1.0\"</span></span><br><span class=\"line\">LABEL description=<span class=\"string\">\"This is description\"</span></span><br></pre></td></tr></table></figure>\n<p>备注 image 的基本信息。</p>\n<p>(3) RUN 执行命令,并创建新的 Image Layer</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUN yum update &amp;&amp; yum install -y vim \\</span><br><span class=\"line\">    python-dev <span class=\"comment\"># 反斜线换行</span></span><br></pre></td></tr></table></figure>\n<p>执行命令，每 run 一次，就会产生一个分层，为了避免产生无用分层，应该合并成一个 run，负责的 RUN 使用反斜线&quot;&quot;换行</p>\n<p>(4) WORKDIR 跳转或创建目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WORKDIE /<span class=\"built_in\">test</span></span><br><span class=\"line\">WORKDIR tmp</span><br><span class=\"line\">RUN <span class=\"built_in\">pwd</span></span><br><span class=\"line\"><span class=\"comment\"># 输出/test/tmp</span></span><br></pre></td></tr></table></figure>\n<p>进入到相应目录下，没有的话就创建该目录。</p>\n<p>尽量使用绝对路径，并且不要用<code>RUN cd</code>跳转目录</p>\n<p>(5) ADD and COPY 拷贝</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WORKDIR /root</span><br><span class=\"line\">ADD hello <span class=\"built_in\">test</span>/</span><br><span class=\"line\"><span class=\"comment\"># /root/test/hello</span></span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /root</span><br><span class=\"line\">COPY hello <span class=\"built_in\">test</span>/</span><br><span class=\"line\"><span class=\"comment\"># ?? /root/test/hello</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>ADD|COPY：把本地的文件添加到 docker 中</p>\n</li>\n<li>\n<p>ADD：</p>\n<ul>\n<li>如果是压缩文件，会添加到 docker 并解压；</li>\n<li>如果添加的目录不存在，会创建该目录</li>\n</ul>\n</li>\n<li>\n<p>COPY</p>\n<ul>\n<li>大部分情况，COPY 由于 ADD</li>\n</ul>\n</li>\n<li>\n<p>添加远程文件/目录要使用 curl 或者 wget</p>\n</li>\n</ul>\n<p>(6) ENV 设置常量，环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ENV MYSQL_VERSION 5.6</span><br><span class=\"line\">RUN apt-get install -y mysql-server= <span class=\"string\">\"<span class=\"variable\">$&#123;MYSQL_VERSION&#125;</span>\"</span> \\</span><br><span class=\"line\">    &amp;&amp; rm -rf /var/lib/apt/lists/*</span><br><span class=\"line\"><span class=\"comment\"># 引用常量，在RUN中可以直接使用</span></span><br></pre></td></tr></table></figure>\n<p>(7) VOLUME and EXPOSE 存储和网络</p>\n<p>(8) CMD and ENTRYPOINT</p>\n<ul>\n<li>\n<p>CMD：设置容器启动后默认执行的命令和参数</p>\n<ul>\n<li>容器启动时默认执行的命令</li>\n<li>如果 docker run 指定了其他命令，CMD 命令被忽视</li>\n<li>如果定义了多个 CMD，只有最后一个会执行</li>\n</ul>\n</li>\n<li>\n<p>ENTRYPOINT：设置容器启动时运行的命令</p>\n<ul>\n<li>让容器以应用程序或者服务的形式运行</li>\n<li>不会被忽略，一定会执行</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"dockerfile-格式-shell-格式和-exec-格式\"><a class=\"markdownIt-Anchor\" href=\"#dockerfile-格式-shell-格式和-exec-格式\"></a> Dockerfile 格式： Shell 格式和 Exec 格式</h3>\n<p>(1) 基本样式</p>\n<ul>\n<li>Shell 格式</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUN apt-get install -y vim</span><br><span class=\"line\">CMD <span class=\"built_in\">echo</span> <span class=\"string\">\"hello docker\"</span></span><br><span class=\"line\">ENTRYPOINT <span class=\"built_in\">echo</span> <span class=\"string\">\"hello docker\"</span></span><br><span class=\"line\"><span class=\"comment\">#输出 hello docker</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Exec 格式</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUN [ <span class=\"string\">\"apt-get\"</span>, <span class=\"string\">\"install\"</span>, <span class=\"string\">\"-y\"</span>, <span class=\"string\">\"vim\"</span> ]</span><br><span class=\"line\">CMD [ <span class=\"string\">\"/bin/echo\"</span>, <span class=\"string\">\"hello docker\"</span> ]</span><br><span class=\"line\">ENTRYPOINT [ <span class=\"string\">\"/bin/bash\"</span>, <span class=\"string\">\"-c\"</span>, <span class=\"string\">\"echo hello <span class=\"variable\">$name</span>\"</span> ]</span><br><span class=\"line\"><span class=\"comment\">#输出 hello docker</span></span><br><span class=\"line\"></span><br><span class=\"line\">ENTRYPOINT [<span class=\"string\">\"/bin/echo\"</span>, <span class=\"string\">\"hello <span class=\"variable\">$name</span>\"</span>]</span><br><span class=\"line\"><span class=\"comment\">#输出hello $name [echo指令未被识别]</span></span><br></pre></td></tr></table></figure>\n<p>(2) shell 格式示例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM centos</span><br><span class=\"line\">ENV name Docker</span><br><span class=\"line\">ENTRYPOINT <span class=\"built_in\">echo</span> <span class=\"string\">\"hello <span class=\"variable\">$&#123;name&#125;</span>\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"dockerfile实践\"><a class=\"markdownIt-Anchor\" href=\"#dockerfile实践\"></a> Dockerfile实践</h2>\n<h3 id=\"将python程序打包成image并运行成为container\"><a class=\"markdownIt-Anchor\" href=\"#将python程序打包成image并运行成为container\"></a> 将python程序打包成image，并运行成为container</h3>\n<p>准备：<br>\n1.python环境<br>\n2.flask框架</p>\n<p>编写Dockerfile</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM python:2.7</span><br><span class=\"line\">LABEL  maintainer=<span class=\"string\">\"zqunor&lt;zqunor@gmail.com&gt;\"</span></span><br><span class=\"line\">RUN pip install flask</span><br><span class=\"line\">COPY app.py /app</span><br><span class=\"line\">WORKDIE /app</span><br><span class=\"line\">CMD [<span class=\"string\">\"python\"</span>, <span class=\"string\">\"app.py\"</span>]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> flask</span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"><span class=\"meta\">@app.route('/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'hello docker\"</span></span><br><span class=\"line\"><span class=\"string\">if __name__ == '</span>__main__<span class=\"string\">':</span></span><br><span class=\"line\"><span class=\"string\">    app.run();</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"dockerfile实战2\"><a class=\"markdownIt-Anchor\" href=\"#dockerfile实战2\"></a> Dockerfile实战2</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#进入到ubuntu容器中</span></span><br><span class=\"line\">docker run -it ubuntu</span><br><span class=\"line\"><span class=\"comment\">#安装stress压力测试工具</span></span><br><span class=\"line\">apt-get update &amp;&amp; apt-get install -y stress</span><br><span class=\"line\"><span class=\"comment\">#查看stress安装目录</span></span><br><span class=\"line\"><span class=\"built_in\">which</span> stress</span><br><span class=\"line\"><span class=\"comment\">#查看stress命令帮助信息</span></span><br><span class=\"line\">stress --<span class=\"built_in\">help</span></span><br><span class=\"line\"><span class=\"comment\">#启动一个进程，并输出debug信息（默认为进程分配256MB）</span></span><br><span class=\"line\">stress -vm 1 --verbose</span><br></pre></td></tr></table></figure>\n<h2 id=\"遇到的问题\"><a class=\"markdownIt-Anchor\" href=\"#遇到的问题\"></a> 遇到的问题</h2>\n<h3 id=\"1编辑-vagrantfile设置启动虚拟机时自动执行的命令但是进入到虚拟机中后docker-没有启动手动启动-docker-后有报错\"><a class=\"markdownIt-Anchor\" href=\"#1编辑-vagrantfile设置启动虚拟机时自动执行的命令但是进入到虚拟机中后docker-没有启动手动启动-docker-后有报错\"></a> 1.编辑 Vagrantfile，设置启动虚拟机时自动执行的命令，但是进入到虚拟机中后，docker 没有启动，手动启动 docker 后，有报错:</h3>\n<p><code>Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.39/version: dial unix /var/run/docker.sock: connect: permission denied</code></p>\n<p>=&gt; 1.需要将当前用户加入到docker用户组，或者在执行的docker命令前加sudo</p>\n<p>未完待续…</p>\n","site":{"data":{}},"excerpt":"<p>Docker容器化技术已经越来越成为环境部署的主流趋势，一键式部署，并且保证线上线下环境的一致性，节省问题排查的时间，维护效率高，并且对底层硬件的要求比传统虚拟机低，可以提升系统资源的利用率，开发 Docker容器技术所实现的微服务架构，即：将一个环境的各个部分（nginx网络服务、web网站代码数据、mysql/redis/elasticsearch等数据库服务）进行分离，再通过网络架构实现网络通信。</p>","more":"<h2 id=\"vagrant基本使用\"><a class=\"markdownIt-Anchor\" href=\"#vagrant基本使用\"></a> Vagrant基本使用</h2>\n<p><code>vagrant --help</code></p>\n<p>指定虚拟机的目录：<br>\n<code>cd ~/Vagrant/centos7/</code><br>\n<code>vagrant init centos/7</code><br>\n创建一个 centos 7 的虚拟机，在当前目录初始化一个 Vagrantfile 文件，<br>\n描述了需要创建的虚拟机<br>\nconfig.vm.box = “centos/7”</p>\n<p><code>vagrant up</code><br>\n启动 centos 7 的 VM，如果有的话直接加载，如果没有的话要去网上下载<br>\n，启动完成之后，就可以在 virtualbox 中看到成功创建了一个 centos7 的虚拟机</p>\n<p>然后在 centos7 目录下执行：<br>\n<code>vagrant ssh</code><br>\n进入到 centos7 的 VM 中</p>\n<p>查看当前已经有的虚拟机：<br>\n<code>vagrant status</code></p>\n<p>停掉运行的 VM<br>\n<code>vagrant halt</code></p>\n<p>删除创建的 VM<br>\n<code>vagrant destroy</code></p>\n<p>通过 Vagrantfile 可以创建各种虚拟机，<br>\n可以从 vagrant cloud 网上找相应的 Vagrantfile 来创建相应环境的虚拟机</p>\n<p>在 Vagrantfile 中配置 provision,使得启动虚拟机时可以自动运行相关命令</p>\n<p>示例，配置 Vagrantfile 文件，使得启动虚拟机时自动安装配置好环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config.vm.provision <span class=\"string\">\"shell\"</span>, inline: &lt;&lt;-SHELL</span><br><span class=\"line\">    sudo yum update</span><br><span class=\"line\">    sudo yum remove docker \\</span><br><span class=\"line\">                docker-client \\</span><br><span class=\"line\">                docker-client-latest \\</span><br><span class=\"line\">                docker-common \\</span><br><span class=\"line\">                docker-latest \\</span><br><span class=\"line\">                docker-latest-logrotate \\</span><br><span class=\"line\">                docker-logrotate \\</span><br><span class=\"line\">                docker-selinux \\</span><br><span class=\"line\">                docker-engine-selinux \\</span><br><span class=\"line\">                docker-engine</span><br><span class=\"line\">    sudo yum install -y yum-utils \\</span><br><span class=\"line\">                device-mapper-persistent-data \\</span><br><span class=\"line\">                lvm2</span><br><span class=\"line\">    sudo yum-config-manager \\</span><br><span class=\"line\">                --add-repo \\</span><br><span class=\"line\">                https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\">    sudo yum install -y docker-ce</span><br><span class=\"line\">    sudo groupadd docker</span><br><span class=\"line\">    sudo gpasswd -a docker vagrant</span><br><span class=\"line\">    sudo service docker restart</span><br><span class=\"line\">SHELL</span><br></pre></td></tr></table></figure>\n<h2 id=\"docker-machine\"><a class=\"markdownIt-Anchor\" href=\"#docker-machine\"></a> Docker Machine</h2>\n<h3 id=\"1-在虚拟机中自动安装-docker-engine-的工具\"><a class=\"markdownIt-Anchor\" href=\"#1-在虚拟机中自动安装-docker-engine-的工具\"></a> 1、在虚拟机中自动安装 Docker Engine 的工具</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建一个安装好docker的linux虚拟机，命名为demo</span></span><br><span class=\"line\">docker-machine create &#123;demo&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看当前创建的虚拟机和相应的状态</span></span><br><span class=\"line\">docker-machine ls</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#进入到相应的虚拟机</span></span><br><span class=\"line\">docker-machine ssh &#123;demo&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-docker-machine-在-mac-中的应用\"><a class=\"markdownIt-Anchor\" href=\"#2-docker-machine-在-mac-中的应用\"></a> 2、docker-machine 在 mac 中的应用：</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查看mac上的docker信息</span></span><br><span class=\"line\">docker version</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#将mac的服务器端连上demo的里的docker服务器端,实现远程管理docker machine</span></span><br><span class=\"line\">docker-machine env &#123;demo&#125;</span><br><span class=\"line\"><span class=\"built_in\">eval</span> $(docker-machine env &#123;demo&#125;)</span><br><span class=\"line\"><span class=\"comment\">#此时在mac上运行docker version查看的server端的信息就是demo这台虚拟机中的docker server信息</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">docker-machine env --<span class=\"built_in\">unset</span></span><br><span class=\"line\"><span class=\"built_in\">eval</span> $(docker-machine env --<span class=\"built_in\">unset</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-docker-machine-在阿里云上的使用\"><a class=\"markdownIt-Anchor\" href=\"#3-docker-machine-在阿里云上的使用\"></a> 3、docker machine 在阿里云上的使用</h3>\n<p>docker machine 可以通过这种方式实现本地 docker 命令远程管理 docker machine</p>\n<p>在本地运行 docker 命令创建远程服务器上的 docker 容器：<br>\n使用 driver（在官网上找第三方 driver: 阿里云<code>docker-machine-driver-aliyunecs</code>）</p>\n<p>安装目录：<code>/usr/local/bin/docker-machine-driver-aliyunecs</code></p>\n<p>验证阿里云 ecs driver 安装成功<br>\n<code>docker-machine create -d aliyunecs --help</code></p>\n<h4 id=\"使用\"><a class=\"markdownIt-Anchor\" href=\"#使用\"></a> 使用</h4>\n<ul>\n<li>\n<p>前提：账户余额大于 100</p>\n</li>\n<li>\n<p>步骤：</p>\n</li>\n</ul>\n<p>（1）阿里云控制台： 创建用户的 access key(访问控制=》用户管理=》创建用户=》创建 AccessKey)</p>\n<p>（2）本地命令行，创建阿里云的 docker host：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#执行的命令：</span></span><br><span class=\"line\">`docker-machine create -d aliyunecs --aliyunecs-io-optimized=optimized --aliyunecs-instance-type=ecs.c5.large --aliyunecs-access-key-id=L&#123;access-key-id&#125; --aliyunecs-access-key-secret=&#123;access-key-secret&#125; --aliyunecs-region=&#123;region&#125; &#123;name&#125;</span><br></pre></td></tr></table></figure>\n<p>参数说明：</p>\n<p><code>--aliyunecs-io-optimized=optimized</code> io 优化的参数，必须要添加<br>\n<code>--aliyunecs-instance-type=ecs.c5.large</code> 实例的类型<br>\n<code>--aliyunecs-region={region}</code> 创建的实例所属地域<br>\n<code>{imooc}</code> 创建的实例名称</p>\n<p>（3）本地命令行，连接阿里云的 docker server</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-machine env &#123;imooc&#125;</span><br><span class=\"line\"><span class=\"built_in\">eval</span> $(docker-machine env &#123;imooc&#125;)</span><br></pre></td></tr></table></figure>\n<p>创建完成之后就可以在阿里云的控制台中看到刚刚创建的实例。但是不用的时候及时删除，以免产生不必要的收费。</p>\n<h2 id=\"docker-架构和底层技术简介\"><a class=\"markdownIt-Anchor\" href=\"#docker-架构和底层技术简介\"></a> Docker 架构和底层技术简介</h2>\n<h2 id=\"镜像-image\"><a class=\"markdownIt-Anchor\" href=\"#镜像-image\"></a> 镜像 Image</h2>\n<h3 id=\"1什么是-image\"><a class=\"markdownIt-Anchor\" href=\"#1什么是-image\"></a> 1.什么是 Image</h3>\n<ul>\n<li>文件和 meta data 的集合（root filesystem）</li>\n<li>分层的，并且每一层都可以添加、改变、删除文件，成为一个新的 image</li>\n<li>不同的 image 可以共享相同的 layer</li>\n<li>Image 本身是 read-only 的</li>\n</ul>\n<h3 id=\"2image-的获取\"><a class=\"markdownIt-Anchor\" href=\"#2image-的获取\"></a> 2.Image 的获取</h3>\n<p>（1）自行编译创建</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1.创建Dockerfile</span></span><br><span class=\"line\">FROM ubuntu:14.04</span><br><span class=\"line\">LABEL maintainer=<span class=\"string\">\"zqunor@gmail.com\"</span></span><br><span class=\"line\">RUN apt-get update &amp;&amp; aput-get install -y redis-server</span><br><span class=\"line\">EXPOSE 6379</span><br><span class=\"line\"><span class=\"comment\">#启动redis-server</span></span><br><span class=\"line\">ENTRYPOINT [ <span class=\"string\">\"/usr/bin/redis-server\"</span> ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2.build镜像 .表示根据当前目录下的Dockerfile进行build</span></span><br><span class=\"line\">docker built -t zqunor/redis:latest .</span><br><span class=\"line\"><span class=\"comment\">#5行Dockerfile，对应5步build过程，5步对应5层</span></span><br></pre></td></tr></table></figure>\n<p>（2）从 Docker 仓库中拉取</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull ubuntu:18.04</span><br></pre></td></tr></table></figure>\n<h3 id=\"3创建-image\"><a class=\"markdownIt-Anchor\" href=\"#3创建-image\"></a> 3.创建 Image</h3>\n<p>每一个 base image 都是一个可执行文件，执行 image 就是创建一个容器</p>\n<p>（1）创建 docker 用户组和用户，避免每次使用 docker 命令都需要加 sudo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建docker用户组</span></span><br><span class=\"line\">sudo groupadd docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#将当前用户家到docker的用户组中，使当前用户有使用docker的权限</span></span><br><span class=\"line\">sudo gpasswd -a vagrant docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#创建完成之后，重启docker服务</span></span><br><span class=\"line\">sudo service docker restart</span><br></pre></td></tr></table></figure>\n<p>（2）Image 体验: hello-world</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#获取镜像</span></span><br><span class=\"line\">docker pull hello-world</span><br><span class=\"line\"><span class=\"comment\">#查看镜像的基本信息</span></span><br><span class=\"line\">docker image ls</span><br><span class=\"line\"><span class=\"comment\">#执行image,创建容器</span></span><br><span class=\"line\">docker hello-world</span><br></pre></td></tr></table></figure>\n<p>（3）制作 Image</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#准备工作：创建一个单独的目录，编写.c文件，并执行生成可执行文件，将这个可执行文件</span></span><br><span class=\"line\">vim hello.c</span><br><span class=\"line\"><span class=\"comment\">#include&lt;stdio.h&gt;</span></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"hello docker\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">#配置c语言执行环境</span></span><br><span class=\"line\">sudo yum install gcc glibc-static</span><br><span class=\"line\"><span class=\"comment\">#执行生成可执行程序hello</span></span><br><span class=\"line\">gcc -static hello.c -o hello</span><br><span class=\"line\"><span class=\"comment\">#生成可执行文件以后，就可以在当前目录下创建Dockerfile文件</span></span><br><span class=\"line\">FROM scratch</span><br><span class=\"line\">ADD hello /</span><br><span class=\"line\">CMD [<span class=\"string\">\"/hello\"</span>]</span><br><span class=\"line\"><span class=\"comment\">#build成image</span></span><br><span class=\"line\">docker build -t zqunor/hello-world .</span><br><span class=\"line\"><span class=\"comment\">#查看image层级</span></span><br><span class=\"line\">docker <span class=\"built_in\">history</span> &#123;image_id&#125;</span><br><span class=\"line\"><span class=\"comment\">#执行image</span></span><br><span class=\"line\">docker run zqunor/hello-world</span><br></pre></td></tr></table></figure>\n<h2 id=\"容器-container\"><a class=\"markdownIt-Anchor\" href=\"#容器-container\"></a> 容器 Container</h2>\n<h3 id=\"1什么是-container\"><a class=\"markdownIt-Anchor\" href=\"#1什么是-container\"></a> 1.什么是 Container</h3>\n<ul>\n<li>通过 Image 创建（copy）</li>\n<li>在 Image layer 之上建立一个 container layer(可读写)</li>\n<li>类比面向对象：类和实例</li>\n<li>Image 负责 app 的存储和分发，Container 负责运行 app</li>\n</ul>\n<h3 id=\"2相关命令\"><a class=\"markdownIt-Anchor\" href=\"#2相关命令\"></a> 2.相关命令</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看当前所有的容器，运行中和退出的</span></span><br><span class=\"line\">docker container ls -a = docker ps -a</span><br><span class=\"line\"><span class=\"comment\">#查看正在运行的所有容器</span></span><br><span class=\"line\">docker containrt ls = docker ps</span><br><span class=\"line\"><span class=\"comment\">#删除一个容器</span></span><br><span class=\"line\">docker container rm &#123;container_id&#125; = docker rm &#123;container_id&#125;</span><br><span class=\"line\"><span class=\"comment\">#删除一个镜像</span></span><br><span class=\"line\">docker image rm &#123;image_id&#125; = docker rmi &#123;image_id&#125;</span><br><span class=\"line\"><span class=\"comment\">#列出所有的container id</span></span><br><span class=\"line\">docker container ls -aq = docke container ls -a | awk &#123;<span class=\"string\">'print$1'</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">#删除所有的container</span></span><br><span class=\"line\">docker rm $(docker container ls -aq)</span><br><span class=\"line\"><span class=\"comment\">#删除所有退出的container</span></span><br><span class=\"line\">docker rm $(docker container ls -f <span class=\"string\">\"status=existed\"</span> -q) = docker container prune</span><br></pre></td></tr></table></figure>\n<h2 id=\"构建-docker-镜像\"><a class=\"markdownIt-Anchor\" href=\"#构建-docker-镜像\"></a> 构建 Docker 镜像</h2>\n<p>(1)建立在已有的 image 上，创建 container, 然后在 container 中执行操作，操作完后，创建一个新的 image【不推荐，不安全】</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit &#123;container_name&#125; &#123;repository:tag&#125;</span><br></pre></td></tr></table></figure>\n<p>这样生成的 image 通过<code>docker history {container_id}</code>可以看到有相同的历史版本信息</p>\n<p>(2)通过 Dockerfile 中的配置命令进行构建【推荐，安全】</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"built_in\">cd</span> docker-centos-vim</span><br><span class=\"line\">&gt; vim Dockerfile</span><br><span class=\"line\"></span><br><span class=\"line\">FROM centos</span><br><span class=\"line\">RUN yum install vim</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; docker build -t zqunor/centos-vim-new .</span><br></pre></td></tr></table></figure>\n<p>分析：</p>\n<p>Dockerfile 构建镜像过程中，执行安装操作时对 image 的写操作，而 image 本身是只读的，所以在执行安装 vim 之前，先创建了临时的 container, 然后在 container 中执行安装 vim 的命令，之后再删除临时的 container，安装完成后再 commit 一个新的镜像。</p>\n<h2 id=\"dockerfile-语法梳理\"><a class=\"markdownIt-Anchor\" href=\"#dockerfile-语法梳理\"></a> Dockerfile 语法梳理</h2>\n<h3 id=\"关键字\"><a class=\"markdownIt-Anchor\" href=\"#关键字\"></a> 关键字</h3>\n<p>(1) FROM image 来源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM scratch  <span class=\"comment\"># 制作base image</span></span><br><span class=\"line\"></span><br><span class=\"line\">FROM centos <span class=\"comment\"># 使用base image</span></span><br></pre></td></tr></table></figure>\n<p>尽量使用官方的 image 作为 base image，安全</p>\n<p>(2) LABEL 标签备注记录信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LABEL maintaner=<span class=\"string\">\"xiaoquwl@gmail.com\"</span></span><br><span class=\"line\">LABEL verion=<span class=\"string\">\"1.0\"</span></span><br><span class=\"line\">LABEL description=<span class=\"string\">\"This is description\"</span></span><br></pre></td></tr></table></figure>\n<p>备注 image 的基本信息。</p>\n<p>(3) RUN 执行命令,并创建新的 Image Layer</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUN yum update &amp;&amp; yum install -y vim \\</span><br><span class=\"line\">    python-dev <span class=\"comment\"># 反斜线换行</span></span><br></pre></td></tr></table></figure>\n<p>执行命令，每 run 一次，就会产生一个分层，为了避免产生无用分层，应该合并成一个 run，负责的 RUN 使用反斜线&quot;&quot;换行</p>\n<p>(4) WORKDIR 跳转或创建目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WORKDIE /<span class=\"built_in\">test</span></span><br><span class=\"line\">WORKDIR tmp</span><br><span class=\"line\">RUN <span class=\"built_in\">pwd</span></span><br><span class=\"line\"><span class=\"comment\"># 输出/test/tmp</span></span><br></pre></td></tr></table></figure>\n<p>进入到相应目录下，没有的话就创建该目录。</p>\n<p>尽量使用绝对路径，并且不要用<code>RUN cd</code>跳转目录</p>\n<p>(5) ADD and COPY 拷贝</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WORKDIR /root</span><br><span class=\"line\">ADD hello <span class=\"built_in\">test</span>/</span><br><span class=\"line\"><span class=\"comment\"># /root/test/hello</span></span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /root</span><br><span class=\"line\">COPY hello <span class=\"built_in\">test</span>/</span><br><span class=\"line\"><span class=\"comment\"># ?? /root/test/hello</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>ADD|COPY：把本地的文件添加到 docker 中</p>\n</li>\n<li>\n<p>ADD：</p>\n<ul>\n<li>如果是压缩文件，会添加到 docker 并解压；</li>\n<li>如果添加的目录不存在，会创建该目录</li>\n</ul>\n</li>\n<li>\n<p>COPY</p>\n<ul>\n<li>大部分情况，COPY 由于 ADD</li>\n</ul>\n</li>\n<li>\n<p>添加远程文件/目录要使用 curl 或者 wget</p>\n</li>\n</ul>\n<p>(6) ENV 设置常量，环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ENV MYSQL_VERSION 5.6</span><br><span class=\"line\">RUN apt-get install -y mysql-server= <span class=\"string\">\"<span class=\"variable\">$&#123;MYSQL_VERSION&#125;</span>\"</span> \\</span><br><span class=\"line\">    &amp;&amp; rm -rf /var/lib/apt/lists/*</span><br><span class=\"line\"><span class=\"comment\"># 引用常量，在RUN中可以直接使用</span></span><br></pre></td></tr></table></figure>\n<p>(7) VOLUME and EXPOSE 存储和网络</p>\n<p>(8) CMD and ENTRYPOINT</p>\n<ul>\n<li>\n<p>CMD：设置容器启动后默认执行的命令和参数</p>\n<ul>\n<li>容器启动时默认执行的命令</li>\n<li>如果 docker run 指定了其他命令，CMD 命令被忽视</li>\n<li>如果定义了多个 CMD，只有最后一个会执行</li>\n</ul>\n</li>\n<li>\n<p>ENTRYPOINT：设置容器启动时运行的命令</p>\n<ul>\n<li>让容器以应用程序或者服务的形式运行</li>\n<li>不会被忽略，一定会执行</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"dockerfile-格式-shell-格式和-exec-格式\"><a class=\"markdownIt-Anchor\" href=\"#dockerfile-格式-shell-格式和-exec-格式\"></a> Dockerfile 格式： Shell 格式和 Exec 格式</h3>\n<p>(1) 基本样式</p>\n<ul>\n<li>Shell 格式</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUN apt-get install -y vim</span><br><span class=\"line\">CMD <span class=\"built_in\">echo</span> <span class=\"string\">\"hello docker\"</span></span><br><span class=\"line\">ENTRYPOINT <span class=\"built_in\">echo</span> <span class=\"string\">\"hello docker\"</span></span><br><span class=\"line\"><span class=\"comment\">#输出 hello docker</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Exec 格式</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUN [ <span class=\"string\">\"apt-get\"</span>, <span class=\"string\">\"install\"</span>, <span class=\"string\">\"-y\"</span>, <span class=\"string\">\"vim\"</span> ]</span><br><span class=\"line\">CMD [ <span class=\"string\">\"/bin/echo\"</span>, <span class=\"string\">\"hello docker\"</span> ]</span><br><span class=\"line\">ENTRYPOINT [ <span class=\"string\">\"/bin/bash\"</span>, <span class=\"string\">\"-c\"</span>, <span class=\"string\">\"echo hello <span class=\"variable\">$name</span>\"</span> ]</span><br><span class=\"line\"><span class=\"comment\">#输出 hello docker</span></span><br><span class=\"line\"></span><br><span class=\"line\">ENTRYPOINT [<span class=\"string\">\"/bin/echo\"</span>, <span class=\"string\">\"hello <span class=\"variable\">$name</span>\"</span>]</span><br><span class=\"line\"><span class=\"comment\">#输出hello $name [echo指令未被识别]</span></span><br></pre></td></tr></table></figure>\n<p>(2) shell 格式示例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM centos</span><br><span class=\"line\">ENV name Docker</span><br><span class=\"line\">ENTRYPOINT <span class=\"built_in\">echo</span> <span class=\"string\">\"hello <span class=\"variable\">$&#123;name&#125;</span>\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"dockerfile实践\"><a class=\"markdownIt-Anchor\" href=\"#dockerfile实践\"></a> Dockerfile实践</h2>\n<h3 id=\"将python程序打包成image并运行成为container\"><a class=\"markdownIt-Anchor\" href=\"#将python程序打包成image并运行成为container\"></a> 将python程序打包成image，并运行成为container</h3>\n<p>准备：<br>\n1.python环境<br>\n2.flask框架</p>\n<p>编写Dockerfile</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM python:2.7</span><br><span class=\"line\">LABEL  maintainer=<span class=\"string\">\"zqunor&lt;zqunor@gmail.com&gt;\"</span></span><br><span class=\"line\">RUN pip install flask</span><br><span class=\"line\">COPY app.py /app</span><br><span class=\"line\">WORKDIE /app</span><br><span class=\"line\">CMD [<span class=\"string\">\"python\"</span>, <span class=\"string\">\"app.py\"</span>]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> flask</span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"><span class=\"meta\">@app.route('/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'hello docker\"</span></span><br><span class=\"line\"><span class=\"string\">if __name__ == '</span>__main__<span class=\"string\">':</span></span><br><span class=\"line\"><span class=\"string\">    app.run();</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"dockerfile实战2\"><a class=\"markdownIt-Anchor\" href=\"#dockerfile实战2\"></a> Dockerfile实战2</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#进入到ubuntu容器中</span></span><br><span class=\"line\">docker run -it ubuntu</span><br><span class=\"line\"><span class=\"comment\">#安装stress压力测试工具</span></span><br><span class=\"line\">apt-get update &amp;&amp; apt-get install -y stress</span><br><span class=\"line\"><span class=\"comment\">#查看stress安装目录</span></span><br><span class=\"line\"><span class=\"built_in\">which</span> stress</span><br><span class=\"line\"><span class=\"comment\">#查看stress命令帮助信息</span></span><br><span class=\"line\">stress --<span class=\"built_in\">help</span></span><br><span class=\"line\"><span class=\"comment\">#启动一个进程，并输出debug信息（默认为进程分配256MB）</span></span><br><span class=\"line\">stress -vm 1 --verbose</span><br></pre></td></tr></table></figure>\n<h2 id=\"遇到的问题\"><a class=\"markdownIt-Anchor\" href=\"#遇到的问题\"></a> 遇到的问题</h2>\n<h3 id=\"1编辑-vagrantfile设置启动虚拟机时自动执行的命令但是进入到虚拟机中后docker-没有启动手动启动-docker-后有报错\"><a class=\"markdownIt-Anchor\" href=\"#1编辑-vagrantfile设置启动虚拟机时自动执行的命令但是进入到虚拟机中后docker-没有启动手动启动-docker-后有报错\"></a> 1.编辑 Vagrantfile，设置启动虚拟机时自动执行的命令，但是进入到虚拟机中后，docker 没有启动，手动启动 docker 后，有报错:</h3>\n<p><code>Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.39/version: dial unix /var/run/docker.sock: connect: permission denied</code></p>\n<p>=&gt; 1.需要将当前用户加入到docker用户组，或者在执行的docker命令前加sudo</p>\n<p>未完待续…</p>"},{"title":"【HTTP】原理结合实践","date":"2018-08-30T04:00:00.000Z","_content":"\n理解网络请求的原理，对 http 请求头、请求过程、请求方式和数据传输原理进行学习。HTTP 网络请求是交互式 web 应用的根基。在能够使用的基础上，进一步理解实现原理，从而强化对 HTTP 协议的理解，和基于该协议上的网络实现。\n\n<!--more-->\n\n### HTTP 请求头信息\n\nCache-Control\n\n- public、private：设置缓存仅在客户端缓存还是可以在代理服务器中缓存\n- must-revalidate：客户端的缓存获取之后必须到服务端验证之后才能继续使用缓存\n- no-cache、no-store：设置是否使用缓存\n\n缓存验证\n\n- last-modified 配合 if-modified-since\n- etag 配合 if-none-match\n\n- Contetn-Type 、Content-Encoding：等用来约束数据类型\n- Cookie：保持会话信息\n- CORS：实现跨域并保持安全性限制\n\n## 深入到 TCP\n\n1.什么是三次握手\n\n2.HTTPS 链接的创建过程，以及为什么 HTTPS 是安全的\n\n3.什么是长链接，为什么需要长链接\n\n4.HTTP2 的信道复用为什么能提高性能\n\n## HTTP 请求完整过程\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuqog8z9uij318n0f30xa.jpg)\n\n1.Redirect 浏览器要对 url 判断是否需要重定向到新的 url 地址\n\n2.缓存 判断是否需要到浏览器缓存中获取 url 对应的网页资源\n\n3.DNS 解析 将域名解析成 ip 才能访问到资源所在的服务器\n\n4.TCP 连接 拿到 ip 后就要进行 TCP 连接[ http: 经过 TCP 的三次握手;https: 不同于三次握手，需要另外的保证数据安全传输的过程]\n\n5.Request 发送请求的数据包\n\n6.Response 接收到请求数据包，并返回响应结果\n\n## 网络协议分层\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuqoss50zpj30zv0pogpe.jpg)\n\n- 物理层：定义物理设备如何传输数据\n- 数据链路层：在通信的实体间建立数据链路连接\n- 网络层：为数据在结点之间传输创建逻辑链路\n- 传输层：\n  - 向用户传输可靠的端到端(End-to-End)服务\n  - 传输层向高层屏蔽了下层数据通信的细节\n- 应用层\n  - 为应用软件提供了很多服务\n  - 构建于 TCP 协议之上\n  - 屏蔽网络传输相关细节\n\n## HTTP 发展历史\n\n### 几个概念\n\n1.http 并发数\n\n2.http 请求\n\n3.tcp 连接 [1 个连接可以有多个 http 请求]\n\n### HTTP/0.9\n\n- 只有一个命令(方法)GET\n- 没有 HEADER 等描述数据的信息\n- 服务器发送完毕，就关闭 TCP 连接\n\n### HTTP/1.0\n\n- 增加了很多命令\n- 增加 status code(服务端处理完某个请求后的状态)和 header(发送和请求相关的数据 以及对这部分数据的操作方法))\n- 多字符支持、多部分发送、权限、缓存等\n\n[一个 http 请求就要建立一个 tcp 连接，返回完内容后就关闭，但是三次握手建立的消耗和延迟比较高]\n\n### HTTP/1.1\n\n- 增加持久连接 [建立完一个 tcp 连接后，在返回完数据后不关闭，让后续的所有请求都使用这个连接]\n- pipeline [可以在同一个连接中发送多个请求，但是多个请求在服务器端需要顺序处理（串行），这样如果前面的请求处理的时间需要很长，而后面的请求处理的时间只需要很短，导致性能不太好]\n- 增加 host(可以在同一台(物理)服务器跑多个 web 服务[node、java]，使用 host 进行判断，提高物理服务的使用效率)和其他一些命令\n\n### HTTP/2.0\n\n- 分帧传输：所有数据以二进制(帧)传输[以前是以字符串形式传输]\n- 信道复用：同一个连接里面发送多个请求不再需要需要按照顺序来（并行）\n- 头信息压缩以及推送等提高效率的功能\n\n## HTTP 三次握手\n\n### HTTP 请求和 TCP 连接关系\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuqq6thfa2j30yy0eyjs6.jpg)\n\n1.客户端和服务器之间的 http 请求的发送和返回的过程需要创建 TCP 连接\n\n2.http 只有请求和响应的概念，没有连接的概念\n\n3.请求和响应都是数据包，需要传输通道，TCP 连接就是数据包的传输通道（TCP 连接: 客户端发送，服务端接收）\n\n### 三次握手时序图\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuqq70zeilj30tw0p4zmm.jpg)\n\n1.第一次握手（SYN=1,Seq=X）\n\n2.第二次握手（SYN=1,ACK=X+1,Seq=Y）\n\n3.第三次握手（ACK=Y+1,Seq=Z）\n\n网络抓包工具：wireshark\n\n## URI URL URN\n\n### URI\n\n【定义】： Uniform Resource Identifier 统一资源标识符\n\n- 用来唯一标识互联网上的信息资源\n- 包括 URL 和 URN\n\n### URL\n\n【定义】：Uniform Resource Locator 统一资源定位器\n\n示例： http://user:pass@host.com:80/path?query=string#hash\n\n- **[ http ]**：传送协议。`Data URI scheme` [http ftp mailto]\n\n- **[ // ]**：层级 URL 标记符号(为[//],固定不变)\n\n- **[ user:pass ]**： 访问资源需要的凭证信息（可省略，不安全）\n\n- **[ host.com ]**：服务器。（通常为域名，有时为 IP 地址）\n\n- **[ 80 ]**：端口号。（以数字方式表示，若为 HTTP 的默认值“:80”可省略）\n\n- **[ /path ]**：路径。（以“/”字符区别路径中的每一个目录名称）\n\n- **[ ?query=string ]**：查询。（GET 模式的窗体参数，以“?”字符为起点，每个参数以“&”隔开，再以“=”分开参数名称与数据，通常以 UTF8 的 URL 编码，避开字符冲突的问题）\n\n- **[ #hash ]**：片段。以“#”字符为起点。（锚点应用）\n\n### URN\n\n【定义】：永久统一资源定位符\n\n资源移动之后还能被找到\n\n目前还没有成熟的使用方案\n\n## HTTP 报文\n\n- 请求行（request line）\n\n  - 请求报文：请求方式 请求参数 请求的网络协议\n  - 响应报文：请求的网络协议 状态码 状态信息\n\n- [请求头部](https://zh.wikipedia.org/wiki/HTTP%E5%A4%B4%E5%AD%97%E6%AE%B5)\n\n- 空行\n\n- 主体数据[可选]\n\n### 请求报文\n\n### 响应报文\n\n## CORS 跨域请求的限制与解决\n\n### 基本介绍\n\nCORS (`Cross-origin resource sharing`):\n一个 web 服务器程序(域名)请求另一个 web 服务器程序(域名).\n\n`images, stylesheets, scripts, iframes, and videos`这几个资源的请求是不涉及跨域的概念的，都可以直接访问。\n\n跨域请求时，请求发送的依然是正常的，并且服务器仍然会正常响应，但是浏览器接收到数据后看到头信息没有跨域处理，就会忽略掉请求的数据，并在控制命令行报错\n\n### 限制\n\n1.跨域请求只允许的方法：GET HEAD POST\n\n2.允许 Content-Type 的值\n\n(1) text/plain\n\n(2) multipart/form-data\n\n(3) application/x-www-form-urlencoded\n\n3.请求头限制\n\n(1) Accept\n\n(2) Accept-Language\n\n(3) Content-Language\n\n4.XMLHttpRequestUpload 对象均没有注册任何事件监听器\n\n5.请求中没有使用 ReadableStream 对象\n\n### 解决\n\n1.设置 header。\n\n对**被请求**的资源设置`'Access-Control-Allow-Origin': '*'`头信息（不安全）[但是值只能是字符串，所以涉及到多个 url 时，可以通过对请求 url 的判断来确定是否需要设置该头信息]\n\n```javascript\n// server2.js\nresponse.writeHead(200, {\n  \"Access-Control-Allow-Origin\": \"*\"\n});\n```\n\n2.`jsonp` 实现方法：在 script 标签设置 src 的值为需要请求的跨域 url\n\n```javascript\n// test.html\n<script src=\"http://127.0.0.1:8887/\" />\n```\n\n### CORS 预请求\n\n对跨域限制允许外的请求参数都需要进行验证，才能有效请求，这个过程就是预请求\n\n验证方法: 多发送一个请求的方式为 OPTIONS 的请求验证\n\n1、`Access-Control-Allow-Headers`\n\n使用 fetch 请求服务器时设置了头信息，相应的服务器端需要对请求的头信息进行配置\n\n```javascript\n// test.html\nfetch(\"http://127.0.0.1:8887/\", {\n  method: \"POST\",\n  headers: {\n    \"X-Test-Cors\": \"123\"\n  }\n});\n```\n\n```javascript\n// server2.js\n'Access-Control-Allow-Headers': 'X-Test-Cors'\n```\n\n2、 `Access-Control-Allow-Methods`\n\n默认支持的请求方式只允许 `GET HEAD POST`，如果需要使用其他方式请求，则需要在服务器端的头信息中设置相关参数。设置允许用户可以请求的请求方式:\n\n```javascript\n'Access-Control-Allow-Methods': 'POST, PUT, DELETE'\n```\n\n3、`Access-Control-Max-Age`\n\n设置同一个跨域请求的有效期, 有效期内不需要再发送预请求进行验证。\n\n```javascript\n'Access-Control-Max-Age': '1000'\n```\n\n## 缓存头 Cache-Control\n\n### 可缓存性\n\n- public [代理服务器和客户端都可以缓存返回内容]\n- private [只有发起请求的客户端才可以缓存数据]\n- no-cache [所有的节点都不可以缓存数据]\n\n### 到期\n\n- max-age=[seconds][单位：秒]\n- s-maxage=[seconds][代理服务器中才生效]\n- max-stale=[seconds][浏览器设置的，可以使用过期的缓存，而不用再到服务器请求]\n\n### 重新验证\n\n- must-revalidate [缓存过期后拿到缓存不能直接用，必须到服务器端验证后才能用]\n- proxy-revalidate [指定**缓存服务器**失效后必须验证]\n\n### 其他\n\n- no-store [浏览器和代理服务器都不可以缓存数据，必须要到服务器端验证]\n- no-transform [不允许代理服务器修改服务器返回的内容]\n\n### 缓存应用\n\n## 资源验证\n\nhttp 请求使用缓存的流程：\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuw35pe2jrj30xd0fb0ub.jpg)\n\n### 验证头\n\n- Last-Modified 上次修改时间\n\n配合 If-Modified-Since[第二次请求时携带，值为第一次请求后响应的 Last-Modified 的值]或者 If-Unmodified-Since 使用\n\n对比上次修改时间以验证资源是否需要更新\n\n- Etag\n\n通过数据签名[资源对内容的唯一签名]\n\nIf-None-Match 第二次请求时携带，值为第一次请求后响应的 Etag 的值\n\n## Cookie\n\nSet-Cookie 设置\n下次请求会自动带上\n键值对，可以设置多个\n\nCookie 属性\n\n- max-age 和 expires 设置过期时间\n- Secure 只在 https 的时候发送\n- HttpOnly 无法通过 document.cookie 访问\n\n## Redirect\n\n301永久重定向，访问一次重定向后，以后即使将重定向的代码删除，也依然进行重定向跳转（清理浏览器缓存后重定向才失效）\n\n302重定向是每次都要判断然后重定向到相应的url\n\n## 参考地址：\n\n1. [wikipedia-统一资源定位符](https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E5%AE%9A%E4%BD%8D%E7%AC%A6)\n","source":"_posts/http.md","raw":"---\ntitle: 【HTTP】原理结合实践\ndate: 2018-08-30 12:00:00\ntags:\n  - http\ncategory:\n  - 【HTTP相关】\n---\n\n理解网络请求的原理，对 http 请求头、请求过程、请求方式和数据传输原理进行学习。HTTP 网络请求是交互式 web 应用的根基。在能够使用的基础上，进一步理解实现原理，从而强化对 HTTP 协议的理解，和基于该协议上的网络实现。\n\n<!--more-->\n\n### HTTP 请求头信息\n\nCache-Control\n\n- public、private：设置缓存仅在客户端缓存还是可以在代理服务器中缓存\n- must-revalidate：客户端的缓存获取之后必须到服务端验证之后才能继续使用缓存\n- no-cache、no-store：设置是否使用缓存\n\n缓存验证\n\n- last-modified 配合 if-modified-since\n- etag 配合 if-none-match\n\n- Contetn-Type 、Content-Encoding：等用来约束数据类型\n- Cookie：保持会话信息\n- CORS：实现跨域并保持安全性限制\n\n## 深入到 TCP\n\n1.什么是三次握手\n\n2.HTTPS 链接的创建过程，以及为什么 HTTPS 是安全的\n\n3.什么是长链接，为什么需要长链接\n\n4.HTTP2 的信道复用为什么能提高性能\n\n## HTTP 请求完整过程\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuqog8z9uij318n0f30xa.jpg)\n\n1.Redirect 浏览器要对 url 判断是否需要重定向到新的 url 地址\n\n2.缓存 判断是否需要到浏览器缓存中获取 url 对应的网页资源\n\n3.DNS 解析 将域名解析成 ip 才能访问到资源所在的服务器\n\n4.TCP 连接 拿到 ip 后就要进行 TCP 连接[ http: 经过 TCP 的三次握手;https: 不同于三次握手，需要另外的保证数据安全传输的过程]\n\n5.Request 发送请求的数据包\n\n6.Response 接收到请求数据包，并返回响应结果\n\n## 网络协议分层\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuqoss50zpj30zv0pogpe.jpg)\n\n- 物理层：定义物理设备如何传输数据\n- 数据链路层：在通信的实体间建立数据链路连接\n- 网络层：为数据在结点之间传输创建逻辑链路\n- 传输层：\n  - 向用户传输可靠的端到端(End-to-End)服务\n  - 传输层向高层屏蔽了下层数据通信的细节\n- 应用层\n  - 为应用软件提供了很多服务\n  - 构建于 TCP 协议之上\n  - 屏蔽网络传输相关细节\n\n## HTTP 发展历史\n\n### 几个概念\n\n1.http 并发数\n\n2.http 请求\n\n3.tcp 连接 [1 个连接可以有多个 http 请求]\n\n### HTTP/0.9\n\n- 只有一个命令(方法)GET\n- 没有 HEADER 等描述数据的信息\n- 服务器发送完毕，就关闭 TCP 连接\n\n### HTTP/1.0\n\n- 增加了很多命令\n- 增加 status code(服务端处理完某个请求后的状态)和 header(发送和请求相关的数据 以及对这部分数据的操作方法))\n- 多字符支持、多部分发送、权限、缓存等\n\n[一个 http 请求就要建立一个 tcp 连接，返回完内容后就关闭，但是三次握手建立的消耗和延迟比较高]\n\n### HTTP/1.1\n\n- 增加持久连接 [建立完一个 tcp 连接后，在返回完数据后不关闭，让后续的所有请求都使用这个连接]\n- pipeline [可以在同一个连接中发送多个请求，但是多个请求在服务器端需要顺序处理（串行），这样如果前面的请求处理的时间需要很长，而后面的请求处理的时间只需要很短，导致性能不太好]\n- 增加 host(可以在同一台(物理)服务器跑多个 web 服务[node、java]，使用 host 进行判断，提高物理服务的使用效率)和其他一些命令\n\n### HTTP/2.0\n\n- 分帧传输：所有数据以二进制(帧)传输[以前是以字符串形式传输]\n- 信道复用：同一个连接里面发送多个请求不再需要需要按照顺序来（并行）\n- 头信息压缩以及推送等提高效率的功能\n\n## HTTP 三次握手\n\n### HTTP 请求和 TCP 连接关系\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuqq6thfa2j30yy0eyjs6.jpg)\n\n1.客户端和服务器之间的 http 请求的发送和返回的过程需要创建 TCP 连接\n\n2.http 只有请求和响应的概念，没有连接的概念\n\n3.请求和响应都是数据包，需要传输通道，TCP 连接就是数据包的传输通道（TCP 连接: 客户端发送，服务端接收）\n\n### 三次握手时序图\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuqq70zeilj30tw0p4zmm.jpg)\n\n1.第一次握手（SYN=1,Seq=X）\n\n2.第二次握手（SYN=1,ACK=X+1,Seq=Y）\n\n3.第三次握手（ACK=Y+1,Seq=Z）\n\n网络抓包工具：wireshark\n\n## URI URL URN\n\n### URI\n\n【定义】： Uniform Resource Identifier 统一资源标识符\n\n- 用来唯一标识互联网上的信息资源\n- 包括 URL 和 URN\n\n### URL\n\n【定义】：Uniform Resource Locator 统一资源定位器\n\n示例： http://user:pass@host.com:80/path?query=string#hash\n\n- **[ http ]**：传送协议。`Data URI scheme` [http ftp mailto]\n\n- **[ // ]**：层级 URL 标记符号(为[//],固定不变)\n\n- **[ user:pass ]**： 访问资源需要的凭证信息（可省略，不安全）\n\n- **[ host.com ]**：服务器。（通常为域名，有时为 IP 地址）\n\n- **[ 80 ]**：端口号。（以数字方式表示，若为 HTTP 的默认值“:80”可省略）\n\n- **[ /path ]**：路径。（以“/”字符区别路径中的每一个目录名称）\n\n- **[ ?query=string ]**：查询。（GET 模式的窗体参数，以“?”字符为起点，每个参数以“&”隔开，再以“=”分开参数名称与数据，通常以 UTF8 的 URL 编码，避开字符冲突的问题）\n\n- **[ #hash ]**：片段。以“#”字符为起点。（锚点应用）\n\n### URN\n\n【定义】：永久统一资源定位符\n\n资源移动之后还能被找到\n\n目前还没有成熟的使用方案\n\n## HTTP 报文\n\n- 请求行（request line）\n\n  - 请求报文：请求方式 请求参数 请求的网络协议\n  - 响应报文：请求的网络协议 状态码 状态信息\n\n- [请求头部](https://zh.wikipedia.org/wiki/HTTP%E5%A4%B4%E5%AD%97%E6%AE%B5)\n\n- 空行\n\n- 主体数据[可选]\n\n### 请求报文\n\n### 响应报文\n\n## CORS 跨域请求的限制与解决\n\n### 基本介绍\n\nCORS (`Cross-origin resource sharing`):\n一个 web 服务器程序(域名)请求另一个 web 服务器程序(域名).\n\n`images, stylesheets, scripts, iframes, and videos`这几个资源的请求是不涉及跨域的概念的，都可以直接访问。\n\n跨域请求时，请求发送的依然是正常的，并且服务器仍然会正常响应，但是浏览器接收到数据后看到头信息没有跨域处理，就会忽略掉请求的数据，并在控制命令行报错\n\n### 限制\n\n1.跨域请求只允许的方法：GET HEAD POST\n\n2.允许 Content-Type 的值\n\n(1) text/plain\n\n(2) multipart/form-data\n\n(3) application/x-www-form-urlencoded\n\n3.请求头限制\n\n(1) Accept\n\n(2) Accept-Language\n\n(3) Content-Language\n\n4.XMLHttpRequestUpload 对象均没有注册任何事件监听器\n\n5.请求中没有使用 ReadableStream 对象\n\n### 解决\n\n1.设置 header。\n\n对**被请求**的资源设置`'Access-Control-Allow-Origin': '*'`头信息（不安全）[但是值只能是字符串，所以涉及到多个 url 时，可以通过对请求 url 的判断来确定是否需要设置该头信息]\n\n```javascript\n// server2.js\nresponse.writeHead(200, {\n  \"Access-Control-Allow-Origin\": \"*\"\n});\n```\n\n2.`jsonp` 实现方法：在 script 标签设置 src 的值为需要请求的跨域 url\n\n```javascript\n// test.html\n<script src=\"http://127.0.0.1:8887/\" />\n```\n\n### CORS 预请求\n\n对跨域限制允许外的请求参数都需要进行验证，才能有效请求，这个过程就是预请求\n\n验证方法: 多发送一个请求的方式为 OPTIONS 的请求验证\n\n1、`Access-Control-Allow-Headers`\n\n使用 fetch 请求服务器时设置了头信息，相应的服务器端需要对请求的头信息进行配置\n\n```javascript\n// test.html\nfetch(\"http://127.0.0.1:8887/\", {\n  method: \"POST\",\n  headers: {\n    \"X-Test-Cors\": \"123\"\n  }\n});\n```\n\n```javascript\n// server2.js\n'Access-Control-Allow-Headers': 'X-Test-Cors'\n```\n\n2、 `Access-Control-Allow-Methods`\n\n默认支持的请求方式只允许 `GET HEAD POST`，如果需要使用其他方式请求，则需要在服务器端的头信息中设置相关参数。设置允许用户可以请求的请求方式:\n\n```javascript\n'Access-Control-Allow-Methods': 'POST, PUT, DELETE'\n```\n\n3、`Access-Control-Max-Age`\n\n设置同一个跨域请求的有效期, 有效期内不需要再发送预请求进行验证。\n\n```javascript\n'Access-Control-Max-Age': '1000'\n```\n\n## 缓存头 Cache-Control\n\n### 可缓存性\n\n- public [代理服务器和客户端都可以缓存返回内容]\n- private [只有发起请求的客户端才可以缓存数据]\n- no-cache [所有的节点都不可以缓存数据]\n\n### 到期\n\n- max-age=[seconds][单位：秒]\n- s-maxage=[seconds][代理服务器中才生效]\n- max-stale=[seconds][浏览器设置的，可以使用过期的缓存，而不用再到服务器请求]\n\n### 重新验证\n\n- must-revalidate [缓存过期后拿到缓存不能直接用，必须到服务器端验证后才能用]\n- proxy-revalidate [指定**缓存服务器**失效后必须验证]\n\n### 其他\n\n- no-store [浏览器和代理服务器都不可以缓存数据，必须要到服务器端验证]\n- no-transform [不允许代理服务器修改服务器返回的内容]\n\n### 缓存应用\n\n## 资源验证\n\nhttp 请求使用缓存的流程：\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuw35pe2jrj30xd0fb0ub.jpg)\n\n### 验证头\n\n- Last-Modified 上次修改时间\n\n配合 If-Modified-Since[第二次请求时携带，值为第一次请求后响应的 Last-Modified 的值]或者 If-Unmodified-Since 使用\n\n对比上次修改时间以验证资源是否需要更新\n\n- Etag\n\n通过数据签名[资源对内容的唯一签名]\n\nIf-None-Match 第二次请求时携带，值为第一次请求后响应的 Etag 的值\n\n## Cookie\n\nSet-Cookie 设置\n下次请求会自动带上\n键值对，可以设置多个\n\nCookie 属性\n\n- max-age 和 expires 设置过期时间\n- Secure 只在 https 的时候发送\n- HttpOnly 无法通过 document.cookie 访问\n\n## Redirect\n\n301永久重定向，访问一次重定向后，以后即使将重定向的代码删除，也依然进行重定向跳转（清理浏览器缓存后重定向才失效）\n\n302重定向是每次都要判断然后重定向到相应的url\n\n## 参考地址：\n\n1. [wikipedia-统一资源定位符](https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E5%AE%9A%E4%BD%8D%E7%AC%A6)\n","slug":"http","published":1,"updated":"2019-05-12T15:48:34.254Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c42v00602wuutcwp6yv9","content":"<p>理解网络请求的原理，对 http 请求头、请求过程、请求方式和数据传输原理进行学习。HTTP 网络请求是交互式 web 应用的根基。在能够使用的基础上，进一步理解实现原理，从而强化对 HTTP 协议的理解，和基于该协议上的网络实现。</p>\n<a id=\"more\"></a>\n<h3 id=\"http-请求头信息\"><a class=\"markdownIt-Anchor\" href=\"#http-请求头信息\"></a> HTTP 请求头信息</h3>\n<p>Cache-Control</p>\n<ul>\n<li>public、private：设置缓存仅在客户端缓存还是可以在代理服务器中缓存</li>\n<li>must-revalidate：客户端的缓存获取之后必须到服务端验证之后才能继续使用缓存</li>\n<li>no-cache、no-store：设置是否使用缓存</li>\n</ul>\n<p>缓存验证</p>\n<ul>\n<li>\n<p>last-modified 配合 if-modified-since</p>\n</li>\n<li>\n<p>etag 配合 if-none-match</p>\n</li>\n<li>\n<p>Contetn-Type 、Content-Encoding：等用来约束数据类型</p>\n</li>\n<li>\n<p>Cookie：保持会话信息</p>\n</li>\n<li>\n<p>CORS：实现跨域并保持安全性限制</p>\n</li>\n</ul>\n<h2 id=\"深入到-tcp\"><a class=\"markdownIt-Anchor\" href=\"#深入到-tcp\"></a> 深入到 TCP</h2>\n<p>1.什么是三次握手</p>\n<p>2.HTTPS 链接的创建过程，以及为什么 HTTPS 是安全的</p>\n<p>3.什么是长链接，为什么需要长链接</p>\n<p>4.HTTP2 的信道复用为什么能提高性能</p>\n<h2 id=\"http-请求完整过程\"><a class=\"markdownIt-Anchor\" href=\"#http-请求完整过程\"></a> HTTP 请求完整过程</h2>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuqog8z9uij318n0f30xa.jpg\" alt=\"\"></p>\n<p>1.Redirect 浏览器要对 url 判断是否需要重定向到新的 url 地址</p>\n<p>2.缓存 判断是否需要到浏览器缓存中获取 url 对应的网页资源</p>\n<p>3.DNS 解析 将域名解析成 ip 才能访问到资源所在的服务器</p>\n<p>4.TCP 连接 拿到 ip 后就要进行 TCP 连接[ http: 经过 TCP 的三次握手;https: 不同于三次握手，需要另外的保证数据安全传输的过程]</p>\n<p>5.Request 发送请求的数据包</p>\n<p>6.Response 接收到请求数据包，并返回响应结果</p>\n<h2 id=\"网络协议分层\"><a class=\"markdownIt-Anchor\" href=\"#网络协议分层\"></a> 网络协议分层</h2>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuqoss50zpj30zv0pogpe.jpg\" alt=\"\"></p>\n<ul>\n<li>物理层：定义物理设备如何传输数据</li>\n<li>数据链路层：在通信的实体间建立数据链路连接</li>\n<li>网络层：为数据在结点之间传输创建逻辑链路</li>\n<li>传输层：\n<ul>\n<li>向用户传输可靠的端到端(End-to-End)服务</li>\n<li>传输层向高层屏蔽了下层数据通信的细节</li>\n</ul>\n</li>\n<li>应用层\n<ul>\n<li>为应用软件提供了很多服务</li>\n<li>构建于 TCP 协议之上</li>\n<li>屏蔽网络传输相关细节</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"http-发展历史\"><a class=\"markdownIt-Anchor\" href=\"#http-发展历史\"></a> HTTP 发展历史</h2>\n<h3 id=\"几个概念\"><a class=\"markdownIt-Anchor\" href=\"#几个概念\"></a> 几个概念</h3>\n<p>1.http 并发数</p>\n<p>2.http 请求</p>\n<p>3.tcp 连接 [1 个连接可以有多个 http 请求]</p>\n<h3 id=\"http09\"><a class=\"markdownIt-Anchor\" href=\"#http09\"></a> HTTP/0.9</h3>\n<ul>\n<li>只有一个命令(方法)GET</li>\n<li>没有 HEADER 等描述数据的信息</li>\n<li>服务器发送完毕，就关闭 TCP 连接</li>\n</ul>\n<h3 id=\"http10\"><a class=\"markdownIt-Anchor\" href=\"#http10\"></a> HTTP/1.0</h3>\n<ul>\n<li>增加了很多命令</li>\n<li>增加 status code(服务端处理完某个请求后的状态)和 header(发送和请求相关的数据 以及对这部分数据的操作方法))</li>\n<li>多字符支持、多部分发送、权限、缓存等</li>\n</ul>\n<p>[一个 http 请求就要建立一个 tcp 连接，返回完内容后就关闭，但是三次握手建立的消耗和延迟比较高]</p>\n<h3 id=\"http11\"><a class=\"markdownIt-Anchor\" href=\"#http11\"></a> HTTP/1.1</h3>\n<ul>\n<li>增加持久连接 [建立完一个 tcp 连接后，在返回完数据后不关闭，让后续的所有请求都使用这个连接]</li>\n<li>pipeline [可以在同一个连接中发送多个请求，但是多个请求在服务器端需要顺序处理（串行），这样如果前面的请求处理的时间需要很长，而后面的请求处理的时间只需要很短，导致性能不太好]</li>\n<li>增加 host(可以在同一台(物理)服务器跑多个 web 服务[node、java]，使用 host 进行判断，提高物理服务的使用效率)和其他一些命令</li>\n</ul>\n<h3 id=\"http20\"><a class=\"markdownIt-Anchor\" href=\"#http20\"></a> HTTP/2.0</h3>\n<ul>\n<li>分帧传输：所有数据以二进制(帧)传输[以前是以字符串形式传输]</li>\n<li>信道复用：同一个连接里面发送多个请求不再需要需要按照顺序来（并行）</li>\n<li>头信息压缩以及推送等提高效率的功能</li>\n</ul>\n<h2 id=\"http-三次握手\"><a class=\"markdownIt-Anchor\" href=\"#http-三次握手\"></a> HTTP 三次握手</h2>\n<h3 id=\"http-请求和-tcp-连接关系\"><a class=\"markdownIt-Anchor\" href=\"#http-请求和-tcp-连接关系\"></a> HTTP 请求和 TCP 连接关系</h3>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuqq6thfa2j30yy0eyjs6.jpg\" alt=\"\"></p>\n<p>1.客户端和服务器之间的 http 请求的发送和返回的过程需要创建 TCP 连接</p>\n<p>2.http 只有请求和响应的概念，没有连接的概念</p>\n<p>3.请求和响应都是数据包，需要传输通道，TCP 连接就是数据包的传输通道（TCP 连接: 客户端发送，服务端接收）</p>\n<h3 id=\"三次握手时序图\"><a class=\"markdownIt-Anchor\" href=\"#三次握手时序图\"></a> 三次握手时序图</h3>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuqq70zeilj30tw0p4zmm.jpg\" alt=\"\"></p>\n<p>1.第一次握手（SYN=1,Seq=X）</p>\n<p>2.第二次握手（SYN=1,ACK=X+1,Seq=Y）</p>\n<p>3.第三次握手（ACK=Y+1,Seq=Z）</p>\n<p>网络抓包工具：wireshark</p>\n<h2 id=\"uri-url-urn\"><a class=\"markdownIt-Anchor\" href=\"#uri-url-urn\"></a> URI URL URN</h2>\n<h3 id=\"uri\"><a class=\"markdownIt-Anchor\" href=\"#uri\"></a> URI</h3>\n<p>【定义】： Uniform Resource Identifier 统一资源标识符</p>\n<ul>\n<li>用来唯一标识互联网上的信息资源</li>\n<li>包括 URL 和 URN</li>\n</ul>\n<h3 id=\"url\"><a class=\"markdownIt-Anchor\" href=\"#url\"></a> URL</h3>\n<p>【定义】：Uniform Resource Locator 统一资源定位器</p>\n<p>示例： <a href=\"http://user:pass@host.com:80/path?query=string#hash\" target=\"_blank\" rel=\"noopener\">http://user:pass@host.com:80/path?query=string#hash</a></p>\n<ul>\n<li>\n<p><strong>[ http ]</strong>：传送协议。<code>Data URI scheme</code> [http ftp mailto]</p>\n</li>\n<li>\n<p><strong>[ // ]</strong>：层级 URL 标记符号(为[//],固定不变)</p>\n</li>\n<li>\n<p><strong>[ user:pass ]</strong>： 访问资源需要的凭证信息（可省略，不安全）</p>\n</li>\n<li>\n<p><strong>[ <a href=\"http://host.com\" target=\"_blank\" rel=\"noopener\">host.com</a> ]</strong>：服务器。（通常为域名，有时为 IP 地址）</p>\n</li>\n<li>\n<p><strong>[ 80 ]</strong>：端口号。（以数字方式表示，若为 HTTP 的默认值“:80”可省略）</p>\n</li>\n<li>\n<p><strong>[ /path ]</strong>：路径。（以“/”字符区别路径中的每一个目录名称）</p>\n</li>\n<li>\n<p><strong>[ ?query=string ]</strong>：查询。（GET 模式的窗体参数，以“?”字符为起点，每个参数以“&amp;”隔开，再以“=”分开参数名称与数据，通常以 UTF8 的 URL 编码，避开字符冲突的问题）</p>\n</li>\n<li>\n<p><strong>[ #hash ]</strong>：片段。以“#”字符为起点。（锚点应用）</p>\n</li>\n</ul>\n<h3 id=\"urn\"><a class=\"markdownIt-Anchor\" href=\"#urn\"></a> URN</h3>\n<p>【定义】：永久统一资源定位符</p>\n<p>资源移动之后还能被找到</p>\n<p>目前还没有成熟的使用方案</p>\n<h2 id=\"http-报文\"><a class=\"markdownIt-Anchor\" href=\"#http-报文\"></a> HTTP 报文</h2>\n<ul>\n<li>\n<p>请求行（request line）</p>\n<ul>\n<li>请求报文：请求方式 请求参数 请求的网络协议</li>\n<li>响应报文：请求的网络协议 状态码 状态信息</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://zh.wikipedia.org/wiki/HTTP%E5%A4%B4%E5%AD%97%E6%AE%B5\" target=\"_blank\" rel=\"noopener\">请求头部</a></p>\n</li>\n<li>\n<p>空行</p>\n</li>\n<li>\n<p>主体数据[可选]</p>\n</li>\n</ul>\n<h3 id=\"请求报文\"><a class=\"markdownIt-Anchor\" href=\"#请求报文\"></a> 请求报文</h3>\n<h3 id=\"响应报文\"><a class=\"markdownIt-Anchor\" href=\"#响应报文\"></a> 响应报文</h3>\n<h2 id=\"cors-跨域请求的限制与解决\"><a class=\"markdownIt-Anchor\" href=\"#cors-跨域请求的限制与解决\"></a> CORS 跨域请求的限制与解决</h2>\n<h3 id=\"基本介绍\"><a class=\"markdownIt-Anchor\" href=\"#基本介绍\"></a> 基本介绍</h3>\n<p>CORS (<code>Cross-origin resource sharing</code>):<br>\n一个 web 服务器程序(域名)请求另一个 web 服务器程序(域名).</p>\n<p><code>images, stylesheets, scripts, iframes, and videos</code>这几个资源的请求是不涉及跨域的概念的，都可以直接访问。</p>\n<p>跨域请求时，请求发送的依然是正常的，并且服务器仍然会正常响应，但是浏览器接收到数据后看到头信息没有跨域处理，就会忽略掉请求的数据，并在控制命令行报错</p>\n<h3 id=\"限制\"><a class=\"markdownIt-Anchor\" href=\"#限制\"></a> 限制</h3>\n<p>1.跨域请求只允许的方法：GET HEAD POST</p>\n<p>2.允许 Content-Type 的值</p>\n<p>(1) text/plain</p>\n<p>(2) multipart/form-data</p>\n<p>(3) application/x-www-form-urlencoded</p>\n<p>3.请求头限制</p>\n<p>(1) Accept</p>\n<p>(2) Accept-Language</p>\n<p>(3) Content-Language</p>\n<p>4.XMLHttpRequestUpload 对象均没有注册任何事件监听器</p>\n<p>5.请求中没有使用 ReadableStream 对象</p>\n<h3 id=\"解决\"><a class=\"markdownIt-Anchor\" href=\"#解决\"></a> 解决</h3>\n<p>1.设置 header。</p>\n<p>对<strong>被请求</strong>的资源设置<code>'Access-Control-Allow-Origin': '*'</code>头信息（不安全）[但是值只能是字符串，所以涉及到多个 url 时，可以通过对请求 url 的判断来确定是否需要设置该头信息]</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// server2.js</span></span><br><span class=\"line\">response.writeHead(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">  <span class=\"string\">\"Access-Control-Allow-Origin\"</span>: <span class=\"string\">\"*\"</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>2.<code>jsonp</code> 实现方法：在 script 标签设置 src 的值为需要请求的跨域 url</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// test.html</span></span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"http://127.0.0.1:8887/\"</span> /&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"cors-预请求\"><a class=\"markdownIt-Anchor\" href=\"#cors-预请求\"></a> CORS 预请求</h3>\n<p>对跨域限制允许外的请求参数都需要进行验证，才能有效请求，这个过程就是预请求</p>\n<p>验证方法: 多发送一个请求的方式为 OPTIONS 的请求验证</p>\n<p>1、<code>Access-Control-Allow-Headers</code></p>\n<p>使用 fetch 请求服务器时设置了头信息，相应的服务器端需要对请求的头信息进行配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// test.html</span></span><br><span class=\"line\">fetch(<span class=\"string\">\"http://127.0.0.1:8887/\"</span>, &#123;</span><br><span class=\"line\">  method: <span class=\"string\">\"POST\"</span>,</span><br><span class=\"line\">  headers: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"X-Test-Cors\"</span>: <span class=\"string\">\"123\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// server2.js</span></span><br><span class=\"line\"><span class=\"string\">'Access-Control-Allow-Headers'</span>: <span class=\"string\">'X-Test-Cors'</span></span><br></pre></td></tr></table></figure>\n<p>2、 <code>Access-Control-Allow-Methods</code></p>\n<p>默认支持的请求方式只允许 <code>GET HEAD POST</code>，如果需要使用其他方式请求，则需要在服务器端的头信息中设置相关参数。设置允许用户可以请求的请求方式:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'Access-Control-Allow-Methods'</span>: <span class=\"string\">'POST, PUT, DELETE'</span></span><br></pre></td></tr></table></figure>\n<p>3、<code>Access-Control-Max-Age</code></p>\n<p>设置同一个跨域请求的有效期, 有效期内不需要再发送预请求进行验证。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'Access-Control-Max-Age'</span>: <span class=\"string\">'1000'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"缓存头-cache-control\"><a class=\"markdownIt-Anchor\" href=\"#缓存头-cache-control\"></a> 缓存头 Cache-Control</h2>\n<h3 id=\"可缓存性\"><a class=\"markdownIt-Anchor\" href=\"#可缓存性\"></a> 可缓存性</h3>\n<ul>\n<li>public [代理服务器和客户端都可以缓存返回内容]</li>\n<li>private [只有发起请求的客户端才可以缓存数据]</li>\n<li>no-cache [所有的节点都不可以缓存数据]</li>\n</ul>\n<h3 id=\"到期\"><a class=\"markdownIt-Anchor\" href=\"#到期\"></a> 到期</h3>\n<ul>\n<li>max-age=[seconds][单位：秒]</li>\n<li>s-maxage=[seconds][代理服务器中才生效]</li>\n<li>max-stale=[seconds][浏览器设置的，可以使用过期的缓存，而不用再到服务器请求]</li>\n</ul>\n<h3 id=\"重新验证\"><a class=\"markdownIt-Anchor\" href=\"#重新验证\"></a> 重新验证</h3>\n<ul>\n<li>must-revalidate [缓存过期后拿到缓存不能直接用，必须到服务器端验证后才能用]</li>\n<li>proxy-revalidate [指定<strong>缓存服务器</strong>失效后必须验证]</li>\n</ul>\n<h3 id=\"其他\"><a class=\"markdownIt-Anchor\" href=\"#其他\"></a> 其他</h3>\n<ul>\n<li>no-store [浏览器和代理服务器都不可以缓存数据，必须要到服务器端验证]</li>\n<li>no-transform [不允许代理服务器修改服务器返回的内容]</li>\n</ul>\n<h3 id=\"缓存应用\"><a class=\"markdownIt-Anchor\" href=\"#缓存应用\"></a> 缓存应用</h3>\n<h2 id=\"资源验证\"><a class=\"markdownIt-Anchor\" href=\"#资源验证\"></a> 资源验证</h2>\n<p>http 请求使用缓存的流程：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuw35pe2jrj30xd0fb0ub.jpg\" alt=\"\"></p>\n<h3 id=\"验证头\"><a class=\"markdownIt-Anchor\" href=\"#验证头\"></a> 验证头</h3>\n<ul>\n<li>Last-Modified 上次修改时间</li>\n</ul>\n<p>配合 If-Modified-Since[第二次请求时携带，值为第一次请求后响应的 Last-Modified 的值]或者 If-Unmodified-Since 使用</p>\n<p>对比上次修改时间以验证资源是否需要更新</p>\n<ul>\n<li>Etag</li>\n</ul>\n<p>通过数据签名[资源对内容的唯一签名]</p>\n<p>If-None-Match 第二次请求时携带，值为第一次请求后响应的 Etag 的值</p>\n<h2 id=\"cookie\"><a class=\"markdownIt-Anchor\" href=\"#cookie\"></a> Cookie</h2>\n<p>Set-Cookie 设置<br>\n下次请求会自动带上<br>\n键值对，可以设置多个</p>\n<p>Cookie 属性</p>\n<ul>\n<li>max-age 和 expires 设置过期时间</li>\n<li>Secure 只在 https 的时候发送</li>\n<li>HttpOnly 无法通过 document.cookie 访问</li>\n</ul>\n<h2 id=\"redirect\"><a class=\"markdownIt-Anchor\" href=\"#redirect\"></a> Redirect</h2>\n<p>301永久重定向，访问一次重定向后，以后即使将重定向的代码删除，也依然进行重定向跳转（清理浏览器缓存后重定向才失效）</p>\n<p>302重定向是每次都要判断然后重定向到相应的url</p>\n<h2 id=\"参考地址\"><a class=\"markdownIt-Anchor\" href=\"#参考地址\"></a> 参考地址：</h2>\n<ol>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E5%AE%9A%E4%BD%8D%E7%AC%A6\" target=\"_blank\" rel=\"noopener\">wikipedia-统一资源定位符</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>理解网络请求的原理，对 http 请求头、请求过程、请求方式和数据传输原理进行学习。HTTP 网络请求是交互式 web 应用的根基。在能够使用的基础上，进一步理解实现原理，从而强化对 HTTP 协议的理解，和基于该协议上的网络实现。</p>","more":"<h3 id=\"http-请求头信息\"><a class=\"markdownIt-Anchor\" href=\"#http-请求头信息\"></a> HTTP 请求头信息</h3>\n<p>Cache-Control</p>\n<ul>\n<li>public、private：设置缓存仅在客户端缓存还是可以在代理服务器中缓存</li>\n<li>must-revalidate：客户端的缓存获取之后必须到服务端验证之后才能继续使用缓存</li>\n<li>no-cache、no-store：设置是否使用缓存</li>\n</ul>\n<p>缓存验证</p>\n<ul>\n<li>\n<p>last-modified 配合 if-modified-since</p>\n</li>\n<li>\n<p>etag 配合 if-none-match</p>\n</li>\n<li>\n<p>Contetn-Type 、Content-Encoding：等用来约束数据类型</p>\n</li>\n<li>\n<p>Cookie：保持会话信息</p>\n</li>\n<li>\n<p>CORS：实现跨域并保持安全性限制</p>\n</li>\n</ul>\n<h2 id=\"深入到-tcp\"><a class=\"markdownIt-Anchor\" href=\"#深入到-tcp\"></a> 深入到 TCP</h2>\n<p>1.什么是三次握手</p>\n<p>2.HTTPS 链接的创建过程，以及为什么 HTTPS 是安全的</p>\n<p>3.什么是长链接，为什么需要长链接</p>\n<p>4.HTTP2 的信道复用为什么能提高性能</p>\n<h2 id=\"http-请求完整过程\"><a class=\"markdownIt-Anchor\" href=\"#http-请求完整过程\"></a> HTTP 请求完整过程</h2>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuqog8z9uij318n0f30xa.jpg\" alt=\"\"></p>\n<p>1.Redirect 浏览器要对 url 判断是否需要重定向到新的 url 地址</p>\n<p>2.缓存 判断是否需要到浏览器缓存中获取 url 对应的网页资源</p>\n<p>3.DNS 解析 将域名解析成 ip 才能访问到资源所在的服务器</p>\n<p>4.TCP 连接 拿到 ip 后就要进行 TCP 连接[ http: 经过 TCP 的三次握手;https: 不同于三次握手，需要另外的保证数据安全传输的过程]</p>\n<p>5.Request 发送请求的数据包</p>\n<p>6.Response 接收到请求数据包，并返回响应结果</p>\n<h2 id=\"网络协议分层\"><a class=\"markdownIt-Anchor\" href=\"#网络协议分层\"></a> 网络协议分层</h2>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuqoss50zpj30zv0pogpe.jpg\" alt=\"\"></p>\n<ul>\n<li>物理层：定义物理设备如何传输数据</li>\n<li>数据链路层：在通信的实体间建立数据链路连接</li>\n<li>网络层：为数据在结点之间传输创建逻辑链路</li>\n<li>传输层：\n<ul>\n<li>向用户传输可靠的端到端(End-to-End)服务</li>\n<li>传输层向高层屏蔽了下层数据通信的细节</li>\n</ul>\n</li>\n<li>应用层\n<ul>\n<li>为应用软件提供了很多服务</li>\n<li>构建于 TCP 协议之上</li>\n<li>屏蔽网络传输相关细节</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"http-发展历史\"><a class=\"markdownIt-Anchor\" href=\"#http-发展历史\"></a> HTTP 发展历史</h2>\n<h3 id=\"几个概念\"><a class=\"markdownIt-Anchor\" href=\"#几个概念\"></a> 几个概念</h3>\n<p>1.http 并发数</p>\n<p>2.http 请求</p>\n<p>3.tcp 连接 [1 个连接可以有多个 http 请求]</p>\n<h3 id=\"http09\"><a class=\"markdownIt-Anchor\" href=\"#http09\"></a> HTTP/0.9</h3>\n<ul>\n<li>只有一个命令(方法)GET</li>\n<li>没有 HEADER 等描述数据的信息</li>\n<li>服务器发送完毕，就关闭 TCP 连接</li>\n</ul>\n<h3 id=\"http10\"><a class=\"markdownIt-Anchor\" href=\"#http10\"></a> HTTP/1.0</h3>\n<ul>\n<li>增加了很多命令</li>\n<li>增加 status code(服务端处理完某个请求后的状态)和 header(发送和请求相关的数据 以及对这部分数据的操作方法))</li>\n<li>多字符支持、多部分发送、权限、缓存等</li>\n</ul>\n<p>[一个 http 请求就要建立一个 tcp 连接，返回完内容后就关闭，但是三次握手建立的消耗和延迟比较高]</p>\n<h3 id=\"http11\"><a class=\"markdownIt-Anchor\" href=\"#http11\"></a> HTTP/1.1</h3>\n<ul>\n<li>增加持久连接 [建立完一个 tcp 连接后，在返回完数据后不关闭，让后续的所有请求都使用这个连接]</li>\n<li>pipeline [可以在同一个连接中发送多个请求，但是多个请求在服务器端需要顺序处理（串行），这样如果前面的请求处理的时间需要很长，而后面的请求处理的时间只需要很短，导致性能不太好]</li>\n<li>增加 host(可以在同一台(物理)服务器跑多个 web 服务[node、java]，使用 host 进行判断，提高物理服务的使用效率)和其他一些命令</li>\n</ul>\n<h3 id=\"http20\"><a class=\"markdownIt-Anchor\" href=\"#http20\"></a> HTTP/2.0</h3>\n<ul>\n<li>分帧传输：所有数据以二进制(帧)传输[以前是以字符串形式传输]</li>\n<li>信道复用：同一个连接里面发送多个请求不再需要需要按照顺序来（并行）</li>\n<li>头信息压缩以及推送等提高效率的功能</li>\n</ul>\n<h2 id=\"http-三次握手\"><a class=\"markdownIt-Anchor\" href=\"#http-三次握手\"></a> HTTP 三次握手</h2>\n<h3 id=\"http-请求和-tcp-连接关系\"><a class=\"markdownIt-Anchor\" href=\"#http-请求和-tcp-连接关系\"></a> HTTP 请求和 TCP 连接关系</h3>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuqq6thfa2j30yy0eyjs6.jpg\" alt=\"\"></p>\n<p>1.客户端和服务器之间的 http 请求的发送和返回的过程需要创建 TCP 连接</p>\n<p>2.http 只有请求和响应的概念，没有连接的概念</p>\n<p>3.请求和响应都是数据包，需要传输通道，TCP 连接就是数据包的传输通道（TCP 连接: 客户端发送，服务端接收）</p>\n<h3 id=\"三次握手时序图\"><a class=\"markdownIt-Anchor\" href=\"#三次握手时序图\"></a> 三次握手时序图</h3>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuqq70zeilj30tw0p4zmm.jpg\" alt=\"\"></p>\n<p>1.第一次握手（SYN=1,Seq=X）</p>\n<p>2.第二次握手（SYN=1,ACK=X+1,Seq=Y）</p>\n<p>3.第三次握手（ACK=Y+1,Seq=Z）</p>\n<p>网络抓包工具：wireshark</p>\n<h2 id=\"uri-url-urn\"><a class=\"markdownIt-Anchor\" href=\"#uri-url-urn\"></a> URI URL URN</h2>\n<h3 id=\"uri\"><a class=\"markdownIt-Anchor\" href=\"#uri\"></a> URI</h3>\n<p>【定义】： Uniform Resource Identifier 统一资源标识符</p>\n<ul>\n<li>用来唯一标识互联网上的信息资源</li>\n<li>包括 URL 和 URN</li>\n</ul>\n<h3 id=\"url\"><a class=\"markdownIt-Anchor\" href=\"#url\"></a> URL</h3>\n<p>【定义】：Uniform Resource Locator 统一资源定位器</p>\n<p>示例： <a href=\"http://user:pass@host.com:80/path?query=string#hash\" target=\"_blank\" rel=\"noopener\">http://user:pass@host.com:80/path?query=string#hash</a></p>\n<ul>\n<li>\n<p><strong>[ http ]</strong>：传送协议。<code>Data URI scheme</code> [http ftp mailto]</p>\n</li>\n<li>\n<p><strong>[ // ]</strong>：层级 URL 标记符号(为[//],固定不变)</p>\n</li>\n<li>\n<p><strong>[ user:pass ]</strong>： 访问资源需要的凭证信息（可省略，不安全）</p>\n</li>\n<li>\n<p><strong>[ <a href=\"http://host.com\" target=\"_blank\" rel=\"noopener\">host.com</a> ]</strong>：服务器。（通常为域名，有时为 IP 地址）</p>\n</li>\n<li>\n<p><strong>[ 80 ]</strong>：端口号。（以数字方式表示，若为 HTTP 的默认值“:80”可省略）</p>\n</li>\n<li>\n<p><strong>[ /path ]</strong>：路径。（以“/”字符区别路径中的每一个目录名称）</p>\n</li>\n<li>\n<p><strong>[ ?query=string ]</strong>：查询。（GET 模式的窗体参数，以“?”字符为起点，每个参数以“&amp;”隔开，再以“=”分开参数名称与数据，通常以 UTF8 的 URL 编码，避开字符冲突的问题）</p>\n</li>\n<li>\n<p><strong>[ #hash ]</strong>：片段。以“#”字符为起点。（锚点应用）</p>\n</li>\n</ul>\n<h3 id=\"urn\"><a class=\"markdownIt-Anchor\" href=\"#urn\"></a> URN</h3>\n<p>【定义】：永久统一资源定位符</p>\n<p>资源移动之后还能被找到</p>\n<p>目前还没有成熟的使用方案</p>\n<h2 id=\"http-报文\"><a class=\"markdownIt-Anchor\" href=\"#http-报文\"></a> HTTP 报文</h2>\n<ul>\n<li>\n<p>请求行（request line）</p>\n<ul>\n<li>请求报文：请求方式 请求参数 请求的网络协议</li>\n<li>响应报文：请求的网络协议 状态码 状态信息</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://zh.wikipedia.org/wiki/HTTP%E5%A4%B4%E5%AD%97%E6%AE%B5\" target=\"_blank\" rel=\"noopener\">请求头部</a></p>\n</li>\n<li>\n<p>空行</p>\n</li>\n<li>\n<p>主体数据[可选]</p>\n</li>\n</ul>\n<h3 id=\"请求报文\"><a class=\"markdownIt-Anchor\" href=\"#请求报文\"></a> 请求报文</h3>\n<h3 id=\"响应报文\"><a class=\"markdownIt-Anchor\" href=\"#响应报文\"></a> 响应报文</h3>\n<h2 id=\"cors-跨域请求的限制与解决\"><a class=\"markdownIt-Anchor\" href=\"#cors-跨域请求的限制与解决\"></a> CORS 跨域请求的限制与解决</h2>\n<h3 id=\"基本介绍\"><a class=\"markdownIt-Anchor\" href=\"#基本介绍\"></a> 基本介绍</h3>\n<p>CORS (<code>Cross-origin resource sharing</code>):<br>\n一个 web 服务器程序(域名)请求另一个 web 服务器程序(域名).</p>\n<p><code>images, stylesheets, scripts, iframes, and videos</code>这几个资源的请求是不涉及跨域的概念的，都可以直接访问。</p>\n<p>跨域请求时，请求发送的依然是正常的，并且服务器仍然会正常响应，但是浏览器接收到数据后看到头信息没有跨域处理，就会忽略掉请求的数据，并在控制命令行报错</p>\n<h3 id=\"限制\"><a class=\"markdownIt-Anchor\" href=\"#限制\"></a> 限制</h3>\n<p>1.跨域请求只允许的方法：GET HEAD POST</p>\n<p>2.允许 Content-Type 的值</p>\n<p>(1) text/plain</p>\n<p>(2) multipart/form-data</p>\n<p>(3) application/x-www-form-urlencoded</p>\n<p>3.请求头限制</p>\n<p>(1) Accept</p>\n<p>(2) Accept-Language</p>\n<p>(3) Content-Language</p>\n<p>4.XMLHttpRequestUpload 对象均没有注册任何事件监听器</p>\n<p>5.请求中没有使用 ReadableStream 对象</p>\n<h3 id=\"解决\"><a class=\"markdownIt-Anchor\" href=\"#解决\"></a> 解决</h3>\n<p>1.设置 header。</p>\n<p>对<strong>被请求</strong>的资源设置<code>'Access-Control-Allow-Origin': '*'</code>头信息（不安全）[但是值只能是字符串，所以涉及到多个 url 时，可以通过对请求 url 的判断来确定是否需要设置该头信息]</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// server2.js</span></span><br><span class=\"line\">response.writeHead(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">  <span class=\"string\">\"Access-Control-Allow-Origin\"</span>: <span class=\"string\">\"*\"</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>2.<code>jsonp</code> 实现方法：在 script 标签设置 src 的值为需要请求的跨域 url</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// test.html</span></span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"http://127.0.0.1:8887/\"</span> /&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"cors-预请求\"><a class=\"markdownIt-Anchor\" href=\"#cors-预请求\"></a> CORS 预请求</h3>\n<p>对跨域限制允许外的请求参数都需要进行验证，才能有效请求，这个过程就是预请求</p>\n<p>验证方法: 多发送一个请求的方式为 OPTIONS 的请求验证</p>\n<p>1、<code>Access-Control-Allow-Headers</code></p>\n<p>使用 fetch 请求服务器时设置了头信息，相应的服务器端需要对请求的头信息进行配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// test.html</span></span><br><span class=\"line\">fetch(<span class=\"string\">\"http://127.0.0.1:8887/\"</span>, &#123;</span><br><span class=\"line\">  method: <span class=\"string\">\"POST\"</span>,</span><br><span class=\"line\">  headers: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"X-Test-Cors\"</span>: <span class=\"string\">\"123\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// server2.js</span></span><br><span class=\"line\"><span class=\"string\">'Access-Control-Allow-Headers'</span>: <span class=\"string\">'X-Test-Cors'</span></span><br></pre></td></tr></table></figure>\n<p>2、 <code>Access-Control-Allow-Methods</code></p>\n<p>默认支持的请求方式只允许 <code>GET HEAD POST</code>，如果需要使用其他方式请求，则需要在服务器端的头信息中设置相关参数。设置允许用户可以请求的请求方式:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'Access-Control-Allow-Methods'</span>: <span class=\"string\">'POST, PUT, DELETE'</span></span><br></pre></td></tr></table></figure>\n<p>3、<code>Access-Control-Max-Age</code></p>\n<p>设置同一个跨域请求的有效期, 有效期内不需要再发送预请求进行验证。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'Access-Control-Max-Age'</span>: <span class=\"string\">'1000'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"缓存头-cache-control\"><a class=\"markdownIt-Anchor\" href=\"#缓存头-cache-control\"></a> 缓存头 Cache-Control</h2>\n<h3 id=\"可缓存性\"><a class=\"markdownIt-Anchor\" href=\"#可缓存性\"></a> 可缓存性</h3>\n<ul>\n<li>public [代理服务器和客户端都可以缓存返回内容]</li>\n<li>private [只有发起请求的客户端才可以缓存数据]</li>\n<li>no-cache [所有的节点都不可以缓存数据]</li>\n</ul>\n<h3 id=\"到期\"><a class=\"markdownIt-Anchor\" href=\"#到期\"></a> 到期</h3>\n<ul>\n<li>max-age=[seconds][单位：秒]</li>\n<li>s-maxage=[seconds][代理服务器中才生效]</li>\n<li>max-stale=[seconds][浏览器设置的，可以使用过期的缓存，而不用再到服务器请求]</li>\n</ul>\n<h3 id=\"重新验证\"><a class=\"markdownIt-Anchor\" href=\"#重新验证\"></a> 重新验证</h3>\n<ul>\n<li>must-revalidate [缓存过期后拿到缓存不能直接用，必须到服务器端验证后才能用]</li>\n<li>proxy-revalidate [指定<strong>缓存服务器</strong>失效后必须验证]</li>\n</ul>\n<h3 id=\"其他\"><a class=\"markdownIt-Anchor\" href=\"#其他\"></a> 其他</h3>\n<ul>\n<li>no-store [浏览器和代理服务器都不可以缓存数据，必须要到服务器端验证]</li>\n<li>no-transform [不允许代理服务器修改服务器返回的内容]</li>\n</ul>\n<h3 id=\"缓存应用\"><a class=\"markdownIt-Anchor\" href=\"#缓存应用\"></a> 缓存应用</h3>\n<h2 id=\"资源验证\"><a class=\"markdownIt-Anchor\" href=\"#资源验证\"></a> 资源验证</h2>\n<p>http 请求使用缓存的流程：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuw35pe2jrj30xd0fb0ub.jpg\" alt=\"\"></p>\n<h3 id=\"验证头\"><a class=\"markdownIt-Anchor\" href=\"#验证头\"></a> 验证头</h3>\n<ul>\n<li>Last-Modified 上次修改时间</li>\n</ul>\n<p>配合 If-Modified-Since[第二次请求时携带，值为第一次请求后响应的 Last-Modified 的值]或者 If-Unmodified-Since 使用</p>\n<p>对比上次修改时间以验证资源是否需要更新</p>\n<ul>\n<li>Etag</li>\n</ul>\n<p>通过数据签名[资源对内容的唯一签名]</p>\n<p>If-None-Match 第二次请求时携带，值为第一次请求后响应的 Etag 的值</p>\n<h2 id=\"cookie\"><a class=\"markdownIt-Anchor\" href=\"#cookie\"></a> Cookie</h2>\n<p>Set-Cookie 设置<br>\n下次请求会自动带上<br>\n键值对，可以设置多个</p>\n<p>Cookie 属性</p>\n<ul>\n<li>max-age 和 expires 设置过期时间</li>\n<li>Secure 只在 https 的时候发送</li>\n<li>HttpOnly 无法通过 document.cookie 访问</li>\n</ul>\n<h2 id=\"redirect\"><a class=\"markdownIt-Anchor\" href=\"#redirect\"></a> Redirect</h2>\n<p>301永久重定向，访问一次重定向后，以后即使将重定向的代码删除，也依然进行重定向跳转（清理浏览器缓存后重定向才失效）</p>\n<p>302重定向是每次都要判断然后重定向到相应的url</p>\n<h2 id=\"参考地址\"><a class=\"markdownIt-Anchor\" href=\"#参考地址\"></a> 参考地址：</h2>\n<ol>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E5%AE%9A%E4%BD%8D%E7%AC%A6\" target=\"_blank\" rel=\"noopener\">wikipedia-统一资源定位符</a></li>\n</ol>"},{"title":"【Linux】系统学习Crontab定时任务","date":"2018-07-06T04:00:00.000Z","_content":"\ncrontab 是一个用于设置周期性执行任务的工具。目前服务器端的运行环境大多数为 Linux，在日常的运营和维护中会有很多需要定期执行的操作，其中有些操作是可以机械的定期执行的操作，所以我们可以使用 crontab 定时服务来设置定时任务，从而减少手动操作的任务，帮助提高工作效率。\n\n<!--more-->\n\n## 一、cron 定时任务\n\n### 1.安装 crond 服务和 crontab 工具\n\n#### (1)相关命令\n\n```bash\n# 清除yum缓存\nyum clean all\n\n# 更新系统的安装包到最新版本\nyum update\n\n# 安装cron服务和crontab工具[-y表示yes,没有的话需要手动输入yes]\nyum install -y cronie crontabs\n```\n\n#### (2)验证 crond 服务\n\n```bash\n# 检查cond服务是否安装及启动：\nyum list cronie && systemctl status crond\n\n# 检查crontab工具是否安装：\nyum list crontabs && which crontab && crontab -l\n```\n\n## 二、crontab 架构\n\n### 1.执行步骤\n\n```bash\n# 1.新建|编辑定时任务\ncrontab -e\n\n# 2.查看定时任务列表[当前用户(root)保存的计划任务]\ncrontab -l\n#或\ncat /var/spool/cron/root\n\n# 3.重启crond进程\nsystemctl restart crond\n\n# 4.查看crond状态\nsystemctl status crond\n```\n\n### 2.contab 配置文件格式\n\n```bash\n*     *     *    *    *   [username]   my command\n分    时    日   月   周   [执行用户名]  要运行的命令\n0-59 0-23 1-31 1-12  0-6\n```\n\n```info\n* 取值范围内的所有数字\n/ 每\n- 某个区间\n, 几个数的集合\n```\n\n### 3.crontab 配置文件\n\n#### (1)系统配置文件\n\n`/etc/crontab`\n\n#### (2)系统用户 crontab 配置文件保存目录[crontab -e 所编辑的文件]\n\n```info\n/var/spllo/cron/[目录]\nroot:/var/spppl/cron/root[文件]\nuser01:/var/spppl/cron/user01[文件]\n```\n\n```bash\n# 创建用户\nuseradd user01\n# 使用指定用户登陆系统\nsu - user01\n```\n\n### 4.Crontab 环境变量\n\n#### (1)添加 PATH 到/etc/crontab\n\n```bash\nPATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/jdk1.8.0_111/bin\n# 可以直接在定时任务文件使用java程序\n```\n\n#### (2)在执行具体任务前引入系统/用户环境变量\n\n```bash\n# [系统级别环境变量]\n30 2 * * * source /etc/profile;sh /root/test.sh\n\n# [用户级别环境变量]\n30 2 * * * source ~/.bash_profile;sh /root/test.sh\n```\n\n#### (3)操作步骤\n\n##### 1)添加环境变量\n\n```ini\n# /etc/profile 或者 /root/.bash_profile\nPATH=$PATH:/usr/local/jdk1.8.0_111/bin\nexport PATH\n```\n\n##### 2)完成执行脚本\n\n```ini\n# /root/test.sh\njava -version 2> /root/script.out\n```\n\n##### 3)设置定时任务\n\n```bash\n# 先使/etc/profile生效[添加环境变量]，后使用sh执行脚本文件\n* * * * * source /etc/profile;sh /root/test.sh\n* * * * * source /root/.bash_profile;sh /root/test.sh\n```\n\n## 三、实战\n\n### 1.crontab 日志\n\n#### (1)cron 日志保存在`/var/log/cron`文件中\n\n```bash\n# 查看最近的两条cron日志\ntail -n 2 /var/log/cron\n```\n\n### 2.清理系统日志\n\n#### (1)系统日志的存放位置： `/var/log/messages`\n\n```info\n# /var/log目录下日志[平时主要用到的日志文件]\ncron -- 定时任务日志\nsecure -- 相关ssh服务日志\nmessages -- 系统总日志\nfirewalld -- 系统防火墙日志\nlastlog -- 登录日志\n```\n\n```bash\n# 查看当前目录下所有文件的大小\ndu -sh .\n\n# 清空系统日志 [/dev/null代表一个空文件]\n* 1 * * * cat /dev/null > /var/log/messages\n```\n\n#### (2)同时清理多个日志文件[使用脚本文件]\n\n##### 1). 文件：`/root/log_clean.sh`\n\n```shell\n#!/bin/sh\n\ncat /dev/null > /var/log/messages\ncat /dev/null > /var/log/secure\n```\n\n##### 2). 定时任务\n\n```bash\n# 定时执行日志清理脚本\n* * * * * sh /root/log_clean.sh\n```\n\n### 3.crontab 备份 source code\n\n#### (1)准备工作\n\n```info\nbackup -- 备份文件存放目录\nscript -- 脚本文件目录\nwww --- 网站根目录\n```\n\n#### (2)编写执行备份的脚本文件[/data/script/www_backup.sh]\n\n```shell\n#!/bin/bash\n\nbasedir = /data/backup\n\nwww_src = $basedir/www_src/$(date +%F_%H%M)\n\n[ ! -d \"$www_src\" ]  && mkdir -p $www_src\n\ncd /data\ntar -jpcf $www_src/www.tar.bz2 www\n```\n\n#### (3)脚本解释说明\n\n##### 1). `basedir = /data/backup`\n\n定义一个变量，名称为`basedir`，值为`/data/backup`\n\n##### 2). `$(date +%F_%H%M)`\n\n获取系统的日期时间，并拼上日期(%F),再拼上小时(%H)和分钟(%M) =》 [2018-03-16_0715]\n\n##### 3). `www_src = $basedir/www_src/$(date +%F_%H%M)`\n\n使用变量 basedir 的值，再拼接出多层目录，赋值给 www_src[值为/data/backup/www_src/{当前日期时间的目录(动态)}]\n\n##### 4). `[ ! -d \"$www_src\" ]`\n\n相当于 if 的判断,判断$www_src 是否不是一个目录\n\n##### 5). `tar -jpcf $www_src/www.tar.bz2 www`\n\n打包/data/www 目录为 www.tar.bz2，并放置到$www_src 目录下[/data/backup/www_src/{当前日期时间的目录(动态)}/]\n\n#### (4)创建定时任务\n\n`* * * * * sh /data/script/www_backup.sh`\n\n#### (5)重启定时任务使其生效\n\n`systemctl restart crond`\n\n#### (6)查看备份文件大小[被备份的原目录是 wordpress 系统]\n\n```bash\n# /data/backup/www_src/2018-03-16_0715/\n8.4M    www.tar.bz2\n```\n\n### 4.crontab 在 iptables 上的应用\n\n#### (1)应用场景：\n\nDDOS 攻击或匿名暴力破解导致系统无法正常访问\n\n#### (2)解决之道：\n\n使用 crontab 集成 iptables，实时监控系统的网络状态，及时将可疑的 ip 地址加入到网络黑名单\n\n#### (3)iptables 简介：\n\niptables 作为 Linux 下的内核防火墙，能够通过添加相应的规则，检测、修改、重定向、转发和丢弃 ip 数据包，从而过滤网络数据，实现保护系统网络的功能\n\nCentOS7 默认使用 firewalld 服务维护内核防火墙，我们需要禁用 firewalld 服务，并安装 iptables 作为系统默认防火墙。\n\n#### (4)准备工作\n\n```bash\n# 查看当前firewalld进程状态\nsystemctl status firewalld\n\n# 关闭并禁用firewalld\nsystemctl disable firewalld\nsystemctl stop firewalld\n\n# 安装iptables服务\nyum install iptables-services\n[yes]\n\n# 开启iptables服务\nsystemctl enable iptables\n\n# 启动iptables服务\nsystemctl start iptables\n\n# 验证iptables是否安装成功\niptables -V\n```\n\n#### (5)设置网络访问黑名单文件[/data/script/blacklist.txt](每一行为一个ip地址)\n\n#### (6)脚本实现[/data/script/firewall.sh]\n\n```shell\n#!/bin/bash\n\niptables -F\n\nlist = /data/script/blacklist.txt\n\nfor line in `cat $list`;do\n  iptables -I INPUT -s$line -j DROP\n  echo \"$line is dropped into blacklist\"\ndone\n```\n\n#### (7)脚本解释说明\n\n##### 1). `iptables -F`\n\n清空 iptables 的所有记录\n\n##### 2). for line in `cat $list`;do\n\n对/data/script/blacklist.txt 循环输出每一行\n\n##### 3). `iptables -I INPUT -s$line -j DROP`\n\n添加一个 input 链\n-s 相当于 source，将每一行的数据，传递给 iptables\n-j DROP 相当于一个 drop 操作，将当前主机接收到的数据包进行一个丢弃操作\n=》将 blacklist.txt 中的 ip 地址做一个拒绝访问的操作，使黑名单中的 ip 地址无法访问主机\n\n##### 4). `echo \"$line is dropped into blacklist\"`\n\n对每一行的 ip 地址拒绝访问后，输出一条信息提示\n\n#### (8)创建定时任务\n\n`* * * * * source /etc/profile; sh /data/script/firewall.sh`\n\n#### (9)查看 iptables 拒绝访问主机的 ip 列表\n\n```bash\niptables -nvL\n```\n\n### 5.crontab 在 Jenkins 上的扩展\n\n#### (1)Jenkins 介绍\n\n    java编写的开源、持续、集成工具，最大优势就是将开发人员和运维人员完美的结合在一起。\n\n#### (2)使用前提\n\n```bash\n# 安装\nyum install jenkins\n[y]\n\n# 查看系统java路径\nwhich java\n\n# 查看系统java版本\njava -version\n```\n\n> [jenkins 要求的最低版本要求配置>1.8.0_111]\n\n#### (3)编辑 jenkins 的启动配置文件[/etc/init.d/jenkins]\n\n[=>搜索 candidates 关键词]\n默认调用的 java 目录是/usr/bin/java 和/usr/lib/jvm/\\*\\*\\*/bin/java\n\n添加 java 的路径\n`/usr/local/jdk1.8.0_111/bin/java`\n\n#### (4)相关命令\n\n```bash\n#启动jenkins服务\nsystemctl start jenkins\n\n# 查看jenkins服务是否正常启动，并查看jenkins服务是否打开8080端口监听服务\nlsof -i:8080\n```\n\n#### (5)在 web 网页中进行配置并使用 jenkins\n\n```bash\n# 1.访问jenkins的后台地址\n10.110.16.5:8080\n\n# 2.登录密码保存在系统的目录下\n/var/lib/jenkins/secrets/initialAdminPassword文件中\n\n# 3.自定义jenkins=》安装插件\n\n# 4.创建第一个管理员用户\n\n# 5.创建新任务\n1)构建自由风格的软件项目\n2)构建触发器 => Build Periodically => 日程表[相当于crontab定时任务的时间表单] => * * * * *\n3)构建 => 增加构建步骤 => Execute shell => Command[执行定时任务时执行的操作] => echo \"this is a test build\"\n```\n\n【学习参考】：[慕课网-Crontab 不知疲倦的时间表](https://www.imooc.com/learn/1009)\n","source":"_posts/linux-crontab.md","raw":"---\ntitle: 【Linux】系统学习Crontab定时任务\ndate: 2018-07-06 12:00:00\ntags:\n  - crontab\ncategory:\n  - 【Linux相关】\n---\n\ncrontab 是一个用于设置周期性执行任务的工具。目前服务器端的运行环境大多数为 Linux，在日常的运营和维护中会有很多需要定期执行的操作，其中有些操作是可以机械的定期执行的操作，所以我们可以使用 crontab 定时服务来设置定时任务，从而减少手动操作的任务，帮助提高工作效率。\n\n<!--more-->\n\n## 一、cron 定时任务\n\n### 1.安装 crond 服务和 crontab 工具\n\n#### (1)相关命令\n\n```bash\n# 清除yum缓存\nyum clean all\n\n# 更新系统的安装包到最新版本\nyum update\n\n# 安装cron服务和crontab工具[-y表示yes,没有的话需要手动输入yes]\nyum install -y cronie crontabs\n```\n\n#### (2)验证 crond 服务\n\n```bash\n# 检查cond服务是否安装及启动：\nyum list cronie && systemctl status crond\n\n# 检查crontab工具是否安装：\nyum list crontabs && which crontab && crontab -l\n```\n\n## 二、crontab 架构\n\n### 1.执行步骤\n\n```bash\n# 1.新建|编辑定时任务\ncrontab -e\n\n# 2.查看定时任务列表[当前用户(root)保存的计划任务]\ncrontab -l\n#或\ncat /var/spool/cron/root\n\n# 3.重启crond进程\nsystemctl restart crond\n\n# 4.查看crond状态\nsystemctl status crond\n```\n\n### 2.contab 配置文件格式\n\n```bash\n*     *     *    *    *   [username]   my command\n分    时    日   月   周   [执行用户名]  要运行的命令\n0-59 0-23 1-31 1-12  0-6\n```\n\n```info\n* 取值范围内的所有数字\n/ 每\n- 某个区间\n, 几个数的集合\n```\n\n### 3.crontab 配置文件\n\n#### (1)系统配置文件\n\n`/etc/crontab`\n\n#### (2)系统用户 crontab 配置文件保存目录[crontab -e 所编辑的文件]\n\n```info\n/var/spllo/cron/[目录]\nroot:/var/spppl/cron/root[文件]\nuser01:/var/spppl/cron/user01[文件]\n```\n\n```bash\n# 创建用户\nuseradd user01\n# 使用指定用户登陆系统\nsu - user01\n```\n\n### 4.Crontab 环境变量\n\n#### (1)添加 PATH 到/etc/crontab\n\n```bash\nPATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/jdk1.8.0_111/bin\n# 可以直接在定时任务文件使用java程序\n```\n\n#### (2)在执行具体任务前引入系统/用户环境变量\n\n```bash\n# [系统级别环境变量]\n30 2 * * * source /etc/profile;sh /root/test.sh\n\n# [用户级别环境变量]\n30 2 * * * source ~/.bash_profile;sh /root/test.sh\n```\n\n#### (3)操作步骤\n\n##### 1)添加环境变量\n\n```ini\n# /etc/profile 或者 /root/.bash_profile\nPATH=$PATH:/usr/local/jdk1.8.0_111/bin\nexport PATH\n```\n\n##### 2)完成执行脚本\n\n```ini\n# /root/test.sh\njava -version 2> /root/script.out\n```\n\n##### 3)设置定时任务\n\n```bash\n# 先使/etc/profile生效[添加环境变量]，后使用sh执行脚本文件\n* * * * * source /etc/profile;sh /root/test.sh\n* * * * * source /root/.bash_profile;sh /root/test.sh\n```\n\n## 三、实战\n\n### 1.crontab 日志\n\n#### (1)cron 日志保存在`/var/log/cron`文件中\n\n```bash\n# 查看最近的两条cron日志\ntail -n 2 /var/log/cron\n```\n\n### 2.清理系统日志\n\n#### (1)系统日志的存放位置： `/var/log/messages`\n\n```info\n# /var/log目录下日志[平时主要用到的日志文件]\ncron -- 定时任务日志\nsecure -- 相关ssh服务日志\nmessages -- 系统总日志\nfirewalld -- 系统防火墙日志\nlastlog -- 登录日志\n```\n\n```bash\n# 查看当前目录下所有文件的大小\ndu -sh .\n\n# 清空系统日志 [/dev/null代表一个空文件]\n* 1 * * * cat /dev/null > /var/log/messages\n```\n\n#### (2)同时清理多个日志文件[使用脚本文件]\n\n##### 1). 文件：`/root/log_clean.sh`\n\n```shell\n#!/bin/sh\n\ncat /dev/null > /var/log/messages\ncat /dev/null > /var/log/secure\n```\n\n##### 2). 定时任务\n\n```bash\n# 定时执行日志清理脚本\n* * * * * sh /root/log_clean.sh\n```\n\n### 3.crontab 备份 source code\n\n#### (1)准备工作\n\n```info\nbackup -- 备份文件存放目录\nscript -- 脚本文件目录\nwww --- 网站根目录\n```\n\n#### (2)编写执行备份的脚本文件[/data/script/www_backup.sh]\n\n```shell\n#!/bin/bash\n\nbasedir = /data/backup\n\nwww_src = $basedir/www_src/$(date +%F_%H%M)\n\n[ ! -d \"$www_src\" ]  && mkdir -p $www_src\n\ncd /data\ntar -jpcf $www_src/www.tar.bz2 www\n```\n\n#### (3)脚本解释说明\n\n##### 1). `basedir = /data/backup`\n\n定义一个变量，名称为`basedir`，值为`/data/backup`\n\n##### 2). `$(date +%F_%H%M)`\n\n获取系统的日期时间，并拼上日期(%F),再拼上小时(%H)和分钟(%M) =》 [2018-03-16_0715]\n\n##### 3). `www_src = $basedir/www_src/$(date +%F_%H%M)`\n\n使用变量 basedir 的值，再拼接出多层目录，赋值给 www_src[值为/data/backup/www_src/{当前日期时间的目录(动态)}]\n\n##### 4). `[ ! -d \"$www_src\" ]`\n\n相当于 if 的判断,判断$www_src 是否不是一个目录\n\n##### 5). `tar -jpcf $www_src/www.tar.bz2 www`\n\n打包/data/www 目录为 www.tar.bz2，并放置到$www_src 目录下[/data/backup/www_src/{当前日期时间的目录(动态)}/]\n\n#### (4)创建定时任务\n\n`* * * * * sh /data/script/www_backup.sh`\n\n#### (5)重启定时任务使其生效\n\n`systemctl restart crond`\n\n#### (6)查看备份文件大小[被备份的原目录是 wordpress 系统]\n\n```bash\n# /data/backup/www_src/2018-03-16_0715/\n8.4M    www.tar.bz2\n```\n\n### 4.crontab 在 iptables 上的应用\n\n#### (1)应用场景：\n\nDDOS 攻击或匿名暴力破解导致系统无法正常访问\n\n#### (2)解决之道：\n\n使用 crontab 集成 iptables，实时监控系统的网络状态，及时将可疑的 ip 地址加入到网络黑名单\n\n#### (3)iptables 简介：\n\niptables 作为 Linux 下的内核防火墙，能够通过添加相应的规则，检测、修改、重定向、转发和丢弃 ip 数据包，从而过滤网络数据，实现保护系统网络的功能\n\nCentOS7 默认使用 firewalld 服务维护内核防火墙，我们需要禁用 firewalld 服务，并安装 iptables 作为系统默认防火墙。\n\n#### (4)准备工作\n\n```bash\n# 查看当前firewalld进程状态\nsystemctl status firewalld\n\n# 关闭并禁用firewalld\nsystemctl disable firewalld\nsystemctl stop firewalld\n\n# 安装iptables服务\nyum install iptables-services\n[yes]\n\n# 开启iptables服务\nsystemctl enable iptables\n\n# 启动iptables服务\nsystemctl start iptables\n\n# 验证iptables是否安装成功\niptables -V\n```\n\n#### (5)设置网络访问黑名单文件[/data/script/blacklist.txt](每一行为一个ip地址)\n\n#### (6)脚本实现[/data/script/firewall.sh]\n\n```shell\n#!/bin/bash\n\niptables -F\n\nlist = /data/script/blacklist.txt\n\nfor line in `cat $list`;do\n  iptables -I INPUT -s$line -j DROP\n  echo \"$line is dropped into blacklist\"\ndone\n```\n\n#### (7)脚本解释说明\n\n##### 1). `iptables -F`\n\n清空 iptables 的所有记录\n\n##### 2). for line in `cat $list`;do\n\n对/data/script/blacklist.txt 循环输出每一行\n\n##### 3). `iptables -I INPUT -s$line -j DROP`\n\n添加一个 input 链\n-s 相当于 source，将每一行的数据，传递给 iptables\n-j DROP 相当于一个 drop 操作，将当前主机接收到的数据包进行一个丢弃操作\n=》将 blacklist.txt 中的 ip 地址做一个拒绝访问的操作，使黑名单中的 ip 地址无法访问主机\n\n##### 4). `echo \"$line is dropped into blacklist\"`\n\n对每一行的 ip 地址拒绝访问后，输出一条信息提示\n\n#### (8)创建定时任务\n\n`* * * * * source /etc/profile; sh /data/script/firewall.sh`\n\n#### (9)查看 iptables 拒绝访问主机的 ip 列表\n\n```bash\niptables -nvL\n```\n\n### 5.crontab 在 Jenkins 上的扩展\n\n#### (1)Jenkins 介绍\n\n    java编写的开源、持续、集成工具，最大优势就是将开发人员和运维人员完美的结合在一起。\n\n#### (2)使用前提\n\n```bash\n# 安装\nyum install jenkins\n[y]\n\n# 查看系统java路径\nwhich java\n\n# 查看系统java版本\njava -version\n```\n\n> [jenkins 要求的最低版本要求配置>1.8.0_111]\n\n#### (3)编辑 jenkins 的启动配置文件[/etc/init.d/jenkins]\n\n[=>搜索 candidates 关键词]\n默认调用的 java 目录是/usr/bin/java 和/usr/lib/jvm/\\*\\*\\*/bin/java\n\n添加 java 的路径\n`/usr/local/jdk1.8.0_111/bin/java`\n\n#### (4)相关命令\n\n```bash\n#启动jenkins服务\nsystemctl start jenkins\n\n# 查看jenkins服务是否正常启动，并查看jenkins服务是否打开8080端口监听服务\nlsof -i:8080\n```\n\n#### (5)在 web 网页中进行配置并使用 jenkins\n\n```bash\n# 1.访问jenkins的后台地址\n10.110.16.5:8080\n\n# 2.登录密码保存在系统的目录下\n/var/lib/jenkins/secrets/initialAdminPassword文件中\n\n# 3.自定义jenkins=》安装插件\n\n# 4.创建第一个管理员用户\n\n# 5.创建新任务\n1)构建自由风格的软件项目\n2)构建触发器 => Build Periodically => 日程表[相当于crontab定时任务的时间表单] => * * * * *\n3)构建 => 增加构建步骤 => Execute shell => Command[执行定时任务时执行的操作] => echo \"this is a test build\"\n```\n\n【学习参考】：[慕课网-Crontab 不知疲倦的时间表](https://www.imooc.com/learn/1009)\n","slug":"linux-crontab","published":1,"updated":"2019-05-12T15:49:52.666Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c42z00632wuu44xg4dbe","content":"<p>crontab 是一个用于设置周期性执行任务的工具。目前服务器端的运行环境大多数为 Linux，在日常的运营和维护中会有很多需要定期执行的操作，其中有些操作是可以机械的定期执行的操作，所以我们可以使用 crontab 定时服务来设置定时任务，从而减少手动操作的任务，帮助提高工作效率。</p>\n<a id=\"more\"></a>\n<h2 id=\"一-cron-定时任务\"><a class=\"markdownIt-Anchor\" href=\"#一-cron-定时任务\"></a> 一、cron 定时任务</h2>\n<h3 id=\"1安装-crond-服务和-crontab-工具\"><a class=\"markdownIt-Anchor\" href=\"#1安装-crond-服务和-crontab-工具\"></a> 1.安装 crond 服务和 crontab 工具</h3>\n<h4 id=\"1相关命令\"><a class=\"markdownIt-Anchor\" href=\"#1相关命令\"></a> (1)相关命令</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 清除yum缓存</span></span><br><span class=\"line\">yum clean all</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新系统的安装包到最新版本</span></span><br><span class=\"line\">yum update</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装cron服务和crontab工具[-y表示yes,没有的话需要手动输入yes]</span></span><br><span class=\"line\">yum install -y cronie crontabs</span><br></pre></td></tr></table></figure>\n<h4 id=\"2验证-crond-服务\"><a class=\"markdownIt-Anchor\" href=\"#2验证-crond-服务\"></a> (2)验证 crond 服务</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检查cond服务是否安装及启动：</span></span><br><span class=\"line\">yum list cronie &amp;&amp; systemctl status crond</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查crontab工具是否安装：</span></span><br><span class=\"line\">yum list crontabs &amp;&amp; <span class=\"built_in\">which</span> crontab &amp;&amp; crontab -l</span><br></pre></td></tr></table></figure>\n<h2 id=\"二-crontab-架构\"><a class=\"markdownIt-Anchor\" href=\"#二-crontab-架构\"></a> 二、crontab 架构</h2>\n<h3 id=\"1执行步骤\"><a class=\"markdownIt-Anchor\" href=\"#1执行步骤\"></a> 1.执行步骤</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.新建|编辑定时任务</span></span><br><span class=\"line\">crontab -e</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.查看定时任务列表[当前用户(root)保存的计划任务]</span></span><br><span class=\"line\">crontab -l</span><br><span class=\"line\"><span class=\"comment\">#或</span></span><br><span class=\"line\">cat /var/spool/cron/root</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.重启crond进程</span></span><br><span class=\"line\">systemctl restart crond</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.查看crond状态</span></span><br><span class=\"line\">systemctl status crond</span><br></pre></td></tr></table></figure>\n<h3 id=\"2contab-配置文件格式\"><a class=\"markdownIt-Anchor\" href=\"#2contab-配置文件格式\"></a> 2.contab 配置文件格式</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*     *     *    *    *   [username]   my <span class=\"built_in\">command</span></span><br><span class=\"line\">分    时    日   月   周   [执行用户名]  要运行的命令</span><br><span class=\"line\">0-59 0-23 1-31 1-12  0-6</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 取值范围内的所有数字</span><br><span class=\"line\">/ 每</span><br><span class=\"line\">- 某个区间</span><br><span class=\"line\">, 几个数的集合</span><br></pre></td></tr></table></figure>\n<h3 id=\"3crontab-配置文件\"><a class=\"markdownIt-Anchor\" href=\"#3crontab-配置文件\"></a> 3.crontab 配置文件</h3>\n<h4 id=\"1系统配置文件\"><a class=\"markdownIt-Anchor\" href=\"#1系统配置文件\"></a> (1)系统配置文件</h4>\n<p><code>/etc/crontab</code></p>\n<h4 id=\"2系统用户-crontab-配置文件保存目录crontab-e-所编辑的文件\"><a class=\"markdownIt-Anchor\" href=\"#2系统用户-crontab-配置文件保存目录crontab-e-所编辑的文件\"></a> (2)系统用户 crontab 配置文件保存目录[crontab -e 所编辑的文件]</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/var/spllo/cron/[目录]</span><br><span class=\"line\">root:/var/spppl/cron/root[文件]</span><br><span class=\"line\">user01:/var/spppl/cron/user01[文件]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建用户</span></span><br><span class=\"line\">useradd user01</span><br><span class=\"line\"><span class=\"comment\"># 使用指定用户登陆系统</span></span><br><span class=\"line\">su - user01</span><br></pre></td></tr></table></figure>\n<h3 id=\"4crontab-环境变量\"><a class=\"markdownIt-Anchor\" href=\"#4crontab-环境变量\"></a> 4.Crontab 环境变量</h3>\n<h4 id=\"1添加-path-到etccrontab\"><a class=\"markdownIt-Anchor\" href=\"#1添加-path-到etccrontab\"></a> (1)添加 PATH 到/etc/crontab</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/<span class=\"built_in\">local</span>/jdk1.8.0_111/bin</span><br><span class=\"line\"><span class=\"comment\"># 可以直接在定时任务文件使用java程序</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2在执行具体任务前引入系统用户环境变量\"><a class=\"markdownIt-Anchor\" href=\"#2在执行具体任务前引入系统用户环境变量\"></a> (2)在执行具体任务前引入系统/用户环境变量</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># [系统级别环境变量]</span></span><br><span class=\"line\">30 2 * * * <span class=\"built_in\">source</span> /etc/profile;sh /root/test.sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [用户级别环境变量]</span></span><br><span class=\"line\">30 2 * * * <span class=\"built_in\">source</span> ~/.bash_profile;sh /root/test.sh</span><br></pre></td></tr></table></figure>\n<h4 id=\"3操作步骤\"><a class=\"markdownIt-Anchor\" href=\"#3操作步骤\"></a> (3)操作步骤</h4>\n<h5 id=\"1添加环境变量\"><a class=\"markdownIt-Anchor\" href=\"#1添加环境变量\"></a> 1)添加环境变量</h5>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /etc/profile 或者 /root/.bash_profile</span></span><br><span class=\"line\"><span class=\"attr\">PATH</span>=<span class=\"variable\">$PATH</span>:/usr/local/jdk1.<span class=\"number\">8.0</span>_111/bin</span><br><span class=\"line\">export PATH</span><br></pre></td></tr></table></figure>\n<h5 id=\"2完成执行脚本\"><a class=\"markdownIt-Anchor\" href=\"#2完成执行脚本\"></a> 2)完成执行脚本</h5>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /root/test.sh</span></span><br><span class=\"line\">java -version 2&gt; /root/script.out</span><br></pre></td></tr></table></figure>\n<h5 id=\"3设置定时任务\"><a class=\"markdownIt-Anchor\" href=\"#3设置定时任务\"></a> 3)设置定时任务</h5>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 先使/etc/profile生效[添加环境变量]，后使用sh执行脚本文件</span></span><br><span class=\"line\">* * * * * <span class=\"built_in\">source</span> /etc/profile;sh /root/test.sh</span><br><span class=\"line\">* * * * * <span class=\"built_in\">source</span> /root/.bash_profile;sh /root/test.sh</span><br></pre></td></tr></table></figure>\n<h2 id=\"三-实战\"><a class=\"markdownIt-Anchor\" href=\"#三-实战\"></a> 三、实战</h2>\n<h3 id=\"1crontab-日志\"><a class=\"markdownIt-Anchor\" href=\"#1crontab-日志\"></a> 1.crontab 日志</h3>\n<h4 id=\"1cron-日志保存在varlogcron文件中\"><a class=\"markdownIt-Anchor\" href=\"#1cron-日志保存在varlogcron文件中\"></a> (1)cron 日志保存在<code>/var/log/cron</code>文件中</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看最近的两条cron日志</span></span><br><span class=\"line\">tail -n 2 /var/<span class=\"built_in\">log</span>/cron</span><br></pre></td></tr></table></figure>\n<h3 id=\"2清理系统日志\"><a class=\"markdownIt-Anchor\" href=\"#2清理系统日志\"></a> 2.清理系统日志</h3>\n<h4 id=\"1系统日志的存放位置-varlogmessages\"><a class=\"markdownIt-Anchor\" href=\"#1系统日志的存放位置-varlogmessages\"></a> (1)系统日志的存放位置： <code>/var/log/messages</code></h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># /var/log目录下日志[平时主要用到的日志文件]</span><br><span class=\"line\">cron -- 定时任务日志</span><br><span class=\"line\">secure -- 相关ssh服务日志</span><br><span class=\"line\">messages -- 系统总日志</span><br><span class=\"line\">firewalld -- 系统防火墙日志</span><br><span class=\"line\">lastlog -- 登录日志</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看当前目录下所有文件的大小</span></span><br><span class=\"line\">du -sh .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 清空系统日志 [/dev/null代表一个空文件]</span></span><br><span class=\"line\">* 1 * * * cat /dev/null &gt; /var/<span class=\"built_in\">log</span>/messages</span><br></pre></td></tr></table></figure>\n<h4 id=\"2同时清理多个日志文件使用脚本文件\"><a class=\"markdownIt-Anchor\" href=\"#2同时清理多个日志文件使用脚本文件\"></a> (2)同时清理多个日志文件[使用脚本文件]</h4>\n<h5 id=\"1-文件rootlog_cleansh\"><a class=\"markdownIt-Anchor\" href=\"#1-文件rootlog_cleansh\"></a> 1). 文件：<code>/root/log_clean.sh</code></h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\">cat /dev/null &gt; /var/log/messages</span><br><span class=\"line\">cat /dev/null &gt; /var/log/secure</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-定时任务\"><a class=\"markdownIt-Anchor\" href=\"#2-定时任务\"></a> 2). 定时任务</h5>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定时执行日志清理脚本</span></span><br><span class=\"line\">* * * * * sh /root/log_clean.sh</span><br></pre></td></tr></table></figure>\n<h3 id=\"3crontab-备份-source-code\"><a class=\"markdownIt-Anchor\" href=\"#3crontab-备份-source-code\"></a> 3.crontab 备份 source code</h3>\n<h4 id=\"1准备工作\"><a class=\"markdownIt-Anchor\" href=\"#1准备工作\"></a> (1)准备工作</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">backup -- 备份文件存放目录</span><br><span class=\"line\">script -- 脚本文件目录</span><br><span class=\"line\">www --- 网站根目录</span><br></pre></td></tr></table></figure>\n<h4 id=\"2编写执行备份的脚本文件datascriptwww_backupsh\"><a class=\"markdownIt-Anchor\" href=\"#2编写执行备份的脚本文件datascriptwww_backupsh\"></a> (2)编写执行备份的脚本文件[/data/script/www_backup.sh]</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">basedir = /data/backup</span><br><span class=\"line\"></span><br><span class=\"line\">www_src = $basedir/www_src/$(date +%F_%H%M)</span><br><span class=\"line\"></span><br><span class=\"line\">[ ! -d \"$www_src\" ]  &amp;&amp; mkdir -p $www_src</span><br><span class=\"line\"></span><br><span class=\"line\">cd /data</span><br><span class=\"line\">tar -jpcf $www_src/www.tar.bz2 www</span><br></pre></td></tr></table></figure>\n<h4 id=\"3脚本解释说明\"><a class=\"markdownIt-Anchor\" href=\"#3脚本解释说明\"></a> (3)脚本解释说明</h4>\n<h5 id=\"1-basedir-databackup\"><a class=\"markdownIt-Anchor\" href=\"#1-basedir-databackup\"></a> 1). <code>basedir = /data/backup</code></h5>\n<p>定义一个变量，名称为<code>basedir</code>，值为<code>/data/backup</code></p>\n<h5 id=\"2-date-f_hm\"><a class=\"markdownIt-Anchor\" href=\"#2-date-f_hm\"></a> 2). <code>$(date +%F_%H%M)</code></h5>\n<p>获取系统的日期时间，并拼上日期(%F),再拼上小时(%H)和分钟(%M) =》 [2018-03-16_0715]</p>\n<h5 id=\"3-www_src-basedirwww_srcdate-f_hm\"><a class=\"markdownIt-Anchor\" href=\"#3-www_src-basedirwww_srcdate-f_hm\"></a> 3). <code>www_src = $basedir/www_src/$(date +%F_%H%M)</code></h5>\n<p>使用变量 basedir 的值，再拼接出多层目录，赋值给 www_src[值为/data/backup/www_src/{当前日期时间的目录(动态)}]</p>\n<h5 id=\"4-d-www_src\"><a class=\"markdownIt-Anchor\" href=\"#4-d-www_src\"></a> 4). <code>[ ! -d &quot;$www_src&quot; ]</code></h5>\n<p>相当于 if 的判断,判断$www_src 是否不是一个目录</p>\n<h5 id=\"5-tar-jpcf-www_srcwwwtarbz2-www\"><a class=\"markdownIt-Anchor\" href=\"#5-tar-jpcf-www_srcwwwtarbz2-www\"></a> 5). <code>tar -jpcf $www_src/www.tar.bz2 www</code></h5>\n<p>打包/data/www 目录为 www.tar.bz2，并放置到$www_src 目录下[/data/backup/www_src/{当前日期时间的目录(动态)}/]</p>\n<h4 id=\"4创建定时任务\"><a class=\"markdownIt-Anchor\" href=\"#4创建定时任务\"></a> (4)创建定时任务</h4>\n<p><code>* * * * * sh /data/script/www_backup.sh</code></p>\n<h4 id=\"5重启定时任务使其生效\"><a class=\"markdownIt-Anchor\" href=\"#5重启定时任务使其生效\"></a> (5)重启定时任务使其生效</h4>\n<p><code>systemctl restart crond</code></p>\n<h4 id=\"6查看备份文件大小被备份的原目录是-wordpress-系统\"><a class=\"markdownIt-Anchor\" href=\"#6查看备份文件大小被备份的原目录是-wordpress-系统\"></a> (6)查看备份文件大小[被备份的原目录是 wordpress 系统]</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /data/backup/www_src/2018-03-16_0715/</span></span><br><span class=\"line\">8.4M    www.tar.bz2</span><br></pre></td></tr></table></figure>\n<h3 id=\"4crontab-在-iptables-上的应用\"><a class=\"markdownIt-Anchor\" href=\"#4crontab-在-iptables-上的应用\"></a> 4.crontab 在 iptables 上的应用</h3>\n<h4 id=\"1应用场景\"><a class=\"markdownIt-Anchor\" href=\"#1应用场景\"></a> (1)应用场景：</h4>\n<p>DDOS 攻击或匿名暴力破解导致系统无法正常访问</p>\n<h4 id=\"2解决之道\"><a class=\"markdownIt-Anchor\" href=\"#2解决之道\"></a> (2)解决之道：</h4>\n<p>使用 crontab 集成 iptables，实时监控系统的网络状态，及时将可疑的 ip 地址加入到网络黑名单</p>\n<h4 id=\"3iptables-简介\"><a class=\"markdownIt-Anchor\" href=\"#3iptables-简介\"></a> (3)iptables 简介：</h4>\n<p>iptables 作为 Linux 下的内核防火墙，能够通过添加相应的规则，检测、修改、重定向、转发和丢弃 ip 数据包，从而过滤网络数据，实现保护系统网络的功能</p>\n<p>CentOS7 默认使用 firewalld 服务维护内核防火墙，我们需要禁用 firewalld 服务，并安装 iptables 作为系统默认防火墙。</p>\n<h4 id=\"4准备工作\"><a class=\"markdownIt-Anchor\" href=\"#4准备工作\"></a> (4)准备工作</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看当前firewalld进程状态</span></span><br><span class=\"line\">systemctl status firewalld</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭并禁用firewalld</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld</span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装iptables服务</span></span><br><span class=\"line\">yum install iptables-services</span><br><span class=\"line\">[yes]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开启iptables服务</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> iptables</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动iptables服务</span></span><br><span class=\"line\">systemctl start iptables</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证iptables是否安装成功</span></span><br><span class=\"line\">iptables -V</span><br></pre></td></tr></table></figure>\n<h4 id=\"5设置网络访问黑名单文件datascriptblacklisttxt\"><a class=\"markdownIt-Anchor\" href=\"#5设置网络访问黑名单文件datascriptblacklisttxt\"></a> (5)设置网络访问黑名单文件<a href=\"%E6%AF%8F%E4%B8%80%E8%A1%8C%E4%B8%BA%E4%B8%80%E4%B8%AAip%E5%9C%B0%E5%9D%80\">/data/script/blacklist.txt</a></h4>\n<h4 id=\"6脚本实现datascriptfirewallsh\"><a class=\"markdownIt-Anchor\" href=\"#6脚本实现datascriptfirewallsh\"></a> (6)脚本实现[/data/script/firewall.sh]</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">iptables -F</span><br><span class=\"line\"></span><br><span class=\"line\">list = /data/script/blacklist.txt</span><br><span class=\"line\"></span><br><span class=\"line\">for line in `cat $list`;do</span><br><span class=\"line\">  iptables -I INPUT -s$line -j DROP</span><br><span class=\"line\">  echo \"$line is dropped into blacklist\"</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<h4 id=\"7脚本解释说明\"><a class=\"markdownIt-Anchor\" href=\"#7脚本解释说明\"></a> (7)脚本解释说明</h4>\n<h5 id=\"1-iptables-f\"><a class=\"markdownIt-Anchor\" href=\"#1-iptables-f\"></a> 1). <code>iptables -F</code></h5>\n<p>清空 iptables 的所有记录</p>\n<h5 id=\"2-for-line-in-cat-listdo\"><a class=\"markdownIt-Anchor\" href=\"#2-for-line-in-cat-listdo\"></a> 2). for line in <code>cat $list</code>;do</h5>\n<p>对/data/script/blacklist.txt 循环输出每一行</p>\n<h5 id=\"3-iptables-i-input-sline-j-drop\"><a class=\"markdownIt-Anchor\" href=\"#3-iptables-i-input-sline-j-drop\"></a> 3). <code>iptables -I INPUT -s$line -j DROP</code></h5>\n<p>添加一个 input 链<br>\n-s 相当于 source，将每一行的数据，传递给 iptables<br>\n-j DROP 相当于一个 drop 操作，将当前主机接收到的数据包进行一个丢弃操作<br>\n=》将 blacklist.txt 中的 ip 地址做一个拒绝访问的操作，使黑名单中的 ip 地址无法访问主机</p>\n<h5 id=\"4-echo-line-is-dropped-into-blacklist\"><a class=\"markdownIt-Anchor\" href=\"#4-echo-line-is-dropped-into-blacklist\"></a> 4). <code>echo &quot;$line is dropped into blacklist&quot;</code></h5>\n<p>对每一行的 ip 地址拒绝访问后，输出一条信息提示</p>\n<h4 id=\"8创建定时任务\"><a class=\"markdownIt-Anchor\" href=\"#8创建定时任务\"></a> (8)创建定时任务</h4>\n<p><code>* * * * * source /etc/profile; sh /data/script/firewall.sh</code></p>\n<h4 id=\"9查看-iptables-拒绝访问主机的-ip-列表\"><a class=\"markdownIt-Anchor\" href=\"#9查看-iptables-拒绝访问主机的-ip-列表\"></a> (9)查看 iptables 拒绝访问主机的 ip 列表</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -nvL</span><br></pre></td></tr></table></figure>\n<h3 id=\"5crontab-在-jenkins-上的扩展\"><a class=\"markdownIt-Anchor\" href=\"#5crontab-在-jenkins-上的扩展\"></a> 5.crontab 在 Jenkins 上的扩展</h3>\n<h4 id=\"1jenkins-介绍\"><a class=\"markdownIt-Anchor\" href=\"#1jenkins-介绍\"></a> (1)Jenkins 介绍</h4>\n<pre><code>java编写的开源、持续、集成工具，最大优势就是将开发人员和运维人员完美的结合在一起。\n</code></pre>\n<h4 id=\"2使用前提\"><a class=\"markdownIt-Anchor\" href=\"#2使用前提\"></a> (2)使用前提</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">yum install jenkins</span><br><span class=\"line\">[y]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看系统java路径</span></span><br><span class=\"line\"><span class=\"built_in\">which</span> java</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看系统java版本</span></span><br><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>[jenkins 要求的最低版本要求配置&gt;1.8.0_111]</p>\n</blockquote>\n<h4 id=\"3编辑-jenkins-的启动配置文件etcinitdjenkins\"><a class=\"markdownIt-Anchor\" href=\"#3编辑-jenkins-的启动配置文件etcinitdjenkins\"></a> (3)编辑 jenkins 的启动配置文件[/etc/init.d/jenkins]</h4>\n<p>[=&gt;搜索 candidates 关键词]<br>\n默认调用的 java 目录是/usr/bin/java 和/usr/lib/jvm/***/bin/java</p>\n<p>添加 java 的路径<br>\n<code>/usr/local/jdk1.8.0_111/bin/java</code></p>\n<h4 id=\"4相关命令\"><a class=\"markdownIt-Anchor\" href=\"#4相关命令\"></a> (4)相关命令</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#启动jenkins服务</span></span><br><span class=\"line\">systemctl start jenkins</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看jenkins服务是否正常启动，并查看jenkins服务是否打开8080端口监听服务</span></span><br><span class=\"line\">lsof -i:8080</span><br></pre></td></tr></table></figure>\n<h4 id=\"5在-web-网页中进行配置并使用-jenkins\"><a class=\"markdownIt-Anchor\" href=\"#5在-web-网页中进行配置并使用-jenkins\"></a> (5)在 web 网页中进行配置并使用 jenkins</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.访问jenkins的后台地址</span></span><br><span class=\"line\">10.110.16.5:8080</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.登录密码保存在系统的目录下</span></span><br><span class=\"line\">/var/lib/jenkins/secrets/initialAdminPassword文件中</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.自定义jenkins=》安装插件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.创建第一个管理员用户</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.创建新任务</span></span><br><span class=\"line\">1)构建自由风格的软件项目</span><br><span class=\"line\">2)构建触发器 =&gt; Build Periodically =&gt; 日程表[相当于crontab定时任务的时间表单] =&gt; * * * * *</span><br><span class=\"line\">3)构建 =&gt; 增加构建步骤 =&gt; Execute shell =&gt; Command[执行定时任务时执行的操作] =&gt; <span class=\"built_in\">echo</span> <span class=\"string\">\"this is a test build\"</span></span><br></pre></td></tr></table></figure>\n<p>【学习参考】：<a href=\"https://www.imooc.com/learn/1009\" target=\"_blank\" rel=\"noopener\">慕课网-Crontab 不知疲倦的时间表</a></p>\n","site":{"data":{}},"excerpt":"<p>crontab 是一个用于设置周期性执行任务的工具。目前服务器端的运行环境大多数为 Linux，在日常的运营和维护中会有很多需要定期执行的操作，其中有些操作是可以机械的定期执行的操作，所以我们可以使用 crontab 定时服务来设置定时任务，从而减少手动操作的任务，帮助提高工作效率。</p>","more":"<h2 id=\"一-cron-定时任务\"><a class=\"markdownIt-Anchor\" href=\"#一-cron-定时任务\"></a> 一、cron 定时任务</h2>\n<h3 id=\"1安装-crond-服务和-crontab-工具\"><a class=\"markdownIt-Anchor\" href=\"#1安装-crond-服务和-crontab-工具\"></a> 1.安装 crond 服务和 crontab 工具</h3>\n<h4 id=\"1相关命令\"><a class=\"markdownIt-Anchor\" href=\"#1相关命令\"></a> (1)相关命令</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 清除yum缓存</span></span><br><span class=\"line\">yum clean all</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新系统的安装包到最新版本</span></span><br><span class=\"line\">yum update</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装cron服务和crontab工具[-y表示yes,没有的话需要手动输入yes]</span></span><br><span class=\"line\">yum install -y cronie crontabs</span><br></pre></td></tr></table></figure>\n<h4 id=\"2验证-crond-服务\"><a class=\"markdownIt-Anchor\" href=\"#2验证-crond-服务\"></a> (2)验证 crond 服务</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检查cond服务是否安装及启动：</span></span><br><span class=\"line\">yum list cronie &amp;&amp; systemctl status crond</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查crontab工具是否安装：</span></span><br><span class=\"line\">yum list crontabs &amp;&amp; <span class=\"built_in\">which</span> crontab &amp;&amp; crontab -l</span><br></pre></td></tr></table></figure>\n<h2 id=\"二-crontab-架构\"><a class=\"markdownIt-Anchor\" href=\"#二-crontab-架构\"></a> 二、crontab 架构</h2>\n<h3 id=\"1执行步骤\"><a class=\"markdownIt-Anchor\" href=\"#1执行步骤\"></a> 1.执行步骤</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.新建|编辑定时任务</span></span><br><span class=\"line\">crontab -e</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.查看定时任务列表[当前用户(root)保存的计划任务]</span></span><br><span class=\"line\">crontab -l</span><br><span class=\"line\"><span class=\"comment\">#或</span></span><br><span class=\"line\">cat /var/spool/cron/root</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.重启crond进程</span></span><br><span class=\"line\">systemctl restart crond</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.查看crond状态</span></span><br><span class=\"line\">systemctl status crond</span><br></pre></td></tr></table></figure>\n<h3 id=\"2contab-配置文件格式\"><a class=\"markdownIt-Anchor\" href=\"#2contab-配置文件格式\"></a> 2.contab 配置文件格式</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*     *     *    *    *   [username]   my <span class=\"built_in\">command</span></span><br><span class=\"line\">分    时    日   月   周   [执行用户名]  要运行的命令</span><br><span class=\"line\">0-59 0-23 1-31 1-12  0-6</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 取值范围内的所有数字</span><br><span class=\"line\">/ 每</span><br><span class=\"line\">- 某个区间</span><br><span class=\"line\">, 几个数的集合</span><br></pre></td></tr></table></figure>\n<h3 id=\"3crontab-配置文件\"><a class=\"markdownIt-Anchor\" href=\"#3crontab-配置文件\"></a> 3.crontab 配置文件</h3>\n<h4 id=\"1系统配置文件\"><a class=\"markdownIt-Anchor\" href=\"#1系统配置文件\"></a> (1)系统配置文件</h4>\n<p><code>/etc/crontab</code></p>\n<h4 id=\"2系统用户-crontab-配置文件保存目录crontab-e-所编辑的文件\"><a class=\"markdownIt-Anchor\" href=\"#2系统用户-crontab-配置文件保存目录crontab-e-所编辑的文件\"></a> (2)系统用户 crontab 配置文件保存目录[crontab -e 所编辑的文件]</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/var/spllo/cron/[目录]</span><br><span class=\"line\">root:/var/spppl/cron/root[文件]</span><br><span class=\"line\">user01:/var/spppl/cron/user01[文件]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建用户</span></span><br><span class=\"line\">useradd user01</span><br><span class=\"line\"><span class=\"comment\"># 使用指定用户登陆系统</span></span><br><span class=\"line\">su - user01</span><br></pre></td></tr></table></figure>\n<h3 id=\"4crontab-环境变量\"><a class=\"markdownIt-Anchor\" href=\"#4crontab-环境变量\"></a> 4.Crontab 环境变量</h3>\n<h4 id=\"1添加-path-到etccrontab\"><a class=\"markdownIt-Anchor\" href=\"#1添加-path-到etccrontab\"></a> (1)添加 PATH 到/etc/crontab</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/<span class=\"built_in\">local</span>/jdk1.8.0_111/bin</span><br><span class=\"line\"><span class=\"comment\"># 可以直接在定时任务文件使用java程序</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2在执行具体任务前引入系统用户环境变量\"><a class=\"markdownIt-Anchor\" href=\"#2在执行具体任务前引入系统用户环境变量\"></a> (2)在执行具体任务前引入系统/用户环境变量</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># [系统级别环境变量]</span></span><br><span class=\"line\">30 2 * * * <span class=\"built_in\">source</span> /etc/profile;sh /root/test.sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [用户级别环境变量]</span></span><br><span class=\"line\">30 2 * * * <span class=\"built_in\">source</span> ~/.bash_profile;sh /root/test.sh</span><br></pre></td></tr></table></figure>\n<h4 id=\"3操作步骤\"><a class=\"markdownIt-Anchor\" href=\"#3操作步骤\"></a> (3)操作步骤</h4>\n<h5 id=\"1添加环境变量\"><a class=\"markdownIt-Anchor\" href=\"#1添加环境变量\"></a> 1)添加环境变量</h5>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /etc/profile 或者 /root/.bash_profile</span></span><br><span class=\"line\"><span class=\"attr\">PATH</span>=<span class=\"variable\">$PATH</span>:/usr/local/jdk1.<span class=\"number\">8.0</span>_111/bin</span><br><span class=\"line\">export PATH</span><br></pre></td></tr></table></figure>\n<h5 id=\"2完成执行脚本\"><a class=\"markdownIt-Anchor\" href=\"#2完成执行脚本\"></a> 2)完成执行脚本</h5>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /root/test.sh</span></span><br><span class=\"line\">java -version 2&gt; /root/script.out</span><br></pre></td></tr></table></figure>\n<h5 id=\"3设置定时任务\"><a class=\"markdownIt-Anchor\" href=\"#3设置定时任务\"></a> 3)设置定时任务</h5>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 先使/etc/profile生效[添加环境变量]，后使用sh执行脚本文件</span></span><br><span class=\"line\">* * * * * <span class=\"built_in\">source</span> /etc/profile;sh /root/test.sh</span><br><span class=\"line\">* * * * * <span class=\"built_in\">source</span> /root/.bash_profile;sh /root/test.sh</span><br></pre></td></tr></table></figure>\n<h2 id=\"三-实战\"><a class=\"markdownIt-Anchor\" href=\"#三-实战\"></a> 三、实战</h2>\n<h3 id=\"1crontab-日志\"><a class=\"markdownIt-Anchor\" href=\"#1crontab-日志\"></a> 1.crontab 日志</h3>\n<h4 id=\"1cron-日志保存在varlogcron文件中\"><a class=\"markdownIt-Anchor\" href=\"#1cron-日志保存在varlogcron文件中\"></a> (1)cron 日志保存在<code>/var/log/cron</code>文件中</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看最近的两条cron日志</span></span><br><span class=\"line\">tail -n 2 /var/<span class=\"built_in\">log</span>/cron</span><br></pre></td></tr></table></figure>\n<h3 id=\"2清理系统日志\"><a class=\"markdownIt-Anchor\" href=\"#2清理系统日志\"></a> 2.清理系统日志</h3>\n<h4 id=\"1系统日志的存放位置-varlogmessages\"><a class=\"markdownIt-Anchor\" href=\"#1系统日志的存放位置-varlogmessages\"></a> (1)系统日志的存放位置： <code>/var/log/messages</code></h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># /var/log目录下日志[平时主要用到的日志文件]</span><br><span class=\"line\">cron -- 定时任务日志</span><br><span class=\"line\">secure -- 相关ssh服务日志</span><br><span class=\"line\">messages -- 系统总日志</span><br><span class=\"line\">firewalld -- 系统防火墙日志</span><br><span class=\"line\">lastlog -- 登录日志</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看当前目录下所有文件的大小</span></span><br><span class=\"line\">du -sh .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 清空系统日志 [/dev/null代表一个空文件]</span></span><br><span class=\"line\">* 1 * * * cat /dev/null &gt; /var/<span class=\"built_in\">log</span>/messages</span><br></pre></td></tr></table></figure>\n<h4 id=\"2同时清理多个日志文件使用脚本文件\"><a class=\"markdownIt-Anchor\" href=\"#2同时清理多个日志文件使用脚本文件\"></a> (2)同时清理多个日志文件[使用脚本文件]</h4>\n<h5 id=\"1-文件rootlog_cleansh\"><a class=\"markdownIt-Anchor\" href=\"#1-文件rootlog_cleansh\"></a> 1). 文件：<code>/root/log_clean.sh</code></h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\">cat /dev/null &gt; /var/log/messages</span><br><span class=\"line\">cat /dev/null &gt; /var/log/secure</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-定时任务\"><a class=\"markdownIt-Anchor\" href=\"#2-定时任务\"></a> 2). 定时任务</h5>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定时执行日志清理脚本</span></span><br><span class=\"line\">* * * * * sh /root/log_clean.sh</span><br></pre></td></tr></table></figure>\n<h3 id=\"3crontab-备份-source-code\"><a class=\"markdownIt-Anchor\" href=\"#3crontab-备份-source-code\"></a> 3.crontab 备份 source code</h3>\n<h4 id=\"1准备工作\"><a class=\"markdownIt-Anchor\" href=\"#1准备工作\"></a> (1)准备工作</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">backup -- 备份文件存放目录</span><br><span class=\"line\">script -- 脚本文件目录</span><br><span class=\"line\">www --- 网站根目录</span><br></pre></td></tr></table></figure>\n<h4 id=\"2编写执行备份的脚本文件datascriptwww_backupsh\"><a class=\"markdownIt-Anchor\" href=\"#2编写执行备份的脚本文件datascriptwww_backupsh\"></a> (2)编写执行备份的脚本文件[/data/script/www_backup.sh]</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">basedir = /data/backup</span><br><span class=\"line\"></span><br><span class=\"line\">www_src = $basedir/www_src/$(date +%F_%H%M)</span><br><span class=\"line\"></span><br><span class=\"line\">[ ! -d \"$www_src\" ]  &amp;&amp; mkdir -p $www_src</span><br><span class=\"line\"></span><br><span class=\"line\">cd /data</span><br><span class=\"line\">tar -jpcf $www_src/www.tar.bz2 www</span><br></pre></td></tr></table></figure>\n<h4 id=\"3脚本解释说明\"><a class=\"markdownIt-Anchor\" href=\"#3脚本解释说明\"></a> (3)脚本解释说明</h4>\n<h5 id=\"1-basedir-databackup\"><a class=\"markdownIt-Anchor\" href=\"#1-basedir-databackup\"></a> 1). <code>basedir = /data/backup</code></h5>\n<p>定义一个变量，名称为<code>basedir</code>，值为<code>/data/backup</code></p>\n<h5 id=\"2-date-f_hm\"><a class=\"markdownIt-Anchor\" href=\"#2-date-f_hm\"></a> 2). <code>$(date +%F_%H%M)</code></h5>\n<p>获取系统的日期时间，并拼上日期(%F),再拼上小时(%H)和分钟(%M) =》 [2018-03-16_0715]</p>\n<h5 id=\"3-www_src-basedirwww_srcdate-f_hm\"><a class=\"markdownIt-Anchor\" href=\"#3-www_src-basedirwww_srcdate-f_hm\"></a> 3). <code>www_src = $basedir/www_src/$(date +%F_%H%M)</code></h5>\n<p>使用变量 basedir 的值，再拼接出多层目录，赋值给 www_src[值为/data/backup/www_src/{当前日期时间的目录(动态)}]</p>\n<h5 id=\"4-d-www_src\"><a class=\"markdownIt-Anchor\" href=\"#4-d-www_src\"></a> 4). <code>[ ! -d &quot;$www_src&quot; ]</code></h5>\n<p>相当于 if 的判断,判断$www_src 是否不是一个目录</p>\n<h5 id=\"5-tar-jpcf-www_srcwwwtarbz2-www\"><a class=\"markdownIt-Anchor\" href=\"#5-tar-jpcf-www_srcwwwtarbz2-www\"></a> 5). <code>tar -jpcf $www_src/www.tar.bz2 www</code></h5>\n<p>打包/data/www 目录为 www.tar.bz2，并放置到$www_src 目录下[/data/backup/www_src/{当前日期时间的目录(动态)}/]</p>\n<h4 id=\"4创建定时任务\"><a class=\"markdownIt-Anchor\" href=\"#4创建定时任务\"></a> (4)创建定时任务</h4>\n<p><code>* * * * * sh /data/script/www_backup.sh</code></p>\n<h4 id=\"5重启定时任务使其生效\"><a class=\"markdownIt-Anchor\" href=\"#5重启定时任务使其生效\"></a> (5)重启定时任务使其生效</h4>\n<p><code>systemctl restart crond</code></p>\n<h4 id=\"6查看备份文件大小被备份的原目录是-wordpress-系统\"><a class=\"markdownIt-Anchor\" href=\"#6查看备份文件大小被备份的原目录是-wordpress-系统\"></a> (6)查看备份文件大小[被备份的原目录是 wordpress 系统]</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /data/backup/www_src/2018-03-16_0715/</span></span><br><span class=\"line\">8.4M    www.tar.bz2</span><br></pre></td></tr></table></figure>\n<h3 id=\"4crontab-在-iptables-上的应用\"><a class=\"markdownIt-Anchor\" href=\"#4crontab-在-iptables-上的应用\"></a> 4.crontab 在 iptables 上的应用</h3>\n<h4 id=\"1应用场景\"><a class=\"markdownIt-Anchor\" href=\"#1应用场景\"></a> (1)应用场景：</h4>\n<p>DDOS 攻击或匿名暴力破解导致系统无法正常访问</p>\n<h4 id=\"2解决之道\"><a class=\"markdownIt-Anchor\" href=\"#2解决之道\"></a> (2)解决之道：</h4>\n<p>使用 crontab 集成 iptables，实时监控系统的网络状态，及时将可疑的 ip 地址加入到网络黑名单</p>\n<h4 id=\"3iptables-简介\"><a class=\"markdownIt-Anchor\" href=\"#3iptables-简介\"></a> (3)iptables 简介：</h4>\n<p>iptables 作为 Linux 下的内核防火墙，能够通过添加相应的规则，检测、修改、重定向、转发和丢弃 ip 数据包，从而过滤网络数据，实现保护系统网络的功能</p>\n<p>CentOS7 默认使用 firewalld 服务维护内核防火墙，我们需要禁用 firewalld 服务，并安装 iptables 作为系统默认防火墙。</p>\n<h4 id=\"4准备工作\"><a class=\"markdownIt-Anchor\" href=\"#4准备工作\"></a> (4)准备工作</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看当前firewalld进程状态</span></span><br><span class=\"line\">systemctl status firewalld</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭并禁用firewalld</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld</span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装iptables服务</span></span><br><span class=\"line\">yum install iptables-services</span><br><span class=\"line\">[yes]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开启iptables服务</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> iptables</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动iptables服务</span></span><br><span class=\"line\">systemctl start iptables</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证iptables是否安装成功</span></span><br><span class=\"line\">iptables -V</span><br></pre></td></tr></table></figure>\n<h4 id=\"5设置网络访问黑名单文件datascriptblacklisttxt\"><a class=\"markdownIt-Anchor\" href=\"#5设置网络访问黑名单文件datascriptblacklisttxt\"></a> (5)设置网络访问黑名单文件<a href=\"%E6%AF%8F%E4%B8%80%E8%A1%8C%E4%B8%BA%E4%B8%80%E4%B8%AAip%E5%9C%B0%E5%9D%80\">/data/script/blacklist.txt</a></h4>\n<h4 id=\"6脚本实现datascriptfirewallsh\"><a class=\"markdownIt-Anchor\" href=\"#6脚本实现datascriptfirewallsh\"></a> (6)脚本实现[/data/script/firewall.sh]</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">iptables -F</span><br><span class=\"line\"></span><br><span class=\"line\">list = /data/script/blacklist.txt</span><br><span class=\"line\"></span><br><span class=\"line\">for line in `cat $list`;do</span><br><span class=\"line\">  iptables -I INPUT -s$line -j DROP</span><br><span class=\"line\">  echo \"$line is dropped into blacklist\"</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<h4 id=\"7脚本解释说明\"><a class=\"markdownIt-Anchor\" href=\"#7脚本解释说明\"></a> (7)脚本解释说明</h4>\n<h5 id=\"1-iptables-f\"><a class=\"markdownIt-Anchor\" href=\"#1-iptables-f\"></a> 1). <code>iptables -F</code></h5>\n<p>清空 iptables 的所有记录</p>\n<h5 id=\"2-for-line-in-cat-listdo\"><a class=\"markdownIt-Anchor\" href=\"#2-for-line-in-cat-listdo\"></a> 2). for line in <code>cat $list</code>;do</h5>\n<p>对/data/script/blacklist.txt 循环输出每一行</p>\n<h5 id=\"3-iptables-i-input-sline-j-drop\"><a class=\"markdownIt-Anchor\" href=\"#3-iptables-i-input-sline-j-drop\"></a> 3). <code>iptables -I INPUT -s$line -j DROP</code></h5>\n<p>添加一个 input 链<br>\n-s 相当于 source，将每一行的数据，传递给 iptables<br>\n-j DROP 相当于一个 drop 操作，将当前主机接收到的数据包进行一个丢弃操作<br>\n=》将 blacklist.txt 中的 ip 地址做一个拒绝访问的操作，使黑名单中的 ip 地址无法访问主机</p>\n<h5 id=\"4-echo-line-is-dropped-into-blacklist\"><a class=\"markdownIt-Anchor\" href=\"#4-echo-line-is-dropped-into-blacklist\"></a> 4). <code>echo &quot;$line is dropped into blacklist&quot;</code></h5>\n<p>对每一行的 ip 地址拒绝访问后，输出一条信息提示</p>\n<h4 id=\"8创建定时任务\"><a class=\"markdownIt-Anchor\" href=\"#8创建定时任务\"></a> (8)创建定时任务</h4>\n<p><code>* * * * * source /etc/profile; sh /data/script/firewall.sh</code></p>\n<h4 id=\"9查看-iptables-拒绝访问主机的-ip-列表\"><a class=\"markdownIt-Anchor\" href=\"#9查看-iptables-拒绝访问主机的-ip-列表\"></a> (9)查看 iptables 拒绝访问主机的 ip 列表</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -nvL</span><br></pre></td></tr></table></figure>\n<h3 id=\"5crontab-在-jenkins-上的扩展\"><a class=\"markdownIt-Anchor\" href=\"#5crontab-在-jenkins-上的扩展\"></a> 5.crontab 在 Jenkins 上的扩展</h3>\n<h4 id=\"1jenkins-介绍\"><a class=\"markdownIt-Anchor\" href=\"#1jenkins-介绍\"></a> (1)Jenkins 介绍</h4>\n<pre><code>java编写的开源、持续、集成工具，最大优势就是将开发人员和运维人员完美的结合在一起。\n</code></pre>\n<h4 id=\"2使用前提\"><a class=\"markdownIt-Anchor\" href=\"#2使用前提\"></a> (2)使用前提</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">yum install jenkins</span><br><span class=\"line\">[y]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看系统java路径</span></span><br><span class=\"line\"><span class=\"built_in\">which</span> java</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看系统java版本</span></span><br><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>[jenkins 要求的最低版本要求配置&gt;1.8.0_111]</p>\n</blockquote>\n<h4 id=\"3编辑-jenkins-的启动配置文件etcinitdjenkins\"><a class=\"markdownIt-Anchor\" href=\"#3编辑-jenkins-的启动配置文件etcinitdjenkins\"></a> (3)编辑 jenkins 的启动配置文件[/etc/init.d/jenkins]</h4>\n<p>[=&gt;搜索 candidates 关键词]<br>\n默认调用的 java 目录是/usr/bin/java 和/usr/lib/jvm/***/bin/java</p>\n<p>添加 java 的路径<br>\n<code>/usr/local/jdk1.8.0_111/bin/java</code></p>\n<h4 id=\"4相关命令\"><a class=\"markdownIt-Anchor\" href=\"#4相关命令\"></a> (4)相关命令</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#启动jenkins服务</span></span><br><span class=\"line\">systemctl start jenkins</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看jenkins服务是否正常启动，并查看jenkins服务是否打开8080端口监听服务</span></span><br><span class=\"line\">lsof -i:8080</span><br></pre></td></tr></table></figure>\n<h4 id=\"5在-web-网页中进行配置并使用-jenkins\"><a class=\"markdownIt-Anchor\" href=\"#5在-web-网页中进行配置并使用-jenkins\"></a> (5)在 web 网页中进行配置并使用 jenkins</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.访问jenkins的后台地址</span></span><br><span class=\"line\">10.110.16.5:8080</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.登录密码保存在系统的目录下</span></span><br><span class=\"line\">/var/lib/jenkins/secrets/initialAdminPassword文件中</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.自定义jenkins=》安装插件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.创建第一个管理员用户</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.创建新任务</span></span><br><span class=\"line\">1)构建自由风格的软件项目</span><br><span class=\"line\">2)构建触发器 =&gt; Build Periodically =&gt; 日程表[相当于crontab定时任务的时间表单] =&gt; * * * * *</span><br><span class=\"line\">3)构建 =&gt; 增加构建步骤 =&gt; Execute shell =&gt; Command[执行定时任务时执行的操作] =&gt; <span class=\"built_in\">echo</span> <span class=\"string\">\"this is a test build\"</span></span><br></pre></td></tr></table></figure>\n<p>【学习参考】：<a href=\"https://www.imooc.com/learn/1009\" target=\"_blank\" rel=\"noopener\">慕课网-Crontab 不知疲倦的时间表</a></p>"},{"title":"PHP性能优化","date":"2018-07-09T00:57:55.000Z","_content":"\nPHP 运行环境的性能考虑在 php 深入学习中需要逐步强化意识，并着手实现，其中对于性能分析的相关工具也需要有一定的掌握，比如压力测试工具 Apache Benchmark，Opcode 代码分析工具 vld，PHP 性能分析工具 XHProf，另外，对于日常编写代码时，也需要考虑 PHP 自身的特性，进行扬长避短，使用 isset 而不用 array_key_exists 方法，以及尽可能规避 PHP 自带的魔术方法。对 PHP 的运行流程也需要有一个大致的了解，知道 Opcode 在 PHP 执行过程中的阶段。需要逐渐加深对 PHP 深层次的思考。\n\n<!--more-->\n\n# PHP 性能优化\n\n## 一、语言级性能优化(一)\n\nPHP 性能问题的解决方向\n\n    PHP语言级别的性能优化 =》 PHP周边问题的性能优化 =》 PHP语言自身分析、优化\n\n### 1.压力测试工具 Apache Benchmark (ab)\n\n#### (1)测试工具基本介绍\n\n1). ab 是由 Apache 提供的压力测试软件，安装 apache 服务器时会自带该压力测试软件\n\n2). 基本使用[Linux 平台]\n\n```bash\n./ab -n1000 -c100 http://www.baidu.com/\n\n# -n 请求数\n# -c 并发数\n# url 目标压力测试地址\n```\n\n3). 参考项\n\n```bash\n# 每秒接收请求数 =》 尽可能大\nRequests per second (mean)\n\n# 每一个请求的耗时情况 =》 尽可能小\nTime per request (mean, across all concurrent requests)\n```\n\n### 2.PHP 自身能力\n\n#### (1)优化点：少写代码，多用 PHP 自身能力\n\n1). 性能问题：自身代码冗余较多，可读性不佳，并且性能低。\n\n2). 为什么性能低：PHP 代码需要编译解释为底层语言，这一过程每次请求都会处理一遍，开销大。\n\n3). 好的方法：多实用 PHP 内置变量、常量、函数。\n\n#### (2)PHP 代码运行流程\n\n```info\n.php文件 =>[zend引擎 Scanner]=> zend exprs => [Parser] => Opcodes(要被执行的代码) => [Exec] => Output\n```\n\n【补充】目前很多 php 的缓存服务使用的都是 opcode，节省了扫描和解析的过程，提升速度。\n\n#### (3)PHP 内置函数之间的性能测试\n\n1). `array_key_exists()` vs `isset()`\n\nphp 执行效率上： isset > array_key_exists\n\n> 【插曲】：在接触的项目中，大多数情况下确实使用的也是 isset()，但是记得某次看到同事写的代码中有 array_key_exists()方法时，自己查看了手册，确认了这个方法的使用方法后，还特地将 isset 换成 array_key_exists 方法进行编写代码，粗浅的认为 array_key_exists()方法要比 isset()方法高级，学习了性能分析之后，顿时觉得之前的认识很是浅陋，也意识到项目中之所有 isset()更为常见是合理的。\n\n## 二、语言级性能优化(二)\n\n### 1.优化点：减少 PHP 魔法函数的使用\n\n#### (1). 情况描述：\n\nPHP 提供的魔法函数，性能不佳\n\n#### (2). 为什么性能低：\n\n为了给 PHP 程序员省事，PHP 语言为你做了很多\n\n#### (3). 好的方法：\n\n尽可能规避使用 PHP 魔法函数\n\n【补充】：命令行模式查看 php 文件执行耗时\n\n```bash\n# time命令\ntime php test.php\n\n# 输出结果\nreal\nuser => 主要参考的耗时\nsys\n```\n\n### 2.优化点： 产生额外开销的错误抑制符 `@`\n\n#### (1).情况描述：\n\nPHP 提供的错误已支付只是为了方便懒人\n\n#### (2). `@` 的实际逻辑：\n\n在代码开始前、结束后，增加 Opcode，忽略报错\nvld - PHP Opcode 查看扩展\n\n#### (3).错误抑制符的性能测试\n\n1)测试文件`at.php`\n\n```php\n//at.php\nfile_get_contens('xxx'); // xxx文件不存在\n```\n\n2)使用 vld 扩展执行`at.php`，查看执行过程的完整 Opcode\n\n`php -dvld.active=1 -dvld.execute=0 at.php`\n\n```bash\n# 不加@错误抑制符时Opcode的执行情况\nSEND_VAL\nDO_FCALL\nRETURN\n\n# 加@错误抑制符时Opcode的执行情况\nBEGIN_SILENCE\nSEND_VAL\nDO_FCALL\nEND_SILENCE\nRETURN\n```\n\n#### (4).好的建议：尽量不要使用@错误抑制符\n\n可以使用 try throw 方式进行错误控制\n\n### 3.优化点： 合理使用内存\n\n#### (1)情况描述：\n\nPHP 有内存回收机制保底，但也要小心使用内存\n\n#### (2)好的建议：\n\n利用 unset()及时释放不使用的内存[注：unset()出现注销不掉的情况]\n\n### 4.优化点： 尽量少的使用正则表达式\n\n#### (1) 情况描述：\n\n正则表达式的回溯开销比较大，\"没有金刚钻别揽瓷器活\"\n\n#### (2) 好的建议：\n\n利用字符串处理函数，实现相同逻辑\n\n### 5.优化点：避免在循环内做运算\n\n#### (1) 情况描述：\n\n循环内的计算式将会被重复计算\n\n#### (2) 代码示例：\n\n```php\n$str = \"hello world\";\nfor ($i=0; $i < strlen($str); $i++) {\n    # code...\n}\n\n// 其中strlen()方法会在每次循环时计算一次\n\n// 进行优化\n$str = \"hello world\";\n$strlen = strlen($str);\nfor ($i=0; $i < $strlen; $i++) {\n    # code...\n}\n```\n\n### 6.优化点： 减少计算密集型业务\n\n#### (1) 情况描述：\n\nPHP 不适合密集型运算的场景[大批量日志分析、大批量数据处理]\n\n#### (2) 为什么？\n\nPHP 语言特性决定了 PHP 不适合做大数据量运算。[需要解析成 C 语言进行运算，C 语言可能几行代码就实现的计算，php 可能需要很多行代码才能实现]\n\n#### (3) PHP 适用场景：\n\n适合衔接 Webserver 与后端服务、UI 呈现[纽带]\n\n### 7.优化点： 务必适用带引号字符串做键值\n\n#### (1) 情况描述：\n\nPHP 会将没有引号的键值当做常量，产生查找常量的开销\n\n【补充】：\n\n```bash\n# 将后台运行的任务放到前台终端运行\nfg\n\n# 相关命令： jobs  bg  fg\n\n# 将任务号为1的任务从后台执行转换到其那台执行。\nfg 1\n\n# 执行上述命令后，命令行窗口将显示如下信息\nfind / -name password\n```\n\n#### (2) 程序说明\n\n```php\ndefine('key', 'imooc');\n\n$array = array(\n    'key' => 'hello world!',\n    'imooc' => 'http://www.imooc.com/'\n);\necho $array[\"key\"] . '\\n'; // 输出 hello world\necho $array[key] . '\\n'; // 输出 http://www.imooc.com/\n```\n\n【说明】：\n\n当时用`$array[key]`时，程序也把 key 作为常量去查找，当查找到时，获取到常量的值；当没查找到时，再到数组内部，将其作为键 key 字符串进行解析\n\n#### (3) 好的建议：\n\n严格使用引号作为键值\n\n## 三、PHP 周边问题的分析与阐述\n\n### 1.PHP 周边范围：\n\nLinux 运行环境\n\n文件存储[磁盘]\n\n数据库[mysql]\n\n缓存[硬件的内存、php 缓存技术：memcache redis]\n\n网络\n\n### 2.PHP 周边对 PHP 程序的影响分析\n\n#### (1) 连接数据库操作\n\n1） 同一台服务器 => 数据库优化 决定时间性能\n\n2） 分布式服务器 => 数据库优化 + 网络速度 决定时间性能\n\n#### (2) 减少文件类操作\n\n1） 常见 PHP 场景的开销次序：\n\n读写磁盘、 读写数据库、读写内存、读写网络数据\n\n2） 时间开销：\n\n        读写内存 <<(远小于) 读写数据库[基于文件系统，操作本地磁盘] <(小于) 读写磁盘 < 读写网络数据\n\n        数据库会使用内存作为缓存，将其热数据先缓存在内存中，异步地写入到数据库 =》 数据库介于内存和磁盘之间\n\n        网络数据：通过socket发起，socket使用的是本地的文件句柄，磁盘操作。受网络延迟影响，延迟大时远远小于读写磁盘，延迟小时和读写磁盘差不多。\n\n3） 总结：\n\n尽可能多的使用读写数据库、读写内存，尽量规避操作磁盘和操作网络数据。\n\n#### (3) 优化网络请求\n\n网络请求的坑：\n\n1.对方接口的不确定因素 2.网络稳定性\n\n如何优化网络请求？\n\n1.设置超时时间\na) 连接超时\nb) 读超时\nc) 写超时\n\n2.将串行请求并行化\na) 使用 curl*multi*\\*() => 最简单，但是并不是最好用\nb) 使用 swoole 扩展 => 效果更好\n\n#### (4) 压缩 PHP 接口输出\n\n1） 如何压缩？\n\n使用 Gzip 即可。\n\n2） 利与弊：\n利： 利于我们的数据输出，Client 端能更快获取数据\n弊： 额外的 CPU 开销\n\n#### (5) PHP 缓存复用\n\n1）什么情况下做输出内容的缓存？\n\n多次请求，内容不变的情况。[模板缓存]\n\n          |---Cached----/\\\n         \\/              |\n        .php <-------> Cache -> No Cache\n                        /\\          |\n                         |---------\\/\n\n#### (6) 重叠时间窗口思想\n\n串行：\n\n    process1[客户端]  process2[web server]  process3[php]  process4[mysql或缓存]\n\n重叠时间窗口：\n\n    process1\n        process2\n            process3\n                process4\n\n使用前提：后一个任务不强依赖于前一个任务的输出或返回。\n\n#### (7) PHP 旁路处理方案\n\n    x.php                         x.php\n      |                             |\n    process1                      process1\n      |                             |---------process2\n    process2                      process3       |\n      |                             |<------------\n    process3                      process4\n      |\n    process4\n\n使用前提：后一个任务不强依赖于前一个任务的输出或返回。\n\n## 四、具体的性能分析\n\n### 1. 借助 xhprof 工具分析 PHP 性能\n\n工具： XHProf [源自 Facebook 的 PHP 性能分析工具]\n\n实践： 分析 Wordpress 程序，做优化\n\n#### (1)准备工作\n\n1） 检查 xhprof 工具是否安装成功\n\n```bash\nphp --ri xhprof\n\n//输出\nxhprof\nxhprof => 0.9.2\nCPU num => 1\n```\n\n2） 在 wordpress 代码中[index.php 文件]\n\n    1.在起始位置添加`xhprof_enable()`进行开启xhprof\n\n    2.在执行结束位置添加`xhprof_disable()`返回性能分析数据\n\n    3.添加xhprof的两个lib文件\n\nwordpress/index.php 代码\n\n```php\nxhprof_enable();\n\ndefine('WP_USE_THEMES', true);\n\nrequire(dirname(__FILE__) . '/wp-blog-header.php');\n\n$data = xhprof_disable();\n\ninclude_once \"/var/www/html/xhprof_lib/utils/xhprof_lib.php\";\ninclude_once \"/var/www/html/xhprof_lib/utils/xhprof_runs.php\";\n\n$objXhprofRun = new XHProfRuns_Default();\n$run_id = $objXhprofRun->save_run($data, \"test\");\nvar_dump($run_id);\n```\n\n3） wordpress 同级目录下的 xhp 目录\n\n    callgraph.php\n    css/\n    docs/\n    index.php\n    jquery/\n    js/\n    typeahead.php\n\n4）浏览器访问 xhp/index.php\n\n    查看列表形式的性能分析 =》 View Full Callgraph =》 查看图形流程分析[查看耗时最长的文件和方法]=>MO::import_from_reader| MO::make_entry\n\n5）查找最需要优化的文件\n\n`grep 'import_from_reader' ./ -r`\n\n6）主要耗时点：`MO::make_entry()` -- 执行的是多语言支持的功能\n\n优化方式：直接注释掉调用的相关代码\n\n【补充】：`MO`和`PO`都是 PHP 处理多语言程序的语言包\n\n7）优化结果：\n\n让程序不再是只有一个或一处相互关联的高消耗代码点。\n\n### 2. PHP 性能分析工具扩展\n\nXHProf -- PHP 性能分析工具\n\nab -- 压力测试\n\nvld -- opcode 代码分析\n\n## 五、PHP 性能瓶颈终极办法\n\n### 1.Opcode Cache: PHP 扩展`APC`\n\n官方地址：[前往](http://pecl.php.net/package-search.php?pkg_name=apc&bool=AND&submit=Search)\n\n已不再更新。\n\n【补充】：`pecl.php.net`是 php 扩展的官方维护站点。了解并使用[类似 APC 的 opcode 缓存扩展](http://pecl.php.net/packages.php?catpid=3&catname=Caching)？\n\nyac - 通过共享内存来缓存用户数据，用于代替 APC 和本地 memcached 的方案。\n\n### 2.扩展实现：通过 PHP 扩展代替原 PHP 代码中高频逻辑\n\n### 3.Runtime 优化： HHVM\n","source":"_posts/php-optimize.md","raw":"---\ntitle: PHP性能优化\ndate: 2018-07-09 08:57:55\ntags:\n  - optimize\ncategory:\n  - 【PHP相关】\n---\n\nPHP 运行环境的性能考虑在 php 深入学习中需要逐步强化意识，并着手实现，其中对于性能分析的相关工具也需要有一定的掌握，比如压力测试工具 Apache Benchmark，Opcode 代码分析工具 vld，PHP 性能分析工具 XHProf，另外，对于日常编写代码时，也需要考虑 PHP 自身的特性，进行扬长避短，使用 isset 而不用 array_key_exists 方法，以及尽可能规避 PHP 自带的魔术方法。对 PHP 的运行流程也需要有一个大致的了解，知道 Opcode 在 PHP 执行过程中的阶段。需要逐渐加深对 PHP 深层次的思考。\n\n<!--more-->\n\n# PHP 性能优化\n\n## 一、语言级性能优化(一)\n\nPHP 性能问题的解决方向\n\n    PHP语言级别的性能优化 =》 PHP周边问题的性能优化 =》 PHP语言自身分析、优化\n\n### 1.压力测试工具 Apache Benchmark (ab)\n\n#### (1)测试工具基本介绍\n\n1). ab 是由 Apache 提供的压力测试软件，安装 apache 服务器时会自带该压力测试软件\n\n2). 基本使用[Linux 平台]\n\n```bash\n./ab -n1000 -c100 http://www.baidu.com/\n\n# -n 请求数\n# -c 并发数\n# url 目标压力测试地址\n```\n\n3). 参考项\n\n```bash\n# 每秒接收请求数 =》 尽可能大\nRequests per second (mean)\n\n# 每一个请求的耗时情况 =》 尽可能小\nTime per request (mean, across all concurrent requests)\n```\n\n### 2.PHP 自身能力\n\n#### (1)优化点：少写代码，多用 PHP 自身能力\n\n1). 性能问题：自身代码冗余较多，可读性不佳，并且性能低。\n\n2). 为什么性能低：PHP 代码需要编译解释为底层语言，这一过程每次请求都会处理一遍，开销大。\n\n3). 好的方法：多实用 PHP 内置变量、常量、函数。\n\n#### (2)PHP 代码运行流程\n\n```info\n.php文件 =>[zend引擎 Scanner]=> zend exprs => [Parser] => Opcodes(要被执行的代码) => [Exec] => Output\n```\n\n【补充】目前很多 php 的缓存服务使用的都是 opcode，节省了扫描和解析的过程，提升速度。\n\n#### (3)PHP 内置函数之间的性能测试\n\n1). `array_key_exists()` vs `isset()`\n\nphp 执行效率上： isset > array_key_exists\n\n> 【插曲】：在接触的项目中，大多数情况下确实使用的也是 isset()，但是记得某次看到同事写的代码中有 array_key_exists()方法时，自己查看了手册，确认了这个方法的使用方法后，还特地将 isset 换成 array_key_exists 方法进行编写代码，粗浅的认为 array_key_exists()方法要比 isset()方法高级，学习了性能分析之后，顿时觉得之前的认识很是浅陋，也意识到项目中之所有 isset()更为常见是合理的。\n\n## 二、语言级性能优化(二)\n\n### 1.优化点：减少 PHP 魔法函数的使用\n\n#### (1). 情况描述：\n\nPHP 提供的魔法函数，性能不佳\n\n#### (2). 为什么性能低：\n\n为了给 PHP 程序员省事，PHP 语言为你做了很多\n\n#### (3). 好的方法：\n\n尽可能规避使用 PHP 魔法函数\n\n【补充】：命令行模式查看 php 文件执行耗时\n\n```bash\n# time命令\ntime php test.php\n\n# 输出结果\nreal\nuser => 主要参考的耗时\nsys\n```\n\n### 2.优化点： 产生额外开销的错误抑制符 `@`\n\n#### (1).情况描述：\n\nPHP 提供的错误已支付只是为了方便懒人\n\n#### (2). `@` 的实际逻辑：\n\n在代码开始前、结束后，增加 Opcode，忽略报错\nvld - PHP Opcode 查看扩展\n\n#### (3).错误抑制符的性能测试\n\n1)测试文件`at.php`\n\n```php\n//at.php\nfile_get_contens('xxx'); // xxx文件不存在\n```\n\n2)使用 vld 扩展执行`at.php`，查看执行过程的完整 Opcode\n\n`php -dvld.active=1 -dvld.execute=0 at.php`\n\n```bash\n# 不加@错误抑制符时Opcode的执行情况\nSEND_VAL\nDO_FCALL\nRETURN\n\n# 加@错误抑制符时Opcode的执行情况\nBEGIN_SILENCE\nSEND_VAL\nDO_FCALL\nEND_SILENCE\nRETURN\n```\n\n#### (4).好的建议：尽量不要使用@错误抑制符\n\n可以使用 try throw 方式进行错误控制\n\n### 3.优化点： 合理使用内存\n\n#### (1)情况描述：\n\nPHP 有内存回收机制保底，但也要小心使用内存\n\n#### (2)好的建议：\n\n利用 unset()及时释放不使用的内存[注：unset()出现注销不掉的情况]\n\n### 4.优化点： 尽量少的使用正则表达式\n\n#### (1) 情况描述：\n\n正则表达式的回溯开销比较大，\"没有金刚钻别揽瓷器活\"\n\n#### (2) 好的建议：\n\n利用字符串处理函数，实现相同逻辑\n\n### 5.优化点：避免在循环内做运算\n\n#### (1) 情况描述：\n\n循环内的计算式将会被重复计算\n\n#### (2) 代码示例：\n\n```php\n$str = \"hello world\";\nfor ($i=0; $i < strlen($str); $i++) {\n    # code...\n}\n\n// 其中strlen()方法会在每次循环时计算一次\n\n// 进行优化\n$str = \"hello world\";\n$strlen = strlen($str);\nfor ($i=0; $i < $strlen; $i++) {\n    # code...\n}\n```\n\n### 6.优化点： 减少计算密集型业务\n\n#### (1) 情况描述：\n\nPHP 不适合密集型运算的场景[大批量日志分析、大批量数据处理]\n\n#### (2) 为什么？\n\nPHP 语言特性决定了 PHP 不适合做大数据量运算。[需要解析成 C 语言进行运算，C 语言可能几行代码就实现的计算，php 可能需要很多行代码才能实现]\n\n#### (3) PHP 适用场景：\n\n适合衔接 Webserver 与后端服务、UI 呈现[纽带]\n\n### 7.优化点： 务必适用带引号字符串做键值\n\n#### (1) 情况描述：\n\nPHP 会将没有引号的键值当做常量，产生查找常量的开销\n\n【补充】：\n\n```bash\n# 将后台运行的任务放到前台终端运行\nfg\n\n# 相关命令： jobs  bg  fg\n\n# 将任务号为1的任务从后台执行转换到其那台执行。\nfg 1\n\n# 执行上述命令后，命令行窗口将显示如下信息\nfind / -name password\n```\n\n#### (2) 程序说明\n\n```php\ndefine('key', 'imooc');\n\n$array = array(\n    'key' => 'hello world!',\n    'imooc' => 'http://www.imooc.com/'\n);\necho $array[\"key\"] . '\\n'; // 输出 hello world\necho $array[key] . '\\n'; // 输出 http://www.imooc.com/\n```\n\n【说明】：\n\n当时用`$array[key]`时，程序也把 key 作为常量去查找，当查找到时，获取到常量的值；当没查找到时，再到数组内部，将其作为键 key 字符串进行解析\n\n#### (3) 好的建议：\n\n严格使用引号作为键值\n\n## 三、PHP 周边问题的分析与阐述\n\n### 1.PHP 周边范围：\n\nLinux 运行环境\n\n文件存储[磁盘]\n\n数据库[mysql]\n\n缓存[硬件的内存、php 缓存技术：memcache redis]\n\n网络\n\n### 2.PHP 周边对 PHP 程序的影响分析\n\n#### (1) 连接数据库操作\n\n1） 同一台服务器 => 数据库优化 决定时间性能\n\n2） 分布式服务器 => 数据库优化 + 网络速度 决定时间性能\n\n#### (2) 减少文件类操作\n\n1） 常见 PHP 场景的开销次序：\n\n读写磁盘、 读写数据库、读写内存、读写网络数据\n\n2） 时间开销：\n\n        读写内存 <<(远小于) 读写数据库[基于文件系统，操作本地磁盘] <(小于) 读写磁盘 < 读写网络数据\n\n        数据库会使用内存作为缓存，将其热数据先缓存在内存中，异步地写入到数据库 =》 数据库介于内存和磁盘之间\n\n        网络数据：通过socket发起，socket使用的是本地的文件句柄，磁盘操作。受网络延迟影响，延迟大时远远小于读写磁盘，延迟小时和读写磁盘差不多。\n\n3） 总结：\n\n尽可能多的使用读写数据库、读写内存，尽量规避操作磁盘和操作网络数据。\n\n#### (3) 优化网络请求\n\n网络请求的坑：\n\n1.对方接口的不确定因素 2.网络稳定性\n\n如何优化网络请求？\n\n1.设置超时时间\na) 连接超时\nb) 读超时\nc) 写超时\n\n2.将串行请求并行化\na) 使用 curl*multi*\\*() => 最简单，但是并不是最好用\nb) 使用 swoole 扩展 => 效果更好\n\n#### (4) 压缩 PHP 接口输出\n\n1） 如何压缩？\n\n使用 Gzip 即可。\n\n2） 利与弊：\n利： 利于我们的数据输出，Client 端能更快获取数据\n弊： 额外的 CPU 开销\n\n#### (5) PHP 缓存复用\n\n1）什么情况下做输出内容的缓存？\n\n多次请求，内容不变的情况。[模板缓存]\n\n          |---Cached----/\\\n         \\/              |\n        .php <-------> Cache -> No Cache\n                        /\\          |\n                         |---------\\/\n\n#### (6) 重叠时间窗口思想\n\n串行：\n\n    process1[客户端]  process2[web server]  process3[php]  process4[mysql或缓存]\n\n重叠时间窗口：\n\n    process1\n        process2\n            process3\n                process4\n\n使用前提：后一个任务不强依赖于前一个任务的输出或返回。\n\n#### (7) PHP 旁路处理方案\n\n    x.php                         x.php\n      |                             |\n    process1                      process1\n      |                             |---------process2\n    process2                      process3       |\n      |                             |<------------\n    process3                      process4\n      |\n    process4\n\n使用前提：后一个任务不强依赖于前一个任务的输出或返回。\n\n## 四、具体的性能分析\n\n### 1. 借助 xhprof 工具分析 PHP 性能\n\n工具： XHProf [源自 Facebook 的 PHP 性能分析工具]\n\n实践： 分析 Wordpress 程序，做优化\n\n#### (1)准备工作\n\n1） 检查 xhprof 工具是否安装成功\n\n```bash\nphp --ri xhprof\n\n//输出\nxhprof\nxhprof => 0.9.2\nCPU num => 1\n```\n\n2） 在 wordpress 代码中[index.php 文件]\n\n    1.在起始位置添加`xhprof_enable()`进行开启xhprof\n\n    2.在执行结束位置添加`xhprof_disable()`返回性能分析数据\n\n    3.添加xhprof的两个lib文件\n\nwordpress/index.php 代码\n\n```php\nxhprof_enable();\n\ndefine('WP_USE_THEMES', true);\n\nrequire(dirname(__FILE__) . '/wp-blog-header.php');\n\n$data = xhprof_disable();\n\ninclude_once \"/var/www/html/xhprof_lib/utils/xhprof_lib.php\";\ninclude_once \"/var/www/html/xhprof_lib/utils/xhprof_runs.php\";\n\n$objXhprofRun = new XHProfRuns_Default();\n$run_id = $objXhprofRun->save_run($data, \"test\");\nvar_dump($run_id);\n```\n\n3） wordpress 同级目录下的 xhp 目录\n\n    callgraph.php\n    css/\n    docs/\n    index.php\n    jquery/\n    js/\n    typeahead.php\n\n4）浏览器访问 xhp/index.php\n\n    查看列表形式的性能分析 =》 View Full Callgraph =》 查看图形流程分析[查看耗时最长的文件和方法]=>MO::import_from_reader| MO::make_entry\n\n5）查找最需要优化的文件\n\n`grep 'import_from_reader' ./ -r`\n\n6）主要耗时点：`MO::make_entry()` -- 执行的是多语言支持的功能\n\n优化方式：直接注释掉调用的相关代码\n\n【补充】：`MO`和`PO`都是 PHP 处理多语言程序的语言包\n\n7）优化结果：\n\n让程序不再是只有一个或一处相互关联的高消耗代码点。\n\n### 2. PHP 性能分析工具扩展\n\nXHProf -- PHP 性能分析工具\n\nab -- 压力测试\n\nvld -- opcode 代码分析\n\n## 五、PHP 性能瓶颈终极办法\n\n### 1.Opcode Cache: PHP 扩展`APC`\n\n官方地址：[前往](http://pecl.php.net/package-search.php?pkg_name=apc&bool=AND&submit=Search)\n\n已不再更新。\n\n【补充】：`pecl.php.net`是 php 扩展的官方维护站点。了解并使用[类似 APC 的 opcode 缓存扩展](http://pecl.php.net/packages.php?catpid=3&catname=Caching)？\n\nyac - 通过共享内存来缓存用户数据，用于代替 APC 和本地 memcached 的方案。\n\n### 2.扩展实现：通过 PHP 扩展代替原 PHP 代码中高频逻辑\n\n### 3.Runtime 优化： HHVM\n","slug":"php-optimize","published":1,"updated":"2019-05-12T15:55:41.403Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c43200662wuuf4dq3qgf","content":"<p>PHP 运行环境的性能考虑在 php 深入学习中需要逐步强化意识，并着手实现，其中对于性能分析的相关工具也需要有一定的掌握，比如压力测试工具 Apache Benchmark，Opcode 代码分析工具 vld，PHP 性能分析工具 XHProf，另外，对于日常编写代码时，也需要考虑 PHP 自身的特性，进行扬长避短，使用 isset 而不用 array_key_exists 方法，以及尽可能规避 PHP 自带的魔术方法。对 PHP 的运行流程也需要有一个大致的了解，知道 Opcode 在 PHP 执行过程中的阶段。需要逐渐加深对 PHP 深层次的思考。</p>\n<a id=\"more\"></a>\n<h1 id=\"php-性能优化\"><a class=\"markdownIt-Anchor\" href=\"#php-性能优化\"></a> PHP 性能优化</h1>\n<h2 id=\"一-语言级性能优化一\"><a class=\"markdownIt-Anchor\" href=\"#一-语言级性能优化一\"></a> 一、语言级性能优化(一)</h2>\n<p>PHP 性能问题的解决方向</p>\n<pre><code>PHP语言级别的性能优化 =》 PHP周边问题的性能优化 =》 PHP语言自身分析、优化\n</code></pre>\n<h3 id=\"1压力测试工具-apache-benchmark-ab\"><a class=\"markdownIt-Anchor\" href=\"#1压力测试工具-apache-benchmark-ab\"></a> 1.压力测试工具 Apache Benchmark (ab)</h3>\n<h4 id=\"1测试工具基本介绍\"><a class=\"markdownIt-Anchor\" href=\"#1测试工具基本介绍\"></a> (1)测试工具基本介绍</h4>\n<p>1). ab 是由 Apache 提供的压力测试软件，安装 apache 服务器时会自带该压力测试软件</p>\n<p>2). 基本使用[Linux 平台]</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./ab -n1000 -c100 http://www.baidu.com/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -n 请求数</span></span><br><span class=\"line\"><span class=\"comment\"># -c 并发数</span></span><br><span class=\"line\"><span class=\"comment\"># url 目标压力测试地址</span></span><br></pre></td></tr></table></figure>\n<p>3). 参考项</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 每秒接收请求数 =》 尽可能大</span></span><br><span class=\"line\">Requests per second (mean)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 每一个请求的耗时情况 =》 尽可能小</span></span><br><span class=\"line\">Time per request (mean, across all concurrent requests)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2php-自身能力\"><a class=\"markdownIt-Anchor\" href=\"#2php-自身能力\"></a> 2.PHP 自身能力</h3>\n<h4 id=\"1优化点少写代码多用-php-自身能力\"><a class=\"markdownIt-Anchor\" href=\"#1优化点少写代码多用-php-自身能力\"></a> (1)优化点：少写代码，多用 PHP 自身能力</h4>\n<p>1). 性能问题：自身代码冗余较多，可读性不佳，并且性能低。</p>\n<p>2). 为什么性能低：PHP 代码需要编译解释为底层语言，这一过程每次请求都会处理一遍，开销大。</p>\n<p>3). 好的方法：多实用 PHP 内置变量、常量、函数。</p>\n<h4 id=\"2php-代码运行流程\"><a class=\"markdownIt-Anchor\" href=\"#2php-代码运行流程\"></a> (2)PHP 代码运行流程</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.php文件 =&gt;[zend引擎 Scanner]=&gt; zend exprs =&gt; [Parser] =&gt; Opcodes(要被执行的代码) =&gt; [Exec] =&gt; Output</span><br></pre></td></tr></table></figure>\n<p>【补充】目前很多 php 的缓存服务使用的都是 opcode，节省了扫描和解析的过程，提升速度。</p>\n<h4 id=\"3php-内置函数之间的性能测试\"><a class=\"markdownIt-Anchor\" href=\"#3php-内置函数之间的性能测试\"></a> (3)PHP 内置函数之间的性能测试</h4>\n<p>1). <code>array_key_exists()</code> vs <code>isset()</code></p>\n<p>php 执行效率上： isset &gt; array_key_exists</p>\n<blockquote>\n<p>【插曲】：在接触的项目中，大多数情况下确实使用的也是 isset()，但是记得某次看到同事写的代码中有 array_key_exists()方法时，自己查看了手册，确认了这个方法的使用方法后，还特地将 isset 换成 array_key_exists 方法进行编写代码，粗浅的认为 array_key_exists()方法要比 isset()方法高级，学习了性能分析之后，顿时觉得之前的认识很是浅陋，也意识到项目中之所有 isset()更为常见是合理的。</p>\n</blockquote>\n<h2 id=\"二-语言级性能优化二\"><a class=\"markdownIt-Anchor\" href=\"#二-语言级性能优化二\"></a> 二、语言级性能优化(二)</h2>\n<h3 id=\"1优化点减少-php-魔法函数的使用\"><a class=\"markdownIt-Anchor\" href=\"#1优化点减少-php-魔法函数的使用\"></a> 1.优化点：减少 PHP 魔法函数的使用</h3>\n<h4 id=\"1-情况描述\"><a class=\"markdownIt-Anchor\" href=\"#1-情况描述\"></a> (1). 情况描述：</h4>\n<p>PHP 提供的魔法函数，性能不佳</p>\n<h4 id=\"2-为什么性能低\"><a class=\"markdownIt-Anchor\" href=\"#2-为什么性能低\"></a> (2). 为什么性能低：</h4>\n<p>为了给 PHP 程序员省事，PHP 语言为你做了很多</p>\n<h4 id=\"3-好的方法\"><a class=\"markdownIt-Anchor\" href=\"#3-好的方法\"></a> (3). 好的方法：</h4>\n<p>尽可能规避使用 PHP 魔法函数</p>\n<p>【补充】：命令行模式查看 php 文件执行耗时</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># time命令</span></span><br><span class=\"line\">time php test.php</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出结果</span></span><br><span class=\"line\">real</span><br><span class=\"line\">user =&gt; 主要参考的耗时</span><br><span class=\"line\">sys</span><br></pre></td></tr></table></figure>\n<h3 id=\"2优化点-产生额外开销的错误抑制符\"><a class=\"markdownIt-Anchor\" href=\"#2优化点-产生额外开销的错误抑制符\"></a> 2.优化点： 产生额外开销的错误抑制符 <code>@</code></h3>\n<h4 id=\"1情况描述\"><a class=\"markdownIt-Anchor\" href=\"#1情况描述\"></a> (1).情况描述：</h4>\n<p>PHP 提供的错误已支付只是为了方便懒人</p>\n<h4 id=\"2-的实际逻辑\"><a class=\"markdownIt-Anchor\" href=\"#2-的实际逻辑\"></a> (2). <code>@</code> 的实际逻辑：</h4>\n<p>在代码开始前、结束后，增加 Opcode，忽略报错<br>\nvld - PHP Opcode 查看扩展</p>\n<h4 id=\"3错误抑制符的性能测试\"><a class=\"markdownIt-Anchor\" href=\"#3错误抑制符的性能测试\"></a> (3).错误抑制符的性能测试</h4>\n<p>1)测试文件<code>at.php</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//at.php</span></span><br><span class=\"line\">file_get_contens(<span class=\"string\">'xxx'</span>); <span class=\"comment\">// xxx文件不存在</span></span><br></pre></td></tr></table></figure>\n<p>2)使用 vld 扩展执行<code>at.php</code>，查看执行过程的完整 Opcode</p>\n<p><code>php -dvld.active=1 -dvld.execute=0 at.php</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 不加@错误抑制符时Opcode的执行情况</span></span><br><span class=\"line\">SEND_VAL</span><br><span class=\"line\">DO_FCALL</span><br><span class=\"line\">RETURN</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 加@错误抑制符时Opcode的执行情况</span></span><br><span class=\"line\">BEGIN_SILENCE</span><br><span class=\"line\">SEND_VAL</span><br><span class=\"line\">DO_FCALL</span><br><span class=\"line\">END_SILENCE</span><br><span class=\"line\">RETURN</span><br></pre></td></tr></table></figure>\n<h4 id=\"4好的建议尽量不要使用错误抑制符\"><a class=\"markdownIt-Anchor\" href=\"#4好的建议尽量不要使用错误抑制符\"></a> (4).好的建议：尽量不要使用@错误抑制符</h4>\n<p>可以使用 try throw 方式进行错误控制</p>\n<h3 id=\"3优化点-合理使用内存\"><a class=\"markdownIt-Anchor\" href=\"#3优化点-合理使用内存\"></a> 3.优化点： 合理使用内存</h3>\n<h4 id=\"1情况描述-2\"><a class=\"markdownIt-Anchor\" href=\"#1情况描述-2\"></a> (1)情况描述：</h4>\n<p>PHP 有内存回收机制保底，但也要小心使用内存</p>\n<h4 id=\"2好的建议\"><a class=\"markdownIt-Anchor\" href=\"#2好的建议\"></a> (2)好的建议：</h4>\n<p>利用 unset()及时释放不使用的内存[注：unset()出现注销不掉的情况]</p>\n<h3 id=\"4优化点-尽量少的使用正则表达式\"><a class=\"markdownIt-Anchor\" href=\"#4优化点-尽量少的使用正则表达式\"></a> 4.优化点： 尽量少的使用正则表达式</h3>\n<h4 id=\"1-情况描述-2\"><a class=\"markdownIt-Anchor\" href=\"#1-情况描述-2\"></a> (1) 情况描述：</h4>\n<p>正则表达式的回溯开销比较大，“没有金刚钻别揽瓷器活”</p>\n<h4 id=\"2-好的建议\"><a class=\"markdownIt-Anchor\" href=\"#2-好的建议\"></a> (2) 好的建议：</h4>\n<p>利用字符串处理函数，实现相同逻辑</p>\n<h3 id=\"5优化点避免在循环内做运算\"><a class=\"markdownIt-Anchor\" href=\"#5优化点避免在循环内做运算\"></a> 5.优化点：避免在循环内做运算</h3>\n<h4 id=\"1-情况描述-3\"><a class=\"markdownIt-Anchor\" href=\"#1-情况描述-3\"></a> (1) 情况描述：</h4>\n<p>循环内的计算式将会被重复计算</p>\n<h4 id=\"2-代码示例\"><a class=\"markdownIt-Anchor\" href=\"#2-代码示例\"></a> (2) 代码示例：</h4>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$str = <span class=\"string\">\"hello world\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> ($i=<span class=\"number\">0</span>; $i &lt; strlen($str); $i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\"># code...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 其中strlen()方法会在每次循环时计算一次</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 进行优化</span></span><br><span class=\"line\">$str = <span class=\"string\">\"hello world\"</span>;</span><br><span class=\"line\">$strlen = strlen($str);</span><br><span class=\"line\"><span class=\"keyword\">for</span> ($i=<span class=\"number\">0</span>; $i &lt; $strlen; $i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\"># code...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6优化点-减少计算密集型业务\"><a class=\"markdownIt-Anchor\" href=\"#6优化点-减少计算密集型业务\"></a> 6.优化点： 减少计算密集型业务</h3>\n<h4 id=\"1-情况描述-4\"><a class=\"markdownIt-Anchor\" href=\"#1-情况描述-4\"></a> (1) 情况描述：</h4>\n<p>PHP 不适合密集型运算的场景[大批量日志分析、大批量数据处理]</p>\n<h4 id=\"2-为什么\"><a class=\"markdownIt-Anchor\" href=\"#2-为什么\"></a> (2) 为什么？</h4>\n<p>PHP 语言特性决定了 PHP 不适合做大数据量运算。[需要解析成 C 语言进行运算，C 语言可能几行代码就实现的计算，php 可能需要很多行代码才能实现]</p>\n<h4 id=\"3-php-适用场景\"><a class=\"markdownIt-Anchor\" href=\"#3-php-适用场景\"></a> (3) PHP 适用场景：</h4>\n<p>适合衔接 Webserver 与后端服务、UI 呈现[纽带]</p>\n<h3 id=\"7优化点-务必适用带引号字符串做键值\"><a class=\"markdownIt-Anchor\" href=\"#7优化点-务必适用带引号字符串做键值\"></a> 7.优化点： 务必适用带引号字符串做键值</h3>\n<h4 id=\"1-情况描述-5\"><a class=\"markdownIt-Anchor\" href=\"#1-情况描述-5\"></a> (1) 情况描述：</h4>\n<p>PHP 会将没有引号的键值当做常量，产生查找常量的开销</p>\n<p>【补充】：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将后台运行的任务放到前台终端运行</span></span><br><span class=\"line\"><span class=\"built_in\">fg</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 相关命令： jobs  bg  fg</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将任务号为1的任务从后台执行转换到其那台执行。</span></span><br><span class=\"line\"><span class=\"built_in\">fg</span> 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行上述命令后，命令行窗口将显示如下信息</span></span><br><span class=\"line\">find / -name password</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-程序说明\"><a class=\"markdownIt-Anchor\" href=\"#2-程序说明\"></a> (2) 程序说明</h4>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"string\">'key'</span>, <span class=\"string\">'imooc'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">$array = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">    <span class=\"string\">'key'</span> =&gt; <span class=\"string\">'hello world!'</span>,</span><br><span class=\"line\">    <span class=\"string\">'imooc'</span> =&gt; <span class=\"string\">'http://www.imooc.com/'</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $array[<span class=\"string\">\"key\"</span>] . <span class=\"string\">'\\n'</span>; <span class=\"comment\">// 输出 hello world</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $array[key] . <span class=\"string\">'\\n'</span>; <span class=\"comment\">// 输出 http://www.imooc.com/</span></span><br></pre></td></tr></table></figure>\n<p>【说明】：</p>\n<p>当时用<code>$array[key]</code>时，程序也把 key 作为常量去查找，当查找到时，获取到常量的值；当没查找到时，再到数组内部，将其作为键 key 字符串进行解析</p>\n<h4 id=\"3-好的建议\"><a class=\"markdownIt-Anchor\" href=\"#3-好的建议\"></a> (3) 好的建议：</h4>\n<p>严格使用引号作为键值</p>\n<h2 id=\"三-php-周边问题的分析与阐述\"><a class=\"markdownIt-Anchor\" href=\"#三-php-周边问题的分析与阐述\"></a> 三、PHP 周边问题的分析与阐述</h2>\n<h3 id=\"1php-周边范围\"><a class=\"markdownIt-Anchor\" href=\"#1php-周边范围\"></a> 1.PHP 周边范围：</h3>\n<p>Linux 运行环境</p>\n<p>文件存储[磁盘]</p>\n<p>数据库[mysql]</p>\n<p>缓存[硬件的内存、php 缓存技术：memcache redis]</p>\n<p>网络</p>\n<h3 id=\"2php-周边对-php-程序的影响分析\"><a class=\"markdownIt-Anchor\" href=\"#2php-周边对-php-程序的影响分析\"></a> 2.PHP 周边对 PHP 程序的影响分析</h3>\n<h4 id=\"1-连接数据库操作\"><a class=\"markdownIt-Anchor\" href=\"#1-连接数据库操作\"></a> (1) 连接数据库操作</h4>\n<p>1） 同一台服务器 =&gt; 数据库优化 决定时间性能</p>\n<p>2） 分布式服务器 =&gt; 数据库优化 + 网络速度 决定时间性能</p>\n<h4 id=\"2-减少文件类操作\"><a class=\"markdownIt-Anchor\" href=\"#2-减少文件类操作\"></a> (2) 减少文件类操作</h4>\n<p>1） 常见 PHP 场景的开销次序：</p>\n<p>读写磁盘、 读写数据库、读写内存、读写网络数据</p>\n<p>2） 时间开销：</p>\n<pre><code>    读写内存 &lt;&lt;(远小于) 读写数据库[基于文件系统，操作本地磁盘] &lt;(小于) 读写磁盘 &lt; 读写网络数据\n\n    数据库会使用内存作为缓存，将其热数据先缓存在内存中，异步地写入到数据库 =》 数据库介于内存和磁盘之间\n\n    网络数据：通过socket发起，socket使用的是本地的文件句柄，磁盘操作。受网络延迟影响，延迟大时远远小于读写磁盘，延迟小时和读写磁盘差不多。\n</code></pre>\n<p>3） 总结：</p>\n<p>尽可能多的使用读写数据库、读写内存，尽量规避操作磁盘和操作网络数据。</p>\n<h4 id=\"3-优化网络请求\"><a class=\"markdownIt-Anchor\" href=\"#3-优化网络请求\"></a> (3) 优化网络请求</h4>\n<p>网络请求的坑：</p>\n<p>1.对方接口的不确定因素 2.网络稳定性</p>\n<p>如何优化网络请求？</p>\n<p>1.设置超时时间<br>\na) 连接超时<br>\nb) 读超时<br>\nc) 写超时</p>\n<p>2.将串行请求并行化<br>\na) 使用 curl<em>multi</em>*() =&gt; 最简单，但是并不是最好用<br>\nb) 使用 swoole 扩展 =&gt; 效果更好</p>\n<h4 id=\"4-压缩-php-接口输出\"><a class=\"markdownIt-Anchor\" href=\"#4-压缩-php-接口输出\"></a> (4) 压缩 PHP 接口输出</h4>\n<p>1） 如何压缩？</p>\n<p>使用 Gzip 即可。</p>\n<p>2） 利与弊：<br>\n利： 利于我们的数据输出，Client 端能更快获取数据<br>\n弊： 额外的 CPU 开销</p>\n<h4 id=\"5-php-缓存复用\"><a class=\"markdownIt-Anchor\" href=\"#5-php-缓存复用\"></a> (5) PHP 缓存复用</h4>\n<p>1）什么情况下做输出内容的缓存？</p>\n<p>多次请求，内容不变的情况。[模板缓存]</p>\n<pre><code>      |---Cached----/\\\n     \\/              |\n    .php &lt;-------&gt; Cache -&gt; No Cache\n                    /\\          |\n                     |---------\\/\n</code></pre>\n<h4 id=\"6-重叠时间窗口思想\"><a class=\"markdownIt-Anchor\" href=\"#6-重叠时间窗口思想\"></a> (6) 重叠时间窗口思想</h4>\n<p>串行：</p>\n<pre><code>process1[客户端]  process2[web server]  process3[php]  process4[mysql或缓存]\n</code></pre>\n<p>重叠时间窗口：</p>\n<pre><code>process1\n    process2\n        process3\n            process4\n</code></pre>\n<p>使用前提：后一个任务不强依赖于前一个任务的输出或返回。</p>\n<h4 id=\"7-php-旁路处理方案\"><a class=\"markdownIt-Anchor\" href=\"#7-php-旁路处理方案\"></a> (7) PHP 旁路处理方案</h4>\n<pre><code>x.php                         x.php\n  |                             |\nprocess1                      process1\n  |                             |---------process2\nprocess2                      process3       |\n  |                             |&lt;------------\nprocess3                      process4\n  |\nprocess4\n</code></pre>\n<p>使用前提：后一个任务不强依赖于前一个任务的输出或返回。</p>\n<h2 id=\"四-具体的性能分析\"><a class=\"markdownIt-Anchor\" href=\"#四-具体的性能分析\"></a> 四、具体的性能分析</h2>\n<h3 id=\"1-借助-xhprof-工具分析-php-性能\"><a class=\"markdownIt-Anchor\" href=\"#1-借助-xhprof-工具分析-php-性能\"></a> 1. 借助 xhprof 工具分析 PHP 性能</h3>\n<p>工具： XHProf [源自 Facebook 的 PHP 性能分析工具]</p>\n<p>实践： 分析 Wordpress 程序，做优化</p>\n<h4 id=\"1准备工作\"><a class=\"markdownIt-Anchor\" href=\"#1准备工作\"></a> (1)准备工作</h4>\n<p>1） 检查 xhprof 工具是否安装成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php --ri xhprof</span><br><span class=\"line\"></span><br><span class=\"line\">//输出</span><br><span class=\"line\">xhprof</span><br><span class=\"line\">xhprof =&gt; 0.9.2</span><br><span class=\"line\">CPU num =&gt; 1</span><br></pre></td></tr></table></figure>\n<p>2） 在 wordpress 代码中[index.php 文件]</p>\n<pre><code>1.在起始位置添加`xhprof_enable()`进行开启xhprof\n\n2.在执行结束位置添加`xhprof_disable()`返回性能分析数据\n\n3.添加xhprof的两个lib文件\n</code></pre>\n<p>wordpress/index.php 代码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhprof_enable();</span><br><span class=\"line\"></span><br><span class=\"line\">define(<span class=\"string\">'WP_USE_THEMES'</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">require</span>(dirname(<span class=\"keyword\">__FILE__</span>) . <span class=\"string\">'/wp-blog-header.php'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">$data = xhprof_disable();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include_once</span> <span class=\"string\">\"/var/www/html/xhprof_lib/utils/xhprof_lib.php\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">include_once</span> <span class=\"string\">\"/var/www/html/xhprof_lib/utils/xhprof_runs.php\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">$objXhprofRun = <span class=\"keyword\">new</span> XHProfRuns_Default();</span><br><span class=\"line\">$run_id = $objXhprofRun-&gt;save_run($data, <span class=\"string\">\"test\"</span>);</span><br><span class=\"line\">var_dump($run_id);</span><br></pre></td></tr></table></figure>\n<p>3） wordpress 同级目录下的 xhp 目录</p>\n<pre><code>callgraph.php\ncss/\ndocs/\nindex.php\njquery/\njs/\ntypeahead.php\n</code></pre>\n<p>4）浏览器访问 xhp/index.php</p>\n<pre><code>查看列表形式的性能分析 =》 View Full Callgraph =》 查看图形流程分析[查看耗时最长的文件和方法]=&gt;MO::import_from_reader| MO::make_entry\n</code></pre>\n<p>5）查找最需要优化的文件</p>\n<p><code>grep 'import_from_reader' ./ -r</code></p>\n<p>6）主要耗时点：<code>MO::make_entry()</code> – 执行的是多语言支持的功能</p>\n<p>优化方式：直接注释掉调用的相关代码</p>\n<p>【补充】：<code>MO</code>和<code>PO</code>都是 PHP 处理多语言程序的语言包</p>\n<p>7）优化结果：</p>\n<p>让程序不再是只有一个或一处相互关联的高消耗代码点。</p>\n<h3 id=\"2-php-性能分析工具扩展\"><a class=\"markdownIt-Anchor\" href=\"#2-php-性能分析工具扩展\"></a> 2. PHP 性能分析工具扩展</h3>\n<p>XHProf – PHP 性能分析工具</p>\n<p>ab – 压力测试</p>\n<p>vld – opcode 代码分析</p>\n<h2 id=\"五-php-性能瓶颈终极办法\"><a class=\"markdownIt-Anchor\" href=\"#五-php-性能瓶颈终极办法\"></a> 五、PHP 性能瓶颈终极办法</h2>\n<h3 id=\"1opcode-cache-php-扩展apc\"><a class=\"markdownIt-Anchor\" href=\"#1opcode-cache-php-扩展apc\"></a> 1.Opcode Cache: PHP 扩展<code>APC</code></h3>\n<p>官方地址：<a href=\"http://pecl.php.net/package-search.php?pkg_name=apc&amp;bool=AND&amp;submit=Search\" target=\"_blank\" rel=\"noopener\">前往</a></p>\n<p>已不再更新。</p>\n<p>【补充】：<code>pecl.php.net</code>是 php 扩展的官方维护站点。了解并使用<a href=\"http://pecl.php.net/packages.php?catpid=3&amp;catname=Caching\" target=\"_blank\" rel=\"noopener\">类似 APC 的 opcode 缓存扩展</a>？</p>\n<p>yac - 通过共享内存来缓存用户数据，用于代替 APC 和本地 memcached 的方案。</p>\n<h3 id=\"2扩展实现通过-php-扩展代替原-php-代码中高频逻辑\"><a class=\"markdownIt-Anchor\" href=\"#2扩展实现通过-php-扩展代替原-php-代码中高频逻辑\"></a> 2.扩展实现：通过 PHP 扩展代替原 PHP 代码中高频逻辑</h3>\n<h3 id=\"3runtime-优化-hhvm\"><a class=\"markdownIt-Anchor\" href=\"#3runtime-优化-hhvm\"></a> 3.Runtime 优化： HHVM</h3>\n","site":{"data":{}},"excerpt":"<p>PHP 运行环境的性能考虑在 php 深入学习中需要逐步强化意识，并着手实现，其中对于性能分析的相关工具也需要有一定的掌握，比如压力测试工具 Apache Benchmark，Opcode 代码分析工具 vld，PHP 性能分析工具 XHProf，另外，对于日常编写代码时，也需要考虑 PHP 自身的特性，进行扬长避短，使用 isset 而不用 array_key_exists 方法，以及尽可能规避 PHP 自带的魔术方法。对 PHP 的运行流程也需要有一个大致的了解，知道 Opcode 在 PHP 执行过程中的阶段。需要逐渐加深对 PHP 深层次的思考。</p>","more":"<h1 id=\"php-性能优化\"><a class=\"markdownIt-Anchor\" href=\"#php-性能优化\"></a> PHP 性能优化</h1>\n<h2 id=\"一-语言级性能优化一\"><a class=\"markdownIt-Anchor\" href=\"#一-语言级性能优化一\"></a> 一、语言级性能优化(一)</h2>\n<p>PHP 性能问题的解决方向</p>\n<pre><code>PHP语言级别的性能优化 =》 PHP周边问题的性能优化 =》 PHP语言自身分析、优化\n</code></pre>\n<h3 id=\"1压力测试工具-apache-benchmark-ab\"><a class=\"markdownIt-Anchor\" href=\"#1压力测试工具-apache-benchmark-ab\"></a> 1.压力测试工具 Apache Benchmark (ab)</h3>\n<h4 id=\"1测试工具基本介绍\"><a class=\"markdownIt-Anchor\" href=\"#1测试工具基本介绍\"></a> (1)测试工具基本介绍</h4>\n<p>1). ab 是由 Apache 提供的压力测试软件，安装 apache 服务器时会自带该压力测试软件</p>\n<p>2). 基本使用[Linux 平台]</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./ab -n1000 -c100 http://www.baidu.com/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -n 请求数</span></span><br><span class=\"line\"><span class=\"comment\"># -c 并发数</span></span><br><span class=\"line\"><span class=\"comment\"># url 目标压力测试地址</span></span><br></pre></td></tr></table></figure>\n<p>3). 参考项</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 每秒接收请求数 =》 尽可能大</span></span><br><span class=\"line\">Requests per second (mean)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 每一个请求的耗时情况 =》 尽可能小</span></span><br><span class=\"line\">Time per request (mean, across all concurrent requests)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2php-自身能力\"><a class=\"markdownIt-Anchor\" href=\"#2php-自身能力\"></a> 2.PHP 自身能力</h3>\n<h4 id=\"1优化点少写代码多用-php-自身能力\"><a class=\"markdownIt-Anchor\" href=\"#1优化点少写代码多用-php-自身能力\"></a> (1)优化点：少写代码，多用 PHP 自身能力</h4>\n<p>1). 性能问题：自身代码冗余较多，可读性不佳，并且性能低。</p>\n<p>2). 为什么性能低：PHP 代码需要编译解释为底层语言，这一过程每次请求都会处理一遍，开销大。</p>\n<p>3). 好的方法：多实用 PHP 内置变量、常量、函数。</p>\n<h4 id=\"2php-代码运行流程\"><a class=\"markdownIt-Anchor\" href=\"#2php-代码运行流程\"></a> (2)PHP 代码运行流程</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.php文件 =&gt;[zend引擎 Scanner]=&gt; zend exprs =&gt; [Parser] =&gt; Opcodes(要被执行的代码) =&gt; [Exec] =&gt; Output</span><br></pre></td></tr></table></figure>\n<p>【补充】目前很多 php 的缓存服务使用的都是 opcode，节省了扫描和解析的过程，提升速度。</p>\n<h4 id=\"3php-内置函数之间的性能测试\"><a class=\"markdownIt-Anchor\" href=\"#3php-内置函数之间的性能测试\"></a> (3)PHP 内置函数之间的性能测试</h4>\n<p>1). <code>array_key_exists()</code> vs <code>isset()</code></p>\n<p>php 执行效率上： isset &gt; array_key_exists</p>\n<blockquote>\n<p>【插曲】：在接触的项目中，大多数情况下确实使用的也是 isset()，但是记得某次看到同事写的代码中有 array_key_exists()方法时，自己查看了手册，确认了这个方法的使用方法后，还特地将 isset 换成 array_key_exists 方法进行编写代码，粗浅的认为 array_key_exists()方法要比 isset()方法高级，学习了性能分析之后，顿时觉得之前的认识很是浅陋，也意识到项目中之所有 isset()更为常见是合理的。</p>\n</blockquote>\n<h2 id=\"二-语言级性能优化二\"><a class=\"markdownIt-Anchor\" href=\"#二-语言级性能优化二\"></a> 二、语言级性能优化(二)</h2>\n<h3 id=\"1优化点减少-php-魔法函数的使用\"><a class=\"markdownIt-Anchor\" href=\"#1优化点减少-php-魔法函数的使用\"></a> 1.优化点：减少 PHP 魔法函数的使用</h3>\n<h4 id=\"1-情况描述\"><a class=\"markdownIt-Anchor\" href=\"#1-情况描述\"></a> (1). 情况描述：</h4>\n<p>PHP 提供的魔法函数，性能不佳</p>\n<h4 id=\"2-为什么性能低\"><a class=\"markdownIt-Anchor\" href=\"#2-为什么性能低\"></a> (2). 为什么性能低：</h4>\n<p>为了给 PHP 程序员省事，PHP 语言为你做了很多</p>\n<h4 id=\"3-好的方法\"><a class=\"markdownIt-Anchor\" href=\"#3-好的方法\"></a> (3). 好的方法：</h4>\n<p>尽可能规避使用 PHP 魔法函数</p>\n<p>【补充】：命令行模式查看 php 文件执行耗时</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># time命令</span></span><br><span class=\"line\">time php test.php</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出结果</span></span><br><span class=\"line\">real</span><br><span class=\"line\">user =&gt; 主要参考的耗时</span><br><span class=\"line\">sys</span><br></pre></td></tr></table></figure>\n<h3 id=\"2优化点-产生额外开销的错误抑制符\"><a class=\"markdownIt-Anchor\" href=\"#2优化点-产生额外开销的错误抑制符\"></a> 2.优化点： 产生额外开销的错误抑制符 <code>@</code></h3>\n<h4 id=\"1情况描述\"><a class=\"markdownIt-Anchor\" href=\"#1情况描述\"></a> (1).情况描述：</h4>\n<p>PHP 提供的错误已支付只是为了方便懒人</p>\n<h4 id=\"2-的实际逻辑\"><a class=\"markdownIt-Anchor\" href=\"#2-的实际逻辑\"></a> (2). <code>@</code> 的实际逻辑：</h4>\n<p>在代码开始前、结束后，增加 Opcode，忽略报错<br>\nvld - PHP Opcode 查看扩展</p>\n<h4 id=\"3错误抑制符的性能测试\"><a class=\"markdownIt-Anchor\" href=\"#3错误抑制符的性能测试\"></a> (3).错误抑制符的性能测试</h4>\n<p>1)测试文件<code>at.php</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//at.php</span></span><br><span class=\"line\">file_get_contens(<span class=\"string\">'xxx'</span>); <span class=\"comment\">// xxx文件不存在</span></span><br></pre></td></tr></table></figure>\n<p>2)使用 vld 扩展执行<code>at.php</code>，查看执行过程的完整 Opcode</p>\n<p><code>php -dvld.active=1 -dvld.execute=0 at.php</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 不加@错误抑制符时Opcode的执行情况</span></span><br><span class=\"line\">SEND_VAL</span><br><span class=\"line\">DO_FCALL</span><br><span class=\"line\">RETURN</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 加@错误抑制符时Opcode的执行情况</span></span><br><span class=\"line\">BEGIN_SILENCE</span><br><span class=\"line\">SEND_VAL</span><br><span class=\"line\">DO_FCALL</span><br><span class=\"line\">END_SILENCE</span><br><span class=\"line\">RETURN</span><br></pre></td></tr></table></figure>\n<h4 id=\"4好的建议尽量不要使用错误抑制符\"><a class=\"markdownIt-Anchor\" href=\"#4好的建议尽量不要使用错误抑制符\"></a> (4).好的建议：尽量不要使用@错误抑制符</h4>\n<p>可以使用 try throw 方式进行错误控制</p>\n<h3 id=\"3优化点-合理使用内存\"><a class=\"markdownIt-Anchor\" href=\"#3优化点-合理使用内存\"></a> 3.优化点： 合理使用内存</h3>\n<h4 id=\"1情况描述-2\"><a class=\"markdownIt-Anchor\" href=\"#1情况描述-2\"></a> (1)情况描述：</h4>\n<p>PHP 有内存回收机制保底，但也要小心使用内存</p>\n<h4 id=\"2好的建议\"><a class=\"markdownIt-Anchor\" href=\"#2好的建议\"></a> (2)好的建议：</h4>\n<p>利用 unset()及时释放不使用的内存[注：unset()出现注销不掉的情况]</p>\n<h3 id=\"4优化点-尽量少的使用正则表达式\"><a class=\"markdownIt-Anchor\" href=\"#4优化点-尽量少的使用正则表达式\"></a> 4.优化点： 尽量少的使用正则表达式</h3>\n<h4 id=\"1-情况描述-2\"><a class=\"markdownIt-Anchor\" href=\"#1-情况描述-2\"></a> (1) 情况描述：</h4>\n<p>正则表达式的回溯开销比较大，“没有金刚钻别揽瓷器活”</p>\n<h4 id=\"2-好的建议\"><a class=\"markdownIt-Anchor\" href=\"#2-好的建议\"></a> (2) 好的建议：</h4>\n<p>利用字符串处理函数，实现相同逻辑</p>\n<h3 id=\"5优化点避免在循环内做运算\"><a class=\"markdownIt-Anchor\" href=\"#5优化点避免在循环内做运算\"></a> 5.优化点：避免在循环内做运算</h3>\n<h4 id=\"1-情况描述-3\"><a class=\"markdownIt-Anchor\" href=\"#1-情况描述-3\"></a> (1) 情况描述：</h4>\n<p>循环内的计算式将会被重复计算</p>\n<h4 id=\"2-代码示例\"><a class=\"markdownIt-Anchor\" href=\"#2-代码示例\"></a> (2) 代码示例：</h4>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$str = <span class=\"string\">\"hello world\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> ($i=<span class=\"number\">0</span>; $i &lt; strlen($str); $i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\"># code...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 其中strlen()方法会在每次循环时计算一次</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 进行优化</span></span><br><span class=\"line\">$str = <span class=\"string\">\"hello world\"</span>;</span><br><span class=\"line\">$strlen = strlen($str);</span><br><span class=\"line\"><span class=\"keyword\">for</span> ($i=<span class=\"number\">0</span>; $i &lt; $strlen; $i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\"># code...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6优化点-减少计算密集型业务\"><a class=\"markdownIt-Anchor\" href=\"#6优化点-减少计算密集型业务\"></a> 6.优化点： 减少计算密集型业务</h3>\n<h4 id=\"1-情况描述-4\"><a class=\"markdownIt-Anchor\" href=\"#1-情况描述-4\"></a> (1) 情况描述：</h4>\n<p>PHP 不适合密集型运算的场景[大批量日志分析、大批量数据处理]</p>\n<h4 id=\"2-为什么\"><a class=\"markdownIt-Anchor\" href=\"#2-为什么\"></a> (2) 为什么？</h4>\n<p>PHP 语言特性决定了 PHP 不适合做大数据量运算。[需要解析成 C 语言进行运算，C 语言可能几行代码就实现的计算，php 可能需要很多行代码才能实现]</p>\n<h4 id=\"3-php-适用场景\"><a class=\"markdownIt-Anchor\" href=\"#3-php-适用场景\"></a> (3) PHP 适用场景：</h4>\n<p>适合衔接 Webserver 与后端服务、UI 呈现[纽带]</p>\n<h3 id=\"7优化点-务必适用带引号字符串做键值\"><a class=\"markdownIt-Anchor\" href=\"#7优化点-务必适用带引号字符串做键值\"></a> 7.优化点： 务必适用带引号字符串做键值</h3>\n<h4 id=\"1-情况描述-5\"><a class=\"markdownIt-Anchor\" href=\"#1-情况描述-5\"></a> (1) 情况描述：</h4>\n<p>PHP 会将没有引号的键值当做常量，产生查找常量的开销</p>\n<p>【补充】：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将后台运行的任务放到前台终端运行</span></span><br><span class=\"line\"><span class=\"built_in\">fg</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 相关命令： jobs  bg  fg</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将任务号为1的任务从后台执行转换到其那台执行。</span></span><br><span class=\"line\"><span class=\"built_in\">fg</span> 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行上述命令后，命令行窗口将显示如下信息</span></span><br><span class=\"line\">find / -name password</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-程序说明\"><a class=\"markdownIt-Anchor\" href=\"#2-程序说明\"></a> (2) 程序说明</h4>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"string\">'key'</span>, <span class=\"string\">'imooc'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">$array = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">    <span class=\"string\">'key'</span> =&gt; <span class=\"string\">'hello world!'</span>,</span><br><span class=\"line\">    <span class=\"string\">'imooc'</span> =&gt; <span class=\"string\">'http://www.imooc.com/'</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $array[<span class=\"string\">\"key\"</span>] . <span class=\"string\">'\\n'</span>; <span class=\"comment\">// 输出 hello world</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $array[key] . <span class=\"string\">'\\n'</span>; <span class=\"comment\">// 输出 http://www.imooc.com/</span></span><br></pre></td></tr></table></figure>\n<p>【说明】：</p>\n<p>当时用<code>$array[key]</code>时，程序也把 key 作为常量去查找，当查找到时，获取到常量的值；当没查找到时，再到数组内部，将其作为键 key 字符串进行解析</p>\n<h4 id=\"3-好的建议\"><a class=\"markdownIt-Anchor\" href=\"#3-好的建议\"></a> (3) 好的建议：</h4>\n<p>严格使用引号作为键值</p>\n<h2 id=\"三-php-周边问题的分析与阐述\"><a class=\"markdownIt-Anchor\" href=\"#三-php-周边问题的分析与阐述\"></a> 三、PHP 周边问题的分析与阐述</h2>\n<h3 id=\"1php-周边范围\"><a class=\"markdownIt-Anchor\" href=\"#1php-周边范围\"></a> 1.PHP 周边范围：</h3>\n<p>Linux 运行环境</p>\n<p>文件存储[磁盘]</p>\n<p>数据库[mysql]</p>\n<p>缓存[硬件的内存、php 缓存技术：memcache redis]</p>\n<p>网络</p>\n<h3 id=\"2php-周边对-php-程序的影响分析\"><a class=\"markdownIt-Anchor\" href=\"#2php-周边对-php-程序的影响分析\"></a> 2.PHP 周边对 PHP 程序的影响分析</h3>\n<h4 id=\"1-连接数据库操作\"><a class=\"markdownIt-Anchor\" href=\"#1-连接数据库操作\"></a> (1) 连接数据库操作</h4>\n<p>1） 同一台服务器 =&gt; 数据库优化 决定时间性能</p>\n<p>2） 分布式服务器 =&gt; 数据库优化 + 网络速度 决定时间性能</p>\n<h4 id=\"2-减少文件类操作\"><a class=\"markdownIt-Anchor\" href=\"#2-减少文件类操作\"></a> (2) 减少文件类操作</h4>\n<p>1） 常见 PHP 场景的开销次序：</p>\n<p>读写磁盘、 读写数据库、读写内存、读写网络数据</p>\n<p>2） 时间开销：</p>\n<pre><code>    读写内存 &lt;&lt;(远小于) 读写数据库[基于文件系统，操作本地磁盘] &lt;(小于) 读写磁盘 &lt; 读写网络数据\n\n    数据库会使用内存作为缓存，将其热数据先缓存在内存中，异步地写入到数据库 =》 数据库介于内存和磁盘之间\n\n    网络数据：通过socket发起，socket使用的是本地的文件句柄，磁盘操作。受网络延迟影响，延迟大时远远小于读写磁盘，延迟小时和读写磁盘差不多。\n</code></pre>\n<p>3） 总结：</p>\n<p>尽可能多的使用读写数据库、读写内存，尽量规避操作磁盘和操作网络数据。</p>\n<h4 id=\"3-优化网络请求\"><a class=\"markdownIt-Anchor\" href=\"#3-优化网络请求\"></a> (3) 优化网络请求</h4>\n<p>网络请求的坑：</p>\n<p>1.对方接口的不确定因素 2.网络稳定性</p>\n<p>如何优化网络请求？</p>\n<p>1.设置超时时间<br>\na) 连接超时<br>\nb) 读超时<br>\nc) 写超时</p>\n<p>2.将串行请求并行化<br>\na) 使用 curl<em>multi</em>*() =&gt; 最简单，但是并不是最好用<br>\nb) 使用 swoole 扩展 =&gt; 效果更好</p>\n<h4 id=\"4-压缩-php-接口输出\"><a class=\"markdownIt-Anchor\" href=\"#4-压缩-php-接口输出\"></a> (4) 压缩 PHP 接口输出</h4>\n<p>1） 如何压缩？</p>\n<p>使用 Gzip 即可。</p>\n<p>2） 利与弊：<br>\n利： 利于我们的数据输出，Client 端能更快获取数据<br>\n弊： 额外的 CPU 开销</p>\n<h4 id=\"5-php-缓存复用\"><a class=\"markdownIt-Anchor\" href=\"#5-php-缓存复用\"></a> (5) PHP 缓存复用</h4>\n<p>1）什么情况下做输出内容的缓存？</p>\n<p>多次请求，内容不变的情况。[模板缓存]</p>\n<pre><code>      |---Cached----/\\\n     \\/              |\n    .php &lt;-------&gt; Cache -&gt; No Cache\n                    /\\          |\n                     |---------\\/\n</code></pre>\n<h4 id=\"6-重叠时间窗口思想\"><a class=\"markdownIt-Anchor\" href=\"#6-重叠时间窗口思想\"></a> (6) 重叠时间窗口思想</h4>\n<p>串行：</p>\n<pre><code>process1[客户端]  process2[web server]  process3[php]  process4[mysql或缓存]\n</code></pre>\n<p>重叠时间窗口：</p>\n<pre><code>process1\n    process2\n        process3\n            process4\n</code></pre>\n<p>使用前提：后一个任务不强依赖于前一个任务的输出或返回。</p>\n<h4 id=\"7-php-旁路处理方案\"><a class=\"markdownIt-Anchor\" href=\"#7-php-旁路处理方案\"></a> (7) PHP 旁路处理方案</h4>\n<pre><code>x.php                         x.php\n  |                             |\nprocess1                      process1\n  |                             |---------process2\nprocess2                      process3       |\n  |                             |&lt;------------\nprocess3                      process4\n  |\nprocess4\n</code></pre>\n<p>使用前提：后一个任务不强依赖于前一个任务的输出或返回。</p>\n<h2 id=\"四-具体的性能分析\"><a class=\"markdownIt-Anchor\" href=\"#四-具体的性能分析\"></a> 四、具体的性能分析</h2>\n<h3 id=\"1-借助-xhprof-工具分析-php-性能\"><a class=\"markdownIt-Anchor\" href=\"#1-借助-xhprof-工具分析-php-性能\"></a> 1. 借助 xhprof 工具分析 PHP 性能</h3>\n<p>工具： XHProf [源自 Facebook 的 PHP 性能分析工具]</p>\n<p>实践： 分析 Wordpress 程序，做优化</p>\n<h4 id=\"1准备工作\"><a class=\"markdownIt-Anchor\" href=\"#1准备工作\"></a> (1)准备工作</h4>\n<p>1） 检查 xhprof 工具是否安装成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php --ri xhprof</span><br><span class=\"line\"></span><br><span class=\"line\">//输出</span><br><span class=\"line\">xhprof</span><br><span class=\"line\">xhprof =&gt; 0.9.2</span><br><span class=\"line\">CPU num =&gt; 1</span><br></pre></td></tr></table></figure>\n<p>2） 在 wordpress 代码中[index.php 文件]</p>\n<pre><code>1.在起始位置添加`xhprof_enable()`进行开启xhprof\n\n2.在执行结束位置添加`xhprof_disable()`返回性能分析数据\n\n3.添加xhprof的两个lib文件\n</code></pre>\n<p>wordpress/index.php 代码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhprof_enable();</span><br><span class=\"line\"></span><br><span class=\"line\">define(<span class=\"string\">'WP_USE_THEMES'</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">require</span>(dirname(<span class=\"keyword\">__FILE__</span>) . <span class=\"string\">'/wp-blog-header.php'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">$data = xhprof_disable();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include_once</span> <span class=\"string\">\"/var/www/html/xhprof_lib/utils/xhprof_lib.php\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">include_once</span> <span class=\"string\">\"/var/www/html/xhprof_lib/utils/xhprof_runs.php\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">$objXhprofRun = <span class=\"keyword\">new</span> XHProfRuns_Default();</span><br><span class=\"line\">$run_id = $objXhprofRun-&gt;save_run($data, <span class=\"string\">\"test\"</span>);</span><br><span class=\"line\">var_dump($run_id);</span><br></pre></td></tr></table></figure>\n<p>3） wordpress 同级目录下的 xhp 目录</p>\n<pre><code>callgraph.php\ncss/\ndocs/\nindex.php\njquery/\njs/\ntypeahead.php\n</code></pre>\n<p>4）浏览器访问 xhp/index.php</p>\n<pre><code>查看列表形式的性能分析 =》 View Full Callgraph =》 查看图形流程分析[查看耗时最长的文件和方法]=&gt;MO::import_from_reader| MO::make_entry\n</code></pre>\n<p>5）查找最需要优化的文件</p>\n<p><code>grep 'import_from_reader' ./ -r</code></p>\n<p>6）主要耗时点：<code>MO::make_entry()</code> – 执行的是多语言支持的功能</p>\n<p>优化方式：直接注释掉调用的相关代码</p>\n<p>【补充】：<code>MO</code>和<code>PO</code>都是 PHP 处理多语言程序的语言包</p>\n<p>7）优化结果：</p>\n<p>让程序不再是只有一个或一处相互关联的高消耗代码点。</p>\n<h3 id=\"2-php-性能分析工具扩展\"><a class=\"markdownIt-Anchor\" href=\"#2-php-性能分析工具扩展\"></a> 2. PHP 性能分析工具扩展</h3>\n<p>XHProf – PHP 性能分析工具</p>\n<p>ab – 压力测试</p>\n<p>vld – opcode 代码分析</p>\n<h2 id=\"五-php-性能瓶颈终极办法\"><a class=\"markdownIt-Anchor\" href=\"#五-php-性能瓶颈终极办法\"></a> 五、PHP 性能瓶颈终极办法</h2>\n<h3 id=\"1opcode-cache-php-扩展apc\"><a class=\"markdownIt-Anchor\" href=\"#1opcode-cache-php-扩展apc\"></a> 1.Opcode Cache: PHP 扩展<code>APC</code></h3>\n<p>官方地址：<a href=\"http://pecl.php.net/package-search.php?pkg_name=apc&amp;bool=AND&amp;submit=Search\" target=\"_blank\" rel=\"noopener\">前往</a></p>\n<p>已不再更新。</p>\n<p>【补充】：<code>pecl.php.net</code>是 php 扩展的官方维护站点。了解并使用<a href=\"http://pecl.php.net/packages.php?catpid=3&amp;catname=Caching\" target=\"_blank\" rel=\"noopener\">类似 APC 的 opcode 缓存扩展</a>？</p>\n<p>yac - 通过共享内存来缓存用户数据，用于代替 APC 和本地 memcached 的方案。</p>\n<h3 id=\"2扩展实现通过-php-扩展代替原-php-代码中高频逻辑\"><a class=\"markdownIt-Anchor\" href=\"#2扩展实现通过-php-扩展代替原-php-代码中高频逻辑\"></a> 2.扩展实现：通过 PHP 扩展代替原 PHP 代码中高频逻辑</h3>\n<h3 id=\"3runtime-优化-hhvm\"><a class=\"markdownIt-Anchor\" href=\"#3runtime-优化-hhvm\"></a> 3.Runtime 优化： HHVM</h3>"},{"title":"【总结】两个月的工作任务总结","date":"2018-06-20T00:33:10.000Z","_content":"\n从 2018.4.2 工作以来，不知不觉已经工作两个多月，并在昨天约谈从这个月开始转正。从刚开始的自己学习，到逐渐接触公司的项目，并完成交付的功能模块，学到了很多，也发现了自己存在的不足，所以作此总结，激励自己，并鞭策自己，不骄不躁，不悲不怒，养成良好的心态，并坚持学习，保持热情！\n\n<!--more -->\n\n# 一、功能模块介绍\n\n## 1.订单系统\n\n- 数据库关联 [6 张数据库的关联查询]\n  - 订单信息列表\n    - 订单信息表 --- order\n    - 支付方式表 --- paymentmethod\n    - 订单详情表 --- orderlist\n    - 优惠券信息表 --- coupon\n    - 快递信息表 --- delivery\n    - 商城信息表 --- shopcategory\n  - 子订单信息列表 [一个订单有多个商品]\n    - 订单商品表 --- ordergoods\n  - 订单规格信息列表 [一个订单的一个商品有多个规格属性]\n    - 订单规格表 --- orderspec\n- 订单状态处理\n- 订单导出到 excel\n\n## 2.商品入库\n\n### (1) 功能列表\n\n- 关键词管理\n- 选品管理\n- 待入库商品[同时操作 2 个数据库，9 张数据表]\n\n  - COD 数据库\n\n    - 系统商品表--- offer [***套餐处理]\n    - 库存表 --- stock\n    - 库存规格表--- stocksku [****规格处理]\n    - 库存日志表--- stocklog\n    - 库存分类表--- stockcategory\n    - 库存仓库关联表--- stockskuwarehouse\n    - 库存商品关联表--- stockoffer\n    - 用户商品关联表--- useroffer\n\n  - GOODS 数据库\n    - 待入库商品状态更新--- goods\n\n- 运费模板管理\n\n### (2) 完成时长：两个半星期\n\n### (3) 难点整理\n\n- 数据表相互关联关系的理解。\n\n        业务需求不懂，所以直接接触时不知道各个数据表之间的关系，以及需要如何处理已经有的信息\n\n- 库存规格处理和套餐处理的结构\n\n        逻辑较复杂，加上第一次实现时没有对功能进行切分，代码混杂，耦合度高，导致后期需求调整时，对需要调整的需求无从下手\n\n## 3.sphinx 关键词检索【商城选品】\n\n> 集成开发环境由 phpStudy 转向 UPUPW ANK(后者有 sphinx 服务管理)\n\n### (1)功能列表\n\n1). php 开启 sphinx 扩展\n\n```ini\n# php.ini\nextension=php_sphinx.dll\n```\n\n2). sphinx.conf 配置项配置\n\n> source [type sql_host sql_user sql_pass sql_db sql_query_pre sql_query sql_attr_uint]\n\n```ini\n# 设置查询条件\nsql_attr_uint   = status\n```\n\n> index [source path charset_table ngram_len ngram_chars]\n\n3).sphinx 第三方类库的引入[ThinkPHP5 置于 extend 目录下]\n\n- SphinxClient 类的使用\n\n- 设置匹配记录条数的限制 (默认只检索 20 条）\n\n```php\n$sphinx->setLimits(0, 1000);\n```\n\n- 匹配模式的对比\n\n```php\n// 设置全文查询的匹配模式\nSphinxClient::setMatchMode\n```\n\n| 模式                | 描述                                        |\n| ------------------- | ------------------------------------------- |\n| SPH_MATCH_ALL       | 匹配所有查询词（默认模式）.                 |\n| SPH_MATCH_ANY       | 匹配查询词中的任意一个.                     |\n| SPH_MATCH_PHRASE    | 将整个查询看作一个词组，要求按顺序完整匹配. |\n| SPH_MATCH_BOOLEAN   | 将查询看作一个布尔表达式.                   |\n| SPH_MATCH_EXTENDED  | 将查询看作一个 Sphinx 内部查询语言的表达式. |\n| SPH_MATCH_FULLSCAN  | 使用完全扫描，忽略查询词汇.                 |\n| SPH_MATCH_EXTENDED2 | 类似 SPH_MATCH_EXTENDED ，并支持评分和权重. |\n\n- 检索时设置条件过滤\n\n```php\n$sphinx->SetFilter($filterkey, $filtervalue);\n```\n\n### 2.完成时长： 两天\n\n### 3.难点介绍\n\n- 对检索的结果设置检索条件[根据 status 查询]\n\n        - 对sphinx配置项不熟 =》 对某些参数的设定模棱两可，所以后期删除某些看似非必要配置项时导致功能不能实现(sphinx.conf 中source的配置项`sql_attr_uint`删除导致根据status查询的结果不正确)\n        - 对SphinxClient的方法和属性不熟 =》 sphinx设置过滤的使用方法： $sphinx->SetFilter($filterkey, $filtervalue)\n\n- 中文检索的支持\n\n        - 起初查找的资料都是介绍需要使用sphinx的coreseek扩展进行中文分词检索支持的，从而被带偏的一直查找coreseek的相关资料，而coreseek的官方网站又一直无法访问，导致无从下手，直到后来不断的调整配置，以及查找资料，才知道原来当前版本的sphinx已经默认支持中文分词的检索了，不再需要coreseek等其他扩展。使用索引源`sql_query_pre`设置编码和索引配置项`ngram_len` `ngram_chars`即可支持中文检索。\n\n## 4.权限管理\n\n**RBAC**(Role-Basied Access Control) 基于角色的权限访问控制--**用户-角色-权限**。\n\n权限控制的实现 =》 url 形式 [`module/action`]\n\n### (1) 功能介绍\n\n1). 用户管理\n\n    - 用户列表\n    - 用户创建\n    - 用户编辑 [ 编辑用户的基本信息 + 分配用户角色 ]\n\n2). 角色管理\n\n    - 角色列表\n    - 角色创建\n    - 角色编辑 [ 编辑角色的基本信息 + 分配角色权限 ]\n\n3). 权限管理\n\n    - 权限列表\n\n4). 数据表(5 张)\n\n- 用户信息表 --- account\n- 角色信息表 --- role\n- 权限信息表 --- auth\n- 用户-角色关联表 --- account_role\n- 角色-权限关联表 --- role_auth\n\n### (2) 完成时长：四天\n\n### (3) 难点介绍\n\n- 角色分配和权限分配(封装到共用方法)\n\n  - **已经分配的角色|权限** --》 更新 --- array_intersect\n  - 需要**删除**的角色|权限 --》 删除 --- array_diff\n  - 需要**新增**的角色|权限 --》 新增 --- array_diff\n\n# 二、自我反思\n\n- 能在完全不了解已有项目和已有功能的情况下，适应原有的代码风格，并理清所有逻辑和业务需求，有效完成功能任务，实践能力和思考能力达到了一个入门级程序员的水准（很 low）.\n\n- 能认识到自己编写的代码有一定的不足[严谨性有待提升]\n\n# 三、经验总结\n\n## 1.如何快速理清需求？\n\n### (1) 看数据表，数据字段之间名称的联系\n\n- 不要低估别人的数据表设计能力（如果已经有的话）\n- 有效的利用工具\n- 看哪些地方有用到这些数据表（数据表是为业务需求所设计）\n\n### (2) 看已有的功能代码，代码的实现逻辑\n\n- 不要低估别人的代码能力（如果已经有的话）\n- 先整体后细节，业务逻辑不明白会使得对细节的理解有一定的难度，但整体上先大致的了解一个接口都干了哪些事会帮助理清逻辑。\n- 对功能相同或相似的代码可以理解后直接使用，以效率为主\n\n### (3) 走心的记住之前理出来的逻辑（快速的重要前提）\n\n- 不要总是分神，养成专注和集中注意力的能力（保持思考）\n- 不要情绪化，影响思考能力和专注度\n- 注意休息\n\n## 2.如何保持积极、热情？\n\n### (1) 保持学习\n\n- 养成沉浸式学习的能力，学进去，并消化理解，为实际工作中所用\n- 不要娱乐化，娱乐八卦信息要多少有多少，要多乱有多乱，看了除了浪费时间没有其他任何益处，不如培养自己的兴趣，提升自己的内涵\n- 多思考，多动手，实践是检验理论和巩固知识最有效的方式\n- 学习带来的思维敏捷可以很大程度提升自我认可度\n\n### (2) 多反思自己，少批评别人\n\n- 被自己惯出来的优越感会让自己忘乎所以，尊重别人，就是对自己最大的尊重\n- 让自己真正意义上的变优秀，才是真正值得自豪的事情，而不是通过对别人指指点点\n- 理性待人，理性对事\n\n### (3) 尊重别人\n\n- 对别人给予的负面言论有则改之，无则加勉，无需上升到个人情绪的层面\n- 别人错误的指责，表气（更加影响效率和状态）\n- 一切为了提升自己，成为更好的自己\n\n# 四、代码展示\n\n## 1.PHPExcel 使用--导出 excel\n\n```php\n/**\n * 导出exml\n * expTitle 表格标题\n * expCellName 表格单元格列名\n * expTableData 数据\n * setWidth 单元格列宽\n */\nfunction ExportExcel($expTitle, $expCellName, $expTableData, $setWidth, $output = 0, $i = 1) {\n    $xlsTitle = iconv('utf-8', 'gb2312', $expTitle); //文件名称\n    $fileName = $expTitle . date('_YmdHis'); //or $xlsTitle 文件名称可根据自己情况设定\n\n    $cellNum = count($expCellName);\n    $dataNum = count($expTableData);\n    $objPHPExcel = new \\PHPExcel();\n\n    $cellName = array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'AA', 'AB', 'AC', 'AD', 'AE', 'AF', 'AG', 'AH', 'AI', 'AJ', 'AK', 'AL', 'AM', 'AN', 'AO', 'AP', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AV', 'AW', 'AX', 'AY', 'AZ');\n    $objPHPExcel->getActiveSheet(0)->mergeCells('A1:' . $cellName[$cellNum - 1] . '1'); //合并单元格\n    $objPHPExcel->setActiveSheetIndex(0)->setCellValue('A1', '' . $expTitle . '  Export time:' . date('Y-m-d H:i:s'));\n    $objPHPExcel->getDefaultStyle()->getFont()->setName('Arial');\n    $objPHPExcel->getActiveSheet(0)->getRowDimension(1)->setRowHeight(40);\n    $objPHPExcel->getActiveSheet()->getStyle(\"A1\")->getFont()->setSize(20);\n\n    for ($i = 0; $i < $cellNum; $i++) {\n        $objPHPExcel->setActiveSheetIndex(0)->setCellValue($cellName[$i] . '2', $expCellName[$i][1]);\n    }\n    for ($i = 0; $i < $dataNum; $i++) {\n        for ($j = 0; $j < $cellNum; $j++) {\n            //数据\n            $objPHPExcel->getActiveSheet(0)->setCellValue($cellName[$j] . ($i + 3), $expTableData[$i][$expCellName[$j][1]]);\n\n            for ($j = 0; $j < $cellNum; $j++) {\n                $objPHPExcel->getActiveSheet(0)->setCellValue($cellName[$j] . ($i + 3), $expTableData[$i][$expCellName[$j][0]])->getRowDimension($i + 3);\n                foreach ($setWidth as $setWidthk => $setWidthvalue) {\n                    $objPHPExcel->getActiveSheet()->getColumnDimension($setWidthk)->setWidth($setWidthvalue);\n                }\n            }\n        }\n    }\n    if (empty($output)) {\n        header('pragma:public');\n        header('Content-type:application/vnd.ms-excel;charset=utf-8;name=\"' . $xlsTitle . '.xls\"');\n        header(\"Content-Disposition:attachment;filename=$fileName.xls\");\n        $objWriter = \\PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');\n        $objWriter->save('php://output');\n    } else {\n        $objWriter = \\PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');\n        $file = ROOT_PATH . 'public' . DS . 'uploads' . DS . 'temp' . DS . 'keywordstemp.' . xls;\n        $objWriter->save($file);\n    }\n    echo '<script>window.close();</script>';\n}\n```\n\n## 2.Sphinx 在 PHP 项目中的应用\n\n### 1). Sphinx 配置\n\n```ini\nsource keyword\n{\n    # 配置数据库基本信息\n    charset_type    = mysql\n    sql_host        = 127.0.0.1\n    sql_user        = root\n    sql_pass        = 123123\n    sql_dbcharset_type  = goods\n    sql_query_pre   = SET NAMES utf8\n\n    sql_query       = \\\n        SELECT id,status,keyword \\\n        FROM goods\n\n    # 设置查询条件\n    sql_attr_uint   = status\n}\n\nindex keyword\n{\n    # 指定配置的source\n    sourcecharset_type  = keyword\n    # 指定索引数据文件存储路径\n    pathcharset_type    = /usr/local/spinx/var/data/keyword\n    # 指定字符集(新版已废除)\n    charset_type    = utf-8\n    # 检索的字符串编码识别范围\n    charset_table   = 0..9, A..Z->a..z, _, a..z, U+410..U+42F->U+430..U+44F, U+430..U+44F\n    # 支持中文检索(值为1时支持中文，0时不支持中文)\n    ngram_len       = 1\n    # 中文检索的字符编码范围\n    ngram_chars     = U+3000..U+2FA1F\n}\n```\n\n### 2). 公共方法封装\n\n```php\n/**\n * sphinx搜索\n *\n * @param string $key 查询的字符串\n * @param string $indexFile 索引文件\n * @param string $filterkey 过滤字段名\n * @param string $filtervalue 过滤字段值\n * @return mixed\n */\nfunction sphinx($key, $indexFile, $filterkey = '', $filtervalue = [])\n{\n    $sphinx = new \\SphinxClient;\n    $sphinx->setServer(\"localhost\", 9312);\n\n    // 设置检索时的过滤条件\n    if (!empty($filterkey)) {\n        $filterRes = $sphinx->SetFilter($filterkey, $filtervalue);\n        if (!$filterRes) {\n            return false;\n        }\n    }\n\n    // 作为数组返回\n    $sphinx->SetArrayResult(true);\n    // 匹配格式  任意匹配\n    $sphinx->setMatchMode(SPH_MATCH_ALL);\n    $sphinx->setMaxQueryTime(3);\n    $sphinx->setLimits(0, 1000);\n\n    // 参数1：查询关键字， 参数2：索引名（所有索引用*）\n    $result = $sphinx->query($key, $indexFile);\n\n    if (empty($result['matches'])) {\n        return null;\n    }\n\n    return $result;\n}\n```\n\n# 五、项目展示\n\n## 1.后台概览图\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fup6bzr8whj31gm0l0q3t.jpg)\n","source":"_posts/summary-monthly2.md","raw":"---\ntitle: 【总结】两个月的工作任务总结\ndate: 2018-06-20 08:33:10\ntags:\n  - 工作总结\ncategory:\n  - 【工作总结】\n---\n\n从 2018.4.2 工作以来，不知不觉已经工作两个多月，并在昨天约谈从这个月开始转正。从刚开始的自己学习，到逐渐接触公司的项目，并完成交付的功能模块，学到了很多，也发现了自己存在的不足，所以作此总结，激励自己，并鞭策自己，不骄不躁，不悲不怒，养成良好的心态，并坚持学习，保持热情！\n\n<!--more -->\n\n# 一、功能模块介绍\n\n## 1.订单系统\n\n- 数据库关联 [6 张数据库的关联查询]\n  - 订单信息列表\n    - 订单信息表 --- order\n    - 支付方式表 --- paymentmethod\n    - 订单详情表 --- orderlist\n    - 优惠券信息表 --- coupon\n    - 快递信息表 --- delivery\n    - 商城信息表 --- shopcategory\n  - 子订单信息列表 [一个订单有多个商品]\n    - 订单商品表 --- ordergoods\n  - 订单规格信息列表 [一个订单的一个商品有多个规格属性]\n    - 订单规格表 --- orderspec\n- 订单状态处理\n- 订单导出到 excel\n\n## 2.商品入库\n\n### (1) 功能列表\n\n- 关键词管理\n- 选品管理\n- 待入库商品[同时操作 2 个数据库，9 张数据表]\n\n  - COD 数据库\n\n    - 系统商品表--- offer [***套餐处理]\n    - 库存表 --- stock\n    - 库存规格表--- stocksku [****规格处理]\n    - 库存日志表--- stocklog\n    - 库存分类表--- stockcategory\n    - 库存仓库关联表--- stockskuwarehouse\n    - 库存商品关联表--- stockoffer\n    - 用户商品关联表--- useroffer\n\n  - GOODS 数据库\n    - 待入库商品状态更新--- goods\n\n- 运费模板管理\n\n### (2) 完成时长：两个半星期\n\n### (3) 难点整理\n\n- 数据表相互关联关系的理解。\n\n        业务需求不懂，所以直接接触时不知道各个数据表之间的关系，以及需要如何处理已经有的信息\n\n- 库存规格处理和套餐处理的结构\n\n        逻辑较复杂，加上第一次实现时没有对功能进行切分，代码混杂，耦合度高，导致后期需求调整时，对需要调整的需求无从下手\n\n## 3.sphinx 关键词检索【商城选品】\n\n> 集成开发环境由 phpStudy 转向 UPUPW ANK(后者有 sphinx 服务管理)\n\n### (1)功能列表\n\n1). php 开启 sphinx 扩展\n\n```ini\n# php.ini\nextension=php_sphinx.dll\n```\n\n2). sphinx.conf 配置项配置\n\n> source [type sql_host sql_user sql_pass sql_db sql_query_pre sql_query sql_attr_uint]\n\n```ini\n# 设置查询条件\nsql_attr_uint   = status\n```\n\n> index [source path charset_table ngram_len ngram_chars]\n\n3).sphinx 第三方类库的引入[ThinkPHP5 置于 extend 目录下]\n\n- SphinxClient 类的使用\n\n- 设置匹配记录条数的限制 (默认只检索 20 条）\n\n```php\n$sphinx->setLimits(0, 1000);\n```\n\n- 匹配模式的对比\n\n```php\n// 设置全文查询的匹配模式\nSphinxClient::setMatchMode\n```\n\n| 模式                | 描述                                        |\n| ------------------- | ------------------------------------------- |\n| SPH_MATCH_ALL       | 匹配所有查询词（默认模式）.                 |\n| SPH_MATCH_ANY       | 匹配查询词中的任意一个.                     |\n| SPH_MATCH_PHRASE    | 将整个查询看作一个词组，要求按顺序完整匹配. |\n| SPH_MATCH_BOOLEAN   | 将查询看作一个布尔表达式.                   |\n| SPH_MATCH_EXTENDED  | 将查询看作一个 Sphinx 内部查询语言的表达式. |\n| SPH_MATCH_FULLSCAN  | 使用完全扫描，忽略查询词汇.                 |\n| SPH_MATCH_EXTENDED2 | 类似 SPH_MATCH_EXTENDED ，并支持评分和权重. |\n\n- 检索时设置条件过滤\n\n```php\n$sphinx->SetFilter($filterkey, $filtervalue);\n```\n\n### 2.完成时长： 两天\n\n### 3.难点介绍\n\n- 对检索的结果设置检索条件[根据 status 查询]\n\n        - 对sphinx配置项不熟 =》 对某些参数的设定模棱两可，所以后期删除某些看似非必要配置项时导致功能不能实现(sphinx.conf 中source的配置项`sql_attr_uint`删除导致根据status查询的结果不正确)\n        - 对SphinxClient的方法和属性不熟 =》 sphinx设置过滤的使用方法： $sphinx->SetFilter($filterkey, $filtervalue)\n\n- 中文检索的支持\n\n        - 起初查找的资料都是介绍需要使用sphinx的coreseek扩展进行中文分词检索支持的，从而被带偏的一直查找coreseek的相关资料，而coreseek的官方网站又一直无法访问，导致无从下手，直到后来不断的调整配置，以及查找资料，才知道原来当前版本的sphinx已经默认支持中文分词的检索了，不再需要coreseek等其他扩展。使用索引源`sql_query_pre`设置编码和索引配置项`ngram_len` `ngram_chars`即可支持中文检索。\n\n## 4.权限管理\n\n**RBAC**(Role-Basied Access Control) 基于角色的权限访问控制--**用户-角色-权限**。\n\n权限控制的实现 =》 url 形式 [`module/action`]\n\n### (1) 功能介绍\n\n1). 用户管理\n\n    - 用户列表\n    - 用户创建\n    - 用户编辑 [ 编辑用户的基本信息 + 分配用户角色 ]\n\n2). 角色管理\n\n    - 角色列表\n    - 角色创建\n    - 角色编辑 [ 编辑角色的基本信息 + 分配角色权限 ]\n\n3). 权限管理\n\n    - 权限列表\n\n4). 数据表(5 张)\n\n- 用户信息表 --- account\n- 角色信息表 --- role\n- 权限信息表 --- auth\n- 用户-角色关联表 --- account_role\n- 角色-权限关联表 --- role_auth\n\n### (2) 完成时长：四天\n\n### (3) 难点介绍\n\n- 角色分配和权限分配(封装到共用方法)\n\n  - **已经分配的角色|权限** --》 更新 --- array_intersect\n  - 需要**删除**的角色|权限 --》 删除 --- array_diff\n  - 需要**新增**的角色|权限 --》 新增 --- array_diff\n\n# 二、自我反思\n\n- 能在完全不了解已有项目和已有功能的情况下，适应原有的代码风格，并理清所有逻辑和业务需求，有效完成功能任务，实践能力和思考能力达到了一个入门级程序员的水准（很 low）.\n\n- 能认识到自己编写的代码有一定的不足[严谨性有待提升]\n\n# 三、经验总结\n\n## 1.如何快速理清需求？\n\n### (1) 看数据表，数据字段之间名称的联系\n\n- 不要低估别人的数据表设计能力（如果已经有的话）\n- 有效的利用工具\n- 看哪些地方有用到这些数据表（数据表是为业务需求所设计）\n\n### (2) 看已有的功能代码，代码的实现逻辑\n\n- 不要低估别人的代码能力（如果已经有的话）\n- 先整体后细节，业务逻辑不明白会使得对细节的理解有一定的难度，但整体上先大致的了解一个接口都干了哪些事会帮助理清逻辑。\n- 对功能相同或相似的代码可以理解后直接使用，以效率为主\n\n### (3) 走心的记住之前理出来的逻辑（快速的重要前提）\n\n- 不要总是分神，养成专注和集中注意力的能力（保持思考）\n- 不要情绪化，影响思考能力和专注度\n- 注意休息\n\n## 2.如何保持积极、热情？\n\n### (1) 保持学习\n\n- 养成沉浸式学习的能力，学进去，并消化理解，为实际工作中所用\n- 不要娱乐化，娱乐八卦信息要多少有多少，要多乱有多乱，看了除了浪费时间没有其他任何益处，不如培养自己的兴趣，提升自己的内涵\n- 多思考，多动手，实践是检验理论和巩固知识最有效的方式\n- 学习带来的思维敏捷可以很大程度提升自我认可度\n\n### (2) 多反思自己，少批评别人\n\n- 被自己惯出来的优越感会让自己忘乎所以，尊重别人，就是对自己最大的尊重\n- 让自己真正意义上的变优秀，才是真正值得自豪的事情，而不是通过对别人指指点点\n- 理性待人，理性对事\n\n### (3) 尊重别人\n\n- 对别人给予的负面言论有则改之，无则加勉，无需上升到个人情绪的层面\n- 别人错误的指责，表气（更加影响效率和状态）\n- 一切为了提升自己，成为更好的自己\n\n# 四、代码展示\n\n## 1.PHPExcel 使用--导出 excel\n\n```php\n/**\n * 导出exml\n * expTitle 表格标题\n * expCellName 表格单元格列名\n * expTableData 数据\n * setWidth 单元格列宽\n */\nfunction ExportExcel($expTitle, $expCellName, $expTableData, $setWidth, $output = 0, $i = 1) {\n    $xlsTitle = iconv('utf-8', 'gb2312', $expTitle); //文件名称\n    $fileName = $expTitle . date('_YmdHis'); //or $xlsTitle 文件名称可根据自己情况设定\n\n    $cellNum = count($expCellName);\n    $dataNum = count($expTableData);\n    $objPHPExcel = new \\PHPExcel();\n\n    $cellName = array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'AA', 'AB', 'AC', 'AD', 'AE', 'AF', 'AG', 'AH', 'AI', 'AJ', 'AK', 'AL', 'AM', 'AN', 'AO', 'AP', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AV', 'AW', 'AX', 'AY', 'AZ');\n    $objPHPExcel->getActiveSheet(0)->mergeCells('A1:' . $cellName[$cellNum - 1] . '1'); //合并单元格\n    $objPHPExcel->setActiveSheetIndex(0)->setCellValue('A1', '' . $expTitle . '  Export time:' . date('Y-m-d H:i:s'));\n    $objPHPExcel->getDefaultStyle()->getFont()->setName('Arial');\n    $objPHPExcel->getActiveSheet(0)->getRowDimension(1)->setRowHeight(40);\n    $objPHPExcel->getActiveSheet()->getStyle(\"A1\")->getFont()->setSize(20);\n\n    for ($i = 0; $i < $cellNum; $i++) {\n        $objPHPExcel->setActiveSheetIndex(0)->setCellValue($cellName[$i] . '2', $expCellName[$i][1]);\n    }\n    for ($i = 0; $i < $dataNum; $i++) {\n        for ($j = 0; $j < $cellNum; $j++) {\n            //数据\n            $objPHPExcel->getActiveSheet(0)->setCellValue($cellName[$j] . ($i + 3), $expTableData[$i][$expCellName[$j][1]]);\n\n            for ($j = 0; $j < $cellNum; $j++) {\n                $objPHPExcel->getActiveSheet(0)->setCellValue($cellName[$j] . ($i + 3), $expTableData[$i][$expCellName[$j][0]])->getRowDimension($i + 3);\n                foreach ($setWidth as $setWidthk => $setWidthvalue) {\n                    $objPHPExcel->getActiveSheet()->getColumnDimension($setWidthk)->setWidth($setWidthvalue);\n                }\n            }\n        }\n    }\n    if (empty($output)) {\n        header('pragma:public');\n        header('Content-type:application/vnd.ms-excel;charset=utf-8;name=\"' . $xlsTitle . '.xls\"');\n        header(\"Content-Disposition:attachment;filename=$fileName.xls\");\n        $objWriter = \\PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');\n        $objWriter->save('php://output');\n    } else {\n        $objWriter = \\PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');\n        $file = ROOT_PATH . 'public' . DS . 'uploads' . DS . 'temp' . DS . 'keywordstemp.' . xls;\n        $objWriter->save($file);\n    }\n    echo '<script>window.close();</script>';\n}\n```\n\n## 2.Sphinx 在 PHP 项目中的应用\n\n### 1). Sphinx 配置\n\n```ini\nsource keyword\n{\n    # 配置数据库基本信息\n    charset_type    = mysql\n    sql_host        = 127.0.0.1\n    sql_user        = root\n    sql_pass        = 123123\n    sql_dbcharset_type  = goods\n    sql_query_pre   = SET NAMES utf8\n\n    sql_query       = \\\n        SELECT id,status,keyword \\\n        FROM goods\n\n    # 设置查询条件\n    sql_attr_uint   = status\n}\n\nindex keyword\n{\n    # 指定配置的source\n    sourcecharset_type  = keyword\n    # 指定索引数据文件存储路径\n    pathcharset_type    = /usr/local/spinx/var/data/keyword\n    # 指定字符集(新版已废除)\n    charset_type    = utf-8\n    # 检索的字符串编码识别范围\n    charset_table   = 0..9, A..Z->a..z, _, a..z, U+410..U+42F->U+430..U+44F, U+430..U+44F\n    # 支持中文检索(值为1时支持中文，0时不支持中文)\n    ngram_len       = 1\n    # 中文检索的字符编码范围\n    ngram_chars     = U+3000..U+2FA1F\n}\n```\n\n### 2). 公共方法封装\n\n```php\n/**\n * sphinx搜索\n *\n * @param string $key 查询的字符串\n * @param string $indexFile 索引文件\n * @param string $filterkey 过滤字段名\n * @param string $filtervalue 过滤字段值\n * @return mixed\n */\nfunction sphinx($key, $indexFile, $filterkey = '', $filtervalue = [])\n{\n    $sphinx = new \\SphinxClient;\n    $sphinx->setServer(\"localhost\", 9312);\n\n    // 设置检索时的过滤条件\n    if (!empty($filterkey)) {\n        $filterRes = $sphinx->SetFilter($filterkey, $filtervalue);\n        if (!$filterRes) {\n            return false;\n        }\n    }\n\n    // 作为数组返回\n    $sphinx->SetArrayResult(true);\n    // 匹配格式  任意匹配\n    $sphinx->setMatchMode(SPH_MATCH_ALL);\n    $sphinx->setMaxQueryTime(3);\n    $sphinx->setLimits(0, 1000);\n\n    // 参数1：查询关键字， 参数2：索引名（所有索引用*）\n    $result = $sphinx->query($key, $indexFile);\n\n    if (empty($result['matches'])) {\n        return null;\n    }\n\n    return $result;\n}\n```\n\n# 五、项目展示\n\n## 1.后台概览图\n\n![](https://ws1.sinaimg.cn/large/005EgYNMgy1fup6bzr8whj31gm0l0q3t.jpg)\n","slug":"summary-monthly2","published":1,"updated":"2019-05-12T15:52:20.391Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c43400682wuuw92liac9","content":"<p>从 2018.4.2 工作以来，不知不觉已经工作两个多月，并在昨天约谈从这个月开始转正。从刚开始的自己学习，到逐渐接触公司的项目，并完成交付的功能模块，学到了很多，也发现了自己存在的不足，所以作此总结，激励自己，并鞭策自己，不骄不躁，不悲不怒，养成良好的心态，并坚持学习，保持热情！</p>\n<a id=\"more\"></a>\n<h1 id=\"一-功能模块介绍\"><a class=\"markdownIt-Anchor\" href=\"#一-功能模块介绍\"></a> 一、功能模块介绍</h1>\n<h2 id=\"1订单系统\"><a class=\"markdownIt-Anchor\" href=\"#1订单系统\"></a> 1.订单系统</h2>\n<ul>\n<li>数据库关联 [6 张数据库的关联查询]\n<ul>\n<li>订单信息列表\n<ul>\n<li>订单信息表 — order</li>\n<li>支付方式表 — paymentmethod</li>\n<li>订单详情表 — orderlist</li>\n<li>优惠券信息表 — coupon</li>\n<li>快递信息表 — delivery</li>\n<li>商城信息表 — shopcategory</li>\n</ul>\n</li>\n<li>子订单信息列表 [一个订单有多个商品]\n<ul>\n<li>订单商品表 — ordergoods</li>\n</ul>\n</li>\n<li>订单规格信息列表 [一个订单的一个商品有多个规格属性]\n<ul>\n<li>订单规格表 — orderspec</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>订单状态处理</li>\n<li>订单导出到 excel</li>\n</ul>\n<h2 id=\"2商品入库\"><a class=\"markdownIt-Anchor\" href=\"#2商品入库\"></a> 2.商品入库</h2>\n<h3 id=\"1-功能列表\"><a class=\"markdownIt-Anchor\" href=\"#1-功能列表\"></a> (1) 功能列表</h3>\n<ul>\n<li>\n<p>关键词管理</p>\n</li>\n<li>\n<p>选品管理</p>\n</li>\n<li>\n<p>待入库商品[同时操作 2 个数据库，9 张数据表]</p>\n<ul>\n<li>\n<p>COD 数据库</p>\n<ul>\n<li>系统商品表— offer [***套餐处理]</li>\n<li>库存表 — stock</li>\n<li>库存规格表— stocksku [****规格处理]</li>\n<li>库存日志表— stocklog</li>\n<li>库存分类表— stockcategory</li>\n<li>库存仓库关联表— stockskuwarehouse</li>\n<li>库存商品关联表— stockoffer</li>\n<li>用户商品关联表— useroffer</li>\n</ul>\n</li>\n<li>\n<p>GOODS 数据库</p>\n<ul>\n<li>待入库商品状态更新— goods</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>运费模板管理</p>\n</li>\n</ul>\n<h3 id=\"2-完成时长两个半星期\"><a class=\"markdownIt-Anchor\" href=\"#2-完成时长两个半星期\"></a> (2) 完成时长：两个半星期</h3>\n<h3 id=\"3-难点整理\"><a class=\"markdownIt-Anchor\" href=\"#3-难点整理\"></a> (3) 难点整理</h3>\n<ul>\n<li>\n<p>数据表相互关联关系的理解。</p>\n<pre><code>  业务需求不懂，所以直接接触时不知道各个数据表之间的关系，以及需要如何处理已经有的信息\n</code></pre>\n</li>\n<li>\n<p>库存规格处理和套餐处理的结构</p>\n<pre><code>  逻辑较复杂，加上第一次实现时没有对功能进行切分，代码混杂，耦合度高，导致后期需求调整时，对需要调整的需求无从下手\n</code></pre>\n</li>\n</ul>\n<h2 id=\"3sphinx-关键词检索商城选品\"><a class=\"markdownIt-Anchor\" href=\"#3sphinx-关键词检索商城选品\"></a> 3.sphinx 关键词检索【商城选品】</h2>\n<blockquote>\n<p>集成开发环境由 phpStudy 转向 UPUPW ANK(后者有 sphinx 服务管理)</p>\n</blockquote>\n<h3 id=\"1功能列表\"><a class=\"markdownIt-Anchor\" href=\"#1功能列表\"></a> (1)功能列表</h3>\n<p>1). php 开启 sphinx 扩展</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># php.ini</span></span><br><span class=\"line\"><span class=\"attr\">extension</span>=php_sphinx.dll</span><br></pre></td></tr></table></figure>\n<p>2). sphinx.conf 配置项配置</p>\n<blockquote>\n<p>source [type sql_host sql_user sql_pass sql_db sql_query_pre sql_query sql_attr_uint]</p>\n</blockquote>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置查询条件</span></span><br><span class=\"line\"><span class=\"attr\">sql_attr_uint</span>   = status</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>index [source path charset_table ngram_len ngram_chars]</p>\n</blockquote>\n<p>3).sphinx 第三方类库的引入[ThinkPHP5 置于 extend 目录下]</p>\n<ul>\n<li>\n<p>SphinxClient 类的使用</p>\n</li>\n<li>\n<p>设置匹配记录条数的限制 (默认只检索 20 条）</p>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sphinx-&gt;setLimits(<span class=\"number\">0</span>, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>匹配模式的对比</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置全文查询的匹配模式</span></span><br><span class=\"line\">SphinxClient::setMatchMode</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SPH_MATCH_ALL</td>\n<td>匹配所有查询词（默认模式）.</td>\n</tr>\n<tr>\n<td>SPH_MATCH_ANY</td>\n<td>匹配查询词中的任意一个.</td>\n</tr>\n<tr>\n<td>SPH_MATCH_PHRASE</td>\n<td>将整个查询看作一个词组，要求按顺序完整匹配.</td>\n</tr>\n<tr>\n<td>SPH_MATCH_BOOLEAN</td>\n<td>将查询看作一个布尔表达式.</td>\n</tr>\n<tr>\n<td>SPH_MATCH_EXTENDED</td>\n<td>将查询看作一个 Sphinx 内部查询语言的表达式.</td>\n</tr>\n<tr>\n<td>SPH_MATCH_FULLSCAN</td>\n<td>使用完全扫描，忽略查询词汇.</td>\n</tr>\n<tr>\n<td>SPH_MATCH_EXTENDED2</td>\n<td>类似 SPH_MATCH_EXTENDED ，并支持评分和权重.</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>检索时设置条件过滤</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sphinx-&gt;SetFilter($filterkey, $filtervalue);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2完成时长-两天\"><a class=\"markdownIt-Anchor\" href=\"#2完成时长-两天\"></a> 2.完成时长： 两天</h3>\n<h3 id=\"3难点介绍\"><a class=\"markdownIt-Anchor\" href=\"#3难点介绍\"></a> 3.难点介绍</h3>\n<ul>\n<li>\n<p>对检索的结果设置检索条件[根据 status 查询]</p>\n<pre><code>  - 对sphinx配置项不熟 =》 对某些参数的设定模棱两可，所以后期删除某些看似非必要配置项时导致功能不能实现(sphinx.conf 中source的配置项`sql_attr_uint`删除导致根据status查询的结果不正确)\n  - 对SphinxClient的方法和属性不熟 =》 sphinx设置过滤的使用方法： $sphinx-&gt;SetFilter($filterkey, $filtervalue)\n</code></pre>\n</li>\n<li>\n<p>中文检索的支持</p>\n<pre><code>  - 起初查找的资料都是介绍需要使用sphinx的coreseek扩展进行中文分词检索支持的，从而被带偏的一直查找coreseek的相关资料，而coreseek的官方网站又一直无法访问，导致无从下手，直到后来不断的调整配置，以及查找资料，才知道原来当前版本的sphinx已经默认支持中文分词的检索了，不再需要coreseek等其他扩展。使用索引源`sql_query_pre`设置编码和索引配置项`ngram_len` `ngram_chars`即可支持中文检索。\n</code></pre>\n</li>\n</ul>\n<h2 id=\"4权限管理\"><a class=\"markdownIt-Anchor\" href=\"#4权限管理\"></a> 4.权限管理</h2>\n<p><strong>RBAC</strong>(Role-Basied Access Control) 基于角色的权限访问控制–<strong>用户-角色-权限</strong>。</p>\n<p>权限控制的实现 =》 url 形式 [<code>module/action</code>]</p>\n<h3 id=\"1-功能介绍\"><a class=\"markdownIt-Anchor\" href=\"#1-功能介绍\"></a> (1) 功能介绍</h3>\n<p>1). 用户管理</p>\n<pre><code>- 用户列表\n- 用户创建\n- 用户编辑 [ 编辑用户的基本信息 + 分配用户角色 ]\n</code></pre>\n<p>2). 角色管理</p>\n<pre><code>- 角色列表\n- 角色创建\n- 角色编辑 [ 编辑角色的基本信息 + 分配角色权限 ]\n</code></pre>\n<p>3). 权限管理</p>\n<pre><code>- 权限列表\n</code></pre>\n<p>4). 数据表(5 张)</p>\n<ul>\n<li>用户信息表 — account</li>\n<li>角色信息表 — role</li>\n<li>权限信息表 — auth</li>\n<li>用户-角色关联表 — account_role</li>\n<li>角色-权限关联表 — role_auth</li>\n</ul>\n<h3 id=\"2-完成时长四天\"><a class=\"markdownIt-Anchor\" href=\"#2-完成时长四天\"></a> (2) 完成时长：四天</h3>\n<h3 id=\"3-难点介绍\"><a class=\"markdownIt-Anchor\" href=\"#3-难点介绍\"></a> (3) 难点介绍</h3>\n<ul>\n<li>\n<p>角色分配和权限分配(封装到共用方法)</p>\n<ul>\n<li><strong>已经分配的角色|权限</strong> --》 更新 — array_intersect</li>\n<li>需要<strong>删除</strong>的角色|权限 --》 删除 — array_diff</li>\n<li>需要<strong>新增</strong>的角色|权限 --》 新增 — array_diff</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"二-自我反思\"><a class=\"markdownIt-Anchor\" href=\"#二-自我反思\"></a> 二、自我反思</h1>\n<ul>\n<li>\n<p>能在完全不了解已有项目和已有功能的情况下，适应原有的代码风格，并理清所有逻辑和业务需求，有效完成功能任务，实践能力和思考能力达到了一个入门级程序员的水准（很 low）.</p>\n</li>\n<li>\n<p>能认识到自己编写的代码有一定的不足[严谨性有待提升]</p>\n</li>\n</ul>\n<h1 id=\"三-经验总结\"><a class=\"markdownIt-Anchor\" href=\"#三-经验总结\"></a> 三、经验总结</h1>\n<h2 id=\"1如何快速理清需求\"><a class=\"markdownIt-Anchor\" href=\"#1如何快速理清需求\"></a> 1.如何快速理清需求？</h2>\n<h3 id=\"1-看数据表数据字段之间名称的联系\"><a class=\"markdownIt-Anchor\" href=\"#1-看数据表数据字段之间名称的联系\"></a> (1) 看数据表，数据字段之间名称的联系</h3>\n<ul>\n<li>不要低估别人的数据表设计能力（如果已经有的话）</li>\n<li>有效的利用工具</li>\n<li>看哪些地方有用到这些数据表（数据表是为业务需求所设计）</li>\n</ul>\n<h3 id=\"2-看已有的功能代码代码的实现逻辑\"><a class=\"markdownIt-Anchor\" href=\"#2-看已有的功能代码代码的实现逻辑\"></a> (2) 看已有的功能代码，代码的实现逻辑</h3>\n<ul>\n<li>不要低估别人的代码能力（如果已经有的话）</li>\n<li>先整体后细节，业务逻辑不明白会使得对细节的理解有一定的难度，但整体上先大致的了解一个接口都干了哪些事会帮助理清逻辑。</li>\n<li>对功能相同或相似的代码可以理解后直接使用，以效率为主</li>\n</ul>\n<h3 id=\"3-走心的记住之前理出来的逻辑快速的重要前提\"><a class=\"markdownIt-Anchor\" href=\"#3-走心的记住之前理出来的逻辑快速的重要前提\"></a> (3) 走心的记住之前理出来的逻辑（快速的重要前提）</h3>\n<ul>\n<li>不要总是分神，养成专注和集中注意力的能力（保持思考）</li>\n<li>不要情绪化，影响思考能力和专注度</li>\n<li>注意休息</li>\n</ul>\n<h2 id=\"2如何保持积极-热情\"><a class=\"markdownIt-Anchor\" href=\"#2如何保持积极-热情\"></a> 2.如何保持积极、热情？</h2>\n<h3 id=\"1-保持学习\"><a class=\"markdownIt-Anchor\" href=\"#1-保持学习\"></a> (1) 保持学习</h3>\n<ul>\n<li>养成沉浸式学习的能力，学进去，并消化理解，为实际工作中所用</li>\n<li>不要娱乐化，娱乐八卦信息要多少有多少，要多乱有多乱，看了除了浪费时间没有其他任何益处，不如培养自己的兴趣，提升自己的内涵</li>\n<li>多思考，多动手，实践是检验理论和巩固知识最有效的方式</li>\n<li>学习带来的思维敏捷可以很大程度提升自我认可度</li>\n</ul>\n<h3 id=\"2-多反思自己少批评别人\"><a class=\"markdownIt-Anchor\" href=\"#2-多反思自己少批评别人\"></a> (2) 多反思自己，少批评别人</h3>\n<ul>\n<li>被自己惯出来的优越感会让自己忘乎所以，尊重别人，就是对自己最大的尊重</li>\n<li>让自己真正意义上的变优秀，才是真正值得自豪的事情，而不是通过对别人指指点点</li>\n<li>理性待人，理性对事</li>\n</ul>\n<h3 id=\"3-尊重别人\"><a class=\"markdownIt-Anchor\" href=\"#3-尊重别人\"></a> (3) 尊重别人</h3>\n<ul>\n<li>对别人给予的负面言论有则改之，无则加勉，无需上升到个人情绪的层面</li>\n<li>别人错误的指责，表气（更加影响效率和状态）</li>\n<li>一切为了提升自己，成为更好的自己</li>\n</ul>\n<h1 id=\"四-代码展示\"><a class=\"markdownIt-Anchor\" href=\"#四-代码展示\"></a> 四、代码展示</h1>\n<h2 id=\"1phpexcel-使用导出-excel\"><a class=\"markdownIt-Anchor\" href=\"#1phpexcel-使用导出-excel\"></a> 1.PHPExcel 使用–导出 excel</h2>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 导出exml</span></span><br><span class=\"line\"><span class=\"comment\"> * expTitle 表格标题</span></span><br><span class=\"line\"><span class=\"comment\"> * expCellName 表格单元格列名</span></span><br><span class=\"line\"><span class=\"comment\"> * expTableData 数据</span></span><br><span class=\"line\"><span class=\"comment\"> * setWidth 单元格列宽</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ExportExcel</span><span class=\"params\">($expTitle, $expCellName, $expTableData, $setWidth, $output = <span class=\"number\">0</span>, $i = <span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">    $xlsTitle = iconv(<span class=\"string\">'utf-8'</span>, <span class=\"string\">'gb2312'</span>, $expTitle); <span class=\"comment\">//文件名称</span></span><br><span class=\"line\">    $fileName = $expTitle . date(<span class=\"string\">'_YmdHis'</span>); <span class=\"comment\">//or $xlsTitle 文件名称可根据自己情况设定</span></span><br><span class=\"line\"></span><br><span class=\"line\">    $cellNum = count($expCellName);</span><br><span class=\"line\">    $dataNum = count($expTableData);</span><br><span class=\"line\">    $objPHPExcel = <span class=\"keyword\">new</span> \\PHPExcel();</span><br><span class=\"line\"></span><br><span class=\"line\">    $cellName = <span class=\"keyword\">array</span>(<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'D'</span>, <span class=\"string\">'E'</span>, <span class=\"string\">'F'</span>, <span class=\"string\">'G'</span>, <span class=\"string\">'H'</span>, <span class=\"string\">'I'</span>, <span class=\"string\">'J'</span>, <span class=\"string\">'K'</span>, <span class=\"string\">'L'</span>, <span class=\"string\">'M'</span>, <span class=\"string\">'N'</span>, <span class=\"string\">'O'</span>, <span class=\"string\">'P'</span>, <span class=\"string\">'Q'</span>, <span class=\"string\">'R'</span>, <span class=\"string\">'S'</span>, <span class=\"string\">'T'</span>, <span class=\"string\">'U'</span>, <span class=\"string\">'V'</span>, <span class=\"string\">'W'</span>, <span class=\"string\">'X'</span>, <span class=\"string\">'Y'</span>, <span class=\"string\">'Z'</span>, <span class=\"string\">'AA'</span>, <span class=\"string\">'AB'</span>, <span class=\"string\">'AC'</span>, <span class=\"string\">'AD'</span>, <span class=\"string\">'AE'</span>, <span class=\"string\">'AF'</span>, <span class=\"string\">'AG'</span>, <span class=\"string\">'AH'</span>, <span class=\"string\">'AI'</span>, <span class=\"string\">'AJ'</span>, <span class=\"string\">'AK'</span>, <span class=\"string\">'AL'</span>, <span class=\"string\">'AM'</span>, <span class=\"string\">'AN'</span>, <span class=\"string\">'AO'</span>, <span class=\"string\">'AP'</span>, <span class=\"string\">'AQ'</span>, <span class=\"string\">'AR'</span>, <span class=\"string\">'AS'</span>, <span class=\"string\">'AT'</span>, <span class=\"string\">'AU'</span>, <span class=\"string\">'AV'</span>, <span class=\"string\">'AW'</span>, <span class=\"string\">'AX'</span>, <span class=\"string\">'AY'</span>, <span class=\"string\">'AZ'</span>);</span><br><span class=\"line\">    $objPHPExcel-&gt;getActiveSheet(<span class=\"number\">0</span>)-&gt;mergeCells(<span class=\"string\">'A1:'</span> . $cellName[$cellNum - <span class=\"number\">1</span>] . <span class=\"string\">'1'</span>); <span class=\"comment\">//合并单元格</span></span><br><span class=\"line\">    $objPHPExcel-&gt;setActiveSheetIndex(<span class=\"number\">0</span>)-&gt;setCellValue(<span class=\"string\">'A1'</span>, <span class=\"string\">''</span> . $expTitle . <span class=\"string\">'  Export time:'</span> . date(<span class=\"string\">'Y-m-d H:i:s'</span>));</span><br><span class=\"line\">    $objPHPExcel-&gt;getDefaultStyle()-&gt;getFont()-&gt;setName(<span class=\"string\">'Arial'</span>);</span><br><span class=\"line\">    $objPHPExcel-&gt;getActiveSheet(<span class=\"number\">0</span>)-&gt;getRowDimension(<span class=\"number\">1</span>)-&gt;setRowHeight(<span class=\"number\">40</span>);</span><br><span class=\"line\">    $objPHPExcel-&gt;getActiveSheet()-&gt;getStyle(<span class=\"string\">\"A1\"</span>)-&gt;getFont()-&gt;setSize(<span class=\"number\">20</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; $cellNum; $i++) &#123;</span><br><span class=\"line\">        $objPHPExcel-&gt;setActiveSheetIndex(<span class=\"number\">0</span>)-&gt;setCellValue($cellName[$i] . <span class=\"string\">'2'</span>, $expCellName[$i][<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; $dataNum; $i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ($j = <span class=\"number\">0</span>; $j &lt; $cellNum; $j++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//数据</span></span><br><span class=\"line\">            $objPHPExcel-&gt;getActiveSheet(<span class=\"number\">0</span>)-&gt;setCellValue($cellName[$j] . ($i + <span class=\"number\">3</span>), $expTableData[$i][$expCellName[$j][<span class=\"number\">1</span>]]);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> ($j = <span class=\"number\">0</span>; $j &lt; $cellNum; $j++) &#123;</span><br><span class=\"line\">                $objPHPExcel-&gt;getActiveSheet(<span class=\"number\">0</span>)-&gt;setCellValue($cellName[$j] . ($i + <span class=\"number\">3</span>), $expTableData[$i][$expCellName[$j][<span class=\"number\">0</span>]])-&gt;getRowDimension($i + <span class=\"number\">3</span>);</span><br><span class=\"line\">                <span class=\"keyword\">foreach</span> ($setWidth <span class=\"keyword\">as</span> $setWidthk =&gt; $setWidthvalue) &#123;</span><br><span class=\"line\">                    $objPHPExcel-&gt;getActiveSheet()-&gt;getColumnDimension($setWidthk)-&gt;setWidth($setWidthvalue);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>($output)) &#123;</span><br><span class=\"line\">        header(<span class=\"string\">'pragma:public'</span>);</span><br><span class=\"line\">        header(<span class=\"string\">'Content-type:application/vnd.ms-excel;charset=utf-8;name=\"'</span> . $xlsTitle . <span class=\"string\">'.xls\"'</span>);</span><br><span class=\"line\">        header(<span class=\"string\">\"Content-Disposition:attachment;filename=$fileName.xls\"</span>);</span><br><span class=\"line\">        $objWriter = \\PHPExcel_IOFactory::createWriter($objPHPExcel, <span class=\"string\">'Excel5'</span>);</span><br><span class=\"line\">        $objWriter-&gt;save(<span class=\"string\">'php://output'</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        $objWriter = \\PHPExcel_IOFactory::createWriter($objPHPExcel, <span class=\"string\">'Excel5'</span>);</span><br><span class=\"line\">        $file = ROOT_PATH . <span class=\"string\">'public'</span> . DS . <span class=\"string\">'uploads'</span> . DS . <span class=\"string\">'temp'</span> . DS . <span class=\"string\">'keywordstemp.'</span> . xls;</span><br><span class=\"line\">        $objWriter-&gt;save($file);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'&lt;script&gt;window.close();&lt;/script&gt;'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2sphinx-在-php-项目中的应用\"><a class=\"markdownIt-Anchor\" href=\"#2sphinx-在-php-项目中的应用\"></a> 2.Sphinx 在 PHP 项目中的应用</h2>\n<h3 id=\"1-sphinx-配置\"><a class=\"markdownIt-Anchor\" href=\"#1-sphinx-配置\"></a> 1). Sphinx 配置</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source keyword</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"># 配置数据库基本信息</span></span><br><span class=\"line\">    charset_type    = mysql</span><br><span class=\"line\">    sql_host        = 127.0.0.1</span><br><span class=\"line\">    sql_user        = root</span><br><span class=\"line\">    sql_pass        = 123123</span><br><span class=\"line\">    sql_dbcharset_type  = goods</span><br><span class=\"line\">    sql_query_pre   = SET NAMES utf8</span><br><span class=\"line\"></span><br><span class=\"line\">    sql_query       = \\</span><br><span class=\"line\">        SELECT id,status,keyword \\</span><br><span class=\"line\">        FROM goods</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 设置查询条件</span></span><br><span class=\"line\">    sql_attr_uint   = status</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">index keyword</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"># 指定配置的source</span></span><br><span class=\"line\">    sourcecharset_type  = keyword</span><br><span class=\"line\">    <span class=\"comment\"># 指定索引数据文件存储路径</span></span><br><span class=\"line\">    pathcharset_type    = /usr/local/spinx/var/data/keyword</span><br><span class=\"line\">    <span class=\"comment\"># 指定字符集(新版已废除)</span></span><br><span class=\"line\">    charset_type    = utf-8</span><br><span class=\"line\">    <span class=\"comment\"># 检索的字符串编码识别范围</span></span><br><span class=\"line\">    charset_table   = 0..9, A..Z-&gt;a..z, _, a..z, U+410..U+42F-&gt;U+430..U+44F, U+430..U+44F</span><br><span class=\"line\">    <span class=\"comment\"># 支持中文检索(值为1时支持中文，0时不支持中文)</span></span><br><span class=\"line\">    ngram_len       = 1</span><br><span class=\"line\">    <span class=\"comment\"># 中文检索的字符编码范围</span></span><br><span class=\"line\">    ngram_chars     = U+3000..U+2FA1F</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-公共方法封装\"><a class=\"markdownIt-Anchor\" href=\"#2-公共方法封装\"></a> 2). 公共方法封装</h3>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * sphinx搜索</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> string $key 查询的字符串</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> string $indexFile 索引文件</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> string $filterkey 过滤字段名</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> string $filtervalue 过滤字段值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sphinx</span><span class=\"params\">($key, $indexFile, $filterkey = <span class=\"string\">''</span>, $filtervalue = [])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $sphinx = <span class=\"keyword\">new</span> \\SphinxClient;</span><br><span class=\"line\">    $sphinx-&gt;setServer(<span class=\"string\">\"localhost\"</span>, <span class=\"number\">9312</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置检索时的过滤条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">empty</span>($filterkey)) &#123;</span><br><span class=\"line\">        $filterRes = $sphinx-&gt;SetFilter($filterkey, $filtervalue);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!$filterRes) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 作为数组返回</span></span><br><span class=\"line\">    $sphinx-&gt;SetArrayResult(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 匹配格式  任意匹配</span></span><br><span class=\"line\">    $sphinx-&gt;setMatchMode(SPH_MATCH_ALL);</span><br><span class=\"line\">    $sphinx-&gt;setMaxQueryTime(<span class=\"number\">3</span>);</span><br><span class=\"line\">    $sphinx-&gt;setLimits(<span class=\"number\">0</span>, <span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 参数1：查询关键字， 参数2：索引名（所有索引用*）</span></span><br><span class=\"line\">    $result = $sphinx-&gt;query($key, $indexFile);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>($result[<span class=\"string\">'matches'</span>])) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"五-项目展示\"><a class=\"markdownIt-Anchor\" href=\"#五-项目展示\"></a> 五、项目展示</h1>\n<h2 id=\"1后台概览图\"><a class=\"markdownIt-Anchor\" href=\"#1后台概览图\"></a> 1.后台概览图</h2>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fup6bzr8whj31gm0l0q3t.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>从 2018.4.2 工作以来，不知不觉已经工作两个多月，并在昨天约谈从这个月开始转正。从刚开始的自己学习，到逐渐接触公司的项目，并完成交付的功能模块，学到了很多，也发现了自己存在的不足，所以作此总结，激励自己，并鞭策自己，不骄不躁，不悲不怒，养成良好的心态，并坚持学习，保持热情！</p>","more":"<h1 id=\"一-功能模块介绍\"><a class=\"markdownIt-Anchor\" href=\"#一-功能模块介绍\"></a> 一、功能模块介绍</h1>\n<h2 id=\"1订单系统\"><a class=\"markdownIt-Anchor\" href=\"#1订单系统\"></a> 1.订单系统</h2>\n<ul>\n<li>数据库关联 [6 张数据库的关联查询]\n<ul>\n<li>订单信息列表\n<ul>\n<li>订单信息表 — order</li>\n<li>支付方式表 — paymentmethod</li>\n<li>订单详情表 — orderlist</li>\n<li>优惠券信息表 — coupon</li>\n<li>快递信息表 — delivery</li>\n<li>商城信息表 — shopcategory</li>\n</ul>\n</li>\n<li>子订单信息列表 [一个订单有多个商品]\n<ul>\n<li>订单商品表 — ordergoods</li>\n</ul>\n</li>\n<li>订单规格信息列表 [一个订单的一个商品有多个规格属性]\n<ul>\n<li>订单规格表 — orderspec</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>订单状态处理</li>\n<li>订单导出到 excel</li>\n</ul>\n<h2 id=\"2商品入库\"><a class=\"markdownIt-Anchor\" href=\"#2商品入库\"></a> 2.商品入库</h2>\n<h3 id=\"1-功能列表\"><a class=\"markdownIt-Anchor\" href=\"#1-功能列表\"></a> (1) 功能列表</h3>\n<ul>\n<li>\n<p>关键词管理</p>\n</li>\n<li>\n<p>选品管理</p>\n</li>\n<li>\n<p>待入库商品[同时操作 2 个数据库，9 张数据表]</p>\n<ul>\n<li>\n<p>COD 数据库</p>\n<ul>\n<li>系统商品表— offer [***套餐处理]</li>\n<li>库存表 — stock</li>\n<li>库存规格表— stocksku [****规格处理]</li>\n<li>库存日志表— stocklog</li>\n<li>库存分类表— stockcategory</li>\n<li>库存仓库关联表— stockskuwarehouse</li>\n<li>库存商品关联表— stockoffer</li>\n<li>用户商品关联表— useroffer</li>\n</ul>\n</li>\n<li>\n<p>GOODS 数据库</p>\n<ul>\n<li>待入库商品状态更新— goods</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>运费模板管理</p>\n</li>\n</ul>\n<h3 id=\"2-完成时长两个半星期\"><a class=\"markdownIt-Anchor\" href=\"#2-完成时长两个半星期\"></a> (2) 完成时长：两个半星期</h3>\n<h3 id=\"3-难点整理\"><a class=\"markdownIt-Anchor\" href=\"#3-难点整理\"></a> (3) 难点整理</h3>\n<ul>\n<li>\n<p>数据表相互关联关系的理解。</p>\n<pre><code>  业务需求不懂，所以直接接触时不知道各个数据表之间的关系，以及需要如何处理已经有的信息\n</code></pre>\n</li>\n<li>\n<p>库存规格处理和套餐处理的结构</p>\n<pre><code>  逻辑较复杂，加上第一次实现时没有对功能进行切分，代码混杂，耦合度高，导致后期需求调整时，对需要调整的需求无从下手\n</code></pre>\n</li>\n</ul>\n<h2 id=\"3sphinx-关键词检索商城选品\"><a class=\"markdownIt-Anchor\" href=\"#3sphinx-关键词检索商城选品\"></a> 3.sphinx 关键词检索【商城选品】</h2>\n<blockquote>\n<p>集成开发环境由 phpStudy 转向 UPUPW ANK(后者有 sphinx 服务管理)</p>\n</blockquote>\n<h3 id=\"1功能列表\"><a class=\"markdownIt-Anchor\" href=\"#1功能列表\"></a> (1)功能列表</h3>\n<p>1). php 开启 sphinx 扩展</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># php.ini</span></span><br><span class=\"line\"><span class=\"attr\">extension</span>=php_sphinx.dll</span><br></pre></td></tr></table></figure>\n<p>2). sphinx.conf 配置项配置</p>\n<blockquote>\n<p>source [type sql_host sql_user sql_pass sql_db sql_query_pre sql_query sql_attr_uint]</p>\n</blockquote>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置查询条件</span></span><br><span class=\"line\"><span class=\"attr\">sql_attr_uint</span>   = status</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>index [source path charset_table ngram_len ngram_chars]</p>\n</blockquote>\n<p>3).sphinx 第三方类库的引入[ThinkPHP5 置于 extend 目录下]</p>\n<ul>\n<li>\n<p>SphinxClient 类的使用</p>\n</li>\n<li>\n<p>设置匹配记录条数的限制 (默认只检索 20 条）</p>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sphinx-&gt;setLimits(<span class=\"number\">0</span>, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>匹配模式的对比</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置全文查询的匹配模式</span></span><br><span class=\"line\">SphinxClient::setMatchMode</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SPH_MATCH_ALL</td>\n<td>匹配所有查询词（默认模式）.</td>\n</tr>\n<tr>\n<td>SPH_MATCH_ANY</td>\n<td>匹配查询词中的任意一个.</td>\n</tr>\n<tr>\n<td>SPH_MATCH_PHRASE</td>\n<td>将整个查询看作一个词组，要求按顺序完整匹配.</td>\n</tr>\n<tr>\n<td>SPH_MATCH_BOOLEAN</td>\n<td>将查询看作一个布尔表达式.</td>\n</tr>\n<tr>\n<td>SPH_MATCH_EXTENDED</td>\n<td>将查询看作一个 Sphinx 内部查询语言的表达式.</td>\n</tr>\n<tr>\n<td>SPH_MATCH_FULLSCAN</td>\n<td>使用完全扫描，忽略查询词汇.</td>\n</tr>\n<tr>\n<td>SPH_MATCH_EXTENDED2</td>\n<td>类似 SPH_MATCH_EXTENDED ，并支持评分和权重.</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>检索时设置条件过滤</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sphinx-&gt;SetFilter($filterkey, $filtervalue);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2完成时长-两天\"><a class=\"markdownIt-Anchor\" href=\"#2完成时长-两天\"></a> 2.完成时长： 两天</h3>\n<h3 id=\"3难点介绍\"><a class=\"markdownIt-Anchor\" href=\"#3难点介绍\"></a> 3.难点介绍</h3>\n<ul>\n<li>\n<p>对检索的结果设置检索条件[根据 status 查询]</p>\n<pre><code>  - 对sphinx配置项不熟 =》 对某些参数的设定模棱两可，所以后期删除某些看似非必要配置项时导致功能不能实现(sphinx.conf 中source的配置项`sql_attr_uint`删除导致根据status查询的结果不正确)\n  - 对SphinxClient的方法和属性不熟 =》 sphinx设置过滤的使用方法： $sphinx-&gt;SetFilter($filterkey, $filtervalue)\n</code></pre>\n</li>\n<li>\n<p>中文检索的支持</p>\n<pre><code>  - 起初查找的资料都是介绍需要使用sphinx的coreseek扩展进行中文分词检索支持的，从而被带偏的一直查找coreseek的相关资料，而coreseek的官方网站又一直无法访问，导致无从下手，直到后来不断的调整配置，以及查找资料，才知道原来当前版本的sphinx已经默认支持中文分词的检索了，不再需要coreseek等其他扩展。使用索引源`sql_query_pre`设置编码和索引配置项`ngram_len` `ngram_chars`即可支持中文检索。\n</code></pre>\n</li>\n</ul>\n<h2 id=\"4权限管理\"><a class=\"markdownIt-Anchor\" href=\"#4权限管理\"></a> 4.权限管理</h2>\n<p><strong>RBAC</strong>(Role-Basied Access Control) 基于角色的权限访问控制–<strong>用户-角色-权限</strong>。</p>\n<p>权限控制的实现 =》 url 形式 [<code>module/action</code>]</p>\n<h3 id=\"1-功能介绍\"><a class=\"markdownIt-Anchor\" href=\"#1-功能介绍\"></a> (1) 功能介绍</h3>\n<p>1). 用户管理</p>\n<pre><code>- 用户列表\n- 用户创建\n- 用户编辑 [ 编辑用户的基本信息 + 分配用户角色 ]\n</code></pre>\n<p>2). 角色管理</p>\n<pre><code>- 角色列表\n- 角色创建\n- 角色编辑 [ 编辑角色的基本信息 + 分配角色权限 ]\n</code></pre>\n<p>3). 权限管理</p>\n<pre><code>- 权限列表\n</code></pre>\n<p>4). 数据表(5 张)</p>\n<ul>\n<li>用户信息表 — account</li>\n<li>角色信息表 — role</li>\n<li>权限信息表 — auth</li>\n<li>用户-角色关联表 — account_role</li>\n<li>角色-权限关联表 — role_auth</li>\n</ul>\n<h3 id=\"2-完成时长四天\"><a class=\"markdownIt-Anchor\" href=\"#2-完成时长四天\"></a> (2) 完成时长：四天</h3>\n<h3 id=\"3-难点介绍\"><a class=\"markdownIt-Anchor\" href=\"#3-难点介绍\"></a> (3) 难点介绍</h3>\n<ul>\n<li>\n<p>角色分配和权限分配(封装到共用方法)</p>\n<ul>\n<li><strong>已经分配的角色|权限</strong> --》 更新 — array_intersect</li>\n<li>需要<strong>删除</strong>的角色|权限 --》 删除 — array_diff</li>\n<li>需要<strong>新增</strong>的角色|权限 --》 新增 — array_diff</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"二-自我反思\"><a class=\"markdownIt-Anchor\" href=\"#二-自我反思\"></a> 二、自我反思</h1>\n<ul>\n<li>\n<p>能在完全不了解已有项目和已有功能的情况下，适应原有的代码风格，并理清所有逻辑和业务需求，有效完成功能任务，实践能力和思考能力达到了一个入门级程序员的水准（很 low）.</p>\n</li>\n<li>\n<p>能认识到自己编写的代码有一定的不足[严谨性有待提升]</p>\n</li>\n</ul>\n<h1 id=\"三-经验总结\"><a class=\"markdownIt-Anchor\" href=\"#三-经验总结\"></a> 三、经验总结</h1>\n<h2 id=\"1如何快速理清需求\"><a class=\"markdownIt-Anchor\" href=\"#1如何快速理清需求\"></a> 1.如何快速理清需求？</h2>\n<h3 id=\"1-看数据表数据字段之间名称的联系\"><a class=\"markdownIt-Anchor\" href=\"#1-看数据表数据字段之间名称的联系\"></a> (1) 看数据表，数据字段之间名称的联系</h3>\n<ul>\n<li>不要低估别人的数据表设计能力（如果已经有的话）</li>\n<li>有效的利用工具</li>\n<li>看哪些地方有用到这些数据表（数据表是为业务需求所设计）</li>\n</ul>\n<h3 id=\"2-看已有的功能代码代码的实现逻辑\"><a class=\"markdownIt-Anchor\" href=\"#2-看已有的功能代码代码的实现逻辑\"></a> (2) 看已有的功能代码，代码的实现逻辑</h3>\n<ul>\n<li>不要低估别人的代码能力（如果已经有的话）</li>\n<li>先整体后细节，业务逻辑不明白会使得对细节的理解有一定的难度，但整体上先大致的了解一个接口都干了哪些事会帮助理清逻辑。</li>\n<li>对功能相同或相似的代码可以理解后直接使用，以效率为主</li>\n</ul>\n<h3 id=\"3-走心的记住之前理出来的逻辑快速的重要前提\"><a class=\"markdownIt-Anchor\" href=\"#3-走心的记住之前理出来的逻辑快速的重要前提\"></a> (3) 走心的记住之前理出来的逻辑（快速的重要前提）</h3>\n<ul>\n<li>不要总是分神，养成专注和集中注意力的能力（保持思考）</li>\n<li>不要情绪化，影响思考能力和专注度</li>\n<li>注意休息</li>\n</ul>\n<h2 id=\"2如何保持积极-热情\"><a class=\"markdownIt-Anchor\" href=\"#2如何保持积极-热情\"></a> 2.如何保持积极、热情？</h2>\n<h3 id=\"1-保持学习\"><a class=\"markdownIt-Anchor\" href=\"#1-保持学习\"></a> (1) 保持学习</h3>\n<ul>\n<li>养成沉浸式学习的能力，学进去，并消化理解，为实际工作中所用</li>\n<li>不要娱乐化，娱乐八卦信息要多少有多少，要多乱有多乱，看了除了浪费时间没有其他任何益处，不如培养自己的兴趣，提升自己的内涵</li>\n<li>多思考，多动手，实践是检验理论和巩固知识最有效的方式</li>\n<li>学习带来的思维敏捷可以很大程度提升自我认可度</li>\n</ul>\n<h3 id=\"2-多反思自己少批评别人\"><a class=\"markdownIt-Anchor\" href=\"#2-多反思自己少批评别人\"></a> (2) 多反思自己，少批评别人</h3>\n<ul>\n<li>被自己惯出来的优越感会让自己忘乎所以，尊重别人，就是对自己最大的尊重</li>\n<li>让自己真正意义上的变优秀，才是真正值得自豪的事情，而不是通过对别人指指点点</li>\n<li>理性待人，理性对事</li>\n</ul>\n<h3 id=\"3-尊重别人\"><a class=\"markdownIt-Anchor\" href=\"#3-尊重别人\"></a> (3) 尊重别人</h3>\n<ul>\n<li>对别人给予的负面言论有则改之，无则加勉，无需上升到个人情绪的层面</li>\n<li>别人错误的指责，表气（更加影响效率和状态）</li>\n<li>一切为了提升自己，成为更好的自己</li>\n</ul>\n<h1 id=\"四-代码展示\"><a class=\"markdownIt-Anchor\" href=\"#四-代码展示\"></a> 四、代码展示</h1>\n<h2 id=\"1phpexcel-使用导出-excel\"><a class=\"markdownIt-Anchor\" href=\"#1phpexcel-使用导出-excel\"></a> 1.PHPExcel 使用–导出 excel</h2>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 导出exml</span></span><br><span class=\"line\"><span class=\"comment\"> * expTitle 表格标题</span></span><br><span class=\"line\"><span class=\"comment\"> * expCellName 表格单元格列名</span></span><br><span class=\"line\"><span class=\"comment\"> * expTableData 数据</span></span><br><span class=\"line\"><span class=\"comment\"> * setWidth 单元格列宽</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ExportExcel</span><span class=\"params\">($expTitle, $expCellName, $expTableData, $setWidth, $output = <span class=\"number\">0</span>, $i = <span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">    $xlsTitle = iconv(<span class=\"string\">'utf-8'</span>, <span class=\"string\">'gb2312'</span>, $expTitle); <span class=\"comment\">//文件名称</span></span><br><span class=\"line\">    $fileName = $expTitle . date(<span class=\"string\">'_YmdHis'</span>); <span class=\"comment\">//or $xlsTitle 文件名称可根据自己情况设定</span></span><br><span class=\"line\"></span><br><span class=\"line\">    $cellNum = count($expCellName);</span><br><span class=\"line\">    $dataNum = count($expTableData);</span><br><span class=\"line\">    $objPHPExcel = <span class=\"keyword\">new</span> \\PHPExcel();</span><br><span class=\"line\"></span><br><span class=\"line\">    $cellName = <span class=\"keyword\">array</span>(<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'D'</span>, <span class=\"string\">'E'</span>, <span class=\"string\">'F'</span>, <span class=\"string\">'G'</span>, <span class=\"string\">'H'</span>, <span class=\"string\">'I'</span>, <span class=\"string\">'J'</span>, <span class=\"string\">'K'</span>, <span class=\"string\">'L'</span>, <span class=\"string\">'M'</span>, <span class=\"string\">'N'</span>, <span class=\"string\">'O'</span>, <span class=\"string\">'P'</span>, <span class=\"string\">'Q'</span>, <span class=\"string\">'R'</span>, <span class=\"string\">'S'</span>, <span class=\"string\">'T'</span>, <span class=\"string\">'U'</span>, <span class=\"string\">'V'</span>, <span class=\"string\">'W'</span>, <span class=\"string\">'X'</span>, <span class=\"string\">'Y'</span>, <span class=\"string\">'Z'</span>, <span class=\"string\">'AA'</span>, <span class=\"string\">'AB'</span>, <span class=\"string\">'AC'</span>, <span class=\"string\">'AD'</span>, <span class=\"string\">'AE'</span>, <span class=\"string\">'AF'</span>, <span class=\"string\">'AG'</span>, <span class=\"string\">'AH'</span>, <span class=\"string\">'AI'</span>, <span class=\"string\">'AJ'</span>, <span class=\"string\">'AK'</span>, <span class=\"string\">'AL'</span>, <span class=\"string\">'AM'</span>, <span class=\"string\">'AN'</span>, <span class=\"string\">'AO'</span>, <span class=\"string\">'AP'</span>, <span class=\"string\">'AQ'</span>, <span class=\"string\">'AR'</span>, <span class=\"string\">'AS'</span>, <span class=\"string\">'AT'</span>, <span class=\"string\">'AU'</span>, <span class=\"string\">'AV'</span>, <span class=\"string\">'AW'</span>, <span class=\"string\">'AX'</span>, <span class=\"string\">'AY'</span>, <span class=\"string\">'AZ'</span>);</span><br><span class=\"line\">    $objPHPExcel-&gt;getActiveSheet(<span class=\"number\">0</span>)-&gt;mergeCells(<span class=\"string\">'A1:'</span> . $cellName[$cellNum - <span class=\"number\">1</span>] . <span class=\"string\">'1'</span>); <span class=\"comment\">//合并单元格</span></span><br><span class=\"line\">    $objPHPExcel-&gt;setActiveSheetIndex(<span class=\"number\">0</span>)-&gt;setCellValue(<span class=\"string\">'A1'</span>, <span class=\"string\">''</span> . $expTitle . <span class=\"string\">'  Export time:'</span> . date(<span class=\"string\">'Y-m-d H:i:s'</span>));</span><br><span class=\"line\">    $objPHPExcel-&gt;getDefaultStyle()-&gt;getFont()-&gt;setName(<span class=\"string\">'Arial'</span>);</span><br><span class=\"line\">    $objPHPExcel-&gt;getActiveSheet(<span class=\"number\">0</span>)-&gt;getRowDimension(<span class=\"number\">1</span>)-&gt;setRowHeight(<span class=\"number\">40</span>);</span><br><span class=\"line\">    $objPHPExcel-&gt;getActiveSheet()-&gt;getStyle(<span class=\"string\">\"A1\"</span>)-&gt;getFont()-&gt;setSize(<span class=\"number\">20</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; $cellNum; $i++) &#123;</span><br><span class=\"line\">        $objPHPExcel-&gt;setActiveSheetIndex(<span class=\"number\">0</span>)-&gt;setCellValue($cellName[$i] . <span class=\"string\">'2'</span>, $expCellName[$i][<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; $dataNum; $i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ($j = <span class=\"number\">0</span>; $j &lt; $cellNum; $j++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//数据</span></span><br><span class=\"line\">            $objPHPExcel-&gt;getActiveSheet(<span class=\"number\">0</span>)-&gt;setCellValue($cellName[$j] . ($i + <span class=\"number\">3</span>), $expTableData[$i][$expCellName[$j][<span class=\"number\">1</span>]]);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> ($j = <span class=\"number\">0</span>; $j &lt; $cellNum; $j++) &#123;</span><br><span class=\"line\">                $objPHPExcel-&gt;getActiveSheet(<span class=\"number\">0</span>)-&gt;setCellValue($cellName[$j] . ($i + <span class=\"number\">3</span>), $expTableData[$i][$expCellName[$j][<span class=\"number\">0</span>]])-&gt;getRowDimension($i + <span class=\"number\">3</span>);</span><br><span class=\"line\">                <span class=\"keyword\">foreach</span> ($setWidth <span class=\"keyword\">as</span> $setWidthk =&gt; $setWidthvalue) &#123;</span><br><span class=\"line\">                    $objPHPExcel-&gt;getActiveSheet()-&gt;getColumnDimension($setWidthk)-&gt;setWidth($setWidthvalue);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>($output)) &#123;</span><br><span class=\"line\">        header(<span class=\"string\">'pragma:public'</span>);</span><br><span class=\"line\">        header(<span class=\"string\">'Content-type:application/vnd.ms-excel;charset=utf-8;name=\"'</span> . $xlsTitle . <span class=\"string\">'.xls\"'</span>);</span><br><span class=\"line\">        header(<span class=\"string\">\"Content-Disposition:attachment;filename=$fileName.xls\"</span>);</span><br><span class=\"line\">        $objWriter = \\PHPExcel_IOFactory::createWriter($objPHPExcel, <span class=\"string\">'Excel5'</span>);</span><br><span class=\"line\">        $objWriter-&gt;save(<span class=\"string\">'php://output'</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        $objWriter = \\PHPExcel_IOFactory::createWriter($objPHPExcel, <span class=\"string\">'Excel5'</span>);</span><br><span class=\"line\">        $file = ROOT_PATH . <span class=\"string\">'public'</span> . DS . <span class=\"string\">'uploads'</span> . DS . <span class=\"string\">'temp'</span> . DS . <span class=\"string\">'keywordstemp.'</span> . xls;</span><br><span class=\"line\">        $objWriter-&gt;save($file);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'&lt;script&gt;window.close();&lt;/script&gt;'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2sphinx-在-php-项目中的应用\"><a class=\"markdownIt-Anchor\" href=\"#2sphinx-在-php-项目中的应用\"></a> 2.Sphinx 在 PHP 项目中的应用</h2>\n<h3 id=\"1-sphinx-配置\"><a class=\"markdownIt-Anchor\" href=\"#1-sphinx-配置\"></a> 1). Sphinx 配置</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source keyword</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"># 配置数据库基本信息</span></span><br><span class=\"line\">    charset_type    = mysql</span><br><span class=\"line\">    sql_host        = 127.0.0.1</span><br><span class=\"line\">    sql_user        = root</span><br><span class=\"line\">    sql_pass        = 123123</span><br><span class=\"line\">    sql_dbcharset_type  = goods</span><br><span class=\"line\">    sql_query_pre   = SET NAMES utf8</span><br><span class=\"line\"></span><br><span class=\"line\">    sql_query       = \\</span><br><span class=\"line\">        SELECT id,status,keyword \\</span><br><span class=\"line\">        FROM goods</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 设置查询条件</span></span><br><span class=\"line\">    sql_attr_uint   = status</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">index keyword</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"># 指定配置的source</span></span><br><span class=\"line\">    sourcecharset_type  = keyword</span><br><span class=\"line\">    <span class=\"comment\"># 指定索引数据文件存储路径</span></span><br><span class=\"line\">    pathcharset_type    = /usr/local/spinx/var/data/keyword</span><br><span class=\"line\">    <span class=\"comment\"># 指定字符集(新版已废除)</span></span><br><span class=\"line\">    charset_type    = utf-8</span><br><span class=\"line\">    <span class=\"comment\"># 检索的字符串编码识别范围</span></span><br><span class=\"line\">    charset_table   = 0..9, A..Z-&gt;a..z, _, a..z, U+410..U+42F-&gt;U+430..U+44F, U+430..U+44F</span><br><span class=\"line\">    <span class=\"comment\"># 支持中文检索(值为1时支持中文，0时不支持中文)</span></span><br><span class=\"line\">    ngram_len       = 1</span><br><span class=\"line\">    <span class=\"comment\"># 中文检索的字符编码范围</span></span><br><span class=\"line\">    ngram_chars     = U+3000..U+2FA1F</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-公共方法封装\"><a class=\"markdownIt-Anchor\" href=\"#2-公共方法封装\"></a> 2). 公共方法封装</h3>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * sphinx搜索</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> string $key 查询的字符串</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> string $indexFile 索引文件</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> string $filterkey 过滤字段名</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> string $filtervalue 过滤字段值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sphinx</span><span class=\"params\">($key, $indexFile, $filterkey = <span class=\"string\">''</span>, $filtervalue = [])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $sphinx = <span class=\"keyword\">new</span> \\SphinxClient;</span><br><span class=\"line\">    $sphinx-&gt;setServer(<span class=\"string\">\"localhost\"</span>, <span class=\"number\">9312</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置检索时的过滤条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">empty</span>($filterkey)) &#123;</span><br><span class=\"line\">        $filterRes = $sphinx-&gt;SetFilter($filterkey, $filtervalue);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!$filterRes) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 作为数组返回</span></span><br><span class=\"line\">    $sphinx-&gt;SetArrayResult(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 匹配格式  任意匹配</span></span><br><span class=\"line\">    $sphinx-&gt;setMatchMode(SPH_MATCH_ALL);</span><br><span class=\"line\">    $sphinx-&gt;setMaxQueryTime(<span class=\"number\">3</span>);</span><br><span class=\"line\">    $sphinx-&gt;setLimits(<span class=\"number\">0</span>, <span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 参数1：查询关键字， 参数2：索引名（所有索引用*）</span></span><br><span class=\"line\">    $result = $sphinx-&gt;query($key, $indexFile);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>($result[<span class=\"string\">'matches'</span>])) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"五-项目展示\"><a class=\"markdownIt-Anchor\" href=\"#五-项目展示\"></a> 五、项目展示</h1>\n<h2 id=\"1后台概览图\"><a class=\"markdownIt-Anchor\" href=\"#1后台概览图\"></a> 1.后台概览图</h2>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fup6bzr8whj31gm0l0q3t.jpg\" alt=\"\"></p>"},{"title":"【总结】一年的工作任务总结","date":"2019-04-01T12:00:00.000Z","_content":"\n从2018年9月到2019年4月，经历了杭州互联网创业公司的996，对程序员这个职业的热情大大消磨掉了，加上没有精力总结整理，以及核心竞争力没有像样的突破，所以在这个大环境不好的前提下，依然选择了裸辞。半年多的高压工作，却没有抽出时间来整理，也实在是精力跟不上，在这段休息的时间里，准备停下来，把积累的能力总结整理一下，为了更好的出发。\n\n<!-- more -->\n\n## 功能模块介绍\n### 1.云端工作/云端账单模块\n\n#### 视图/表设计\n\n- i_job 云端工作表\n  - 增加审核人员、用户来源字段\n- i_job_period 云端工作账单表\n- v_periods（i_job + i_job_period + i_user_login + i_job_note_log）\n  - i_user_login 开发者和企业方信息\n  - i_job_note_log 云端工作备注（截取账单的备注信息）\n- i_job_deposit_log 云端工作押金变更日志\n  - 状态：支付、抵用、退还\n\n## 功能列表\n\n### 1.账单模块\n\n#### 后台\n\n1）账单详情\n\n- 未托管费用（100%结算比例，费率实时取工猫配置|网站配置）\n- 托管费用但未结算（企业方费率取数据库、开发者费率实时取）\n- 已结算（直接取数据库值）\n\n> 难点：\n>- 细项费用计算公式\n>- 费用固化阶段（什么状态时写入，什么状态时动态获取）\n\n2）核定工资\n\n- 确定云端工作信息（押金、核定工资、试用期）\n- 确定账单信息（押金、核定工资、试用期、开发票、发薪|结薪时间、服务费率）\n\n> 难点：\n> - 数据固化\n>   - 固化设置的`企业方`**费率**信息，支付时直接使用数据库值（托管费用时固化企业方**费用**）\n\n3）账单结算\n\n- 固化开发者费用\n- 判断是否可以结算？\n  - 已托管账单费用 / 有押金可以抵用\n- 判断是否可以使用押金结算？\n  - 有押金\n  - 云端工作结束合作\n  - 账单未托管费用\n\n> 难点：\n>- 细项费用计算公式\n>- 动态取值 or 取数据库值？\n>- 使用押金结算\n\n- 退还押金\n- 判断是否可以退换押金\n  - 有押金【难点】\n  - 云端工作结束合作\n\n5）结算综合表\n\n> 难点：\n>- 建试图简化数据查询\n>   - 次月托管（当前账单的下一周期账单，及其托管费用情况）\n>   - 账单备注（备注只关联了云端工作，现在需要和账单关联）\n>   - 审核人员和用户来源（后续添加云端表字段，不用再从备注表中截取）\n>- 导出(csv)\n\n#### 前台\n\n1）账单详情\n\n> 难点：\n>- 细项费用计算公式\n>- 不同用户身份展示不用费用\n\n### 2.面试评价模块\n\n#### 表设计\n- i_outsource_rating\n  - rating_type （对应RatingType枚举类）\n  - impressions_desc 面试评价关键词（保存文案、避免后期关键词变更，对应关系出错）\n  - interview_status 面试评价结果 （面试通过/面试不通过）\n\n#### 功能列表\n1）整合云端工作和整包项目的面试评价\n\n- 生成动态\n- 消息通知\n\n#### 难点整理\n\n整合云端工作和整包项目的面试评价，构建统一的面试评价模块\n\n### 3.付费会员模块\n\n#### 表/视图设计\n\n- i_vip_type 会员类型表（开发者会员、企业会员）\n  - 会员优惠信息（原价、现价）\n  - 会员类型、会员等级\n  - 购买方式（月、季、年）\n- i_user_vip 用户会员表\n  - 用户会员状态、到期时间\n  - 会员类型\n- i_vip_order 会员订单表\n  - 购买的会员类型\n  - 购买价格、优惠信息\n  - 续购/首购\n- i_vip_ compensate_record 补偿的优质开发者表（赠送会员）\n- v_user（增加会员信息）\n  - 会员类型\n  - 会员到期时间\n\n#### 功能列表\n\n##### 后台\n\n1）会员信息更新\n\n2）会员用户列表\n\n3)会员订单列表\n\n##### 前台\n\n1）会员中心\n\n2）会员支付\n\n难点：\n\n- 支付逻辑\n\n#### 难点介绍\n主要是：\n\n- 前期会员类型表的设计，如何存储会员优惠信息，及会员类型的界定（会员类型？、会员等级？、会员类型要不要和会员等级关联？、会员优惠怎么存？）\n\n- 会员优惠信息\n  - 和云端工作费率等相关联\n\n### 4.产品认证模块\n\n#### 表/视图设计\n\n- i_certified_product 认证产品表\n  - 状态（开放申请、暂停认证、下架隐藏）\n  - 价格（会员价、现价、原价）\n  - 基本信息（名称、描述、简介、证书文案）\n- i_certified_product_log 认证产品表变更日志\n- i_user_certified 用户认证表\n  - 审核状态（AuditStatus枚举类）\n  - 证书状态（CertStatus枚举类 未生成、正常、过期、撤销）\n  - 认证类型（CertType枚举类、AuditType枚举类）\n  - 审核信息（审核失败时间|操作人员、申请时间、审核失败次数）\n  - 证书基本信息（证书编号、有效时间）\n- i_user_cert_log 用户认证变更日志表\n- i_common_audit_log 通用的审核日志表\n  - 认证详情中的审核记录\n- v_user（增加认证信息）\n  - 认证类型\n  - 认证到期时间\n\n#### 功能介绍\n\n##### 后台\n\n1）认证产品列表：列出所有认证产品\n\n2）编辑认证产品\n\n- 富文本\n\n3）认证用户列表：列出所有认证的用户及相应的认证信息\n\n4）用户认证详情\n\n- 添加备注\n- 审核（申请、通过、拒绝、撤销）\n- 发送邮件（http://api.sendcloud.net/apiv2/mail/send）\n\n##### 前台\n\n1）认证产品列表\n\n> 难点：\n>- 按钮文案\n>- 排序（已认证/申请中的排在上方）\n\n2）认证产品申请详情\n\n> 难点：\n>- 按钮文案\n>- 认证达标条件\n\n3）认证证书详情\n\n> 难点：\n>- 证书二维码(http://github.com/Bacon/BaconQrCode)\n>- 生成证书图片\n\n#### 难点介绍\n\n认证和审核的逻辑拆分。\n\n### 5.协作群组模块\n\n#### 表/视图设计\n- i_group 用户群组表\n  - 群组人数\n  - 管理员\n  - 云端工作\n- i_group_log 群组变更日志表\n- i_group_job 群组-云端工作关联表\n- i_group_manager 群组-管理员关联表\n- v_job_report：云端工作日报统计表\n  - 上一周期工时\n  - 本期周期工时\n  - 本周工时 YEARWEEK(date)\n  - 近7天工时 datediff()\n  - 今天工时 fron_unixtime(date+28800,'%Y%m%d') (mysql终端的时区为格林威治时区)\n\n#### 功能介绍\n\n#####  后台\n\n1). 群组列表：列出所有协作群组\n\n> 难点：\n>- 群组-云端工作-开发者 关系关联\n\n##### 前台\n\n1). 群组列表：列出当前用户创建的、管理的、参与的协作群组\n\n> 难点：\n>- 群组-云端工作-开发者 关系关联\n\n2). 创建群组：关联管理员、云端工作创建管理群组\n\n3). 更新群组：关联管理员、云端工作更新管理群组\n\n> 难点：\n>- 当前用户创建的云端工作列表（排序）\n>   - 将已勾选的云端工作放在第一页\n\n4). 删除群组\n\n5). 群组详情：工时情况、日报情况、群组成员情况\n\n- 群组成员\n- 工时统计表【难点】\n- 日报列表\n- 角色权限判断\n\n#### 难点介绍\n\n多对多关系映射，中间关联表在查询时的作用，先查主群组表，再查关联表，再通过关联表查成员信息。直接通过关联表查询的话，会导致没有成员的群组展示不出来。直接通过成员信息表查询也是同理。\n\n## 自我反思\n\n## 经验总结\n\n## 项目展示\n\n### 云端工作/账单模块\n\n账单详情-后台\n![](https://ws1.sinaimg.cn/mw690/005EgYNMly1g1woab12ouj31li1047ad.jpg)\n\n账单详情-前台\n![](https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wql0qb3kj312m12qq89.jpg)\n\n账单结算\n![](https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wobhupntj325e18anat.jpg)\n\n结算表\n![](https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wqhwyopcj32la16uneh.jpg)\n\n核定工资\n![](https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wtvc0qjbj312c0outbe.jpg)\n\n### 认证模块\n\n认证列表-前台\n![](https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wny82faej31w21dmk5d.jpg)\n\n认证申请\n![](https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wn41p907j31600qsjut.jpg)\n\n认证证书\n![](https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wn524i8xj31fe0zy4gs.jpg)\n\n认证审核详情-后台\n![](https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wuzr4vicj31m215y11m.jpg)\n\n### 付费会员模块\n\n会员中心页\n![](https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wmx9578mj31jk166ama.jpg)\n\n会员设置-后台\n![](https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wuxgvy33j31bw0zs42y.jpg)\n\n会员订单-后台\n![](https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wuz37x1uj32e816u4fr.jpg)\n\n### 协作群组模块\n\n协作群组列表\n![](https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wnuadcvuj31lg1667fk.jpg)\n\n编辑协作群组\n![](https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wnwejct3j3188188gr8.jpg)\n\n协作群组详情\n![](https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wnsj0sqsj31wo1d67ez.jpg)\n\n协作群组-后台\n![](https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wuy427dij32cq19san9.jpg)\n\n### 面试评价\n\n整包/云端面试评价页\n![](https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wo7qw2k9j30tk0ycgp0.jpg)","source":"_posts/summary-yearly-1.md","raw":"---\ntitle: 【总结】一年的工作任务总结\ndate: 2019-04-01 20:00:00\ntags:\n  - 工作总结\ncategory:\n  - 【工作总结】\n---\n\n从2018年9月到2019年4月，经历了杭州互联网创业公司的996，对程序员这个职业的热情大大消磨掉了，加上没有精力总结整理，以及核心竞争力没有像样的突破，所以在这个大环境不好的前提下，依然选择了裸辞。半年多的高压工作，却没有抽出时间来整理，也实在是精力跟不上，在这段休息的时间里，准备停下来，把积累的能力总结整理一下，为了更好的出发。\n\n<!-- more -->\n\n## 功能模块介绍\n### 1.云端工作/云端账单模块\n\n#### 视图/表设计\n\n- i_job 云端工作表\n  - 增加审核人员、用户来源字段\n- i_job_period 云端工作账单表\n- v_periods（i_job + i_job_period + i_user_login + i_job_note_log）\n  - i_user_login 开发者和企业方信息\n  - i_job_note_log 云端工作备注（截取账单的备注信息）\n- i_job_deposit_log 云端工作押金变更日志\n  - 状态：支付、抵用、退还\n\n## 功能列表\n\n### 1.账单模块\n\n#### 后台\n\n1）账单详情\n\n- 未托管费用（100%结算比例，费率实时取工猫配置|网站配置）\n- 托管费用但未结算（企业方费率取数据库、开发者费率实时取）\n- 已结算（直接取数据库值）\n\n> 难点：\n>- 细项费用计算公式\n>- 费用固化阶段（什么状态时写入，什么状态时动态获取）\n\n2）核定工资\n\n- 确定云端工作信息（押金、核定工资、试用期）\n- 确定账单信息（押金、核定工资、试用期、开发票、发薪|结薪时间、服务费率）\n\n> 难点：\n> - 数据固化\n>   - 固化设置的`企业方`**费率**信息，支付时直接使用数据库值（托管费用时固化企业方**费用**）\n\n3）账单结算\n\n- 固化开发者费用\n- 判断是否可以结算？\n  - 已托管账单费用 / 有押金可以抵用\n- 判断是否可以使用押金结算？\n  - 有押金\n  - 云端工作结束合作\n  - 账单未托管费用\n\n> 难点：\n>- 细项费用计算公式\n>- 动态取值 or 取数据库值？\n>- 使用押金结算\n\n- 退还押金\n- 判断是否可以退换押金\n  - 有押金【难点】\n  - 云端工作结束合作\n\n5）结算综合表\n\n> 难点：\n>- 建试图简化数据查询\n>   - 次月托管（当前账单的下一周期账单，及其托管费用情况）\n>   - 账单备注（备注只关联了云端工作，现在需要和账单关联）\n>   - 审核人员和用户来源（后续添加云端表字段，不用再从备注表中截取）\n>- 导出(csv)\n\n#### 前台\n\n1）账单详情\n\n> 难点：\n>- 细项费用计算公式\n>- 不同用户身份展示不用费用\n\n### 2.面试评价模块\n\n#### 表设计\n- i_outsource_rating\n  - rating_type （对应RatingType枚举类）\n  - impressions_desc 面试评价关键词（保存文案、避免后期关键词变更，对应关系出错）\n  - interview_status 面试评价结果 （面试通过/面试不通过）\n\n#### 功能列表\n1）整合云端工作和整包项目的面试评价\n\n- 生成动态\n- 消息通知\n\n#### 难点整理\n\n整合云端工作和整包项目的面试评价，构建统一的面试评价模块\n\n### 3.付费会员模块\n\n#### 表/视图设计\n\n- i_vip_type 会员类型表（开发者会员、企业会员）\n  - 会员优惠信息（原价、现价）\n  - 会员类型、会员等级\n  - 购买方式（月、季、年）\n- i_user_vip 用户会员表\n  - 用户会员状态、到期时间\n  - 会员类型\n- i_vip_order 会员订单表\n  - 购买的会员类型\n  - 购买价格、优惠信息\n  - 续购/首购\n- i_vip_ compensate_record 补偿的优质开发者表（赠送会员）\n- v_user（增加会员信息）\n  - 会员类型\n  - 会员到期时间\n\n#### 功能列表\n\n##### 后台\n\n1）会员信息更新\n\n2）会员用户列表\n\n3)会员订单列表\n\n##### 前台\n\n1）会员中心\n\n2）会员支付\n\n难点：\n\n- 支付逻辑\n\n#### 难点介绍\n主要是：\n\n- 前期会员类型表的设计，如何存储会员优惠信息，及会员类型的界定（会员类型？、会员等级？、会员类型要不要和会员等级关联？、会员优惠怎么存？）\n\n- 会员优惠信息\n  - 和云端工作费率等相关联\n\n### 4.产品认证模块\n\n#### 表/视图设计\n\n- i_certified_product 认证产品表\n  - 状态（开放申请、暂停认证、下架隐藏）\n  - 价格（会员价、现价、原价）\n  - 基本信息（名称、描述、简介、证书文案）\n- i_certified_product_log 认证产品表变更日志\n- i_user_certified 用户认证表\n  - 审核状态（AuditStatus枚举类）\n  - 证书状态（CertStatus枚举类 未生成、正常、过期、撤销）\n  - 认证类型（CertType枚举类、AuditType枚举类）\n  - 审核信息（审核失败时间|操作人员、申请时间、审核失败次数）\n  - 证书基本信息（证书编号、有效时间）\n- i_user_cert_log 用户认证变更日志表\n- i_common_audit_log 通用的审核日志表\n  - 认证详情中的审核记录\n- v_user（增加认证信息）\n  - 认证类型\n  - 认证到期时间\n\n#### 功能介绍\n\n##### 后台\n\n1）认证产品列表：列出所有认证产品\n\n2）编辑认证产品\n\n- 富文本\n\n3）认证用户列表：列出所有认证的用户及相应的认证信息\n\n4）用户认证详情\n\n- 添加备注\n- 审核（申请、通过、拒绝、撤销）\n- 发送邮件（http://api.sendcloud.net/apiv2/mail/send）\n\n##### 前台\n\n1）认证产品列表\n\n> 难点：\n>- 按钮文案\n>- 排序（已认证/申请中的排在上方）\n\n2）认证产品申请详情\n\n> 难点：\n>- 按钮文案\n>- 认证达标条件\n\n3）认证证书详情\n\n> 难点：\n>- 证书二维码(http://github.com/Bacon/BaconQrCode)\n>- 生成证书图片\n\n#### 难点介绍\n\n认证和审核的逻辑拆分。\n\n### 5.协作群组模块\n\n#### 表/视图设计\n- i_group 用户群组表\n  - 群组人数\n  - 管理员\n  - 云端工作\n- i_group_log 群组变更日志表\n- i_group_job 群组-云端工作关联表\n- i_group_manager 群组-管理员关联表\n- v_job_report：云端工作日报统计表\n  - 上一周期工时\n  - 本期周期工时\n  - 本周工时 YEARWEEK(date)\n  - 近7天工时 datediff()\n  - 今天工时 fron_unixtime(date+28800,'%Y%m%d') (mysql终端的时区为格林威治时区)\n\n#### 功能介绍\n\n#####  后台\n\n1). 群组列表：列出所有协作群组\n\n> 难点：\n>- 群组-云端工作-开发者 关系关联\n\n##### 前台\n\n1). 群组列表：列出当前用户创建的、管理的、参与的协作群组\n\n> 难点：\n>- 群组-云端工作-开发者 关系关联\n\n2). 创建群组：关联管理员、云端工作创建管理群组\n\n3). 更新群组：关联管理员、云端工作更新管理群组\n\n> 难点：\n>- 当前用户创建的云端工作列表（排序）\n>   - 将已勾选的云端工作放在第一页\n\n4). 删除群组\n\n5). 群组详情：工时情况、日报情况、群组成员情况\n\n- 群组成员\n- 工时统计表【难点】\n- 日报列表\n- 角色权限判断\n\n#### 难点介绍\n\n多对多关系映射，中间关联表在查询时的作用，先查主群组表，再查关联表，再通过关联表查成员信息。直接通过关联表查询的话，会导致没有成员的群组展示不出来。直接通过成员信息表查询也是同理。\n\n## 自我反思\n\n## 经验总结\n\n## 项目展示\n\n### 云端工作/账单模块\n\n账单详情-后台\n![](https://ws1.sinaimg.cn/mw690/005EgYNMly1g1woab12ouj31li1047ad.jpg)\n\n账单详情-前台\n![](https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wql0qb3kj312m12qq89.jpg)\n\n账单结算\n![](https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wobhupntj325e18anat.jpg)\n\n结算表\n![](https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wqhwyopcj32la16uneh.jpg)\n\n核定工资\n![](https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wtvc0qjbj312c0outbe.jpg)\n\n### 认证模块\n\n认证列表-前台\n![](https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wny82faej31w21dmk5d.jpg)\n\n认证申请\n![](https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wn41p907j31600qsjut.jpg)\n\n认证证书\n![](https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wn524i8xj31fe0zy4gs.jpg)\n\n认证审核详情-后台\n![](https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wuzr4vicj31m215y11m.jpg)\n\n### 付费会员模块\n\n会员中心页\n![](https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wmx9578mj31jk166ama.jpg)\n\n会员设置-后台\n![](https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wuxgvy33j31bw0zs42y.jpg)\n\n会员订单-后台\n![](https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wuz37x1uj32e816u4fr.jpg)\n\n### 协作群组模块\n\n协作群组列表\n![](https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wnuadcvuj31lg1667fk.jpg)\n\n编辑协作群组\n![](https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wnwejct3j3188188gr8.jpg)\n\n协作群组详情\n![](https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wnsj0sqsj31wo1d67ez.jpg)\n\n协作群组-后台\n![](https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wuy427dij32cq19san9.jpg)\n\n### 面试评价\n\n整包/云端面试评价页\n![](https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wo7qw2k9j30tk0ycgp0.jpg)","slug":"summary-yearly-1","published":1,"updated":"2019-05-12T15:52:20.391Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c436006b2wuuqekdfoje","content":"<p>从2018年9月到2019年4月，经历了杭州互联网创业公司的996，对程序员这个职业的热情大大消磨掉了，加上没有精力总结整理，以及核心竞争力没有像样的突破，所以在这个大环境不好的前提下，依然选择了裸辞。半年多的高压工作，却没有抽出时间来整理，也实在是精力跟不上，在这段休息的时间里，准备停下来，把积累的能力总结整理一下，为了更好的出发。</p>\n<a id=\"more\"></a>\n<h2 id=\"功能模块介绍\"><a class=\"markdownIt-Anchor\" href=\"#功能模块介绍\"></a> 功能模块介绍</h2>\n<h3 id=\"1云端工作云端账单模块\"><a class=\"markdownIt-Anchor\" href=\"#1云端工作云端账单模块\"></a> 1.云端工作/云端账单模块</h3>\n<h4 id=\"视图表设计\"><a class=\"markdownIt-Anchor\" href=\"#视图表设计\"></a> 视图/表设计</h4>\n<ul>\n<li>i_job 云端工作表\n<ul>\n<li>增加审核人员、用户来源字段</li>\n</ul>\n</li>\n<li>i_job_period 云端工作账单表</li>\n<li>v_periods（i_job + i_job_period + i_user_login + i_job_note_log）\n<ul>\n<li>i_user_login 开发者和企业方信息</li>\n<li>i_job_note_log 云端工作备注（截取账单的备注信息）</li>\n</ul>\n</li>\n<li>i_job_deposit_log 云端工作押金变更日志\n<ul>\n<li>状态：支付、抵用、退还</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"功能列表\"><a class=\"markdownIt-Anchor\" href=\"#功能列表\"></a> 功能列表</h2>\n<h3 id=\"1账单模块\"><a class=\"markdownIt-Anchor\" href=\"#1账单模块\"></a> 1.账单模块</h3>\n<h4 id=\"后台\"><a class=\"markdownIt-Anchor\" href=\"#后台\"></a> 后台</h4>\n<p>1）账单详情</p>\n<ul>\n<li>未托管费用（100%结算比例，费率实时取工猫配置|网站配置）</li>\n<li>托管费用但未结算（企业方费率取数据库、开发者费率实时取）</li>\n<li>已结算（直接取数据库值）</li>\n</ul>\n<blockquote>\n<p>难点：</p>\n<ul>\n<li>细项费用计算公式</li>\n<li>费用固化阶段（什么状态时写入，什么状态时动态获取）</li>\n</ul>\n</blockquote>\n<p>2）核定工资</p>\n<ul>\n<li>确定云端工作信息（押金、核定工资、试用期）</li>\n<li>确定账单信息（押金、核定工资、试用期、开发票、发薪|结薪时间、服务费率）</li>\n</ul>\n<blockquote>\n<p>难点：</p>\n<ul>\n<li>数据固化\n<ul>\n<li>固化设置的<code>企业方</code><strong>费率</strong>信息，支付时直接使用数据库值（托管费用时固化企业方<strong>费用</strong>）</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>3）账单结算</p>\n<ul>\n<li>固化开发者费用</li>\n<li>判断是否可以结算？\n<ul>\n<li>已托管账单费用 / 有押金可以抵用</li>\n</ul>\n</li>\n<li>判断是否可以使用押金结算？\n<ul>\n<li>有押金</li>\n<li>云端工作结束合作</li>\n<li>账单未托管费用</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>难点：</p>\n<ul>\n<li>细项费用计算公式</li>\n<li>动态取值 or 取数据库值？</li>\n<li>使用押金结算</li>\n</ul>\n</blockquote>\n<ul>\n<li>退还押金</li>\n<li>判断是否可以退换押金\n<ul>\n<li>有押金【难点】</li>\n<li>云端工作结束合作</li>\n</ul>\n</li>\n</ul>\n<p>5）结算综合表</p>\n<blockquote>\n<p>难点：</p>\n<ul>\n<li>建试图简化数据查询\n<ul>\n<li>次月托管（当前账单的下一周期账单，及其托管费用情况）</li>\n<li>账单备注（备注只关联了云端工作，现在需要和账单关联）</li>\n<li>审核人员和用户来源（后续添加云端表字段，不用再从备注表中截取）</li>\n</ul>\n</li>\n<li>导出(csv)</li>\n</ul>\n</blockquote>\n<h4 id=\"前台\"><a class=\"markdownIt-Anchor\" href=\"#前台\"></a> 前台</h4>\n<p>1）账单详情</p>\n<blockquote>\n<p>难点：</p>\n<ul>\n<li>细项费用计算公式</li>\n<li>不同用户身份展示不用费用</li>\n</ul>\n</blockquote>\n<h3 id=\"2面试评价模块\"><a class=\"markdownIt-Anchor\" href=\"#2面试评价模块\"></a> 2.面试评价模块</h3>\n<h4 id=\"表设计\"><a class=\"markdownIt-Anchor\" href=\"#表设计\"></a> 表设计</h4>\n<ul>\n<li>i_outsource_rating\n<ul>\n<li>rating_type （对应RatingType枚举类）</li>\n<li>impressions_desc 面试评价关键词（保存文案、避免后期关键词变更，对应关系出错）</li>\n<li>interview_status 面试评价结果 （面试通过/面试不通过）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"功能列表-2\"><a class=\"markdownIt-Anchor\" href=\"#功能列表-2\"></a> 功能列表</h4>\n<p>1）整合云端工作和整包项目的面试评价</p>\n<ul>\n<li>生成动态</li>\n<li>消息通知</li>\n</ul>\n<h4 id=\"难点整理\"><a class=\"markdownIt-Anchor\" href=\"#难点整理\"></a> 难点整理</h4>\n<p>整合云端工作和整包项目的面试评价，构建统一的面试评价模块</p>\n<h3 id=\"3付费会员模块\"><a class=\"markdownIt-Anchor\" href=\"#3付费会员模块\"></a> 3.付费会员模块</h3>\n<h4 id=\"表视图设计\"><a class=\"markdownIt-Anchor\" href=\"#表视图设计\"></a> 表/视图设计</h4>\n<ul>\n<li>i_vip_type 会员类型表（开发者会员、企业会员）\n<ul>\n<li>会员优惠信息（原价、现价）</li>\n<li>会员类型、会员等级</li>\n<li>购买方式（月、季、年）</li>\n</ul>\n</li>\n<li>i_user_vip 用户会员表\n<ul>\n<li>用户会员状态、到期时间</li>\n<li>会员类型</li>\n</ul>\n</li>\n<li>i_vip_order 会员订单表\n<ul>\n<li>购买的会员类型</li>\n<li>购买价格、优惠信息</li>\n<li>续购/首购</li>\n</ul>\n</li>\n<li>i_vip_ compensate_record 补偿的优质开发者表（赠送会员）</li>\n<li>v_user（增加会员信息）\n<ul>\n<li>会员类型</li>\n<li>会员到期时间</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"功能列表-3\"><a class=\"markdownIt-Anchor\" href=\"#功能列表-3\"></a> 功能列表</h4>\n<h5 id=\"后台-2\"><a class=\"markdownIt-Anchor\" href=\"#后台-2\"></a> 后台</h5>\n<p>1）会员信息更新</p>\n<p>2）会员用户列表</p>\n<p>3)会员订单列表</p>\n<h5 id=\"前台-2\"><a class=\"markdownIt-Anchor\" href=\"#前台-2\"></a> 前台</h5>\n<p>1）会员中心</p>\n<p>2）会员支付</p>\n<p>难点：</p>\n<ul>\n<li>支付逻辑</li>\n</ul>\n<h4 id=\"难点介绍\"><a class=\"markdownIt-Anchor\" href=\"#难点介绍\"></a> 难点介绍</h4>\n<p>主要是：</p>\n<ul>\n<li>\n<p>前期会员类型表的设计，如何存储会员优惠信息，及会员类型的界定（会员类型？、会员等级？、会员类型要不要和会员等级关联？、会员优惠怎么存？）</p>\n</li>\n<li>\n<p>会员优惠信息</p>\n<ul>\n<li>和云端工作费率等相关联</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4产品认证模块\"><a class=\"markdownIt-Anchor\" href=\"#4产品认证模块\"></a> 4.产品认证模块</h3>\n<h4 id=\"表视图设计-2\"><a class=\"markdownIt-Anchor\" href=\"#表视图设计-2\"></a> 表/视图设计</h4>\n<ul>\n<li>i_certified_product 认证产品表\n<ul>\n<li>状态（开放申请、暂停认证、下架隐藏）</li>\n<li>价格（会员价、现价、原价）</li>\n<li>基本信息（名称、描述、简介、证书文案）</li>\n</ul>\n</li>\n<li>i_certified_product_log 认证产品表变更日志</li>\n<li>i_user_certified 用户认证表\n<ul>\n<li>审核状态（AuditStatus枚举类）</li>\n<li>证书状态（CertStatus枚举类 未生成、正常、过期、撤销）</li>\n<li>认证类型（CertType枚举类、AuditType枚举类）</li>\n<li>审核信息（审核失败时间|操作人员、申请时间、审核失败次数）</li>\n<li>证书基本信息（证书编号、有效时间）</li>\n</ul>\n</li>\n<li>i_user_cert_log 用户认证变更日志表</li>\n<li>i_common_audit_log 通用的审核日志表\n<ul>\n<li>认证详情中的审核记录</li>\n</ul>\n</li>\n<li>v_user（增加认证信息）\n<ul>\n<li>认证类型</li>\n<li>认证到期时间</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"功能介绍\"><a class=\"markdownIt-Anchor\" href=\"#功能介绍\"></a> 功能介绍</h4>\n<h5 id=\"后台-3\"><a class=\"markdownIt-Anchor\" href=\"#后台-3\"></a> 后台</h5>\n<p>1）认证产品列表：列出所有认证产品</p>\n<p>2）编辑认证产品</p>\n<ul>\n<li>富文本</li>\n</ul>\n<p>3）认证用户列表：列出所有认证的用户及相应的认证信息</p>\n<p>4）用户认证详情</p>\n<ul>\n<li>添加备注</li>\n<li>审核（申请、通过、拒绝、撤销）</li>\n<li>发送邮件（<a href=\"http://api.sendcloud.net/apiv2/mail/send%EF%BC%89\" target=\"_blank\" rel=\"noopener\">http://api.sendcloud.net/apiv2/mail/send）</a></li>\n</ul>\n<h5 id=\"前台-3\"><a class=\"markdownIt-Anchor\" href=\"#前台-3\"></a> 前台</h5>\n<p>1）认证产品列表</p>\n<blockquote>\n<p>难点：</p>\n<ul>\n<li>按钮文案</li>\n<li>排序（已认证/申请中的排在上方）</li>\n</ul>\n</blockquote>\n<p>2）认证产品申请详情</p>\n<blockquote>\n<p>难点：</p>\n<ul>\n<li>按钮文案</li>\n<li>认证达标条件</li>\n</ul>\n</blockquote>\n<p>3）认证证书详情</p>\n<blockquote>\n<p>难点：</p>\n<ul>\n<li>证书二维码(<a href=\"http://github.com/Bacon/BaconQrCode\" target=\"_blank\" rel=\"noopener\">http://github.com/Bacon/BaconQrCode</a>)</li>\n<li>生成证书图片</li>\n</ul>\n</blockquote>\n<h4 id=\"难点介绍-2\"><a class=\"markdownIt-Anchor\" href=\"#难点介绍-2\"></a> 难点介绍</h4>\n<p>认证和审核的逻辑拆分。</p>\n<h3 id=\"5协作群组模块\"><a class=\"markdownIt-Anchor\" href=\"#5协作群组模块\"></a> 5.协作群组模块</h3>\n<h4 id=\"表视图设计-3\"><a class=\"markdownIt-Anchor\" href=\"#表视图设计-3\"></a> 表/视图设计</h4>\n<ul>\n<li>i_group 用户群组表\n<ul>\n<li>群组人数</li>\n<li>管理员</li>\n<li>云端工作</li>\n</ul>\n</li>\n<li>i_group_log 群组变更日志表</li>\n<li>i_group_job 群组-云端工作关联表</li>\n<li>i_group_manager 群组-管理员关联表</li>\n<li>v_job_report：云端工作日报统计表\n<ul>\n<li>上一周期工时</li>\n<li>本期周期工时</li>\n<li>本周工时 YEARWEEK(date)</li>\n<li>近7天工时 datediff()</li>\n<li>今天工时 fron_unixtime(date+28800,’%Y%m%d’) (mysql终端的时区为格林威治时区)</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"功能介绍-2\"><a class=\"markdownIt-Anchor\" href=\"#功能介绍-2\"></a> 功能介绍</h4>\n<h5 id=\"后台-4\"><a class=\"markdownIt-Anchor\" href=\"#后台-4\"></a> 后台</h5>\n<p>1). 群组列表：列出所有协作群组</p>\n<blockquote>\n<p>难点：</p>\n<ul>\n<li>群组-云端工作-开发者 关系关联</li>\n</ul>\n</blockquote>\n<h5 id=\"前台-4\"><a class=\"markdownIt-Anchor\" href=\"#前台-4\"></a> 前台</h5>\n<p>1). 群组列表：列出当前用户创建的、管理的、参与的协作群组</p>\n<blockquote>\n<p>难点：</p>\n<ul>\n<li>群组-云端工作-开发者 关系关联</li>\n</ul>\n</blockquote>\n<p>2). 创建群组：关联管理员、云端工作创建管理群组</p>\n<p>3). 更新群组：关联管理员、云端工作更新管理群组</p>\n<blockquote>\n<p>难点：</p>\n<ul>\n<li>当前用户创建的云端工作列表（排序）\n<ul>\n<li>将已勾选的云端工作放在第一页</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>4). 删除群组</p>\n<p>5). 群组详情：工时情况、日报情况、群组成员情况</p>\n<ul>\n<li>群组成员</li>\n<li>工时统计表【难点】</li>\n<li>日报列表</li>\n<li>角色权限判断</li>\n</ul>\n<h4 id=\"难点介绍-3\"><a class=\"markdownIt-Anchor\" href=\"#难点介绍-3\"></a> 难点介绍</h4>\n<p>多对多关系映射，中间关联表在查询时的作用，先查主群组表，再查关联表，再通过关联表查成员信息。直接通过关联表查询的话，会导致没有成员的群组展示不出来。直接通过成员信息表查询也是同理。</p>\n<h2 id=\"自我反思\"><a class=\"markdownIt-Anchor\" href=\"#自我反思\"></a> 自我反思</h2>\n<h2 id=\"经验总结\"><a class=\"markdownIt-Anchor\" href=\"#经验总结\"></a> 经验总结</h2>\n<h2 id=\"项目展示\"><a class=\"markdownIt-Anchor\" href=\"#项目展示\"></a> 项目展示</h2>\n<h3 id=\"云端工作账单模块\"><a class=\"markdownIt-Anchor\" href=\"#云端工作账单模块\"></a> 云端工作/账单模块</h3>\n<p>账单详情-后台<br>\n<img src=\"https://ws1.sinaimg.cn/mw690/005EgYNMly1g1woab12ouj31li1047ad.jpg\" alt=\"\"></p>\n<p>账单详情-前台<br>\n<img src=\"https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wql0qb3kj312m12qq89.jpg\" alt=\"\"></p>\n<p>账单结算<br>\n<img src=\"https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wobhupntj325e18anat.jpg\" alt=\"\"></p>\n<p>结算表<br>\n<img src=\"https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wqhwyopcj32la16uneh.jpg\" alt=\"\"></p>\n<p>核定工资<br>\n<img src=\"https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wtvc0qjbj312c0outbe.jpg\" alt=\"\"></p>\n<h3 id=\"认证模块\"><a class=\"markdownIt-Anchor\" href=\"#认证模块\"></a> 认证模块</h3>\n<p>认证列表-前台<br>\n<img src=\"https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wny82faej31w21dmk5d.jpg\" alt=\"\"></p>\n<p>认证申请<br>\n<img src=\"https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wn41p907j31600qsjut.jpg\" alt=\"\"></p>\n<p>认证证书<br>\n<img src=\"https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wn524i8xj31fe0zy4gs.jpg\" alt=\"\"></p>\n<p>认证审核详情-后台<br>\n<img src=\"https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wuzr4vicj31m215y11m.jpg\" alt=\"\"></p>\n<h3 id=\"付费会员模块\"><a class=\"markdownIt-Anchor\" href=\"#付费会员模块\"></a> 付费会员模块</h3>\n<p>会员中心页<br>\n<img src=\"https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wmx9578mj31jk166ama.jpg\" alt=\"\"></p>\n<p>会员设置-后台<br>\n<img src=\"https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wuxgvy33j31bw0zs42y.jpg\" alt=\"\"></p>\n<p>会员订单-后台<br>\n<img src=\"https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wuz37x1uj32e816u4fr.jpg\" alt=\"\"></p>\n<h3 id=\"协作群组模块\"><a class=\"markdownIt-Anchor\" href=\"#协作群组模块\"></a> 协作群组模块</h3>\n<p>协作群组列表<br>\n<img src=\"https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wnuadcvuj31lg1667fk.jpg\" alt=\"\"></p>\n<p>编辑协作群组<br>\n<img src=\"https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wnwejct3j3188188gr8.jpg\" alt=\"\"></p>\n<p>协作群组详情<br>\n<img src=\"https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wnsj0sqsj31wo1d67ez.jpg\" alt=\"\"></p>\n<p>协作群组-后台<br>\n<img src=\"https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wuy427dij32cq19san9.jpg\" alt=\"\"></p>\n<h3 id=\"面试评价\"><a class=\"markdownIt-Anchor\" href=\"#面试评价\"></a> 面试评价</h3>\n<p>整包/云端面试评价页<br>\n<img src=\"https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wo7qw2k9j30tk0ycgp0.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>从2018年9月到2019年4月，经历了杭州互联网创业公司的996，对程序员这个职业的热情大大消磨掉了，加上没有精力总结整理，以及核心竞争力没有像样的突破，所以在这个大环境不好的前提下，依然选择了裸辞。半年多的高压工作，却没有抽出时间来整理，也实在是精力跟不上，在这段休息的时间里，准备停下来，把积累的能力总结整理一下，为了更好的出发。</p>","more":"<h2 id=\"功能模块介绍\"><a class=\"markdownIt-Anchor\" href=\"#功能模块介绍\"></a> 功能模块介绍</h2>\n<h3 id=\"1云端工作云端账单模块\"><a class=\"markdownIt-Anchor\" href=\"#1云端工作云端账单模块\"></a> 1.云端工作/云端账单模块</h3>\n<h4 id=\"视图表设计\"><a class=\"markdownIt-Anchor\" href=\"#视图表设计\"></a> 视图/表设计</h4>\n<ul>\n<li>i_job 云端工作表\n<ul>\n<li>增加审核人员、用户来源字段</li>\n</ul>\n</li>\n<li>i_job_period 云端工作账单表</li>\n<li>v_periods（i_job + i_job_period + i_user_login + i_job_note_log）\n<ul>\n<li>i_user_login 开发者和企业方信息</li>\n<li>i_job_note_log 云端工作备注（截取账单的备注信息）</li>\n</ul>\n</li>\n<li>i_job_deposit_log 云端工作押金变更日志\n<ul>\n<li>状态：支付、抵用、退还</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"功能列表\"><a class=\"markdownIt-Anchor\" href=\"#功能列表\"></a> 功能列表</h2>\n<h3 id=\"1账单模块\"><a class=\"markdownIt-Anchor\" href=\"#1账单模块\"></a> 1.账单模块</h3>\n<h4 id=\"后台\"><a class=\"markdownIt-Anchor\" href=\"#后台\"></a> 后台</h4>\n<p>1）账单详情</p>\n<ul>\n<li>未托管费用（100%结算比例，费率实时取工猫配置|网站配置）</li>\n<li>托管费用但未结算（企业方费率取数据库、开发者费率实时取）</li>\n<li>已结算（直接取数据库值）</li>\n</ul>\n<blockquote>\n<p>难点：</p>\n<ul>\n<li>细项费用计算公式</li>\n<li>费用固化阶段（什么状态时写入，什么状态时动态获取）</li>\n</ul>\n</blockquote>\n<p>2）核定工资</p>\n<ul>\n<li>确定云端工作信息（押金、核定工资、试用期）</li>\n<li>确定账单信息（押金、核定工资、试用期、开发票、发薪|结薪时间、服务费率）</li>\n</ul>\n<blockquote>\n<p>难点：</p>\n<ul>\n<li>数据固化\n<ul>\n<li>固化设置的<code>企业方</code><strong>费率</strong>信息，支付时直接使用数据库值（托管费用时固化企业方<strong>费用</strong>）</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>3）账单结算</p>\n<ul>\n<li>固化开发者费用</li>\n<li>判断是否可以结算？\n<ul>\n<li>已托管账单费用 / 有押金可以抵用</li>\n</ul>\n</li>\n<li>判断是否可以使用押金结算？\n<ul>\n<li>有押金</li>\n<li>云端工作结束合作</li>\n<li>账单未托管费用</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>难点：</p>\n<ul>\n<li>细项费用计算公式</li>\n<li>动态取值 or 取数据库值？</li>\n<li>使用押金结算</li>\n</ul>\n</blockquote>\n<ul>\n<li>退还押金</li>\n<li>判断是否可以退换押金\n<ul>\n<li>有押金【难点】</li>\n<li>云端工作结束合作</li>\n</ul>\n</li>\n</ul>\n<p>5）结算综合表</p>\n<blockquote>\n<p>难点：</p>\n<ul>\n<li>建试图简化数据查询\n<ul>\n<li>次月托管（当前账单的下一周期账单，及其托管费用情况）</li>\n<li>账单备注（备注只关联了云端工作，现在需要和账单关联）</li>\n<li>审核人员和用户来源（后续添加云端表字段，不用再从备注表中截取）</li>\n</ul>\n</li>\n<li>导出(csv)</li>\n</ul>\n</blockquote>\n<h4 id=\"前台\"><a class=\"markdownIt-Anchor\" href=\"#前台\"></a> 前台</h4>\n<p>1）账单详情</p>\n<blockquote>\n<p>难点：</p>\n<ul>\n<li>细项费用计算公式</li>\n<li>不同用户身份展示不用费用</li>\n</ul>\n</blockquote>\n<h3 id=\"2面试评价模块\"><a class=\"markdownIt-Anchor\" href=\"#2面试评价模块\"></a> 2.面试评价模块</h3>\n<h4 id=\"表设计\"><a class=\"markdownIt-Anchor\" href=\"#表设计\"></a> 表设计</h4>\n<ul>\n<li>i_outsource_rating\n<ul>\n<li>rating_type （对应RatingType枚举类）</li>\n<li>impressions_desc 面试评价关键词（保存文案、避免后期关键词变更，对应关系出错）</li>\n<li>interview_status 面试评价结果 （面试通过/面试不通过）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"功能列表-2\"><a class=\"markdownIt-Anchor\" href=\"#功能列表-2\"></a> 功能列表</h4>\n<p>1）整合云端工作和整包项目的面试评价</p>\n<ul>\n<li>生成动态</li>\n<li>消息通知</li>\n</ul>\n<h4 id=\"难点整理\"><a class=\"markdownIt-Anchor\" href=\"#难点整理\"></a> 难点整理</h4>\n<p>整合云端工作和整包项目的面试评价，构建统一的面试评价模块</p>\n<h3 id=\"3付费会员模块\"><a class=\"markdownIt-Anchor\" href=\"#3付费会员模块\"></a> 3.付费会员模块</h3>\n<h4 id=\"表视图设计\"><a class=\"markdownIt-Anchor\" href=\"#表视图设计\"></a> 表/视图设计</h4>\n<ul>\n<li>i_vip_type 会员类型表（开发者会员、企业会员）\n<ul>\n<li>会员优惠信息（原价、现价）</li>\n<li>会员类型、会员等级</li>\n<li>购买方式（月、季、年）</li>\n</ul>\n</li>\n<li>i_user_vip 用户会员表\n<ul>\n<li>用户会员状态、到期时间</li>\n<li>会员类型</li>\n</ul>\n</li>\n<li>i_vip_order 会员订单表\n<ul>\n<li>购买的会员类型</li>\n<li>购买价格、优惠信息</li>\n<li>续购/首购</li>\n</ul>\n</li>\n<li>i_vip_ compensate_record 补偿的优质开发者表（赠送会员）</li>\n<li>v_user（增加会员信息）\n<ul>\n<li>会员类型</li>\n<li>会员到期时间</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"功能列表-3\"><a class=\"markdownIt-Anchor\" href=\"#功能列表-3\"></a> 功能列表</h4>\n<h5 id=\"后台-2\"><a class=\"markdownIt-Anchor\" href=\"#后台-2\"></a> 后台</h5>\n<p>1）会员信息更新</p>\n<p>2）会员用户列表</p>\n<p>3)会员订单列表</p>\n<h5 id=\"前台-2\"><a class=\"markdownIt-Anchor\" href=\"#前台-2\"></a> 前台</h5>\n<p>1）会员中心</p>\n<p>2）会员支付</p>\n<p>难点：</p>\n<ul>\n<li>支付逻辑</li>\n</ul>\n<h4 id=\"难点介绍\"><a class=\"markdownIt-Anchor\" href=\"#难点介绍\"></a> 难点介绍</h4>\n<p>主要是：</p>\n<ul>\n<li>\n<p>前期会员类型表的设计，如何存储会员优惠信息，及会员类型的界定（会员类型？、会员等级？、会员类型要不要和会员等级关联？、会员优惠怎么存？）</p>\n</li>\n<li>\n<p>会员优惠信息</p>\n<ul>\n<li>和云端工作费率等相关联</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4产品认证模块\"><a class=\"markdownIt-Anchor\" href=\"#4产品认证模块\"></a> 4.产品认证模块</h3>\n<h4 id=\"表视图设计-2\"><a class=\"markdownIt-Anchor\" href=\"#表视图设计-2\"></a> 表/视图设计</h4>\n<ul>\n<li>i_certified_product 认证产品表\n<ul>\n<li>状态（开放申请、暂停认证、下架隐藏）</li>\n<li>价格（会员价、现价、原价）</li>\n<li>基本信息（名称、描述、简介、证书文案）</li>\n</ul>\n</li>\n<li>i_certified_product_log 认证产品表变更日志</li>\n<li>i_user_certified 用户认证表\n<ul>\n<li>审核状态（AuditStatus枚举类）</li>\n<li>证书状态（CertStatus枚举类 未生成、正常、过期、撤销）</li>\n<li>认证类型（CertType枚举类、AuditType枚举类）</li>\n<li>审核信息（审核失败时间|操作人员、申请时间、审核失败次数）</li>\n<li>证书基本信息（证书编号、有效时间）</li>\n</ul>\n</li>\n<li>i_user_cert_log 用户认证变更日志表</li>\n<li>i_common_audit_log 通用的审核日志表\n<ul>\n<li>认证详情中的审核记录</li>\n</ul>\n</li>\n<li>v_user（增加认证信息）\n<ul>\n<li>认证类型</li>\n<li>认证到期时间</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"功能介绍\"><a class=\"markdownIt-Anchor\" href=\"#功能介绍\"></a> 功能介绍</h4>\n<h5 id=\"后台-3\"><a class=\"markdownIt-Anchor\" href=\"#后台-3\"></a> 后台</h5>\n<p>1）认证产品列表：列出所有认证产品</p>\n<p>2）编辑认证产品</p>\n<ul>\n<li>富文本</li>\n</ul>\n<p>3）认证用户列表：列出所有认证的用户及相应的认证信息</p>\n<p>4）用户认证详情</p>\n<ul>\n<li>添加备注</li>\n<li>审核（申请、通过、拒绝、撤销）</li>\n<li>发送邮件（<a href=\"http://api.sendcloud.net/apiv2/mail/send%EF%BC%89\" target=\"_blank\" rel=\"noopener\">http://api.sendcloud.net/apiv2/mail/send）</a></li>\n</ul>\n<h5 id=\"前台-3\"><a class=\"markdownIt-Anchor\" href=\"#前台-3\"></a> 前台</h5>\n<p>1）认证产品列表</p>\n<blockquote>\n<p>难点：</p>\n<ul>\n<li>按钮文案</li>\n<li>排序（已认证/申请中的排在上方）</li>\n</ul>\n</blockquote>\n<p>2）认证产品申请详情</p>\n<blockquote>\n<p>难点：</p>\n<ul>\n<li>按钮文案</li>\n<li>认证达标条件</li>\n</ul>\n</blockquote>\n<p>3）认证证书详情</p>\n<blockquote>\n<p>难点：</p>\n<ul>\n<li>证书二维码(<a href=\"http://github.com/Bacon/BaconQrCode\" target=\"_blank\" rel=\"noopener\">http://github.com/Bacon/BaconQrCode</a>)</li>\n<li>生成证书图片</li>\n</ul>\n</blockquote>\n<h4 id=\"难点介绍-2\"><a class=\"markdownIt-Anchor\" href=\"#难点介绍-2\"></a> 难点介绍</h4>\n<p>认证和审核的逻辑拆分。</p>\n<h3 id=\"5协作群组模块\"><a class=\"markdownIt-Anchor\" href=\"#5协作群组模块\"></a> 5.协作群组模块</h3>\n<h4 id=\"表视图设计-3\"><a class=\"markdownIt-Anchor\" href=\"#表视图设计-3\"></a> 表/视图设计</h4>\n<ul>\n<li>i_group 用户群组表\n<ul>\n<li>群组人数</li>\n<li>管理员</li>\n<li>云端工作</li>\n</ul>\n</li>\n<li>i_group_log 群组变更日志表</li>\n<li>i_group_job 群组-云端工作关联表</li>\n<li>i_group_manager 群组-管理员关联表</li>\n<li>v_job_report：云端工作日报统计表\n<ul>\n<li>上一周期工时</li>\n<li>本期周期工时</li>\n<li>本周工时 YEARWEEK(date)</li>\n<li>近7天工时 datediff()</li>\n<li>今天工时 fron_unixtime(date+28800,’%Y%m%d’) (mysql终端的时区为格林威治时区)</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"功能介绍-2\"><a class=\"markdownIt-Anchor\" href=\"#功能介绍-2\"></a> 功能介绍</h4>\n<h5 id=\"后台-4\"><a class=\"markdownIt-Anchor\" href=\"#后台-4\"></a> 后台</h5>\n<p>1). 群组列表：列出所有协作群组</p>\n<blockquote>\n<p>难点：</p>\n<ul>\n<li>群组-云端工作-开发者 关系关联</li>\n</ul>\n</blockquote>\n<h5 id=\"前台-4\"><a class=\"markdownIt-Anchor\" href=\"#前台-4\"></a> 前台</h5>\n<p>1). 群组列表：列出当前用户创建的、管理的、参与的协作群组</p>\n<blockquote>\n<p>难点：</p>\n<ul>\n<li>群组-云端工作-开发者 关系关联</li>\n</ul>\n</blockquote>\n<p>2). 创建群组：关联管理员、云端工作创建管理群组</p>\n<p>3). 更新群组：关联管理员、云端工作更新管理群组</p>\n<blockquote>\n<p>难点：</p>\n<ul>\n<li>当前用户创建的云端工作列表（排序）\n<ul>\n<li>将已勾选的云端工作放在第一页</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>4). 删除群组</p>\n<p>5). 群组详情：工时情况、日报情况、群组成员情况</p>\n<ul>\n<li>群组成员</li>\n<li>工时统计表【难点】</li>\n<li>日报列表</li>\n<li>角色权限判断</li>\n</ul>\n<h4 id=\"难点介绍-3\"><a class=\"markdownIt-Anchor\" href=\"#难点介绍-3\"></a> 难点介绍</h4>\n<p>多对多关系映射，中间关联表在查询时的作用，先查主群组表，再查关联表，再通过关联表查成员信息。直接通过关联表查询的话，会导致没有成员的群组展示不出来。直接通过成员信息表查询也是同理。</p>\n<h2 id=\"自我反思\"><a class=\"markdownIt-Anchor\" href=\"#自我反思\"></a> 自我反思</h2>\n<h2 id=\"经验总结\"><a class=\"markdownIt-Anchor\" href=\"#经验总结\"></a> 经验总结</h2>\n<h2 id=\"项目展示\"><a class=\"markdownIt-Anchor\" href=\"#项目展示\"></a> 项目展示</h2>\n<h3 id=\"云端工作账单模块\"><a class=\"markdownIt-Anchor\" href=\"#云端工作账单模块\"></a> 云端工作/账单模块</h3>\n<p>账单详情-后台<br>\n<img src=\"https://ws1.sinaimg.cn/mw690/005EgYNMly1g1woab12ouj31li1047ad.jpg\" alt=\"\"></p>\n<p>账单详情-前台<br>\n<img src=\"https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wql0qb3kj312m12qq89.jpg\" alt=\"\"></p>\n<p>账单结算<br>\n<img src=\"https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wobhupntj325e18anat.jpg\" alt=\"\"></p>\n<p>结算表<br>\n<img src=\"https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wqhwyopcj32la16uneh.jpg\" alt=\"\"></p>\n<p>核定工资<br>\n<img src=\"https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wtvc0qjbj312c0outbe.jpg\" alt=\"\"></p>\n<h3 id=\"认证模块\"><a class=\"markdownIt-Anchor\" href=\"#认证模块\"></a> 认证模块</h3>\n<p>认证列表-前台<br>\n<img src=\"https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wny82faej31w21dmk5d.jpg\" alt=\"\"></p>\n<p>认证申请<br>\n<img src=\"https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wn41p907j31600qsjut.jpg\" alt=\"\"></p>\n<p>认证证书<br>\n<img src=\"https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wn524i8xj31fe0zy4gs.jpg\" alt=\"\"></p>\n<p>认证审核详情-后台<br>\n<img src=\"https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wuzr4vicj31m215y11m.jpg\" alt=\"\"></p>\n<h3 id=\"付费会员模块\"><a class=\"markdownIt-Anchor\" href=\"#付费会员模块\"></a> 付费会员模块</h3>\n<p>会员中心页<br>\n<img src=\"https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wmx9578mj31jk166ama.jpg\" alt=\"\"></p>\n<p>会员设置-后台<br>\n<img src=\"https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wuxgvy33j31bw0zs42y.jpg\" alt=\"\"></p>\n<p>会员订单-后台<br>\n<img src=\"https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wuz37x1uj32e816u4fr.jpg\" alt=\"\"></p>\n<h3 id=\"协作群组模块\"><a class=\"markdownIt-Anchor\" href=\"#协作群组模块\"></a> 协作群组模块</h3>\n<p>协作群组列表<br>\n<img src=\"https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wnuadcvuj31lg1667fk.jpg\" alt=\"\"></p>\n<p>编辑协作群组<br>\n<img src=\"https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wnwejct3j3188188gr8.jpg\" alt=\"\"></p>\n<p>协作群组详情<br>\n<img src=\"https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wnsj0sqsj31wo1d67ez.jpg\" alt=\"\"></p>\n<p>协作群组-后台<br>\n<img src=\"https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wuy427dij32cq19san9.jpg\" alt=\"\"></p>\n<h3 id=\"面试评价\"><a class=\"markdownIt-Anchor\" href=\"#面试评价\"></a> 面试评价</h3>\n<p>整包/云端面试评价页<br>\n<img src=\"https://ws1.sinaimg.cn/mw690/005EgYNMly1g1wo7qw2k9j30tk0ycgp0.jpg\" alt=\"\"></p>"},{"title":"【实战】Tp5+小程序(二)--接口编写","date":"2018-07-05T08:26:58.000Z","_content":"\nThinkPHP5 从入门到深入学习，结合实战项目深入理解 ThinkPHP5 的特性和使用方法。编写完成简单的基于 RESTFul 接口，实现相应功能，掌握控制器、模型、异常处理、数据校验的使用。\n\n<!--more-->\n\n## 8-1 Banner 相关表分析（数据表关系分析）\n\n- banner 位的数据表`banner`\n\n`banner(id, name, description, delete_time, update_time)`\n\n- 每个 banner 位图片的数据表`banner_item`\n\n`banner_item(id, img_id, key_word, type, delete_time, banner_id, update_time)`\n\n- 图片表`image`\n\n`image(id, url, from, delete_time, update_time)`\n\n    banner <=> banner_item 一对多关系\n    image <=> banner_item 一对一关系\n\n## 8-2 模型关联--定义关联与查询关联\n\n> model/Banner.php\n\n```php\n// 创建关联方法\npublic function items()\n{\n    // 参数1：关联模型的模型名\n    // 参数2：关联模型的外键\n    // 参数3：当前模型的主键\n    // hasMany：表示是一对多的关系\n    return $this->hasMany('BannerItem', 'banner_id', 'id');\n    // 【需要创建BannerItem模型类文件】\n}\n```\n\n> controller/Banner.php\n\n```php\n//with()方法，设置关联模型\n$banner = BannerModel::with('items')->find($id);\n//等价于 $banner = model('banner')->with('items')->find($id);\n```\n\n执行结果时会自动附件关联信息。\n\n```json\n{\n  \"id\": 1,\n  \"name\": \"首页置顶\",\n  \"description\": \"首页轮播图\",\n  \"delete_time\": null,\n  \"update_time\": \"1970-01-01 08:00:00\",\n  \"items\": [\n    {\n      \"id\": 1,\n      \"img_id\": 65,\n      \"key_word\": \"6\",\n      \"type\": 1,\n      \"delete_time\": null,\n      \"banner_id\": 1,\n      \"update_time\": \"1970-01-01 08:00:00\"\n    }\n  ]\n}\n```\n\n## 8-3 模型关联 --嵌套关联查询\n\n1.多个关联表\n\n    with(['items','item2'])\n\n2.命令行创建模型（自动完成模板）\n\n    php think make:model api/Image\n\n3.banner 嵌套 items，现在需要给 items 嵌套 img 相关信息\n\n多层嵌套使用方法：\n\n    with(['items', 'items.img'])\n\n4.具体实现：\n\n- `model/BannerItem.php`\n\n```php\npublic function img()\n{\n    // BannerItem和Image是一对一的关系，使用的方法是belongsTo\n    return $this->belongsTo('Image', 'img_id', 'id');\n    //【需要创建Image模型类文件】\n}\n```\n\n也可以在`model/Image.php`中定义,实现的效果是一样的。\n\n- `controller/Banner.php`\n\n```php\n// 多层嵌套的使用\n$banner = BannerModel::with(['items', 'items.img'])->find($id);\n```\n\n5.实现效果如下：\n\n```json\n{\n  \"id\": 1,\n  \"name\": \"首页置顶\",\n  \"description\": \"首页轮播图\",\n  \"delete_time\": null,\n  \"update_time\": \"1970-01-01 08:00:00\",\n  \"items\": [\n    {\n      \"id\": 1,\n      \"img_id\": 65,\n      \"key_word\": \"6\",\n      \"type\": 1,\n      \"delete_time\": null,\n      \"banner_id\": 1,\n      \"update_time\": \"1970-01-01 08:00:00\",\n      \"img\": {\n        \"id\": 65,\n        \"url\": \"/banner-4a.png\",\n        \"from\": 1,\n        \"delete_time\": null,\n        \"update_time\": \"1970-01-01 08:00:00\"\n      }\n    },\n    {...}\n  ]\n}\n```\n\n## 8-4 隐藏模型字段\n\n- 方法 1：将对象转化为数组`toArray()`，再将该字段 unset\n\n```php\n$banner = $banner->toArray();\nunset($banner['delete_time']);\n```\n\n- 方法 2：使用对象的 `hidden()` 方法\n\n```php\n$banner->hidden(['update_time', 'delete_time']);\n```\n\n- 方法 3：只显示指定字段`visible()`\n\n```php\n$banner->visible(['id', 'name']);\n```\n\n## 8-5 在模型内部隐藏字段\n\n1.对嵌套的数据字段隐藏\n\n最好的办法：在相应的模型类中定义相应的属性。\n\n- 想要隐藏 `banner` 的字段信息\n\n```php\n// model/Banner.php\n// 隐藏的字段\nprotected $hidden = ['id'];\n// 只显示的字段\nprotected $visibale = ['name','update_time'];\n```\n\n- 想要隐藏 `banner.items` 下的字段信息：\n\n```php\n// model/BannerItem.php\nprotected $hidden = ['id'];\n```\n\n- 想要隐藏 `banner.items.img` 的字段信息\n\n```php\n// model/Image.php\nprotected $hidden = ['from'];\n```\n\n## 8-6 图片资源 URL 配置\n\n1.数据库存放的图片 url 是相对地址，所以获取的数据也是相对地址，不能直接获取到图片的具体资源位置。\n\n    具体路径 = 服务器域名+路径配置+相对地址\n\n2.定义自己项目相关的配置 =》 自定义配置文件\n\nTP5 扩展配置目录 =》自动加载该目录下的配置文件\n\n默认位置：`application/extra`\n\n3.定义配置项:\n\n```php\n// application/extra/setting.php\nreturn [\n  'img_prefix' => 'http://mypro.com/static/images'\n];\n```\n\n4.tp5 中只有 public 目录是对外公开，可以访问的，所以图片资源应当放在 public 目录下\n\n5.读取配置文件：\n\n```php\n// 配置文件自动被加载，直接读取配置项即可\nconfig('setting.img_prefix');\n```\n\n6.**【注】：如果自定义了`CONF_PATH`目录，则自动加载的配置文件目录应该在`config/extra`目录下**\n\n```php\n// public/index.php\n// 自定义CONF_PATH目录\ndefine('CONF_PATH', __DIR__ . '/../config/');\n```\n\n## 8-7 模型读取器的巧妙应用\n\n1.读取器的命名：`get+字段名+Attr`\n\n如对 url 处理则定义为`getUrlAttr`\n\n2.读取器的特性：\n\n- 模型具有的性质\n- 使用模型时自动调用的方法（访问该属性时调用）\n- AOP 思想的一个实现\n\n  3.接收器参数说明：\n\n      参数1：需要处理的字段的值\n      参数2：当前记录的完整信息(包括隐藏未显示的字段)\n\n  4.使用方法：\n\n```php\n// 定义读取器（框架自动调用）\npublic function getUrlAttr($value)\n{\n    // $value为获取到的url值。\n    $prefix = config('setting.img_prefix');\n    return $prefix.$value;\n}\n```\n\nurl 字段被自动拼接成：`\"url\": \"http://mypro.com/static/images/banner-4a.png\"`形式\n\n5.根据业务逻辑进行调整\n\nimage 数据表中的`from`字段标识当前图片的来源。\n\n    from=1 =》 图片来自当前项目，存储的是 相对路径\n    from=2 =》 图片来自网络，存储的是 绝对路径\n\n即：当 from=1 时，才需要对 url 进行相关操作。\n\n此时需要访问到`from`的值，要用到第二个参数。\n\n6.调整代码实现\n\n```php\n// 定义读取器（框架自动调用）\npublic function getUrlAttr($value, $data)\n{\n    // $value 获取到的url值。\n    // $data 当前记录的完整信息(包括隐藏未显示的字段)\n\n    $finalUrl = $value;\n    if ($data['from'] == 1) {\n        $prefix = config('setting.img_prefix');\n        $finalUrl = $prefix . $value;\n    }\n\n    return $finalUrl;\n}\n```\n\n通过关联模型访问 Image 模型并获取 url 字段信息时调用该方法。\n\n## 8-8 自定义模型基类\n\n1.对于多个模型处理 url 字段时，为增强代码的复用性，可将该处理方法封装到模型类基类`model/BaseModel.php`中。\n\n2.其他的模型类不再直接继承`model`类，而是直接继承`BaseModel`类。\n\n3.又考虑到当前使用的 url 表示的是 img 路径，而其他数据表中的 url 可能并非 img 路径，所以需要再次调整。将`getUrlAttr`功能的具体实现进行拆分。\n\n(1) `model/BaseModel.php`，定义成一个普通的方法\n\n```php\npublic function prefixImgUrl($value, $data)\n{\n    $finalUrl = $value;\n    if ($data['from'] == 1) {\n        $prefix = config('setting.img_prefix');\n        $finalUrl = $prefix . $value;\n    }\n\n    return $finalUrl;\n}\n```\n\n(2) `model/Image.php`，读取器中调用基类的方法。\n\n```php\npublic function getUrlAttr($value, $data)\n{\n    return $this->prefixImgUrl($value, $data);\n}\n```\n\n(3)分析：将业务逻辑的具体实现集中到一起，简化业务变动时的频繁修改。提高了项目的**扩展性**。\n\n## 8-9 定义 API 版本号\n\n1.为什么要实现多版本？\n\n由于业务调整，实现的功能需要进行变更，（处理同一个问题需要使用不同解决方式），并且之前的功能还需要兼容，此时如果通过判断条件进行判断，再执行相应的功能会使得代码冗余，违背代码的**开闭原则**。应该将代码分离出来，每一个版本做一个单独的代码模块。\n\n> 开闭原则：对扩展是开放的，对修改是封闭的。（以扩展的形式修改代码）\n\n2.如何实现多版本？\n\n- 目录设置:\n\n```info\napplication\n    |__ api\n        |__ controller\n            |__ v1\n                |__ Banner.php\n            |__ v2\n                |__ Banner.php\n```\n\n- 路由设置：\n\n```php\n// 动态参数 :version 动态访问相应版本\nRoute::get('api/:version/banner/:id', 'api/:version.Banner/getBanner');\n```\n\n## 8-10 专题接口模型分析\n\n- theme 专题表\n  `theme(id,name,description,topic_img_id,delete_time,head_img_id,update_time)`\n\n      `topic_img_id` 首页主题入口的img图片\n      `head_img_id` 进入相应主题显示的head图片\n\n- product 产品表\n  `product(id,name,price,stock,delete_time,category_id,main_img_url,from,create_time,update_time,summary,img_id)`\n\n      `main_img_url`\n      `img_id`\n\n- theme_product 专题-产品关联表\n  `theme_product(theme_id,product_id)`\n\n      theme <=> product 多对多关系\n      theme_product 多对多关系表中需要一个关联表连接两者关系\n\n## 8-11 一对一关系解析\n\n    theme <=> image 一对一关系\n\n1.一对一关系的表示方法（有主从关系）：\n\n    hasOne()\n    belongsTo()\n\n外键存储在其中一张表里，所以需要使用`hasOne`和`belongsTo`来区分。\n\n    有外键的表`belongsTo`无外键的表\n    无外键的表`hasOne`有外键的表\n\ntheme -- (topic_img_id, head_img_id) -- 表中有外键 (对应 image 表中的 id 主键)\n=》 theme topicImg belongsTo image\n\nimage -- 表中没有外键\n=》 image hasOne theme\n\n## 8-12 Theme 接口验证与重构\n\n1.Theme 接口实现的不同方法对比：\n\n（1）客户端只负责调用接口，由接口确定需要返回的主题 theme 的 id 号（2）由客户端传入具体需要的主题 Theme 的 id 号（前端有更大的灵活性）\n\n2.方法实现\n\n步骤：\n\n(1)定义控制器方法名\n\n```php\n// api/controller/v1/Theme.php\ngetSimpleList();\n```\n\n(2)路由文件定义路由\n\n```php\n// config/route.php\nRoute::get('api/:version/theme', 'api/:version.Theme/getSimpleList');\n```\n\n(3)控制器方法具体实现业务功能（一） --- 参数要求\n\n```php\n/**\n * 获取需要展示的主题theme\n * @Location api/controller/v1/Theme.php\n * @param string $ids\n * @return string $theme\n */\n```\n\n(4)验证器验证\n\n```php\n// api/validate/IDCollection.php\n\n// 1.验证规则\nprotected $rule = [\n    'ids' => 'require|checkIDs'\n];\n\n// 2.验证不通过的提示信息\nprotected $message = [\n    'ids' => 'ids必须是以逗号隔开的多个正整数'\n];\n\n// 3.自定义验证方法(验证器)\n/**\n * 验证ids\n * @param string $values = id1,id2,id3,...\n * @return bool false/true\n */\nprotected function checkIDs($values)\n{\n    $ids = explode(',', $values);\n\n    if (empty($ids)) {\n        return false;\n    }\n    foreach ($ids as $id) {\n        // 每个id必须是正整数\n        $res = $this->isPositiveInteger($id);\n        if (!$res) {\n            return false;\n        }\n\n        return true;\n    }\n}\n```\n\n3.**扩展**:\n\nIDCollection 和 IDMustPositiveInt 都用到对 id 是正整数的验证，为提高代码的复用性，可以：\n\n    （1）将isPositiveInteger提取到公共方法中（没有内聚性）\n\n    （2）将方法重新定义到验证器基类中供所有验证器之类调用。（优化的选择）\n\n```php\n// api/validate/BaseValidate.php\n/**\n * 验证是否是正整数\n *\n * @param int $value\n * @return boolean false/true\n */\nprotected function isPositiveInteger($value)\n{\n    if (is_numeric($value) && is_int($value+0) && ($value +0)>0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n```\n\n4.调用验证器\n\n```php\n// api/controller/v1/Theme.php\n(new IDCollection())->goCheck();\n```\n\n5.测试 url\n\n```url\nhttp://mypro.com/api/v1/theme?ids=0.1,2,3\nhttp://mypro.com/api/v1/theme?ids=1,s,3\n```\n\n## 8-13 完成 Theme 简要信息接口\n\n1.完成获取信息接口\n\n```php\n// api/controller/v1/Theme.php\npublic function getSimpleList($ids='')\n{\n    // 验证用户传递的参数\n    (new IDCollection())->goCheck();\n\n    $ids = explode(',', $ids);\n\n    // 关联Image表获取相应信息\n    $theme = model('theme')->with(['topicImg', 'headImg'])->select($ids);\n\n    // 无查询结果时，进行异常处理\n    if (!$theme) {\n        throw new ThemeMissException();\n    }\n\n    // 对数组格式的返回数据进行json格式化\n    return json($theme);\n}\n```\n\n2.完成异常处理类\n\n```php\n// application/lib/exception/ThemeMissException.php\npublic $code = 404;\npublic $msg = '请求的主题不存在';\npublic $errorCode = 30000;\n```\n\n3.在相应的模型中隐藏部分字段\n\n(1)隐藏 Theme 表的部分字段\n\n```php\n// api/model/v1/Theme.php\nprotected $hidden = ['delete_time', 'update_time', 'topic_img_id', 'head_img_id'];\n```\n\n(2)隐藏 Image 表的部分字段(只显示部分字段)\n\n```php\n// api/model/v1/Image.php\nprotected $visible = ['url'];\n```\n\n4.补充说明：\n\n对于复杂的业务处理，应该将相应的代码写到 Service 层(Model 层之上) -- 特别是涉及到多个模型之间的关联的时候\n\n## 8-14 开启路由完整匹配\n\n1.功能需求说明\n\n```info\n点击专题图片进入到专题后需要显示相应的产品图片、\n\n=》获取属于该专题的产品信息\n\n（一个产品可以属于一个专题，也可以属于多个专题； 一个专题会包含多个产品） ==》多对多关系[Theme <=> Product]\n\n多对多关系的数据表有一个中间关联表\n```\n\n2.模型关联获取关联的数据\n\n```php\n// api/model/Theme.php\npublic function products()\n{\n    // 参数1： 对应数据表的模型名\n    // 参数2： 关联表的模型名\n    // 参数3： 关联表中的外键名(和参数1模型关联)\n    // 参数4： 关联表的外键(关联当前模型)\n    return $this->belongsToMany('Product', 'theme_product', 'product_id'. 'theme_id');\n}\n```\n\n3.编写控制器方法(定义方法名和需要接收的参数)\n\n```php\n// api/v1/controller/Theme.php\npublic function getProducts($id){}\n```\n\n4.定义路由\n\n```php\nRoute::get('api/:version/theme/:id', 'api/:version.Theme/getProducts/:id');\n```\n\n【注意】：\n\n默认情况下 TP5 的配置项是关闭路由完整匹配的，这种情况下访问当前路由接口时，由于先匹配到`api/:version/theme`路由，便不会再继续向下匹配路由，从而会调用该路由对应的接口。\n\n==》**解决办法**：`开启路由完整匹配`\n\n```php\n// application/config.php默认配置文件路径\n// 路由使用完整匹配（设置为true时开启）\n'route_complete_match'   => false,  // =>true\n```\n\n## 8-15 完成 Theme 详情接口\n\n### 1.参数校验\n\n```php\n// api/v1/controller/Theme.php\n(new IDMustPositiveInt)->check();\n```\n\n### 2.在模型中编写方法实现数据获取\n\n```php\n// api/model/Theme.php\npublic function getThemeWithProducts($id)\n{\n    $theme = self::with('products,topicImg,headImg')->find($id);\n    return $theme;\n}\n```\n\n【注】REST 是面向资源的请求方式，即将相关的数据全部返回给客户端，不管客户端目前需不需要用得上，但这种方式返回的资源应该有一个限度，\n\n### 3.在控制器中调用\n\n```php\n// api/v1/controller/Theme.php\n$theme = model('theme')->getThemeWithProducts($id);\nif(!$theme) {\n    throw new ThemeMissException();\n}\nreturn $theme;\n```\n\n### 4.编写异常处理类\n\n```php\n// api/lib/exception/ThemeMissException.php\nclass ThemeMissException extends BaseException\n{\n    /**\n     * 覆盖父类的相应属性\n     */\n    public $code = 404;\n    public $msg = '请求的主题不存在';\n    public $errorCode = 30000;\n}\n```\n\n## 8-16 数据库字段冗余的合理利用\n\n多对多关系的数据表关联查询时会自动多一个`pivot`字段的信息，存储关联字段。但关联信息不是我们需要显示的信息，所以将该字段隐藏掉。\n\n`products`中`main_img_url`和`img_id`都是用来关联 image 表，记录图片信息。属于数据冗余。\n\n但此处是数据冗余的合理应用范围，因为需要在多处使用到，并且数据量和业务并不是太复杂。\n\n## 8-17 REST 的合理利用\n\n1.数据冗余之后对数据的完整性和一致性的维护变得困难。\n\n2.数据更新时需要对多处数据进行修改，否则就会出现数据不一致的现象。\n\n3.完成方法编写(对 product 相关字段的 url 进行处理---添加前缀)\n\n```php\n// api/model/Product.php\npublic function getMainImgUrlAttr($value, $data)\n{\n    return $this->prefixImgUrl($value, $data);\n}\n}\n```\n\n4.REST 设计原则\n\n(1)REST 是基于资源的，凡是和业务相关的数据都应该返回，不管当前的业务是否需要使用相应的数据。\n\n好处在于后期业务变更需要相应的数据的时候，可以直接调用即可，不用更改服务器的接口程序，可以用来保证客户端的稳定性。\n\n(2)但也不能一味的将所有相关的数据返回，会消耗数据库的性能。\n\n## 8-18 最近新品接口编写\n\n1.TP5 框架自带时间更新操作,使用模型操作数据库时，当插入记录时，自动带上`create_time`; 更新操作时自动带上`updated_time`;删除时自动带上`delete_time`\n\n2.删除操作不是真实的物理删除，而是通过判断`delete_time`的值来确定该条记录的状态\n\n3.实现步骤\n\n(1)定义控制器方法 [方法名|传递参数]\n\n```php\npublic function getRecent($count=15){}\n```\n\n(2)定义路由\n\n```php\nRoute::get('api/:version/product/recent', 'api/:version.Product/getRecent');\n```\n\n(3)定义模型方法\n\n- limit()方法的使用\n\n```php\npublic function getMostRecent($count)\n{\n    $products = self::limit($count)->order('create_time desc')->select();\n    return $products;\n}\n```\n\n(4)编写验证器\n\n```php\n//需要对传递的count值进行验证\n// application/validate/Count.php\nprotected $rule = [\n    'count' => 'isPositiveInteger|between:1,15'\n];\n```\n\n(5)完成控制器方法\n\n```php\npublic function getRecent($count=15)\n{\n    (new Count())->goCheck();\n    $products = model('product')->getMostRecent($count);\n    if ($products) {\n        throw new ProductMissException();\n    }\n    return $products;\n}\n```\n\n(6)完成异常处理类方法\n\n```php\nclass ProductMissException extends BaseException\n{\n    public $code = '404';\n    public $msg = '请求的product不存在';\n    public $errorCode = 20000;\n\n}\n```\n\n[注]：`app_debug`设置为 true 时，在`ExceptionHandler.php`中会调用父类的`render()`方法，导致框架的异常处理类找不到程序中自定义的异常处理类，从而会有报错提示。\n\n!!!出现 500 系统内部错误!\n\n- 原因=>config.php 设置`default_return_type`的值为`html`, 而 Product 的 controller 中 return 的结果值为 array，导致系统内部错误。\n\n- 解决=>将`default_return_type`的值为`json`。或者将 Product 的 controller 中 return 的结果进行 json 格式化。\n\n### **【警告】学会查看 log 日志信息，提高错误排查能力！**\n\n## 8-19 使用数据集还是数组？\n\n1.问题 1：验证方法中，`$rule`属性数组的键值对中， 值`'isPositiveInteger|between:1,15'`中`|`符两端不能有空格，否则会被视为验证错误。\n\n2.问题 2：对某些当前不需要用到，但后期会用到的字段信息（特殊情况不用，大多数情况要用），既不能直接显示，也不能直接隐藏，如何处理？\n\n=》 在`api/v1/Product/recent`接口中临时隐藏`summary`字段。\n\n3.**collection()方法**：临时隐藏某个或某些字段\n\n【使用方法】：\n\n```php\n// 使用数据集，临时隐藏某些字段\n$productCollection = collection($products);\n$products = $productCollection->hidden(['summary']);\n```\n\n4.一个 product 是一个对象，一组 product 也可是是一个对象(数据集)。\n\n5.使用对象的方式，可读性好，内聚性好。\n\n6.TP5 调用模型自动返回一个数据集的形式：`resultset_type` [database.php]\n\n默认是`array`，设置成`collection`后，模型返回的数据自动就是`collection`形式，不需要再转换一次。\n\n```php\n// 在database.php中配置之后，不需要手动转换为collection\n$products = $products->hidden(['summary']);\n```\n\n【扩展】：\n\n但是这样使用之后，控制器中调用模型返回数据后，返回的是对象，即使没有数据，也不是空，所以直接使用`!`判断是不能实现效果的。\n\n=》解决方法：使用数据集对象的`isEmpty()`方法进行判空。\n\n## 8-20 分类列表接口\n\n1.模型类的`all`方法使用。\n\n- 参数 1：主键列表或者查询条件（闭包） `mixed`\n\n- 参数 2：关联预查询 `array | string`\n\n```php\n$categories = model('Category')->with('img')->select();\n// 等价于\n$categories = model('Category')->all([], 'img');\n```\n\n## 8-21 扩展：接口粒度与接口分层\n\n1.减少首页 http 请求(api)的次数，从而减轻服务器的压力\n\n2.接口粒度： 太粗=》代码复用性不好，不够灵活；太细=》需要发送的请求太多，不方便\n\n3.架构师 =》 Api 接口设计 =》 底层设计力度比较小、灵活性比较高的 api 接口；越往上粒度逐渐变粗。\n\n4.如果确实调用的接口比较多，应该在 api 基础数据层上建立业务层，再在业务层调用基础数据层相关的接口，再进行封装。\n","source":"_posts/php-practice-wx-tp5-2.md","raw":"---\ntitle: 【实战】tp5+小程序(二)--接口编写\ndate: 2018-07-5 16:26:58\ntags:\n  - thinkphp5\n  - 微信小程序\ncategory:\n  - 【PHP框架】\n---\n\nThinkPHP5 从入门到深入学习，结合实战项目深入理解 ThinkPHP5 的特性和使用方法。编写完成简单的基于 RESTFul 接口，实现相应功能，掌握控制器、模型、异常处理、数据校验的使用。\n\n<!--more-->\n\n## 8-1 Banner 相关表分析（数据表关系分析）\n\n- banner 位的数据表`banner`\n\n`banner(id, name, description, delete_time, update_time)`\n\n- 每个 banner 位图片的数据表`banner_item`\n\n`banner_item(id, img_id, key_word, type, delete_time, banner_id, update_time)`\n\n- 图片表`image`\n\n`image(id, url, from, delete_time, update_time)`\n\n    banner <=> banner_item 一对多关系\n    image <=> banner_item 一对一关系\n\n## 8-2 模型关联--定义关联与查询关联\n\n> model/Banner.php\n\n```php\n// 创建关联方法\npublic function items()\n{\n    // 参数1：关联模型的模型名\n    // 参数2：关联模型的外键\n    // 参数3：当前模型的主键\n    // hasMany：表示是一对多的关系\n    return $this->hasMany('BannerItem', 'banner_id', 'id');\n    // 【需要创建BannerItem模型类文件】\n}\n```\n\n> controller/Banner.php\n\n```php\n//with()方法，设置关联模型\n$banner = BannerModel::with('items')->find($id);\n//等价于 $banner = model('banner')->with('items')->find($id);\n```\n\n执行结果时会自动附件关联信息。\n\n```json\n{\n  \"id\": 1,\n  \"name\": \"首页置顶\",\n  \"description\": \"首页轮播图\",\n  \"delete_time\": null,\n  \"update_time\": \"1970-01-01 08:00:00\",\n  \"items\": [\n    {\n      \"id\": 1,\n      \"img_id\": 65,\n      \"key_word\": \"6\",\n      \"type\": 1,\n      \"delete_time\": null,\n      \"banner_id\": 1,\n      \"update_time\": \"1970-01-01 08:00:00\"\n    }\n  ]\n}\n```\n\n## 8-3 模型关联 --嵌套关联查询\n\n1.多个关联表\n\n    with(['items','item2'])\n\n2.命令行创建模型（自动完成模板）\n\n    php think make:model api/Image\n\n3.banner 嵌套 items，现在需要给 items 嵌套 img 相关信息\n\n多层嵌套使用方法：\n\n    with(['items', 'items.img'])\n\n4.具体实现：\n\n- `model/BannerItem.php`\n\n```php\npublic function img()\n{\n    // BannerItem和Image是一对一的关系，使用的方法是belongsTo\n    return $this->belongsTo('Image', 'img_id', 'id');\n    //【需要创建Image模型类文件】\n}\n```\n\n也可以在`model/Image.php`中定义,实现的效果是一样的。\n\n- `controller/Banner.php`\n\n```php\n// 多层嵌套的使用\n$banner = BannerModel::with(['items', 'items.img'])->find($id);\n```\n\n5.实现效果如下：\n\n```json\n{\n  \"id\": 1,\n  \"name\": \"首页置顶\",\n  \"description\": \"首页轮播图\",\n  \"delete_time\": null,\n  \"update_time\": \"1970-01-01 08:00:00\",\n  \"items\": [\n    {\n      \"id\": 1,\n      \"img_id\": 65,\n      \"key_word\": \"6\",\n      \"type\": 1,\n      \"delete_time\": null,\n      \"banner_id\": 1,\n      \"update_time\": \"1970-01-01 08:00:00\",\n      \"img\": {\n        \"id\": 65,\n        \"url\": \"/banner-4a.png\",\n        \"from\": 1,\n        \"delete_time\": null,\n        \"update_time\": \"1970-01-01 08:00:00\"\n      }\n    },\n    {...}\n  ]\n}\n```\n\n## 8-4 隐藏模型字段\n\n- 方法 1：将对象转化为数组`toArray()`，再将该字段 unset\n\n```php\n$banner = $banner->toArray();\nunset($banner['delete_time']);\n```\n\n- 方法 2：使用对象的 `hidden()` 方法\n\n```php\n$banner->hidden(['update_time', 'delete_time']);\n```\n\n- 方法 3：只显示指定字段`visible()`\n\n```php\n$banner->visible(['id', 'name']);\n```\n\n## 8-5 在模型内部隐藏字段\n\n1.对嵌套的数据字段隐藏\n\n最好的办法：在相应的模型类中定义相应的属性。\n\n- 想要隐藏 `banner` 的字段信息\n\n```php\n// model/Banner.php\n// 隐藏的字段\nprotected $hidden = ['id'];\n// 只显示的字段\nprotected $visibale = ['name','update_time'];\n```\n\n- 想要隐藏 `banner.items` 下的字段信息：\n\n```php\n// model/BannerItem.php\nprotected $hidden = ['id'];\n```\n\n- 想要隐藏 `banner.items.img` 的字段信息\n\n```php\n// model/Image.php\nprotected $hidden = ['from'];\n```\n\n## 8-6 图片资源 URL 配置\n\n1.数据库存放的图片 url 是相对地址，所以获取的数据也是相对地址，不能直接获取到图片的具体资源位置。\n\n    具体路径 = 服务器域名+路径配置+相对地址\n\n2.定义自己项目相关的配置 =》 自定义配置文件\n\nTP5 扩展配置目录 =》自动加载该目录下的配置文件\n\n默认位置：`application/extra`\n\n3.定义配置项:\n\n```php\n// application/extra/setting.php\nreturn [\n  'img_prefix' => 'http://mypro.com/static/images'\n];\n```\n\n4.tp5 中只有 public 目录是对外公开，可以访问的，所以图片资源应当放在 public 目录下\n\n5.读取配置文件：\n\n```php\n// 配置文件自动被加载，直接读取配置项即可\nconfig('setting.img_prefix');\n```\n\n6.**【注】：如果自定义了`CONF_PATH`目录，则自动加载的配置文件目录应该在`config/extra`目录下**\n\n```php\n// public/index.php\n// 自定义CONF_PATH目录\ndefine('CONF_PATH', __DIR__ . '/../config/');\n```\n\n## 8-7 模型读取器的巧妙应用\n\n1.读取器的命名：`get+字段名+Attr`\n\n如对 url 处理则定义为`getUrlAttr`\n\n2.读取器的特性：\n\n- 模型具有的性质\n- 使用模型时自动调用的方法（访问该属性时调用）\n- AOP 思想的一个实现\n\n  3.接收器参数说明：\n\n      参数1：需要处理的字段的值\n      参数2：当前记录的完整信息(包括隐藏未显示的字段)\n\n  4.使用方法：\n\n```php\n// 定义读取器（框架自动调用）\npublic function getUrlAttr($value)\n{\n    // $value为获取到的url值。\n    $prefix = config('setting.img_prefix');\n    return $prefix.$value;\n}\n```\n\nurl 字段被自动拼接成：`\"url\": \"http://mypro.com/static/images/banner-4a.png\"`形式\n\n5.根据业务逻辑进行调整\n\nimage 数据表中的`from`字段标识当前图片的来源。\n\n    from=1 =》 图片来自当前项目，存储的是 相对路径\n    from=2 =》 图片来自网络，存储的是 绝对路径\n\n即：当 from=1 时，才需要对 url 进行相关操作。\n\n此时需要访问到`from`的值，要用到第二个参数。\n\n6.调整代码实现\n\n```php\n// 定义读取器（框架自动调用）\npublic function getUrlAttr($value, $data)\n{\n    // $value 获取到的url值。\n    // $data 当前记录的完整信息(包括隐藏未显示的字段)\n\n    $finalUrl = $value;\n    if ($data['from'] == 1) {\n        $prefix = config('setting.img_prefix');\n        $finalUrl = $prefix . $value;\n    }\n\n    return $finalUrl;\n}\n```\n\n通过关联模型访问 Image 模型并获取 url 字段信息时调用该方法。\n\n## 8-8 自定义模型基类\n\n1.对于多个模型处理 url 字段时，为增强代码的复用性，可将该处理方法封装到模型类基类`model/BaseModel.php`中。\n\n2.其他的模型类不再直接继承`model`类，而是直接继承`BaseModel`类。\n\n3.又考虑到当前使用的 url 表示的是 img 路径，而其他数据表中的 url 可能并非 img 路径，所以需要再次调整。将`getUrlAttr`功能的具体实现进行拆分。\n\n(1) `model/BaseModel.php`，定义成一个普通的方法\n\n```php\npublic function prefixImgUrl($value, $data)\n{\n    $finalUrl = $value;\n    if ($data['from'] == 1) {\n        $prefix = config('setting.img_prefix');\n        $finalUrl = $prefix . $value;\n    }\n\n    return $finalUrl;\n}\n```\n\n(2) `model/Image.php`，读取器中调用基类的方法。\n\n```php\npublic function getUrlAttr($value, $data)\n{\n    return $this->prefixImgUrl($value, $data);\n}\n```\n\n(3)分析：将业务逻辑的具体实现集中到一起，简化业务变动时的频繁修改。提高了项目的**扩展性**。\n\n## 8-9 定义 API 版本号\n\n1.为什么要实现多版本？\n\n由于业务调整，实现的功能需要进行变更，（处理同一个问题需要使用不同解决方式），并且之前的功能还需要兼容，此时如果通过判断条件进行判断，再执行相应的功能会使得代码冗余，违背代码的**开闭原则**。应该将代码分离出来，每一个版本做一个单独的代码模块。\n\n> 开闭原则：对扩展是开放的，对修改是封闭的。（以扩展的形式修改代码）\n\n2.如何实现多版本？\n\n- 目录设置:\n\n```info\napplication\n    |__ api\n        |__ controller\n            |__ v1\n                |__ Banner.php\n            |__ v2\n                |__ Banner.php\n```\n\n- 路由设置：\n\n```php\n// 动态参数 :version 动态访问相应版本\nRoute::get('api/:version/banner/:id', 'api/:version.Banner/getBanner');\n```\n\n## 8-10 专题接口模型分析\n\n- theme 专题表\n  `theme(id,name,description,topic_img_id,delete_time,head_img_id,update_time)`\n\n      `topic_img_id` 首页主题入口的img图片\n      `head_img_id` 进入相应主题显示的head图片\n\n- product 产品表\n  `product(id,name,price,stock,delete_time,category_id,main_img_url,from,create_time,update_time,summary,img_id)`\n\n      `main_img_url`\n      `img_id`\n\n- theme_product 专题-产品关联表\n  `theme_product(theme_id,product_id)`\n\n      theme <=> product 多对多关系\n      theme_product 多对多关系表中需要一个关联表连接两者关系\n\n## 8-11 一对一关系解析\n\n    theme <=> image 一对一关系\n\n1.一对一关系的表示方法（有主从关系）：\n\n    hasOne()\n    belongsTo()\n\n外键存储在其中一张表里，所以需要使用`hasOne`和`belongsTo`来区分。\n\n    有外键的表`belongsTo`无外键的表\n    无外键的表`hasOne`有外键的表\n\ntheme -- (topic_img_id, head_img_id) -- 表中有外键 (对应 image 表中的 id 主键)\n=》 theme topicImg belongsTo image\n\nimage -- 表中没有外键\n=》 image hasOne theme\n\n## 8-12 Theme 接口验证与重构\n\n1.Theme 接口实现的不同方法对比：\n\n（1）客户端只负责调用接口，由接口确定需要返回的主题 theme 的 id 号（2）由客户端传入具体需要的主题 Theme 的 id 号（前端有更大的灵活性）\n\n2.方法实现\n\n步骤：\n\n(1)定义控制器方法名\n\n```php\n// api/controller/v1/Theme.php\ngetSimpleList();\n```\n\n(2)路由文件定义路由\n\n```php\n// config/route.php\nRoute::get('api/:version/theme', 'api/:version.Theme/getSimpleList');\n```\n\n(3)控制器方法具体实现业务功能（一） --- 参数要求\n\n```php\n/**\n * 获取需要展示的主题theme\n * @Location api/controller/v1/Theme.php\n * @param string $ids\n * @return string $theme\n */\n```\n\n(4)验证器验证\n\n```php\n// api/validate/IDCollection.php\n\n// 1.验证规则\nprotected $rule = [\n    'ids' => 'require|checkIDs'\n];\n\n// 2.验证不通过的提示信息\nprotected $message = [\n    'ids' => 'ids必须是以逗号隔开的多个正整数'\n];\n\n// 3.自定义验证方法(验证器)\n/**\n * 验证ids\n * @param string $values = id1,id2,id3,...\n * @return bool false/true\n */\nprotected function checkIDs($values)\n{\n    $ids = explode(',', $values);\n\n    if (empty($ids)) {\n        return false;\n    }\n    foreach ($ids as $id) {\n        // 每个id必须是正整数\n        $res = $this->isPositiveInteger($id);\n        if (!$res) {\n            return false;\n        }\n\n        return true;\n    }\n}\n```\n\n3.**扩展**:\n\nIDCollection 和 IDMustPositiveInt 都用到对 id 是正整数的验证，为提高代码的复用性，可以：\n\n    （1）将isPositiveInteger提取到公共方法中（没有内聚性）\n\n    （2）将方法重新定义到验证器基类中供所有验证器之类调用。（优化的选择）\n\n```php\n// api/validate/BaseValidate.php\n/**\n * 验证是否是正整数\n *\n * @param int $value\n * @return boolean false/true\n */\nprotected function isPositiveInteger($value)\n{\n    if (is_numeric($value) && is_int($value+0) && ($value +0)>0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n```\n\n4.调用验证器\n\n```php\n// api/controller/v1/Theme.php\n(new IDCollection())->goCheck();\n```\n\n5.测试 url\n\n```url\nhttp://mypro.com/api/v1/theme?ids=0.1,2,3\nhttp://mypro.com/api/v1/theme?ids=1,s,3\n```\n\n## 8-13 完成 Theme 简要信息接口\n\n1.完成获取信息接口\n\n```php\n// api/controller/v1/Theme.php\npublic function getSimpleList($ids='')\n{\n    // 验证用户传递的参数\n    (new IDCollection())->goCheck();\n\n    $ids = explode(',', $ids);\n\n    // 关联Image表获取相应信息\n    $theme = model('theme')->with(['topicImg', 'headImg'])->select($ids);\n\n    // 无查询结果时，进行异常处理\n    if (!$theme) {\n        throw new ThemeMissException();\n    }\n\n    // 对数组格式的返回数据进行json格式化\n    return json($theme);\n}\n```\n\n2.完成异常处理类\n\n```php\n// application/lib/exception/ThemeMissException.php\npublic $code = 404;\npublic $msg = '请求的主题不存在';\npublic $errorCode = 30000;\n```\n\n3.在相应的模型中隐藏部分字段\n\n(1)隐藏 Theme 表的部分字段\n\n```php\n// api/model/v1/Theme.php\nprotected $hidden = ['delete_time', 'update_time', 'topic_img_id', 'head_img_id'];\n```\n\n(2)隐藏 Image 表的部分字段(只显示部分字段)\n\n```php\n// api/model/v1/Image.php\nprotected $visible = ['url'];\n```\n\n4.补充说明：\n\n对于复杂的业务处理，应该将相应的代码写到 Service 层(Model 层之上) -- 特别是涉及到多个模型之间的关联的时候\n\n## 8-14 开启路由完整匹配\n\n1.功能需求说明\n\n```info\n点击专题图片进入到专题后需要显示相应的产品图片、\n\n=》获取属于该专题的产品信息\n\n（一个产品可以属于一个专题，也可以属于多个专题； 一个专题会包含多个产品） ==》多对多关系[Theme <=> Product]\n\n多对多关系的数据表有一个中间关联表\n```\n\n2.模型关联获取关联的数据\n\n```php\n// api/model/Theme.php\npublic function products()\n{\n    // 参数1： 对应数据表的模型名\n    // 参数2： 关联表的模型名\n    // 参数3： 关联表中的外键名(和参数1模型关联)\n    // 参数4： 关联表的外键(关联当前模型)\n    return $this->belongsToMany('Product', 'theme_product', 'product_id'. 'theme_id');\n}\n```\n\n3.编写控制器方法(定义方法名和需要接收的参数)\n\n```php\n// api/v1/controller/Theme.php\npublic function getProducts($id){}\n```\n\n4.定义路由\n\n```php\nRoute::get('api/:version/theme/:id', 'api/:version.Theme/getProducts/:id');\n```\n\n【注意】：\n\n默认情况下 TP5 的配置项是关闭路由完整匹配的，这种情况下访问当前路由接口时，由于先匹配到`api/:version/theme`路由，便不会再继续向下匹配路由，从而会调用该路由对应的接口。\n\n==》**解决办法**：`开启路由完整匹配`\n\n```php\n// application/config.php默认配置文件路径\n// 路由使用完整匹配（设置为true时开启）\n'route_complete_match'   => false,  // =>true\n```\n\n## 8-15 完成 Theme 详情接口\n\n### 1.参数校验\n\n```php\n// api/v1/controller/Theme.php\n(new IDMustPositiveInt)->check();\n```\n\n### 2.在模型中编写方法实现数据获取\n\n```php\n// api/model/Theme.php\npublic function getThemeWithProducts($id)\n{\n    $theme = self::with('products,topicImg,headImg')->find($id);\n    return $theme;\n}\n```\n\n【注】REST 是面向资源的请求方式，即将相关的数据全部返回给客户端，不管客户端目前需不需要用得上，但这种方式返回的资源应该有一个限度，\n\n### 3.在控制器中调用\n\n```php\n// api/v1/controller/Theme.php\n$theme = model('theme')->getThemeWithProducts($id);\nif(!$theme) {\n    throw new ThemeMissException();\n}\nreturn $theme;\n```\n\n### 4.编写异常处理类\n\n```php\n// api/lib/exception/ThemeMissException.php\nclass ThemeMissException extends BaseException\n{\n    /**\n     * 覆盖父类的相应属性\n     */\n    public $code = 404;\n    public $msg = '请求的主题不存在';\n    public $errorCode = 30000;\n}\n```\n\n## 8-16 数据库字段冗余的合理利用\n\n多对多关系的数据表关联查询时会自动多一个`pivot`字段的信息，存储关联字段。但关联信息不是我们需要显示的信息，所以将该字段隐藏掉。\n\n`products`中`main_img_url`和`img_id`都是用来关联 image 表，记录图片信息。属于数据冗余。\n\n但此处是数据冗余的合理应用范围，因为需要在多处使用到，并且数据量和业务并不是太复杂。\n\n## 8-17 REST 的合理利用\n\n1.数据冗余之后对数据的完整性和一致性的维护变得困难。\n\n2.数据更新时需要对多处数据进行修改，否则就会出现数据不一致的现象。\n\n3.完成方法编写(对 product 相关字段的 url 进行处理---添加前缀)\n\n```php\n// api/model/Product.php\npublic function getMainImgUrlAttr($value, $data)\n{\n    return $this->prefixImgUrl($value, $data);\n}\n}\n```\n\n4.REST 设计原则\n\n(1)REST 是基于资源的，凡是和业务相关的数据都应该返回，不管当前的业务是否需要使用相应的数据。\n\n好处在于后期业务变更需要相应的数据的时候，可以直接调用即可，不用更改服务器的接口程序，可以用来保证客户端的稳定性。\n\n(2)但也不能一味的将所有相关的数据返回，会消耗数据库的性能。\n\n## 8-18 最近新品接口编写\n\n1.TP5 框架自带时间更新操作,使用模型操作数据库时，当插入记录时，自动带上`create_time`; 更新操作时自动带上`updated_time`;删除时自动带上`delete_time`\n\n2.删除操作不是真实的物理删除，而是通过判断`delete_time`的值来确定该条记录的状态\n\n3.实现步骤\n\n(1)定义控制器方法 [方法名|传递参数]\n\n```php\npublic function getRecent($count=15){}\n```\n\n(2)定义路由\n\n```php\nRoute::get('api/:version/product/recent', 'api/:version.Product/getRecent');\n```\n\n(3)定义模型方法\n\n- limit()方法的使用\n\n```php\npublic function getMostRecent($count)\n{\n    $products = self::limit($count)->order('create_time desc')->select();\n    return $products;\n}\n```\n\n(4)编写验证器\n\n```php\n//需要对传递的count值进行验证\n// application/validate/Count.php\nprotected $rule = [\n    'count' => 'isPositiveInteger|between:1,15'\n];\n```\n\n(5)完成控制器方法\n\n```php\npublic function getRecent($count=15)\n{\n    (new Count())->goCheck();\n    $products = model('product')->getMostRecent($count);\n    if ($products) {\n        throw new ProductMissException();\n    }\n    return $products;\n}\n```\n\n(6)完成异常处理类方法\n\n```php\nclass ProductMissException extends BaseException\n{\n    public $code = '404';\n    public $msg = '请求的product不存在';\n    public $errorCode = 20000;\n\n}\n```\n\n[注]：`app_debug`设置为 true 时，在`ExceptionHandler.php`中会调用父类的`render()`方法，导致框架的异常处理类找不到程序中自定义的异常处理类，从而会有报错提示。\n\n!!!出现 500 系统内部错误!\n\n- 原因=>config.php 设置`default_return_type`的值为`html`, 而 Product 的 controller 中 return 的结果值为 array，导致系统内部错误。\n\n- 解决=>将`default_return_type`的值为`json`。或者将 Product 的 controller 中 return 的结果进行 json 格式化。\n\n### **【警告】学会查看 log 日志信息，提高错误排查能力！**\n\n## 8-19 使用数据集还是数组？\n\n1.问题 1：验证方法中，`$rule`属性数组的键值对中， 值`'isPositiveInteger|between:1,15'`中`|`符两端不能有空格，否则会被视为验证错误。\n\n2.问题 2：对某些当前不需要用到，但后期会用到的字段信息（特殊情况不用，大多数情况要用），既不能直接显示，也不能直接隐藏，如何处理？\n\n=》 在`api/v1/Product/recent`接口中临时隐藏`summary`字段。\n\n3.**collection()方法**：临时隐藏某个或某些字段\n\n【使用方法】：\n\n```php\n// 使用数据集，临时隐藏某些字段\n$productCollection = collection($products);\n$products = $productCollection->hidden(['summary']);\n```\n\n4.一个 product 是一个对象，一组 product 也可是是一个对象(数据集)。\n\n5.使用对象的方式，可读性好，内聚性好。\n\n6.TP5 调用模型自动返回一个数据集的形式：`resultset_type` [database.php]\n\n默认是`array`，设置成`collection`后，模型返回的数据自动就是`collection`形式，不需要再转换一次。\n\n```php\n// 在database.php中配置之后，不需要手动转换为collection\n$products = $products->hidden(['summary']);\n```\n\n【扩展】：\n\n但是这样使用之后，控制器中调用模型返回数据后，返回的是对象，即使没有数据，也不是空，所以直接使用`!`判断是不能实现效果的。\n\n=》解决方法：使用数据集对象的`isEmpty()`方法进行判空。\n\n## 8-20 分类列表接口\n\n1.模型类的`all`方法使用。\n\n- 参数 1：主键列表或者查询条件（闭包） `mixed`\n\n- 参数 2：关联预查询 `array | string`\n\n```php\n$categories = model('Category')->with('img')->select();\n// 等价于\n$categories = model('Category')->all([], 'img');\n```\n\n## 8-21 扩展：接口粒度与接口分层\n\n1.减少首页 http 请求(api)的次数，从而减轻服务器的压力\n\n2.接口粒度： 太粗=》代码复用性不好，不够灵活；太细=》需要发送的请求太多，不方便\n\n3.架构师 =》 Api 接口设计 =》 底层设计力度比较小、灵活性比较高的 api 接口；越往上粒度逐渐变粗。\n\n4.如果确实调用的接口比较多，应该在 api 基础数据层上建立业务层，再在业务层调用基础数据层相关的接口，再进行封装。\n","slug":"php-practice-wx-tp5-2","published":1,"updated":"2019-05-12T15:49:20.251Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c43j006o2wuutbooegbl","content":"<p>ThinkPHP5 从入门到深入学习，结合实战项目深入理解 ThinkPHP5 的特性和使用方法。编写完成简单的基于 RESTFul 接口，实现相应功能，掌握控制器、模型、异常处理、数据校验的使用。</p>\n<a id=\"more\"></a>\n<h2 id=\"8-1-banner-相关表分析数据表关系分析\"><a class=\"markdownIt-Anchor\" href=\"#8-1-banner-相关表分析数据表关系分析\"></a> 8-1 Banner 相关表分析（数据表关系分析）</h2>\n<ul>\n<li>banner 位的数据表<code>banner</code></li>\n</ul>\n<p><code>banner(id, name, description, delete_time, update_time)</code></p>\n<ul>\n<li>每个 banner 位图片的数据表<code>banner_item</code></li>\n</ul>\n<p><code>banner_item(id, img_id, key_word, type, delete_time, banner_id, update_time)</code></p>\n<ul>\n<li>图片表<code>image</code></li>\n</ul>\n<p><code>image(id, url, from, delete_time, update_time)</code></p>\n<pre><code>banner &lt;=&gt; banner_item 一对多关系\nimage &lt;=&gt; banner_item 一对一关系\n</code></pre>\n<h2 id=\"8-2-模型关联定义关联与查询关联\"><a class=\"markdownIt-Anchor\" href=\"#8-2-模型关联定义关联与查询关联\"></a> 8-2 模型关联–定义关联与查询关联</h2>\n<blockquote>\n<p>model/Banner.php</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建关联方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">items</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 参数1：关联模型的模型名</span></span><br><span class=\"line\">    <span class=\"comment\">// 参数2：关联模型的外键</span></span><br><span class=\"line\">    <span class=\"comment\">// 参数3：当前模型的主键</span></span><br><span class=\"line\">    <span class=\"comment\">// hasMany：表示是一对多的关系</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;hasMany(<span class=\"string\">'BannerItem'</span>, <span class=\"string\">'banner_id'</span>, <span class=\"string\">'id'</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 【需要创建BannerItem模型类文件】</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>controller/Banner.php</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//with()方法，设置关联模型</span></span><br><span class=\"line\">$banner = BannerModel::with(<span class=\"string\">'items'</span>)-&gt;find($id);</span><br><span class=\"line\"><span class=\"comment\">//等价于 $banner = model('banner')-&gt;with('items')-&gt;find($id);</span></span><br></pre></td></tr></table></figure>\n<p>执行结果时会自动附件关联信息。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"首页置顶\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"首页轮播图\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"delete_time\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"update_time\"</span>: <span class=\"string\">\"1970-01-01 08:00:00\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"items\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"img_id\"</span>: <span class=\"number\">65</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"key_word\"</span>: <span class=\"string\">\"6\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"delete_time\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"banner_id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"update_time\"</span>: <span class=\"string\">\"1970-01-01 08:00:00\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-3-模型关联-嵌套关联查询\"><a class=\"markdownIt-Anchor\" href=\"#8-3-模型关联-嵌套关联查询\"></a> 8-3 模型关联 --嵌套关联查询</h2>\n<p>1.多个关联表</p>\n<pre><code>with(['items','item2'])\n</code></pre>\n<p>2.命令行创建模型（自动完成模板）</p>\n<pre><code>php think make:model api/Image\n</code></pre>\n<p>3.banner 嵌套 items，现在需要给 items 嵌套 img 相关信息</p>\n<p>多层嵌套使用方法：</p>\n<pre><code>with(['items', 'items.img'])\n</code></pre>\n<p>4.具体实现：</p>\n<ul>\n<li><code>model/BannerItem.php</code></li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">img</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// BannerItem和Image是一对一的关系，使用的方法是belongsTo</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;belongsTo(<span class=\"string\">'Image'</span>, <span class=\"string\">'img_id'</span>, <span class=\"string\">'id'</span>);</span><br><span class=\"line\">    <span class=\"comment\">//【需要创建Image模型类文件】</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也可以在<code>model/Image.php</code>中定义,实现的效果是一样的。</p>\n<ul>\n<li><code>controller/Banner.php</code></li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 多层嵌套的使用</span></span><br><span class=\"line\">$banner = BannerModel::with([<span class=\"string\">'items'</span>, <span class=\"string\">'items.img'</span>])-&gt;find($id);</span><br></pre></td></tr></table></figure>\n<p>5.实现效果如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"首页置顶\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"首页轮播图\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"delete_time\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"update_time\"</span>: <span class=\"string\">\"1970-01-01 08:00:00\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"items\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"img_id\"</span>: <span class=\"number\">65</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"key_word\"</span>: <span class=\"string\">\"6\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"delete_time\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"banner_id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"update_time\"</span>: <span class=\"string\">\"1970-01-01 08:00:00\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"img\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">65</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"/banner-4a.png\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"from\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"delete_time\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"update_time\"</span>: <span class=\"string\">\"1970-01-01 08:00:00\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;...&#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-4-隐藏模型字段\"><a class=\"markdownIt-Anchor\" href=\"#8-4-隐藏模型字段\"></a> 8-4 隐藏模型字段</h2>\n<ul>\n<li>方法 1：将对象转化为数组<code>toArray()</code>，再将该字段 unset</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$banner = $banner-&gt;toArray();</span><br><span class=\"line\"><span class=\"keyword\">unset</span>($banner[<span class=\"string\">'delete_time'</span>]);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>方法 2：使用对象的 <code>hidden()</code> 方法</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$banner-&gt;hidden([<span class=\"string\">'update_time'</span>, <span class=\"string\">'delete_time'</span>]);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>方法 3：只显示指定字段<code>visible()</code></li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$banner-&gt;visible([<span class=\"string\">'id'</span>, <span class=\"string\">'name'</span>]);</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-5-在模型内部隐藏字段\"><a class=\"markdownIt-Anchor\" href=\"#8-5-在模型内部隐藏字段\"></a> 8-5 在模型内部隐藏字段</h2>\n<p>1.对嵌套的数据字段隐藏</p>\n<p>最好的办法：在相应的模型类中定义相应的属性。</p>\n<ul>\n<li>想要隐藏 <code>banner</code> 的字段信息</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// model/Banner.php</span></span><br><span class=\"line\"><span class=\"comment\">// 隐藏的字段</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> $hidden = [<span class=\"string\">'id'</span>];</span><br><span class=\"line\"><span class=\"comment\">// 只显示的字段</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> $visibale = [<span class=\"string\">'name'</span>,<span class=\"string\">'update_time'</span>];</span><br></pre></td></tr></table></figure>\n<ul>\n<li>想要隐藏 <code>banner.items</code> 下的字段信息：</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// model/BannerItem.php</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> $hidden = [<span class=\"string\">'id'</span>];</span><br></pre></td></tr></table></figure>\n<ul>\n<li>想要隐藏 <code>banner.items.img</code> 的字段信息</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// model/Image.php</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> $hidden = [<span class=\"string\">'from'</span>];</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-6-图片资源-url-配置\"><a class=\"markdownIt-Anchor\" href=\"#8-6-图片资源-url-配置\"></a> 8-6 图片资源 URL 配置</h2>\n<p>1.数据库存放的图片 url 是相对地址，所以获取的数据也是相对地址，不能直接获取到图片的具体资源位置。</p>\n<pre><code>具体路径 = 服务器域名+路径配置+相对地址\n</code></pre>\n<p>2.定义自己项目相关的配置 =》 自定义配置文件</p>\n<p>TP5 扩展配置目录 =》自动加载该目录下的配置文件</p>\n<p>默认位置：<code>application/extra</code></p>\n<p>3.定义配置项:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// application/extra/setting.php</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> [</span><br><span class=\"line\">  <span class=\"string\">'img_prefix'</span> =&gt; <span class=\"string\">'http://mypro.com/static/images'</span></span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>4.tp5 中只有 public 目录是对外公开，可以访问的，所以图片资源应当放在 public 目录下</p>\n<p>5.读取配置文件：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 配置文件自动被加载，直接读取配置项即可</span></span><br><span class=\"line\">config(<span class=\"string\">'setting.img_prefix'</span>);</span><br></pre></td></tr></table></figure>\n<p>6.<strong>【注】：如果自定义了<code>CONF_PATH</code>目录，则自动加载的配置文件目录应该在<code>config/extra</code>目录下</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// public/index.php</span></span><br><span class=\"line\"><span class=\"comment\">// 自定义CONF_PATH目录</span></span><br><span class=\"line\">define(<span class=\"string\">'CONF_PATH'</span>, <span class=\"keyword\">__DIR__</span> . <span class=\"string\">'/../config/'</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-7-模型读取器的巧妙应用\"><a class=\"markdownIt-Anchor\" href=\"#8-7-模型读取器的巧妙应用\"></a> 8-7 模型读取器的巧妙应用</h2>\n<p>1.读取器的命名：<code>get+字段名+Attr</code></p>\n<p>如对 url 处理则定义为<code>getUrlAttr</code></p>\n<p>2.读取器的特性：</p>\n<ul>\n<li>\n<p>模型具有的性质</p>\n</li>\n<li>\n<p>使用模型时自动调用的方法（访问该属性时调用）</p>\n</li>\n<li>\n<p>AOP 思想的一个实现</p>\n<p>3.接收器参数说明：</p>\n<pre><code>参数1：需要处理的字段的值\n参数2：当前记录的完整信息(包括隐藏未显示的字段)\n</code></pre>\n<p>4.使用方法：</p>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义读取器（框架自动调用）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUrlAttr</span><span class=\"params\">($value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// $value为获取到的url值。</span></span><br><span class=\"line\">    $prefix = config(<span class=\"string\">'setting.img_prefix'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $prefix.$value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>url 字段被自动拼接成：<code>&quot;url&quot;: &quot;http://mypro.com/static/images/banner-4a.png&quot;</code>形式</p>\n<p>5.根据业务逻辑进行调整</p>\n<p>image 数据表中的<code>from</code>字段标识当前图片的来源。</p>\n<pre><code>from=1 =》 图片来自当前项目，存储的是 相对路径\nfrom=2 =》 图片来自网络，存储的是 绝对路径\n</code></pre>\n<p>即：当 from=1 时，才需要对 url 进行相关操作。</p>\n<p>此时需要访问到<code>from</code>的值，要用到第二个参数。</p>\n<p>6.调整代码实现</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义读取器（框架自动调用）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUrlAttr</span><span class=\"params\">($value, $data)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// $value 获取到的url值。</span></span><br><span class=\"line\">    <span class=\"comment\">// $data 当前记录的完整信息(包括隐藏未显示的字段)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    $finalUrl = $value;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($data[<span class=\"string\">'from'</span>] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        $prefix = config(<span class=\"string\">'setting.img_prefix'</span>);</span><br><span class=\"line\">        $finalUrl = $prefix . $value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $finalUrl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过关联模型访问 Image 模型并获取 url 字段信息时调用该方法。</p>\n<h2 id=\"8-8-自定义模型基类\"><a class=\"markdownIt-Anchor\" href=\"#8-8-自定义模型基类\"></a> 8-8 自定义模型基类</h2>\n<p>1.对于多个模型处理 url 字段时，为增强代码的复用性，可将该处理方法封装到模型类基类<code>model/BaseModel.php</code>中。</p>\n<p>2.其他的模型类不再直接继承<code>model</code>类，而是直接继承<code>BaseModel</code>类。</p>\n<p>3.又考虑到当前使用的 url 表示的是 img 路径，而其他数据表中的 url 可能并非 img 路径，所以需要再次调整。将<code>getUrlAttr</code>功能的具体实现进行拆分。</p>\n<p>(1) <code>model/BaseModel.php</code>，定义成一个普通的方法</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">prefixImgUrl</span><span class=\"params\">($value, $data)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $finalUrl = $value;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($data[<span class=\"string\">'from'</span>] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        $prefix = config(<span class=\"string\">'setting.img_prefix'</span>);</span><br><span class=\"line\">        $finalUrl = $prefix . $value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $finalUrl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(2) <code>model/Image.php</code>，读取器中调用基类的方法。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUrlAttr</span><span class=\"params\">($value, $data)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;prefixImgUrl($value, $data);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(3)分析：将业务逻辑的具体实现集中到一起，简化业务变动时的频繁修改。提高了项目的<strong>扩展性</strong>。</p>\n<h2 id=\"8-9-定义-api-版本号\"><a class=\"markdownIt-Anchor\" href=\"#8-9-定义-api-版本号\"></a> 8-9 定义 API 版本号</h2>\n<p>1.为什么要实现多版本？</p>\n<p>由于业务调整，实现的功能需要进行变更，（处理同一个问题需要使用不同解决方式），并且之前的功能还需要兼容，此时如果通过判断条件进行判断，再执行相应的功能会使得代码冗余，违背代码的<strong>开闭原则</strong>。应该将代码分离出来，每一个版本做一个单独的代码模块。</p>\n<blockquote>\n<p>开闭原则：对扩展是开放的，对修改是封闭的。（以扩展的形式修改代码）</p>\n</blockquote>\n<p>2.如何实现多版本？</p>\n<ul>\n<li>目录设置:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">application</span><br><span class=\"line\">    |__ api</span><br><span class=\"line\">        |__ controller</span><br><span class=\"line\">            |__ v1</span><br><span class=\"line\">                |__ Banner.php</span><br><span class=\"line\">            |__ v2</span><br><span class=\"line\">                |__ Banner.php</span><br></pre></td></tr></table></figure>\n<ul>\n<li>路由设置：</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 动态参数 :version 动态访问相应版本</span></span><br><span class=\"line\">Route::get(<span class=\"string\">'api/:version/banner/:id'</span>, <span class=\"string\">'api/:version.Banner/getBanner'</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-10-专题接口模型分析\"><a class=\"markdownIt-Anchor\" href=\"#8-10-专题接口模型分析\"></a> 8-10 专题接口模型分析</h2>\n<ul>\n<li>\n<p>theme 专题表<br>\n<code>theme(id,name,description,topic_img_id,delete_time,head_img_id,update_time)</code></p>\n<pre><code>`topic_img_id` 首页主题入口的img图片\n`head_img_id` 进入相应主题显示的head图片\n</code></pre>\n</li>\n<li>\n<p>product 产品表<br>\n<code>product(id,name,price,stock,delete_time,category_id,main_img_url,from,create_time,update_time,summary,img_id)</code></p>\n<pre><code>`main_img_url`\n`img_id`\n</code></pre>\n</li>\n<li>\n<p>theme_product 专题-产品关联表<br>\n<code>theme_product(theme_id,product_id)</code></p>\n<pre><code>theme &lt;=&gt; product 多对多关系\ntheme_product 多对多关系表中需要一个关联表连接两者关系\n</code></pre>\n</li>\n</ul>\n<h2 id=\"8-11-一对一关系解析\"><a class=\"markdownIt-Anchor\" href=\"#8-11-一对一关系解析\"></a> 8-11 一对一关系解析</h2>\n<pre><code>theme &lt;=&gt; image 一对一关系\n</code></pre>\n<p>1.一对一关系的表示方法（有主从关系）：</p>\n<pre><code>hasOne()\nbelongsTo()\n</code></pre>\n<p>外键存储在其中一张表里，所以需要使用<code>hasOne</code>和<code>belongsTo</code>来区分。</p>\n<pre><code>有外键的表`belongsTo`无外键的表\n无外键的表`hasOne`有外键的表\n</code></pre>\n<p>theme – (topic_img_id, head_img_id) – 表中有外键 (对应 image 表中的 id 主键)<br>\n=》 theme topicImg belongsTo image</p>\n<p>image – 表中没有外键<br>\n=》 image hasOne theme</p>\n<h2 id=\"8-12-theme-接口验证与重构\"><a class=\"markdownIt-Anchor\" href=\"#8-12-theme-接口验证与重构\"></a> 8-12 Theme 接口验证与重构</h2>\n<p>1.Theme 接口实现的不同方法对比：</p>\n<p>（1）客户端只负责调用接口，由接口确定需要返回的主题 theme 的 id 号（2）由客户端传入具体需要的主题 Theme 的 id 号（前端有更大的灵活性）</p>\n<p>2.方法实现</p>\n<p>步骤：</p>\n<p>(1)定义控制器方法名</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/controller/v1/Theme.php</span></span><br><span class=\"line\">getSimpleList();</span><br></pre></td></tr></table></figure>\n<p>(2)路由文件定义路由</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// config/route.php</span></span><br><span class=\"line\">Route::get(<span class=\"string\">'api/:version/theme'</span>, <span class=\"string\">'api/:version.Theme/getSimpleList'</span>);</span><br></pre></td></tr></table></figure>\n<p>(3)控制器方法具体实现业务功能（一） — 参数要求</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取需要展示的主题theme</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Location</span> api/controller/v1/Theme.php</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> string $ids</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> string $theme</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<p>(4)验证器验证</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/validate/IDCollection.php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1.验证规则</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> $rule = [</span><br><span class=\"line\">    <span class=\"string\">'ids'</span> =&gt; <span class=\"string\">'require|checkIDs'</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.验证不通过的提示信息</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> $message = [</span><br><span class=\"line\">    <span class=\"string\">'ids'</span> =&gt; <span class=\"string\">'ids必须是以逗号隔开的多个正整数'</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.自定义验证方法(验证器)</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 验证ids</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> string $values = id1,id2,id3,...</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> bool false/true</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkIDs</span><span class=\"params\">($values)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $ids = explode(<span class=\"string\">','</span>, $values);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>($ids)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> ($ids <span class=\"keyword\">as</span> $id) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 每个id必须是正整数</span></span><br><span class=\"line\">        $res = <span class=\"keyword\">$this</span>-&gt;isPositiveInteger($id);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!$res) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3.<strong>扩展</strong>:</p>\n<p>IDCollection 和 IDMustPositiveInt 都用到对 id 是正整数的验证，为提高代码的复用性，可以：</p>\n<pre><code>（1）将isPositiveInteger提取到公共方法中（没有内聚性）\n\n（2）将方法重新定义到验证器基类中供所有验证器之类调用。（优化的选择）\n</code></pre>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/validate/BaseValidate.php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 验证是否是正整数</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> int $value</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> boolean false/true</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPositiveInteger</span><span class=\"params\">($value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (is_numeric($value) &amp;&amp; is_int($value+<span class=\"number\">0</span>) &amp;&amp; ($value +<span class=\"number\">0</span>)&gt;<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4.调用验证器</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/controller/v1/Theme.php</span></span><br><span class=\"line\">(<span class=\"keyword\">new</span> IDCollection())-&gt;goCheck();</span><br></pre></td></tr></table></figure>\n<p>5.测试 url</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://mypro.com/api/v1/theme?ids=0.1,2,3</span><br><span class=\"line\">http://mypro.com/api/v1/theme?ids=1,s,3</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-13-完成-theme-简要信息接口\"><a class=\"markdownIt-Anchor\" href=\"#8-13-完成-theme-简要信息接口\"></a> 8-13 完成 Theme 简要信息接口</h2>\n<p>1.完成获取信息接口</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/controller/v1/Theme.php</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSimpleList</span><span class=\"params\">($ids=<span class=\"string\">''</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 验证用户传递的参数</span></span><br><span class=\"line\">    (<span class=\"keyword\">new</span> IDCollection())-&gt;goCheck();</span><br><span class=\"line\"></span><br><span class=\"line\">    $ids = explode(<span class=\"string\">','</span>, $ids);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 关联Image表获取相应信息</span></span><br><span class=\"line\">    $theme = model(<span class=\"string\">'theme'</span>)-&gt;with([<span class=\"string\">'topicImg'</span>, <span class=\"string\">'headImg'</span>])-&gt;select($ids);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 无查询结果时，进行异常处理</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!$theme) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ThemeMissException();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 对数组格式的返回数据进行json格式化</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> json($theme);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.完成异常处理类</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// application/lib/exception/ThemeMissException.php</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> $code = <span class=\"number\">404</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> $msg = <span class=\"string\">'请求的主题不存在'</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> $errorCode = <span class=\"number\">30000</span>;</span><br></pre></td></tr></table></figure>\n<p>3.在相应的模型中隐藏部分字段</p>\n<p>(1)隐藏 Theme 表的部分字段</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/model/v1/Theme.php</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> $hidden = [<span class=\"string\">'delete_time'</span>, <span class=\"string\">'update_time'</span>, <span class=\"string\">'topic_img_id'</span>, <span class=\"string\">'head_img_id'</span>];</span><br></pre></td></tr></table></figure>\n<p>(2)隐藏 Image 表的部分字段(只显示部分字段)</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/model/v1/Image.php</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> $visible = [<span class=\"string\">'url'</span>];</span><br></pre></td></tr></table></figure>\n<p>4.补充说明：</p>\n<p>对于复杂的业务处理，应该将相应的代码写到 Service 层(Model 层之上) – 特别是涉及到多个模型之间的关联的时候</p>\n<h2 id=\"8-14-开启路由完整匹配\"><a class=\"markdownIt-Anchor\" href=\"#8-14-开启路由完整匹配\"></a> 8-14 开启路由完整匹配</h2>\n<p>1.功能需求说明</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">点击专题图片进入到专题后需要显示相应的产品图片、</span><br><span class=\"line\"></span><br><span class=\"line\">=》获取属于该专题的产品信息</span><br><span class=\"line\"></span><br><span class=\"line\">（一个产品可以属于一个专题，也可以属于多个专题； 一个专题会包含多个产品） ==》多对多关系[Theme &lt;=&gt; Product]</span><br><span class=\"line\"></span><br><span class=\"line\">多对多关系的数据表有一个中间关联表</span><br></pre></td></tr></table></figure>\n<p>2.模型关联获取关联的数据</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/model/Theme.php</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">products</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 参数1： 对应数据表的模型名</span></span><br><span class=\"line\">    <span class=\"comment\">// 参数2： 关联表的模型名</span></span><br><span class=\"line\">    <span class=\"comment\">// 参数3： 关联表中的外键名(和参数1模型关联)</span></span><br><span class=\"line\">    <span class=\"comment\">// 参数4： 关联表的外键(关联当前模型)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;belongsToMany(<span class=\"string\">'Product'</span>, <span class=\"string\">'theme_product'</span>, <span class=\"string\">'product_id'</span>. <span class=\"string\">'theme_id'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3.编写控制器方法(定义方法名和需要接收的参数)</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/v1/controller/Theme.php</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getProducts</span><span class=\"params\">($id)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>4.定义路由</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::get(<span class=\"string\">'api/:version/theme/:id'</span>, <span class=\"string\">'api/:version.Theme/getProducts/:id'</span>);</span><br></pre></td></tr></table></figure>\n<p>【注意】：</p>\n<p>默认情况下 TP5 的配置项是关闭路由完整匹配的，这种情况下访问当前路由接口时，由于先匹配到<code>api/:version/theme</code>路由，便不会再继续向下匹配路由，从而会调用该路由对应的接口。</p>\n<p>==》<strong>解决办法</strong>：<code>开启路由完整匹配</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// application/config.php默认配置文件路径</span></span><br><span class=\"line\"><span class=\"comment\">// 路由使用完整匹配（设置为true时开启）</span></span><br><span class=\"line\"><span class=\"string\">'route_complete_match'</span>   =&gt; <span class=\"keyword\">false</span>,  <span class=\"comment\">// =&gt;true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"8-15-完成-theme-详情接口\"><a class=\"markdownIt-Anchor\" href=\"#8-15-完成-theme-详情接口\"></a> 8-15 完成 Theme 详情接口</h2>\n<h3 id=\"1参数校验\"><a class=\"markdownIt-Anchor\" href=\"#1参数校验\"></a> 1.参数校验</h3>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/v1/controller/Theme.php</span></span><br><span class=\"line\">(<span class=\"keyword\">new</span> IDMustPositiveInt)-&gt;check();</span><br></pre></td></tr></table></figure>\n<h3 id=\"2在模型中编写方法实现数据获取\"><a class=\"markdownIt-Anchor\" href=\"#2在模型中编写方法实现数据获取\"></a> 2.在模型中编写方法实现数据获取</h3>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/model/Theme.php</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getThemeWithProducts</span><span class=\"params\">($id)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $theme = <span class=\"keyword\">self</span>::with(<span class=\"string\">'products,topicImg,headImg'</span>)-&gt;find($id);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $theme;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>【注】REST 是面向资源的请求方式，即将相关的数据全部返回给客户端，不管客户端目前需不需要用得上，但这种方式返回的资源应该有一个限度，</p>\n<h3 id=\"3在控制器中调用\"><a class=\"markdownIt-Anchor\" href=\"#3在控制器中调用\"></a> 3.在控制器中调用</h3>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/v1/controller/Theme.php</span></span><br><span class=\"line\">$theme = model(<span class=\"string\">'theme'</span>)-&gt;getThemeWithProducts($id);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!$theme) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ThemeMissException();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> $theme;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4编写异常处理类\"><a class=\"markdownIt-Anchor\" href=\"#4编写异常处理类\"></a> 4.编写异常处理类</h3>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/lib/exception/ThemeMissException.php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThemeMissException</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseException</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 覆盖父类的相应属性</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> $code = <span class=\"number\">404</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $msg = <span class=\"string\">'请求的主题不存在'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $errorCode = <span class=\"number\">30000</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-16-数据库字段冗余的合理利用\"><a class=\"markdownIt-Anchor\" href=\"#8-16-数据库字段冗余的合理利用\"></a> 8-16 数据库字段冗余的合理利用</h2>\n<p>多对多关系的数据表关联查询时会自动多一个<code>pivot</code>字段的信息，存储关联字段。但关联信息不是我们需要显示的信息，所以将该字段隐藏掉。</p>\n<p><code>products</code>中<code>main_img_url</code>和<code>img_id</code>都是用来关联 image 表，记录图片信息。属于数据冗余。</p>\n<p>但此处是数据冗余的合理应用范围，因为需要在多处使用到，并且数据量和业务并不是太复杂。</p>\n<h2 id=\"8-17-rest-的合理利用\"><a class=\"markdownIt-Anchor\" href=\"#8-17-rest-的合理利用\"></a> 8-17 REST 的合理利用</h2>\n<p>1.数据冗余之后对数据的完整性和一致性的维护变得困难。</p>\n<p>2.数据更新时需要对多处数据进行修改，否则就会出现数据不一致的现象。</p>\n<p>3.完成方法编写(对 product 相关字段的 url 进行处理—添加前缀)</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/model/Product.php</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMainImgUrlAttr</span><span class=\"params\">($value, $data)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;prefixImgUrl($value, $data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4.REST 设计原则</p>\n<p>(1)REST 是基于资源的，凡是和业务相关的数据都应该返回，不管当前的业务是否需要使用相应的数据。</p>\n<p>好处在于后期业务变更需要相应的数据的时候，可以直接调用即可，不用更改服务器的接口程序，可以用来保证客户端的稳定性。</p>\n<p>(2)但也不能一味的将所有相关的数据返回，会消耗数据库的性能。</p>\n<h2 id=\"8-18-最近新品接口编写\"><a class=\"markdownIt-Anchor\" href=\"#8-18-最近新品接口编写\"></a> 8-18 最近新品接口编写</h2>\n<p>1.TP5 框架自带时间更新操作,使用模型操作数据库时，当插入记录时，自动带上<code>create_time</code>; 更新操作时自动带上<code>updated_time</code>;删除时自动带上<code>delete_time</code></p>\n<p>2.删除操作不是真实的物理删除，而是通过判断<code>delete_time</code>的值来确定该条记录的状态</p>\n<p>3.实现步骤</p>\n<p>(1)定义控制器方法 [方法名|传递参数]</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRecent</span><span class=\"params\">($count=<span class=\"number\">15</span>)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>(2)定义路由</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::get(<span class=\"string\">'api/:version/product/recent'</span>, <span class=\"string\">'api/:version.Product/getRecent'</span>);</span><br></pre></td></tr></table></figure>\n<p>(3)定义模型方法</p>\n<ul>\n<li>limit()方法的使用</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMostRecent</span><span class=\"params\">($count)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $products = <span class=\"keyword\">self</span>::limit($count)-&gt;order(<span class=\"string\">'create_time desc'</span>)-&gt;select();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $products;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(4)编写验证器</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//需要对传递的count值进行验证</span></span><br><span class=\"line\"><span class=\"comment\">// application/validate/Count.php</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> $rule = [</span><br><span class=\"line\">    <span class=\"string\">'count'</span> =&gt; <span class=\"string\">'isPositiveInteger|between:1,15'</span></span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>(5)完成控制器方法</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRecent</span><span class=\"params\">($count=<span class=\"number\">15</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    (<span class=\"keyword\">new</span> Count())-&gt;goCheck();</span><br><span class=\"line\">    $products = model(<span class=\"string\">'product'</span>)-&gt;getMostRecent($count);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($products) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ProductMissException();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $products;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(6)完成异常处理类方法</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductMissException</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseException</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $code = <span class=\"string\">'404'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $msg = <span class=\"string\">'请求的product不存在'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $errorCode = <span class=\"number\">20000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>[注]：<code>app_debug</code>设置为 true 时，在<code>ExceptionHandler.php</code>中会调用父类的<code>render()</code>方法，导致框架的异常处理类找不到程序中自定义的异常处理类，从而会有报错提示。</p>\n<p>!!!出现 500 系统内部错误!</p>\n<ul>\n<li>\n<p>原因=&gt;config.php 设置<code>default_return_type</code>的值为<code>html</code>, 而 Product 的 controller 中 return 的结果值为 array，导致系统内部错误。</p>\n</li>\n<li>\n<p>解决=&gt;将<code>default_return_type</code>的值为<code>json</code>。或者将 Product 的 controller 中 return 的结果进行 json 格式化。</p>\n</li>\n</ul>\n<h3 id=\"警告学会查看-log-日志信息提高错误排查能力\"><a class=\"markdownIt-Anchor\" href=\"#警告学会查看-log-日志信息提高错误排查能力\"></a> <strong>【警告】学会查看 log 日志信息，提高错误排查能力！</strong></h3>\n<h2 id=\"8-19-使用数据集还是数组\"><a class=\"markdownIt-Anchor\" href=\"#8-19-使用数据集还是数组\"></a> 8-19 使用数据集还是数组？</h2>\n<p>1.问题 1：验证方法中，<code>$rule</code>属性数组的键值对中， 值<code>'isPositiveInteger|between:1,15'</code>中<code>|</code>符两端不能有空格，否则会被视为验证错误。</p>\n<p>2.问题 2：对某些当前不需要用到，但后期会用到的字段信息（特殊情况不用，大多数情况要用），既不能直接显示，也不能直接隐藏，如何处理？</p>\n<p>=》 在<code>api/v1/Product/recent</code>接口中临时隐藏<code>summary</code>字段。</p>\n<p>3.<strong>collection()方法</strong>：临时隐藏某个或某些字段</p>\n<p>【使用方法】：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用数据集，临时隐藏某些字段</span></span><br><span class=\"line\">$productCollection = collection($products);</span><br><span class=\"line\">$products = $productCollection-&gt;hidden([<span class=\"string\">'summary'</span>]);</span><br></pre></td></tr></table></figure>\n<p>4.一个 product 是一个对象，一组 product 也可是是一个对象(数据集)。</p>\n<p>5.使用对象的方式，可读性好，内聚性好。</p>\n<p>6.TP5 调用模型自动返回一个数据集的形式：<code>resultset_type</code> [database.php]</p>\n<p>默认是<code>array</code>，设置成<code>collection</code>后，模型返回的数据自动就是<code>collection</code>形式，不需要再转换一次。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在database.php中配置之后，不需要手动转换为collection</span></span><br><span class=\"line\">$products = $products-&gt;hidden([<span class=\"string\">'summary'</span>]);</span><br></pre></td></tr></table></figure>\n<p>【扩展】：</p>\n<p>但是这样使用之后，控制器中调用模型返回数据后，返回的是对象，即使没有数据，也不是空，所以直接使用<code>!</code>判断是不能实现效果的。</p>\n<p>=》解决方法：使用数据集对象的<code>isEmpty()</code>方法进行判空。</p>\n<h2 id=\"8-20-分类列表接口\"><a class=\"markdownIt-Anchor\" href=\"#8-20-分类列表接口\"></a> 8-20 分类列表接口</h2>\n<p>1.模型类的<code>all</code>方法使用。</p>\n<ul>\n<li>\n<p>参数 1：主键列表或者查询条件（闭包） <code>mixed</code></p>\n</li>\n<li>\n<p>参数 2：关联预查询 <code>array | string</code></p>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$categories = model(<span class=\"string\">'Category'</span>)-&gt;with(<span class=\"string\">'img'</span>)-&gt;select();</span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\">$categories = model(<span class=\"string\">'Category'</span>)-&gt;all([], <span class=\"string\">'img'</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-21-扩展接口粒度与接口分层\"><a class=\"markdownIt-Anchor\" href=\"#8-21-扩展接口粒度与接口分层\"></a> 8-21 扩展：接口粒度与接口分层</h2>\n<p>1.减少首页 http 请求(api)的次数，从而减轻服务器的压力</p>\n<p>2.接口粒度： 太粗=》代码复用性不好，不够灵活；太细=》需要发送的请求太多，不方便</p>\n<p>3.架构师 =》 Api 接口设计 =》 底层设计力度比较小、灵活性比较高的 api 接口；越往上粒度逐渐变粗。</p>\n<p>4.如果确实调用的接口比较多，应该在 api 基础数据层上建立业务层，再在业务层调用基础数据层相关的接口，再进行封装。</p>\n","site":{"data":{}},"excerpt":"<p>ThinkPHP5 从入门到深入学习，结合实战项目深入理解 ThinkPHP5 的特性和使用方法。编写完成简单的基于 RESTFul 接口，实现相应功能，掌握控制器、模型、异常处理、数据校验的使用。</p>","more":"<h2 id=\"8-1-banner-相关表分析数据表关系分析\"><a class=\"markdownIt-Anchor\" href=\"#8-1-banner-相关表分析数据表关系分析\"></a> 8-1 Banner 相关表分析（数据表关系分析）</h2>\n<ul>\n<li>banner 位的数据表<code>banner</code></li>\n</ul>\n<p><code>banner(id, name, description, delete_time, update_time)</code></p>\n<ul>\n<li>每个 banner 位图片的数据表<code>banner_item</code></li>\n</ul>\n<p><code>banner_item(id, img_id, key_word, type, delete_time, banner_id, update_time)</code></p>\n<ul>\n<li>图片表<code>image</code></li>\n</ul>\n<p><code>image(id, url, from, delete_time, update_time)</code></p>\n<pre><code>banner &lt;=&gt; banner_item 一对多关系\nimage &lt;=&gt; banner_item 一对一关系\n</code></pre>\n<h2 id=\"8-2-模型关联定义关联与查询关联\"><a class=\"markdownIt-Anchor\" href=\"#8-2-模型关联定义关联与查询关联\"></a> 8-2 模型关联–定义关联与查询关联</h2>\n<blockquote>\n<p>model/Banner.php</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建关联方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">items</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 参数1：关联模型的模型名</span></span><br><span class=\"line\">    <span class=\"comment\">// 参数2：关联模型的外键</span></span><br><span class=\"line\">    <span class=\"comment\">// 参数3：当前模型的主键</span></span><br><span class=\"line\">    <span class=\"comment\">// hasMany：表示是一对多的关系</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;hasMany(<span class=\"string\">'BannerItem'</span>, <span class=\"string\">'banner_id'</span>, <span class=\"string\">'id'</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 【需要创建BannerItem模型类文件】</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>controller/Banner.php</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//with()方法，设置关联模型</span></span><br><span class=\"line\">$banner = BannerModel::with(<span class=\"string\">'items'</span>)-&gt;find($id);</span><br><span class=\"line\"><span class=\"comment\">//等价于 $banner = model('banner')-&gt;with('items')-&gt;find($id);</span></span><br></pre></td></tr></table></figure>\n<p>执行结果时会自动附件关联信息。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"首页置顶\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"首页轮播图\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"delete_time\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"update_time\"</span>: <span class=\"string\">\"1970-01-01 08:00:00\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"items\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"img_id\"</span>: <span class=\"number\">65</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"key_word\"</span>: <span class=\"string\">\"6\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"delete_time\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"banner_id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"update_time\"</span>: <span class=\"string\">\"1970-01-01 08:00:00\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-3-模型关联-嵌套关联查询\"><a class=\"markdownIt-Anchor\" href=\"#8-3-模型关联-嵌套关联查询\"></a> 8-3 模型关联 --嵌套关联查询</h2>\n<p>1.多个关联表</p>\n<pre><code>with(['items','item2'])\n</code></pre>\n<p>2.命令行创建模型（自动完成模板）</p>\n<pre><code>php think make:model api/Image\n</code></pre>\n<p>3.banner 嵌套 items，现在需要给 items 嵌套 img 相关信息</p>\n<p>多层嵌套使用方法：</p>\n<pre><code>with(['items', 'items.img'])\n</code></pre>\n<p>4.具体实现：</p>\n<ul>\n<li><code>model/BannerItem.php</code></li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">img</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// BannerItem和Image是一对一的关系，使用的方法是belongsTo</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;belongsTo(<span class=\"string\">'Image'</span>, <span class=\"string\">'img_id'</span>, <span class=\"string\">'id'</span>);</span><br><span class=\"line\">    <span class=\"comment\">//【需要创建Image模型类文件】</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也可以在<code>model/Image.php</code>中定义,实现的效果是一样的。</p>\n<ul>\n<li><code>controller/Banner.php</code></li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 多层嵌套的使用</span></span><br><span class=\"line\">$banner = BannerModel::with([<span class=\"string\">'items'</span>, <span class=\"string\">'items.img'</span>])-&gt;find($id);</span><br></pre></td></tr></table></figure>\n<p>5.实现效果如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"首页置顶\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"首页轮播图\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"delete_time\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"update_time\"</span>: <span class=\"string\">\"1970-01-01 08:00:00\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"items\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"img_id\"</span>: <span class=\"number\">65</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"key_word\"</span>: <span class=\"string\">\"6\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"delete_time\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"banner_id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"update_time\"</span>: <span class=\"string\">\"1970-01-01 08:00:00\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"img\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">65</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"/banner-4a.png\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"from\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"delete_time\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"update_time\"</span>: <span class=\"string\">\"1970-01-01 08:00:00\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;...&#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-4-隐藏模型字段\"><a class=\"markdownIt-Anchor\" href=\"#8-4-隐藏模型字段\"></a> 8-4 隐藏模型字段</h2>\n<ul>\n<li>方法 1：将对象转化为数组<code>toArray()</code>，再将该字段 unset</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$banner = $banner-&gt;toArray();</span><br><span class=\"line\"><span class=\"keyword\">unset</span>($banner[<span class=\"string\">'delete_time'</span>]);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>方法 2：使用对象的 <code>hidden()</code> 方法</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$banner-&gt;hidden([<span class=\"string\">'update_time'</span>, <span class=\"string\">'delete_time'</span>]);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>方法 3：只显示指定字段<code>visible()</code></li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$banner-&gt;visible([<span class=\"string\">'id'</span>, <span class=\"string\">'name'</span>]);</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-5-在模型内部隐藏字段\"><a class=\"markdownIt-Anchor\" href=\"#8-5-在模型内部隐藏字段\"></a> 8-5 在模型内部隐藏字段</h2>\n<p>1.对嵌套的数据字段隐藏</p>\n<p>最好的办法：在相应的模型类中定义相应的属性。</p>\n<ul>\n<li>想要隐藏 <code>banner</code> 的字段信息</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// model/Banner.php</span></span><br><span class=\"line\"><span class=\"comment\">// 隐藏的字段</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> $hidden = [<span class=\"string\">'id'</span>];</span><br><span class=\"line\"><span class=\"comment\">// 只显示的字段</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> $visibale = [<span class=\"string\">'name'</span>,<span class=\"string\">'update_time'</span>];</span><br></pre></td></tr></table></figure>\n<ul>\n<li>想要隐藏 <code>banner.items</code> 下的字段信息：</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// model/BannerItem.php</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> $hidden = [<span class=\"string\">'id'</span>];</span><br></pre></td></tr></table></figure>\n<ul>\n<li>想要隐藏 <code>banner.items.img</code> 的字段信息</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// model/Image.php</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> $hidden = [<span class=\"string\">'from'</span>];</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-6-图片资源-url-配置\"><a class=\"markdownIt-Anchor\" href=\"#8-6-图片资源-url-配置\"></a> 8-6 图片资源 URL 配置</h2>\n<p>1.数据库存放的图片 url 是相对地址，所以获取的数据也是相对地址，不能直接获取到图片的具体资源位置。</p>\n<pre><code>具体路径 = 服务器域名+路径配置+相对地址\n</code></pre>\n<p>2.定义自己项目相关的配置 =》 自定义配置文件</p>\n<p>TP5 扩展配置目录 =》自动加载该目录下的配置文件</p>\n<p>默认位置：<code>application/extra</code></p>\n<p>3.定义配置项:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// application/extra/setting.php</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> [</span><br><span class=\"line\">  <span class=\"string\">'img_prefix'</span> =&gt; <span class=\"string\">'http://mypro.com/static/images'</span></span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>4.tp5 中只有 public 目录是对外公开，可以访问的，所以图片资源应当放在 public 目录下</p>\n<p>5.读取配置文件：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 配置文件自动被加载，直接读取配置项即可</span></span><br><span class=\"line\">config(<span class=\"string\">'setting.img_prefix'</span>);</span><br></pre></td></tr></table></figure>\n<p>6.<strong>【注】：如果自定义了<code>CONF_PATH</code>目录，则自动加载的配置文件目录应该在<code>config/extra</code>目录下</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// public/index.php</span></span><br><span class=\"line\"><span class=\"comment\">// 自定义CONF_PATH目录</span></span><br><span class=\"line\">define(<span class=\"string\">'CONF_PATH'</span>, <span class=\"keyword\">__DIR__</span> . <span class=\"string\">'/../config/'</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-7-模型读取器的巧妙应用\"><a class=\"markdownIt-Anchor\" href=\"#8-7-模型读取器的巧妙应用\"></a> 8-7 模型读取器的巧妙应用</h2>\n<p>1.读取器的命名：<code>get+字段名+Attr</code></p>\n<p>如对 url 处理则定义为<code>getUrlAttr</code></p>\n<p>2.读取器的特性：</p>\n<ul>\n<li>\n<p>模型具有的性质</p>\n</li>\n<li>\n<p>使用模型时自动调用的方法（访问该属性时调用）</p>\n</li>\n<li>\n<p>AOP 思想的一个实现</p>\n<p>3.接收器参数说明：</p>\n<pre><code>参数1：需要处理的字段的值\n参数2：当前记录的完整信息(包括隐藏未显示的字段)\n</code></pre>\n<p>4.使用方法：</p>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义读取器（框架自动调用）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUrlAttr</span><span class=\"params\">($value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// $value为获取到的url值。</span></span><br><span class=\"line\">    $prefix = config(<span class=\"string\">'setting.img_prefix'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $prefix.$value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>url 字段被自动拼接成：<code>&quot;url&quot;: &quot;http://mypro.com/static/images/banner-4a.png&quot;</code>形式</p>\n<p>5.根据业务逻辑进行调整</p>\n<p>image 数据表中的<code>from</code>字段标识当前图片的来源。</p>\n<pre><code>from=1 =》 图片来自当前项目，存储的是 相对路径\nfrom=2 =》 图片来自网络，存储的是 绝对路径\n</code></pre>\n<p>即：当 from=1 时，才需要对 url 进行相关操作。</p>\n<p>此时需要访问到<code>from</code>的值，要用到第二个参数。</p>\n<p>6.调整代码实现</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义读取器（框架自动调用）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUrlAttr</span><span class=\"params\">($value, $data)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// $value 获取到的url值。</span></span><br><span class=\"line\">    <span class=\"comment\">// $data 当前记录的完整信息(包括隐藏未显示的字段)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    $finalUrl = $value;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($data[<span class=\"string\">'from'</span>] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        $prefix = config(<span class=\"string\">'setting.img_prefix'</span>);</span><br><span class=\"line\">        $finalUrl = $prefix . $value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $finalUrl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过关联模型访问 Image 模型并获取 url 字段信息时调用该方法。</p>\n<h2 id=\"8-8-自定义模型基类\"><a class=\"markdownIt-Anchor\" href=\"#8-8-自定义模型基类\"></a> 8-8 自定义模型基类</h2>\n<p>1.对于多个模型处理 url 字段时，为增强代码的复用性，可将该处理方法封装到模型类基类<code>model/BaseModel.php</code>中。</p>\n<p>2.其他的模型类不再直接继承<code>model</code>类，而是直接继承<code>BaseModel</code>类。</p>\n<p>3.又考虑到当前使用的 url 表示的是 img 路径，而其他数据表中的 url 可能并非 img 路径，所以需要再次调整。将<code>getUrlAttr</code>功能的具体实现进行拆分。</p>\n<p>(1) <code>model/BaseModel.php</code>，定义成一个普通的方法</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">prefixImgUrl</span><span class=\"params\">($value, $data)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $finalUrl = $value;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($data[<span class=\"string\">'from'</span>] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        $prefix = config(<span class=\"string\">'setting.img_prefix'</span>);</span><br><span class=\"line\">        $finalUrl = $prefix . $value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $finalUrl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(2) <code>model/Image.php</code>，读取器中调用基类的方法。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUrlAttr</span><span class=\"params\">($value, $data)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;prefixImgUrl($value, $data);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(3)分析：将业务逻辑的具体实现集中到一起，简化业务变动时的频繁修改。提高了项目的<strong>扩展性</strong>。</p>\n<h2 id=\"8-9-定义-api-版本号\"><a class=\"markdownIt-Anchor\" href=\"#8-9-定义-api-版本号\"></a> 8-9 定义 API 版本号</h2>\n<p>1.为什么要实现多版本？</p>\n<p>由于业务调整，实现的功能需要进行变更，（处理同一个问题需要使用不同解决方式），并且之前的功能还需要兼容，此时如果通过判断条件进行判断，再执行相应的功能会使得代码冗余，违背代码的<strong>开闭原则</strong>。应该将代码分离出来，每一个版本做一个单独的代码模块。</p>\n<blockquote>\n<p>开闭原则：对扩展是开放的，对修改是封闭的。（以扩展的形式修改代码）</p>\n</blockquote>\n<p>2.如何实现多版本？</p>\n<ul>\n<li>目录设置:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">application</span><br><span class=\"line\">    |__ api</span><br><span class=\"line\">        |__ controller</span><br><span class=\"line\">            |__ v1</span><br><span class=\"line\">                |__ Banner.php</span><br><span class=\"line\">            |__ v2</span><br><span class=\"line\">                |__ Banner.php</span><br></pre></td></tr></table></figure>\n<ul>\n<li>路由设置：</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 动态参数 :version 动态访问相应版本</span></span><br><span class=\"line\">Route::get(<span class=\"string\">'api/:version/banner/:id'</span>, <span class=\"string\">'api/:version.Banner/getBanner'</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-10-专题接口模型分析\"><a class=\"markdownIt-Anchor\" href=\"#8-10-专题接口模型分析\"></a> 8-10 专题接口模型分析</h2>\n<ul>\n<li>\n<p>theme 专题表<br>\n<code>theme(id,name,description,topic_img_id,delete_time,head_img_id,update_time)</code></p>\n<pre><code>`topic_img_id` 首页主题入口的img图片\n`head_img_id` 进入相应主题显示的head图片\n</code></pre>\n</li>\n<li>\n<p>product 产品表<br>\n<code>product(id,name,price,stock,delete_time,category_id,main_img_url,from,create_time,update_time,summary,img_id)</code></p>\n<pre><code>`main_img_url`\n`img_id`\n</code></pre>\n</li>\n<li>\n<p>theme_product 专题-产品关联表<br>\n<code>theme_product(theme_id,product_id)</code></p>\n<pre><code>theme &lt;=&gt; product 多对多关系\ntheme_product 多对多关系表中需要一个关联表连接两者关系\n</code></pre>\n</li>\n</ul>\n<h2 id=\"8-11-一对一关系解析\"><a class=\"markdownIt-Anchor\" href=\"#8-11-一对一关系解析\"></a> 8-11 一对一关系解析</h2>\n<pre><code>theme &lt;=&gt; image 一对一关系\n</code></pre>\n<p>1.一对一关系的表示方法（有主从关系）：</p>\n<pre><code>hasOne()\nbelongsTo()\n</code></pre>\n<p>外键存储在其中一张表里，所以需要使用<code>hasOne</code>和<code>belongsTo</code>来区分。</p>\n<pre><code>有外键的表`belongsTo`无外键的表\n无外键的表`hasOne`有外键的表\n</code></pre>\n<p>theme – (topic_img_id, head_img_id) – 表中有外键 (对应 image 表中的 id 主键)<br>\n=》 theme topicImg belongsTo image</p>\n<p>image – 表中没有外键<br>\n=》 image hasOne theme</p>\n<h2 id=\"8-12-theme-接口验证与重构\"><a class=\"markdownIt-Anchor\" href=\"#8-12-theme-接口验证与重构\"></a> 8-12 Theme 接口验证与重构</h2>\n<p>1.Theme 接口实现的不同方法对比：</p>\n<p>（1）客户端只负责调用接口，由接口确定需要返回的主题 theme 的 id 号（2）由客户端传入具体需要的主题 Theme 的 id 号（前端有更大的灵活性）</p>\n<p>2.方法实现</p>\n<p>步骤：</p>\n<p>(1)定义控制器方法名</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/controller/v1/Theme.php</span></span><br><span class=\"line\">getSimpleList();</span><br></pre></td></tr></table></figure>\n<p>(2)路由文件定义路由</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// config/route.php</span></span><br><span class=\"line\">Route::get(<span class=\"string\">'api/:version/theme'</span>, <span class=\"string\">'api/:version.Theme/getSimpleList'</span>);</span><br></pre></td></tr></table></figure>\n<p>(3)控制器方法具体实现业务功能（一） — 参数要求</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取需要展示的主题theme</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Location</span> api/controller/v1/Theme.php</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> string $ids</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> string $theme</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<p>(4)验证器验证</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/validate/IDCollection.php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1.验证规则</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> $rule = [</span><br><span class=\"line\">    <span class=\"string\">'ids'</span> =&gt; <span class=\"string\">'require|checkIDs'</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.验证不通过的提示信息</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> $message = [</span><br><span class=\"line\">    <span class=\"string\">'ids'</span> =&gt; <span class=\"string\">'ids必须是以逗号隔开的多个正整数'</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.自定义验证方法(验证器)</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 验证ids</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> string $values = id1,id2,id3,...</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> bool false/true</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkIDs</span><span class=\"params\">($values)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $ids = explode(<span class=\"string\">','</span>, $values);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>($ids)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> ($ids <span class=\"keyword\">as</span> $id) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 每个id必须是正整数</span></span><br><span class=\"line\">        $res = <span class=\"keyword\">$this</span>-&gt;isPositiveInteger($id);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!$res) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3.<strong>扩展</strong>:</p>\n<p>IDCollection 和 IDMustPositiveInt 都用到对 id 是正整数的验证，为提高代码的复用性，可以：</p>\n<pre><code>（1）将isPositiveInteger提取到公共方法中（没有内聚性）\n\n（2）将方法重新定义到验证器基类中供所有验证器之类调用。（优化的选择）\n</code></pre>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/validate/BaseValidate.php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 验证是否是正整数</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> int $value</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> boolean false/true</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPositiveInteger</span><span class=\"params\">($value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (is_numeric($value) &amp;&amp; is_int($value+<span class=\"number\">0</span>) &amp;&amp; ($value +<span class=\"number\">0</span>)&gt;<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4.调用验证器</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/controller/v1/Theme.php</span></span><br><span class=\"line\">(<span class=\"keyword\">new</span> IDCollection())-&gt;goCheck();</span><br></pre></td></tr></table></figure>\n<p>5.测试 url</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://mypro.com/api/v1/theme?ids=0.1,2,3</span><br><span class=\"line\">http://mypro.com/api/v1/theme?ids=1,s,3</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-13-完成-theme-简要信息接口\"><a class=\"markdownIt-Anchor\" href=\"#8-13-完成-theme-简要信息接口\"></a> 8-13 完成 Theme 简要信息接口</h2>\n<p>1.完成获取信息接口</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/controller/v1/Theme.php</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSimpleList</span><span class=\"params\">($ids=<span class=\"string\">''</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 验证用户传递的参数</span></span><br><span class=\"line\">    (<span class=\"keyword\">new</span> IDCollection())-&gt;goCheck();</span><br><span class=\"line\"></span><br><span class=\"line\">    $ids = explode(<span class=\"string\">','</span>, $ids);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 关联Image表获取相应信息</span></span><br><span class=\"line\">    $theme = model(<span class=\"string\">'theme'</span>)-&gt;with([<span class=\"string\">'topicImg'</span>, <span class=\"string\">'headImg'</span>])-&gt;select($ids);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 无查询结果时，进行异常处理</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!$theme) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ThemeMissException();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 对数组格式的返回数据进行json格式化</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> json($theme);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.完成异常处理类</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// application/lib/exception/ThemeMissException.php</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> $code = <span class=\"number\">404</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> $msg = <span class=\"string\">'请求的主题不存在'</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> $errorCode = <span class=\"number\">30000</span>;</span><br></pre></td></tr></table></figure>\n<p>3.在相应的模型中隐藏部分字段</p>\n<p>(1)隐藏 Theme 表的部分字段</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/model/v1/Theme.php</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> $hidden = [<span class=\"string\">'delete_time'</span>, <span class=\"string\">'update_time'</span>, <span class=\"string\">'topic_img_id'</span>, <span class=\"string\">'head_img_id'</span>];</span><br></pre></td></tr></table></figure>\n<p>(2)隐藏 Image 表的部分字段(只显示部分字段)</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/model/v1/Image.php</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> $visible = [<span class=\"string\">'url'</span>];</span><br></pre></td></tr></table></figure>\n<p>4.补充说明：</p>\n<p>对于复杂的业务处理，应该将相应的代码写到 Service 层(Model 层之上) – 特别是涉及到多个模型之间的关联的时候</p>\n<h2 id=\"8-14-开启路由完整匹配\"><a class=\"markdownIt-Anchor\" href=\"#8-14-开启路由完整匹配\"></a> 8-14 开启路由完整匹配</h2>\n<p>1.功能需求说明</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">点击专题图片进入到专题后需要显示相应的产品图片、</span><br><span class=\"line\"></span><br><span class=\"line\">=》获取属于该专题的产品信息</span><br><span class=\"line\"></span><br><span class=\"line\">（一个产品可以属于一个专题，也可以属于多个专题； 一个专题会包含多个产品） ==》多对多关系[Theme &lt;=&gt; Product]</span><br><span class=\"line\"></span><br><span class=\"line\">多对多关系的数据表有一个中间关联表</span><br></pre></td></tr></table></figure>\n<p>2.模型关联获取关联的数据</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/model/Theme.php</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">products</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 参数1： 对应数据表的模型名</span></span><br><span class=\"line\">    <span class=\"comment\">// 参数2： 关联表的模型名</span></span><br><span class=\"line\">    <span class=\"comment\">// 参数3： 关联表中的外键名(和参数1模型关联)</span></span><br><span class=\"line\">    <span class=\"comment\">// 参数4： 关联表的外键(关联当前模型)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;belongsToMany(<span class=\"string\">'Product'</span>, <span class=\"string\">'theme_product'</span>, <span class=\"string\">'product_id'</span>. <span class=\"string\">'theme_id'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3.编写控制器方法(定义方法名和需要接收的参数)</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/v1/controller/Theme.php</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getProducts</span><span class=\"params\">($id)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>4.定义路由</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::get(<span class=\"string\">'api/:version/theme/:id'</span>, <span class=\"string\">'api/:version.Theme/getProducts/:id'</span>);</span><br></pre></td></tr></table></figure>\n<p>【注意】：</p>\n<p>默认情况下 TP5 的配置项是关闭路由完整匹配的，这种情况下访问当前路由接口时，由于先匹配到<code>api/:version/theme</code>路由，便不会再继续向下匹配路由，从而会调用该路由对应的接口。</p>\n<p>==》<strong>解决办法</strong>：<code>开启路由完整匹配</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// application/config.php默认配置文件路径</span></span><br><span class=\"line\"><span class=\"comment\">// 路由使用完整匹配（设置为true时开启）</span></span><br><span class=\"line\"><span class=\"string\">'route_complete_match'</span>   =&gt; <span class=\"keyword\">false</span>,  <span class=\"comment\">// =&gt;true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"8-15-完成-theme-详情接口\"><a class=\"markdownIt-Anchor\" href=\"#8-15-完成-theme-详情接口\"></a> 8-15 完成 Theme 详情接口</h2>\n<h3 id=\"1参数校验\"><a class=\"markdownIt-Anchor\" href=\"#1参数校验\"></a> 1.参数校验</h3>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/v1/controller/Theme.php</span></span><br><span class=\"line\">(<span class=\"keyword\">new</span> IDMustPositiveInt)-&gt;check();</span><br></pre></td></tr></table></figure>\n<h3 id=\"2在模型中编写方法实现数据获取\"><a class=\"markdownIt-Anchor\" href=\"#2在模型中编写方法实现数据获取\"></a> 2.在模型中编写方法实现数据获取</h3>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/model/Theme.php</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getThemeWithProducts</span><span class=\"params\">($id)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $theme = <span class=\"keyword\">self</span>::with(<span class=\"string\">'products,topicImg,headImg'</span>)-&gt;find($id);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $theme;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>【注】REST 是面向资源的请求方式，即将相关的数据全部返回给客户端，不管客户端目前需不需要用得上，但这种方式返回的资源应该有一个限度，</p>\n<h3 id=\"3在控制器中调用\"><a class=\"markdownIt-Anchor\" href=\"#3在控制器中调用\"></a> 3.在控制器中调用</h3>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/v1/controller/Theme.php</span></span><br><span class=\"line\">$theme = model(<span class=\"string\">'theme'</span>)-&gt;getThemeWithProducts($id);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!$theme) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ThemeMissException();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> $theme;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4编写异常处理类\"><a class=\"markdownIt-Anchor\" href=\"#4编写异常处理类\"></a> 4.编写异常处理类</h3>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/lib/exception/ThemeMissException.php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThemeMissException</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseException</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 覆盖父类的相应属性</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> $code = <span class=\"number\">404</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $msg = <span class=\"string\">'请求的主题不存在'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $errorCode = <span class=\"number\">30000</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-16-数据库字段冗余的合理利用\"><a class=\"markdownIt-Anchor\" href=\"#8-16-数据库字段冗余的合理利用\"></a> 8-16 数据库字段冗余的合理利用</h2>\n<p>多对多关系的数据表关联查询时会自动多一个<code>pivot</code>字段的信息，存储关联字段。但关联信息不是我们需要显示的信息，所以将该字段隐藏掉。</p>\n<p><code>products</code>中<code>main_img_url</code>和<code>img_id</code>都是用来关联 image 表，记录图片信息。属于数据冗余。</p>\n<p>但此处是数据冗余的合理应用范围，因为需要在多处使用到，并且数据量和业务并不是太复杂。</p>\n<h2 id=\"8-17-rest-的合理利用\"><a class=\"markdownIt-Anchor\" href=\"#8-17-rest-的合理利用\"></a> 8-17 REST 的合理利用</h2>\n<p>1.数据冗余之后对数据的完整性和一致性的维护变得困难。</p>\n<p>2.数据更新时需要对多处数据进行修改，否则就会出现数据不一致的现象。</p>\n<p>3.完成方法编写(对 product 相关字段的 url 进行处理—添加前缀)</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/model/Product.php</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMainImgUrlAttr</span><span class=\"params\">($value, $data)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;prefixImgUrl($value, $data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4.REST 设计原则</p>\n<p>(1)REST 是基于资源的，凡是和业务相关的数据都应该返回，不管当前的业务是否需要使用相应的数据。</p>\n<p>好处在于后期业务变更需要相应的数据的时候，可以直接调用即可，不用更改服务器的接口程序，可以用来保证客户端的稳定性。</p>\n<p>(2)但也不能一味的将所有相关的数据返回，会消耗数据库的性能。</p>\n<h2 id=\"8-18-最近新品接口编写\"><a class=\"markdownIt-Anchor\" href=\"#8-18-最近新品接口编写\"></a> 8-18 最近新品接口编写</h2>\n<p>1.TP5 框架自带时间更新操作,使用模型操作数据库时，当插入记录时，自动带上<code>create_time</code>; 更新操作时自动带上<code>updated_time</code>;删除时自动带上<code>delete_time</code></p>\n<p>2.删除操作不是真实的物理删除，而是通过判断<code>delete_time</code>的值来确定该条记录的状态</p>\n<p>3.实现步骤</p>\n<p>(1)定义控制器方法 [方法名|传递参数]</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRecent</span><span class=\"params\">($count=<span class=\"number\">15</span>)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>(2)定义路由</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::get(<span class=\"string\">'api/:version/product/recent'</span>, <span class=\"string\">'api/:version.Product/getRecent'</span>);</span><br></pre></td></tr></table></figure>\n<p>(3)定义模型方法</p>\n<ul>\n<li>limit()方法的使用</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMostRecent</span><span class=\"params\">($count)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $products = <span class=\"keyword\">self</span>::limit($count)-&gt;order(<span class=\"string\">'create_time desc'</span>)-&gt;select();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $products;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(4)编写验证器</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//需要对传递的count值进行验证</span></span><br><span class=\"line\"><span class=\"comment\">// application/validate/Count.php</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> $rule = [</span><br><span class=\"line\">    <span class=\"string\">'count'</span> =&gt; <span class=\"string\">'isPositiveInteger|between:1,15'</span></span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>(5)完成控制器方法</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRecent</span><span class=\"params\">($count=<span class=\"number\">15</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    (<span class=\"keyword\">new</span> Count())-&gt;goCheck();</span><br><span class=\"line\">    $products = model(<span class=\"string\">'product'</span>)-&gt;getMostRecent($count);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($products) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ProductMissException();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $products;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(6)完成异常处理类方法</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductMissException</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseException</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $code = <span class=\"string\">'404'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $msg = <span class=\"string\">'请求的product不存在'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $errorCode = <span class=\"number\">20000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>[注]：<code>app_debug</code>设置为 true 时，在<code>ExceptionHandler.php</code>中会调用父类的<code>render()</code>方法，导致框架的异常处理类找不到程序中自定义的异常处理类，从而会有报错提示。</p>\n<p>!!!出现 500 系统内部错误!</p>\n<ul>\n<li>\n<p>原因=&gt;config.php 设置<code>default_return_type</code>的值为<code>html</code>, 而 Product 的 controller 中 return 的结果值为 array，导致系统内部错误。</p>\n</li>\n<li>\n<p>解决=&gt;将<code>default_return_type</code>的值为<code>json</code>。或者将 Product 的 controller 中 return 的结果进行 json 格式化。</p>\n</li>\n</ul>\n<h3 id=\"警告学会查看-log-日志信息提高错误排查能力\"><a class=\"markdownIt-Anchor\" href=\"#警告学会查看-log-日志信息提高错误排查能力\"></a> <strong>【警告】学会查看 log 日志信息，提高错误排查能力！</strong></h3>\n<h2 id=\"8-19-使用数据集还是数组\"><a class=\"markdownIt-Anchor\" href=\"#8-19-使用数据集还是数组\"></a> 8-19 使用数据集还是数组？</h2>\n<p>1.问题 1：验证方法中，<code>$rule</code>属性数组的键值对中， 值<code>'isPositiveInteger|between:1,15'</code>中<code>|</code>符两端不能有空格，否则会被视为验证错误。</p>\n<p>2.问题 2：对某些当前不需要用到，但后期会用到的字段信息（特殊情况不用，大多数情况要用），既不能直接显示，也不能直接隐藏，如何处理？</p>\n<p>=》 在<code>api/v1/Product/recent</code>接口中临时隐藏<code>summary</code>字段。</p>\n<p>3.<strong>collection()方法</strong>：临时隐藏某个或某些字段</p>\n<p>【使用方法】：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用数据集，临时隐藏某些字段</span></span><br><span class=\"line\">$productCollection = collection($products);</span><br><span class=\"line\">$products = $productCollection-&gt;hidden([<span class=\"string\">'summary'</span>]);</span><br></pre></td></tr></table></figure>\n<p>4.一个 product 是一个对象，一组 product 也可是是一个对象(数据集)。</p>\n<p>5.使用对象的方式，可读性好，内聚性好。</p>\n<p>6.TP5 调用模型自动返回一个数据集的形式：<code>resultset_type</code> [database.php]</p>\n<p>默认是<code>array</code>，设置成<code>collection</code>后，模型返回的数据自动就是<code>collection</code>形式，不需要再转换一次。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在database.php中配置之后，不需要手动转换为collection</span></span><br><span class=\"line\">$products = $products-&gt;hidden([<span class=\"string\">'summary'</span>]);</span><br></pre></td></tr></table></figure>\n<p>【扩展】：</p>\n<p>但是这样使用之后，控制器中调用模型返回数据后，返回的是对象，即使没有数据，也不是空，所以直接使用<code>!</code>判断是不能实现效果的。</p>\n<p>=》解决方法：使用数据集对象的<code>isEmpty()</code>方法进行判空。</p>\n<h2 id=\"8-20-分类列表接口\"><a class=\"markdownIt-Anchor\" href=\"#8-20-分类列表接口\"></a> 8-20 分类列表接口</h2>\n<p>1.模型类的<code>all</code>方法使用。</p>\n<ul>\n<li>\n<p>参数 1：主键列表或者查询条件（闭包） <code>mixed</code></p>\n</li>\n<li>\n<p>参数 2：关联预查询 <code>array | string</code></p>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$categories = model(<span class=\"string\">'Category'</span>)-&gt;with(<span class=\"string\">'img'</span>)-&gt;select();</span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\">$categories = model(<span class=\"string\">'Category'</span>)-&gt;all([], <span class=\"string\">'img'</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-21-扩展接口粒度与接口分层\"><a class=\"markdownIt-Anchor\" href=\"#8-21-扩展接口粒度与接口分层\"></a> 8-21 扩展：接口粒度与接口分层</h2>\n<p>1.减少首页 http 请求(api)的次数，从而减轻服务器的压力</p>\n<p>2.接口粒度： 太粗=》代码复用性不好，不够灵活；太细=》需要发送的请求太多，不方便</p>\n<p>3.架构师 =》 Api 接口设计 =》 底层设计力度比较小、灵活性比较高的 api 接口；越往上粒度逐渐变粗。</p>\n<p>4.如果确实调用的接口比较多，应该在 api 基础数据层上建立业务层，再在业务层调用基础数据层相关的接口，再进行封装。</p>"},{"title":"windows7使用Sphinx+PHP+MySQL详细介绍","date":"2018-05-14T01:41:08.000Z","_content":"\n由于业务需要，需要做类似淘宝商城商品检索的功能，对于数据量很大的情况，MySQL 查询的效率损耗很大，需要使用专门的索引引擎进行搜索查询，实现功能，对于和 PHP 和 Mysql 的结合的索引引擎中， xunsearch 和 sphinx 是较为著名的，但由于 xunsearch 服务器端不支持 windows，所以暂且先考虑 sphinx 的使用。sphinx 目前已支持简体中文、繁体中文和英文的检索，不需要额外安装插件支持。\n\n<!--more-->\n\n## 一、安装（Windows）\n\n### **1.官方下载**\n\nSphinx 下载地址： [下载]\n\n### **2.解压并重命名**\n\n此处下载版本为`3.0.3`，将 sphinx 文件夹命名为`sphinx`\n\n### **3.文件夹目录介绍**\n\n```ini\nsphinx\n--api(各语言支持的api)\n--bin（二进制程序）\n--doc（文档说明）\n--etc（配置文件：conf/sql）\n--misc\n--src\n# 手动创建以下两个文件夹\n--data\n--log\n```\n\n### **4.设置配置文件**\n\n(1)将`sphinx/etc/sphinx-min.conf.dist`文件复制到`sphinx/bin/`目录下，并重命名为`sphinx.conf`\n\n注：`sphinx/etc/sphinx.conf.dist`为带注释的详细的\n\n(2)设置配置项\n\n主要是以下为配置函数：\n\n> source src1{} --- 设置索引源(数据库的基本配置和数据表)\n\n```ini\n# 连接的数据库类型\ntype = mysql\n# 连接的数据库主机\nsql_host = localhost\n# 数据库连接的用户名，默认为test\nsql_user = root\n# 数据库连接的密码，默认为空\nsql_pass =123123\n# 连接的数据库名称，默认为test\nsql_db = test\n# 连接数据库的端口号，默认为3306\nsql_port = 3306\n# 操作的数据表执行的查询语句\nsql_query = \\\n    SELECT id, group_id, UNIX_TIMESTAMP(date_added) AS date_added, title, content \\\n    FROM documents\n\n# 设置查询过滤条件\nsql_attr_uint = group_id\n```\n\n> index test1{} --- 索引文件\n\n```ini\n# 指定索引源\nsource = src1\n# 索引数据存放目录，默认为/var/data/test1\npath = D:\\Service\\sphinx\\data\\test1\n\n# 设置中文匹配\nmin_word_len    = 1\n# 指定字符集（已废弃）\ncharset_type    = utf-8\n# 指定utf-8的编码表\ncharset_table   = 0..9, A..Z->a..z, _, a..z, U+410..U+42F->U+430..U+44F, U+430..U+44F\n\nmin_prefix_len = 0\nmin_infix_len = 1\n\n# 开启中文分词支持\nngram_len = 1\n# 需要分词的字符\nngram_chars = U+3000..U+2FA1F\n```\n\n> index test1stemmed : test1{}\n\n```ini\n# 主要需要修改的配置项，默认为/var/data/test1stemmed\n\npath = D:\\Service\\sphinx\\data\\test1stemmed\n```\n\n> index rt{}\n\n```ini\n# 主要需要修改的配置项，默认为/var/data/rt\npath = D:\\Service\\sphinx\\data\\rt\n\n# 指定对哪些字段进行匹配\nrt_field = name\nrt_field = ename\nrt_field = setmeal\nrt_field = category\nrt_field = country\nrt_field = traffic\nrt_field = body\n\nrt_attr_uint = offerid\n```\n\n> searchd{}\n\n```ini\n# 自定义日志文件位置\nlog = D:\\Service\\sphinx\\log\\searchd.log\nquery_log = D:\\Service\\sphinx\\log\\query.log\npid_file = D:\\Service\\sphinx\\log\\searchd.pid\n```\n\n以下几项不需要修改默认值，即可直接使用\n\n> source src1throttled : src1{}\n\n分布式索引的相关配置，没有则可以不修改\n\n> index dist1{}\n> indexer{}\n> common{}\n\n【注】：主要的配置是`source` `index` `indexer` `searchd`, 其他几项可以不需要\n\n### **5.操作数据库，导入样例数据**\n\n(1)进入到 mysql 命令行，执行命令\n\n```bash\nD:\\phpStudy\\PHPTutorial\\MySQL\\bin>mysql -uroot -p\nEnter password: *************\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 12\nServer version: 5.5.53 MySQL Community Server (GPL)\n\n\nmysql> use test;\n\n# 恢复样例数据到数据库\nmysql> source /D:\\Service\\sphinx\\etc/eaxmple.sql\n\n# 新增两个数据表，documents和tags\nmysql> show tables;\ndocuments\ntags\n```\n\n### **6.生成索引文件**\n\ncmd 命令行进入到`sphinx/bin/`目录下\n\n```bash\n# 生成索引文件,本地重新构建--rotate\n> indexer.exe --config sphinx.conf --all --rotate\nSphinx 3.0.3-dev (commit facc3fb)\nCopyright (c) 2001-2018, Andrew Aksyonoff\nCopyright (c) 2008-2016, Sphinx Technologies Inc (http://sphinxsearch.com)\n\nusing config file 'sphinx.conf'...\nWARNING: key 'docinfo' was permanently removed from Sphinx configuration. Refer to documentation for details.\nWARNING: key 'dict' was permanently removed from Sphinx configuration. Refer to documentation for details.\nWARNING: key 'mva_updates_pool' was permanently removed from Sphinx configuration. Refer to documentation for details.\nindexing index 'test1'...\ncollected 4 docs, 0.0 MB\nsorted 0.0 Mhits, 100.0% done\ntotal 4 docs, 0.2 Kb\ntotal 1.0 sec, 0.2 Kb/sec, 3 docs/sec\nindexing index 'test1stemmed'...\ncollected 4 docs, 0.0 MB\nsorted 0.0 Mhits, 100.0% done\ntotal 4 docs, 0.2 Kb\ntotal 1.0 sec, 0.2 Kb/sec, 3 docs/sec\nskipping non-plain index 'dist1'...\nskipping non-plain index 'rt'...\n```\n\n【注】新版 sphinx 的 bin 目录下已经没有 search.exe 程序，所以不能直接在命令行执行返回结果，只能使用 api 接口返回数据。\n\n### **7.开启搜索服务，保持后台运行**\n\n```bash\n> searchd.exe --pidfile\n\n[Tue May 15 09:02:14.690 2018] [7776] using config file './sphinx.conf'...\nlistening on all interfaces, port=9312\nlistening on all interfaces, port=9306\nSphinx 3.0.3-dev (commit facc3fb)\nCopyright (c) 2001-2018, Andrew Aksyonoff\nCopyright (c) 2008-2016, Sphinx Technologies Inc (http://sphinxsearch.com)\n```\n\n## 二、PHP 开启 sphinx 扩展\n\n### **1.下载 php_sphinx 扩展**: [前往]\n\n具体需要下载的版本需要查看 phpinfo 信息:\n\n    Architecture         ==》x86/x64\n    PHP Extension Build  ==》NTS/NS\n\n下载并解压后，将`php_sphinx.dll`文件放到 php/ext 目录下\n\n### **2.修改 php.ini 配置文件**\n\n```ini\n# 在 Dynamic Extensions 列表中添加php_sphinx扩展\nextension=php_sphinx.dll\n```\n\n修改后重启 apache 服务\n\n### **3.在 phpinfo.php 输出的信息中查看 sphinx 扩展是否安装成功**\n\n```info\n            sphinx\nsphinx support\t enabled\nVersion\t         1.3.2\nRevision\t $Revision$\n```\n\n## 三、代码实现\n\n### 1.样例数据表`test.documents`记录：\n\n| id  | group_id | group_id2 | date_added          | title           | content                                                                   |\n| --- | -------- | --------- | :------------------ | :-------------- | :------------------------------------------------------------------------ |\n| 1   | 1        | 5         | 2018-05-14 09:12:25 | test one        | this is my test document number one. also checking search within phrases. |\n| 2   | 1        | 6         | 2018-05-14 09:12:25 | test two        | this is my test document number two                                       |\n| 3   | 2        | 7         | 2018-05-14 09:12:25 | another doc     | this is another group                                                     |\n| 4   | 2        | 8         | 2018-05-14 09:12:25 | doc number four | this is to test groups                                                    |\n\n### 2.PHP 代码实现\n\n#### **一般实现**\n\n```php\n<?php\nrequire('sphinxapi.php');\n\n$sphinx = new SphinxClient();\n$sphinx->SetServer('localhost',9312);\n$sphinx->SetMatchMode(SPH_MATCH_ANY);\n$sphinx->SetArrayResult ( true );\n$res = $sphinx->Query($_GET['key'],'*');\nvar_dump($res);\n```\n\n#### **thinkphp5 使用介绍**\n\n1.将`sphinxapi.php`文件放到`extend`目录下\n\n2.在控制器方法中使用（`app/api/index`）\n\n```php\npublic function test()\n{\n    $sphinx = new \\SphinxClient();\n    // sphinx的主机名和端口\n    $sphinx->SetServer('localhost',9312);\n    // 匹配模式\n    $sphinx->SetMatchMode(SPH_MATCH_ANY);\n    // 设置返回结果集为php数组格式\n\n    $sphinx->SetArrayResult ( true );\n    $res = $sphinx->Query(input('key'),'*');\n    var_dump($res);\n}\n```\n\n3.url 访问：\n`http://localhost/mypro/api/index/test?key=test`\n\n4.输出数据\n\n```json\nD:\\web\\COD\\api\\application\\api\\controller\\Index.php:21:\narray (size=10)\n  'error' => string '' (length=0)\n  'warning' => string '' (length=0)\n  'status' => int 0\n  'fields' =>\n    // 查询显示的字段名\n    array (size=2)\n      0 => string 'title' (length=5)\n      1 => string 'content' (length=7)\n  'attrs' =>\n    array (size=2)\n      'group_id' => string '1' (length=1)\n      'date_added' => string '2' (length=1)\n  'matches' =>\n    // 匹配的结果，返回匹配记录的id和权重（权重越大，匹配条件越多）\n    array (size=3)\n      0 =>\n        array (size=3)\n          'id' => string '1' (length=1)\n          'weight' => int 2421\n          'attrs' =>\n            array (size=2)\n              ...\n      1 =>\n        array (size=3)\n          'id' => string '2' (length=1)\n          'weight' => int 2421\n          'attrs' =>\n            array (size=2)\n              ...\n      2 =>\n        array (size=3)\n          'id' => string '4' (length=1)\n          'weight' => int 1442\n          'attrs' =>\n            array (size=2)\n              ...\n  'total' => int 3\n  'total_found' => int 3\n  'time' => float 0\n  'words' =>\n    array (size=1)\n      'test' =>\n        array (size=2)\n          'docs' => int 6\n          'hits' => int 10\n```\n\n## 四、在 ThinkPHP5 项目中应用\n\n### **1.修改配置信息**`sphinx/bin/sphinx.conf`\n\n```ini\nsource src1{\n# 省略其他配置\nsql_user  = root\nsql_pass  = 123123\nsql_db    = shopMall\nsql_query = \\\n  SELECT id,offerid, name, ename, setmeal, category, country, traffic, os, body, inventory_title, shop \\\n  FROM i_offer\nsql_attr_uint = offerid\n# 省略其他配置\n}\n```\n\n```ini\nindex rt\n{\n  type  = rt\n  path  = D:\\Service\\sphinx\\data\\rt\n\n  rt_field  = name\n  rt_field  = ename\n  rt_field  = setmeal\n  rt_field  = category\n  rt_field  = country\n  rt_field  = traffic\n  rt_field  = body\n\n  rt_attr_uint  = offerid\n}\n```\n\n### **2.生成索引，并开启 searchd 服务**\n\n```bash\n# 生成项目索引\nsphinx/bin/indexer.exe --config sphinx.conf --all\n\n# 开启服务 &表示后台开启，不用保持窗口执行状态\nsphinx/bin/searchd.exe &\n```\n\n### **3.程序实现**\n\nsphinx 查询返回的结果并不是我们需要的显示结果，所以还需要对结果进行处理，从而获取到我们需要的结果。\n\n默认 sphinx 返回的数据中包含 id 信息是和数据记录的信息是相关的，所以我们需要通过 id 到数据库中查询相关信息。\n\n```php\npublic function test()\n{\n    $s = new \\SphinxClient;\n    $s->setServer(\"localhost\", 9312);\n    // 作为数组返回\n    $s->SetArrayResult(true);\n    // 匹配格式  任意匹配\n    $s->setMatchMode(SPH_MATCH_ANY);\n    $s->setMaxQueryTime(3);\n    // input()表示接收用户传过来的数据\n    $result = $s->query(input('key'),'*');\n\n    return json($result);\n}\n```\n\n### **4.测试实现**\n\n访问 url：\n`http://localhost/mypro/api/index/test?key=官方`\n\n返回结果：\n\n```json\nD:\\web\\COD\\api\\application\\api\\controller\\Index.php:22:\narray (size=10)\n  'error' => string '' (length=0)\n  'warning' => string '' (length=0)\n  'status' => int 0\n  'fields' =>\n    array (size=10)\n      0 => string 'name' (length=4)\n      1 => string 'ename' (length=5)\n      2 => string 'setmeal' (length=7)\n      3 => string 'category' (length=8)\n      4 => string 'country' (length=7)\n      5 => string 'traffic' (length=7)\n      6 => string 'os' (length=2)\n      7 => string 'body' (length=4)\n      8 => string 'inventory_title' (length=15)\n      9 => string 'shop' (length=4)\n  'attrs' =>\n    array (size=1)\n      'offerid' => string '1' (length=1)\n  'matches' =>\n    array (size=6)\n      0 =>\n        array (size=3)\n          'id' => string '36' (length=2)\n          'weight' => int 4667\n          'attrs' =>\n            array (size=1)\n              ...\n      1 =>\n        array (size=3)\n          'id' => string '19' (length=2)\n          'weight' => int 2611\n          'attrs' =>\n            array (size=1)\n              ...\n      // 此处省略部分数据\n  'total' => int 6\n  'total_found' => int 6\n  'time' => float 0\n  'words' =>\n    array (size=2)\n      '官' =>\n        array (size=2)\n          'docs' => int 14\n          'hits' => int 16\n      '方' =>\n        array (size=2)\n          'docs' => int 70\n          'hits' => int 94\n```\n\n对结果进行处理，支持过滤查询`SetFilter()`。\n\n```php\npublic function test()\n{\n    $filterkey = 'status';\n    $filtervalue = \"1\";\n\n    $sphinx = new \\SphinxClient;\n    $sphinx->setServer(\"localhost\", 9312);\n\n    // 进行过滤查询\n    if (!empty($filterkey)) {\n        // 只在status==1的记录中检索\n        $filterRes = $sphinx->SetFilter($filterkey, [$filtervalue]);\n        if (!$filterRes) {\n            return false;\n        }\n    }\n\n    // 作为数组返回\n    $sphinx->SetArrayResult(true);\n    // 匹配格式  任意匹配\n    $sphinx->setMatchMode(SPH_MATCH_ANY);\n    $sphinx->setMaxQueryTime(3);\n    // input()表示接收用户传过来的数据\n    $result = $sphinx->query(input('key'),'*');\n\n    // 避免没有匹配记录时报错\n    if(empty($result['matches'])) {\n        return null;\n    }\n\n    $result = $result['matches'];\n    // 返回数组中指定的id列, 返回结果为单列数组\n    $result = array_column($result, 'id');\n    $list = model('offer')\n    ->field('offerid, status, name, ename, setmeal, category, country, traffic, os, body, inventory_title, shop')\n    ->where(array('id' => array('in', $result)))\n    ->select();\n\n    return json($list);\n}\n```\n\n返回结果\n\n```json\n[\n  {\n    offerid: 2332302,\n    status: 1,\n    name: \"【官方站】減震隱形增高鞋墊（安全有效~秒增高5公分~）\",\n    ename: \"zenggaoxiedian\",\n    setmeal: \"日韓超夯，氣墊隱形增高墊，輕鬆增高5公分，透氣減震，抗菌防臭，藝人最愛！【可拆分，自由裁剪，均碼35-44可用】【超殺998三雙】\",\n    category: \"[{\"id\":6,\"name\":\"其他\"},{\"id\":7,\"name\":\"商城\"},{\"id\":8,\"name\":\"家庭用品\\n\"}]\",\n    country: \"[{\"id\":11,\"name\":\"American Samoa\"},{\"id\":1,\"name\":\"Andorra\"},{\"id\":8,\"name\":\"Angola\"},{\"id\":5,\"name\":\"Anguilla\"},{\"id\":10,\"name\":\"Argentina\"},{\"id\":7,\"name\":\"Armenia\"},{\"id\":12,\"name\":\"Austria\"}]\",\n    traffic: \"[{\"id\":2,\"name\":\"16+\"},{\"id\":3,\"name\":\"3G\\/4G\"},{\"id\":4,\"name\":\"Adult\"}]\",\n    os: \"[{\"id\":1,\"name\":\"3DS System Software\"},{\"id\":2,\"name\":\"Android\"},{\"id\":13,\"name\":\"BeOS\"},{\"id\":16,\"name\":\"CentOS\"}]\",\n    body: \"123123123\",\n    inventory_title: \"隱形增高鞋墊B\",\n    shop: \"[{\"userid\":77912776,\"name\":\"myShop\"}]\"\n  },\n  {\n    offerid: 3308032,\n    status: 1,\n    name: \"【官方站】電熱造型梳\",\n    ename: \"zaoxingshu\",\n    setmeal: \"長/短髮都適用！好梳好上手！亂翹髮尾一秒聽話！【人氣爆红款美髮救星】限時特價，加NT$300再得1件！！！\",\n    category: \"[{\"id\":2,\"name\":\"美容\"},{\"id\":4,\"name\":\"日用品\"},{\"id\":6,\"name\":\"其他\"},{\"id\":8,\"name\":\"家庭用品\\n\"}]\",\n    country: \"[{\"id\":6,\"name\":\"Albania\"},{\"id\":4,\"name\":\"Antigua And Barbuda\"}]\",\n    traffic: \"[{\"id\":3,\"name\":\"3G\\/4G\"},{\"id\":5,\"name\":\"Adult Content\"},{\"id\":6,\"name\":\"App Discovery Traffic\"}]\",\n    os: \"[{\"id\":3,\"name\":\"Android with AOKP\"},{\"id\":5,\"name\":\"Android with Cyanogen Mod\"},{\"id\":6,\"name\":\"Android with LiquidSmooth\"},{\"id\":7,\"name\":\"Android with MIUI\"}]\",\n    body: \"123123123\"\n    inventory_title: \"NOVA多功能卷髮棒B\",\n    shop: \"[{\"userid\":77912776,\"name\":\"myShop\"}]\"\n  }\n]\n```\n\n## 五、扩展补充\n\n需要对多个不同表创建不同的检索的使用方法：\n\n只需创建不同的索引源和索引，相应的对应好即可。\n\n实际项目中的 sphinx 完整配置：\n\n```ini\nsource keyword\n{\n  type      = mysql\n  sql_host  = localhost\n  sql_user  = root\n  sql_pass  = 123\n  sql_db    = goods\n  sql_query_pre   = SET NAMES utf8\n\n  sql_query  = \\\n    SELECT id,status,keyword \\\n    FROM t_keyword\n\n  # 设置查询条件\n  sql_attr_uint = status\n}\n\nindex keyword\n{\n  source  = keyword\n  path  = D:/UPUPW_ANK_W64/Database/data_sphinx/keyword\n  charset_type  = utf-8\n  charset_table = 0..9, A..Z->a..z, _, a..z, U+410..U+42F->U+430..U+44F, U+430..U+44F\n  ngram_len = 1\n  ngram_chars = U+3000..U+2FA1F\n}\n\nsource collection\n{\n  type        = mysql\n  sql_host    = localhost\n  sql_user    = root\n  sql_pass    = 123456\n  sql_db      = goods\n  sql_query   = \\\n    SELECT id, status, title, offerid, keyword, searchid, fromname \\\n    FROM t_collection\n}\n\nindex collection\n{\n  source    = collection\n  path      = D:/UPUPW_ANK_W64/Database/data_sphinx/collection\n  mlock     = 0\n  morphology      = none\n  min_word_len    = 1\n  charset_table   = 0..9, A..Z->a..z, _, a..z, U+410..U+42F->U+430..U+44F, U+430..U+44F\n  min_prefix_len  = 0\n  min_infix_len   = 1\n  ngram_len   = 1\n  ngram_chars   = U+3000..U+2FA1F\n  html_strip    = 0\n}\n\nsource goods\n{\n  type        = mysql\n  sql_host    = localhost\n  sql_user    = root\n  sql_pass    = 123455\n  sql_db      = goods\n  sql_query   = \\\n    SELECT id, status, name, seller_region, keywords, offerid, searchid, detailid, keyword, fromname \\\n    FROM t_goods\n}\n\nindex goods\n{\n  source    = goods\n  path      = D:/UPUPW_ANK_W64/Database/data_sphinx/goods\n  mlock     = 0\n  morphology      = none\n  min_word_len    = 1\n  charset_table   = 0..9, A..Z->a..z, _, a..z, U+410..U+42F->U+430..U+44F, U+430..U+44F\n  min_prefix_len  = 0\n  min_infix_len   = 1\n  ngram_len       = 1\n  ngram_chars     = U+3000..U+2FA1F\n  html_strip      = 0\n}\n\nindexer\n{\n  mem_limit   = 128M\n}\n\nsearchd\n{\n  listen    = 9312\n  #listen   = 9306:mysql41\n  log   = D:/UPUPW_ANK_W64/Logs/sphinx.log\n  query_log       = D:/UPUPW_ANK_W64/Modules/Sphinx/log/query.log\n  read_timeout    = 5\n  client_timeout  = 300\n  max_children    = 30\n  persistent_connections_limit  = 30\n  pid_file        = D:/UPUPW_ANK_W64/Modules/Sphinx/log/searchd.pid\n  seamless_rotate = 1\n  preopen_indexes = 1\n  unlink_old      = 1\n  max_packet_size = 8M\n  max_filters     = 256\n  max_filter_values = 4096\n  max_batch_queries = 32\n}\n```\n\n## 六、参考资料：\n\n> PHP 官方手册使用 Sphinx 介绍：\n\nhttp://www.php.net/manual/zh/book.sphinx.php\n\n> sphinx 安装：\n\nhttps://blog.csdn.net/huang2017/article/details/69665057\n\nhttps://blog.csdn.net/huang2017/article/details/69666154\n\n> 将 sphinx 服务添加到 windows 服务：\n\n`./searchd.exe --install -c sphinx.conf --servicename s`\n\nhttps://blog.csdn.net/design321/article/details/8895712\n\n> sphinx 使用：\n\nhttps://blog.csdn.net/u010837612/article/details/70827481\n\n> 中文支持（linux 系统）\n\nhttp://www.xuejiehome.com/blread-1283.html\n\n> 中文支持（windows 系统）--- 默认已能支持中文\n\nhttp://www.phpernote.com/php-template-framework/284.html\n\n> 其他\n\nhttps://my.oschina.net/guyson/blog/283576\n\n[下载]: http://sphinxsearch.com/downloads/release/\n[前往]: https://pecl.php.net/package/sphinx/1.3.2/windows\n","source":"_posts/php-sphinx-windows.md","raw":"---\ntitle: windows7使用Sphinx+PHP+MySQL详细介绍\ndate: 2018-05-14 09:41:08\ntags:\n  - sphinx\n  - thinkphp5\ncategory:\n  - 【PHP相关】\n---\n\n由于业务需要，需要做类似淘宝商城商品检索的功能，对于数据量很大的情况，MySQL 查询的效率损耗很大，需要使用专门的索引引擎进行搜索查询，实现功能，对于和 PHP 和 Mysql 的结合的索引引擎中， xunsearch 和 sphinx 是较为著名的，但由于 xunsearch 服务器端不支持 windows，所以暂且先考虑 sphinx 的使用。sphinx 目前已支持简体中文、繁体中文和英文的检索，不需要额外安装插件支持。\n\n<!--more-->\n\n## 一、安装（Windows）\n\n### **1.官方下载**\n\nSphinx 下载地址： [下载]\n\n### **2.解压并重命名**\n\n此处下载版本为`3.0.3`，将 sphinx 文件夹命名为`sphinx`\n\n### **3.文件夹目录介绍**\n\n```ini\nsphinx\n--api(各语言支持的api)\n--bin（二进制程序）\n--doc（文档说明）\n--etc（配置文件：conf/sql）\n--misc\n--src\n# 手动创建以下两个文件夹\n--data\n--log\n```\n\n### **4.设置配置文件**\n\n(1)将`sphinx/etc/sphinx-min.conf.dist`文件复制到`sphinx/bin/`目录下，并重命名为`sphinx.conf`\n\n注：`sphinx/etc/sphinx.conf.dist`为带注释的详细的\n\n(2)设置配置项\n\n主要是以下为配置函数：\n\n> source src1{} --- 设置索引源(数据库的基本配置和数据表)\n\n```ini\n# 连接的数据库类型\ntype = mysql\n# 连接的数据库主机\nsql_host = localhost\n# 数据库连接的用户名，默认为test\nsql_user = root\n# 数据库连接的密码，默认为空\nsql_pass =123123\n# 连接的数据库名称，默认为test\nsql_db = test\n# 连接数据库的端口号，默认为3306\nsql_port = 3306\n# 操作的数据表执行的查询语句\nsql_query = \\\n    SELECT id, group_id, UNIX_TIMESTAMP(date_added) AS date_added, title, content \\\n    FROM documents\n\n# 设置查询过滤条件\nsql_attr_uint = group_id\n```\n\n> index test1{} --- 索引文件\n\n```ini\n# 指定索引源\nsource = src1\n# 索引数据存放目录，默认为/var/data/test1\npath = D:\\Service\\sphinx\\data\\test1\n\n# 设置中文匹配\nmin_word_len    = 1\n# 指定字符集（已废弃）\ncharset_type    = utf-8\n# 指定utf-8的编码表\ncharset_table   = 0..9, A..Z->a..z, _, a..z, U+410..U+42F->U+430..U+44F, U+430..U+44F\n\nmin_prefix_len = 0\nmin_infix_len = 1\n\n# 开启中文分词支持\nngram_len = 1\n# 需要分词的字符\nngram_chars = U+3000..U+2FA1F\n```\n\n> index test1stemmed : test1{}\n\n```ini\n# 主要需要修改的配置项，默认为/var/data/test1stemmed\n\npath = D:\\Service\\sphinx\\data\\test1stemmed\n```\n\n> index rt{}\n\n```ini\n# 主要需要修改的配置项，默认为/var/data/rt\npath = D:\\Service\\sphinx\\data\\rt\n\n# 指定对哪些字段进行匹配\nrt_field = name\nrt_field = ename\nrt_field = setmeal\nrt_field = category\nrt_field = country\nrt_field = traffic\nrt_field = body\n\nrt_attr_uint = offerid\n```\n\n> searchd{}\n\n```ini\n# 自定义日志文件位置\nlog = D:\\Service\\sphinx\\log\\searchd.log\nquery_log = D:\\Service\\sphinx\\log\\query.log\npid_file = D:\\Service\\sphinx\\log\\searchd.pid\n```\n\n以下几项不需要修改默认值，即可直接使用\n\n> source src1throttled : src1{}\n\n分布式索引的相关配置，没有则可以不修改\n\n> index dist1{}\n> indexer{}\n> common{}\n\n【注】：主要的配置是`source` `index` `indexer` `searchd`, 其他几项可以不需要\n\n### **5.操作数据库，导入样例数据**\n\n(1)进入到 mysql 命令行，执行命令\n\n```bash\nD:\\phpStudy\\PHPTutorial\\MySQL\\bin>mysql -uroot -p\nEnter password: *************\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 12\nServer version: 5.5.53 MySQL Community Server (GPL)\n\n\nmysql> use test;\n\n# 恢复样例数据到数据库\nmysql> source /D:\\Service\\sphinx\\etc/eaxmple.sql\n\n# 新增两个数据表，documents和tags\nmysql> show tables;\ndocuments\ntags\n```\n\n### **6.生成索引文件**\n\ncmd 命令行进入到`sphinx/bin/`目录下\n\n```bash\n# 生成索引文件,本地重新构建--rotate\n> indexer.exe --config sphinx.conf --all --rotate\nSphinx 3.0.3-dev (commit facc3fb)\nCopyright (c) 2001-2018, Andrew Aksyonoff\nCopyright (c) 2008-2016, Sphinx Technologies Inc (http://sphinxsearch.com)\n\nusing config file 'sphinx.conf'...\nWARNING: key 'docinfo' was permanently removed from Sphinx configuration. Refer to documentation for details.\nWARNING: key 'dict' was permanently removed from Sphinx configuration. Refer to documentation for details.\nWARNING: key 'mva_updates_pool' was permanently removed from Sphinx configuration. Refer to documentation for details.\nindexing index 'test1'...\ncollected 4 docs, 0.0 MB\nsorted 0.0 Mhits, 100.0% done\ntotal 4 docs, 0.2 Kb\ntotal 1.0 sec, 0.2 Kb/sec, 3 docs/sec\nindexing index 'test1stemmed'...\ncollected 4 docs, 0.0 MB\nsorted 0.0 Mhits, 100.0% done\ntotal 4 docs, 0.2 Kb\ntotal 1.0 sec, 0.2 Kb/sec, 3 docs/sec\nskipping non-plain index 'dist1'...\nskipping non-plain index 'rt'...\n```\n\n【注】新版 sphinx 的 bin 目录下已经没有 search.exe 程序，所以不能直接在命令行执行返回结果，只能使用 api 接口返回数据。\n\n### **7.开启搜索服务，保持后台运行**\n\n```bash\n> searchd.exe --pidfile\n\n[Tue May 15 09:02:14.690 2018] [7776] using config file './sphinx.conf'...\nlistening on all interfaces, port=9312\nlistening on all interfaces, port=9306\nSphinx 3.0.3-dev (commit facc3fb)\nCopyright (c) 2001-2018, Andrew Aksyonoff\nCopyright (c) 2008-2016, Sphinx Technologies Inc (http://sphinxsearch.com)\n```\n\n## 二、PHP 开启 sphinx 扩展\n\n### **1.下载 php_sphinx 扩展**: [前往]\n\n具体需要下载的版本需要查看 phpinfo 信息:\n\n    Architecture         ==》x86/x64\n    PHP Extension Build  ==》NTS/NS\n\n下载并解压后，将`php_sphinx.dll`文件放到 php/ext 目录下\n\n### **2.修改 php.ini 配置文件**\n\n```ini\n# 在 Dynamic Extensions 列表中添加php_sphinx扩展\nextension=php_sphinx.dll\n```\n\n修改后重启 apache 服务\n\n### **3.在 phpinfo.php 输出的信息中查看 sphinx 扩展是否安装成功**\n\n```info\n            sphinx\nsphinx support\t enabled\nVersion\t         1.3.2\nRevision\t $Revision$\n```\n\n## 三、代码实现\n\n### 1.样例数据表`test.documents`记录：\n\n| id  | group_id | group_id2 | date_added          | title           | content                                                                   |\n| --- | -------- | --------- | :------------------ | :-------------- | :------------------------------------------------------------------------ |\n| 1   | 1        | 5         | 2018-05-14 09:12:25 | test one        | this is my test document number one. also checking search within phrases. |\n| 2   | 1        | 6         | 2018-05-14 09:12:25 | test two        | this is my test document number two                                       |\n| 3   | 2        | 7         | 2018-05-14 09:12:25 | another doc     | this is another group                                                     |\n| 4   | 2        | 8         | 2018-05-14 09:12:25 | doc number four | this is to test groups                                                    |\n\n### 2.PHP 代码实现\n\n#### **一般实现**\n\n```php\n<?php\nrequire('sphinxapi.php');\n\n$sphinx = new SphinxClient();\n$sphinx->SetServer('localhost',9312);\n$sphinx->SetMatchMode(SPH_MATCH_ANY);\n$sphinx->SetArrayResult ( true );\n$res = $sphinx->Query($_GET['key'],'*');\nvar_dump($res);\n```\n\n#### **thinkphp5 使用介绍**\n\n1.将`sphinxapi.php`文件放到`extend`目录下\n\n2.在控制器方法中使用（`app/api/index`）\n\n```php\npublic function test()\n{\n    $sphinx = new \\SphinxClient();\n    // sphinx的主机名和端口\n    $sphinx->SetServer('localhost',9312);\n    // 匹配模式\n    $sphinx->SetMatchMode(SPH_MATCH_ANY);\n    // 设置返回结果集为php数组格式\n\n    $sphinx->SetArrayResult ( true );\n    $res = $sphinx->Query(input('key'),'*');\n    var_dump($res);\n}\n```\n\n3.url 访问：\n`http://localhost/mypro/api/index/test?key=test`\n\n4.输出数据\n\n```json\nD:\\web\\COD\\api\\application\\api\\controller\\Index.php:21:\narray (size=10)\n  'error' => string '' (length=0)\n  'warning' => string '' (length=0)\n  'status' => int 0\n  'fields' =>\n    // 查询显示的字段名\n    array (size=2)\n      0 => string 'title' (length=5)\n      1 => string 'content' (length=7)\n  'attrs' =>\n    array (size=2)\n      'group_id' => string '1' (length=1)\n      'date_added' => string '2' (length=1)\n  'matches' =>\n    // 匹配的结果，返回匹配记录的id和权重（权重越大，匹配条件越多）\n    array (size=3)\n      0 =>\n        array (size=3)\n          'id' => string '1' (length=1)\n          'weight' => int 2421\n          'attrs' =>\n            array (size=2)\n              ...\n      1 =>\n        array (size=3)\n          'id' => string '2' (length=1)\n          'weight' => int 2421\n          'attrs' =>\n            array (size=2)\n              ...\n      2 =>\n        array (size=3)\n          'id' => string '4' (length=1)\n          'weight' => int 1442\n          'attrs' =>\n            array (size=2)\n              ...\n  'total' => int 3\n  'total_found' => int 3\n  'time' => float 0\n  'words' =>\n    array (size=1)\n      'test' =>\n        array (size=2)\n          'docs' => int 6\n          'hits' => int 10\n```\n\n## 四、在 ThinkPHP5 项目中应用\n\n### **1.修改配置信息**`sphinx/bin/sphinx.conf`\n\n```ini\nsource src1{\n# 省略其他配置\nsql_user  = root\nsql_pass  = 123123\nsql_db    = shopMall\nsql_query = \\\n  SELECT id,offerid, name, ename, setmeal, category, country, traffic, os, body, inventory_title, shop \\\n  FROM i_offer\nsql_attr_uint = offerid\n# 省略其他配置\n}\n```\n\n```ini\nindex rt\n{\n  type  = rt\n  path  = D:\\Service\\sphinx\\data\\rt\n\n  rt_field  = name\n  rt_field  = ename\n  rt_field  = setmeal\n  rt_field  = category\n  rt_field  = country\n  rt_field  = traffic\n  rt_field  = body\n\n  rt_attr_uint  = offerid\n}\n```\n\n### **2.生成索引，并开启 searchd 服务**\n\n```bash\n# 生成项目索引\nsphinx/bin/indexer.exe --config sphinx.conf --all\n\n# 开启服务 &表示后台开启，不用保持窗口执行状态\nsphinx/bin/searchd.exe &\n```\n\n### **3.程序实现**\n\nsphinx 查询返回的结果并不是我们需要的显示结果，所以还需要对结果进行处理，从而获取到我们需要的结果。\n\n默认 sphinx 返回的数据中包含 id 信息是和数据记录的信息是相关的，所以我们需要通过 id 到数据库中查询相关信息。\n\n```php\npublic function test()\n{\n    $s = new \\SphinxClient;\n    $s->setServer(\"localhost\", 9312);\n    // 作为数组返回\n    $s->SetArrayResult(true);\n    // 匹配格式  任意匹配\n    $s->setMatchMode(SPH_MATCH_ANY);\n    $s->setMaxQueryTime(3);\n    // input()表示接收用户传过来的数据\n    $result = $s->query(input('key'),'*');\n\n    return json($result);\n}\n```\n\n### **4.测试实现**\n\n访问 url：\n`http://localhost/mypro/api/index/test?key=官方`\n\n返回结果：\n\n```json\nD:\\web\\COD\\api\\application\\api\\controller\\Index.php:22:\narray (size=10)\n  'error' => string '' (length=0)\n  'warning' => string '' (length=0)\n  'status' => int 0\n  'fields' =>\n    array (size=10)\n      0 => string 'name' (length=4)\n      1 => string 'ename' (length=5)\n      2 => string 'setmeal' (length=7)\n      3 => string 'category' (length=8)\n      4 => string 'country' (length=7)\n      5 => string 'traffic' (length=7)\n      6 => string 'os' (length=2)\n      7 => string 'body' (length=4)\n      8 => string 'inventory_title' (length=15)\n      9 => string 'shop' (length=4)\n  'attrs' =>\n    array (size=1)\n      'offerid' => string '1' (length=1)\n  'matches' =>\n    array (size=6)\n      0 =>\n        array (size=3)\n          'id' => string '36' (length=2)\n          'weight' => int 4667\n          'attrs' =>\n            array (size=1)\n              ...\n      1 =>\n        array (size=3)\n          'id' => string '19' (length=2)\n          'weight' => int 2611\n          'attrs' =>\n            array (size=1)\n              ...\n      // 此处省略部分数据\n  'total' => int 6\n  'total_found' => int 6\n  'time' => float 0\n  'words' =>\n    array (size=2)\n      '官' =>\n        array (size=2)\n          'docs' => int 14\n          'hits' => int 16\n      '方' =>\n        array (size=2)\n          'docs' => int 70\n          'hits' => int 94\n```\n\n对结果进行处理，支持过滤查询`SetFilter()`。\n\n```php\npublic function test()\n{\n    $filterkey = 'status';\n    $filtervalue = \"1\";\n\n    $sphinx = new \\SphinxClient;\n    $sphinx->setServer(\"localhost\", 9312);\n\n    // 进行过滤查询\n    if (!empty($filterkey)) {\n        // 只在status==1的记录中检索\n        $filterRes = $sphinx->SetFilter($filterkey, [$filtervalue]);\n        if (!$filterRes) {\n            return false;\n        }\n    }\n\n    // 作为数组返回\n    $sphinx->SetArrayResult(true);\n    // 匹配格式  任意匹配\n    $sphinx->setMatchMode(SPH_MATCH_ANY);\n    $sphinx->setMaxQueryTime(3);\n    // input()表示接收用户传过来的数据\n    $result = $sphinx->query(input('key'),'*');\n\n    // 避免没有匹配记录时报错\n    if(empty($result['matches'])) {\n        return null;\n    }\n\n    $result = $result['matches'];\n    // 返回数组中指定的id列, 返回结果为单列数组\n    $result = array_column($result, 'id');\n    $list = model('offer')\n    ->field('offerid, status, name, ename, setmeal, category, country, traffic, os, body, inventory_title, shop')\n    ->where(array('id' => array('in', $result)))\n    ->select();\n\n    return json($list);\n}\n```\n\n返回结果\n\n```json\n[\n  {\n    offerid: 2332302,\n    status: 1,\n    name: \"【官方站】減震隱形增高鞋墊（安全有效~秒增高5公分~）\",\n    ename: \"zenggaoxiedian\",\n    setmeal: \"日韓超夯，氣墊隱形增高墊，輕鬆增高5公分，透氣減震，抗菌防臭，藝人最愛！【可拆分，自由裁剪，均碼35-44可用】【超殺998三雙】\",\n    category: \"[{\"id\":6,\"name\":\"其他\"},{\"id\":7,\"name\":\"商城\"},{\"id\":8,\"name\":\"家庭用品\\n\"}]\",\n    country: \"[{\"id\":11,\"name\":\"American Samoa\"},{\"id\":1,\"name\":\"Andorra\"},{\"id\":8,\"name\":\"Angola\"},{\"id\":5,\"name\":\"Anguilla\"},{\"id\":10,\"name\":\"Argentina\"},{\"id\":7,\"name\":\"Armenia\"},{\"id\":12,\"name\":\"Austria\"}]\",\n    traffic: \"[{\"id\":2,\"name\":\"16+\"},{\"id\":3,\"name\":\"3G\\/4G\"},{\"id\":4,\"name\":\"Adult\"}]\",\n    os: \"[{\"id\":1,\"name\":\"3DS System Software\"},{\"id\":2,\"name\":\"Android\"},{\"id\":13,\"name\":\"BeOS\"},{\"id\":16,\"name\":\"CentOS\"}]\",\n    body: \"123123123\",\n    inventory_title: \"隱形增高鞋墊B\",\n    shop: \"[{\"userid\":77912776,\"name\":\"myShop\"}]\"\n  },\n  {\n    offerid: 3308032,\n    status: 1,\n    name: \"【官方站】電熱造型梳\",\n    ename: \"zaoxingshu\",\n    setmeal: \"長/短髮都適用！好梳好上手！亂翹髮尾一秒聽話！【人氣爆红款美髮救星】限時特價，加NT$300再得1件！！！\",\n    category: \"[{\"id\":2,\"name\":\"美容\"},{\"id\":4,\"name\":\"日用品\"},{\"id\":6,\"name\":\"其他\"},{\"id\":8,\"name\":\"家庭用品\\n\"}]\",\n    country: \"[{\"id\":6,\"name\":\"Albania\"},{\"id\":4,\"name\":\"Antigua And Barbuda\"}]\",\n    traffic: \"[{\"id\":3,\"name\":\"3G\\/4G\"},{\"id\":5,\"name\":\"Adult Content\"},{\"id\":6,\"name\":\"App Discovery Traffic\"}]\",\n    os: \"[{\"id\":3,\"name\":\"Android with AOKP\"},{\"id\":5,\"name\":\"Android with Cyanogen Mod\"},{\"id\":6,\"name\":\"Android with LiquidSmooth\"},{\"id\":7,\"name\":\"Android with MIUI\"}]\",\n    body: \"123123123\"\n    inventory_title: \"NOVA多功能卷髮棒B\",\n    shop: \"[{\"userid\":77912776,\"name\":\"myShop\"}]\"\n  }\n]\n```\n\n## 五、扩展补充\n\n需要对多个不同表创建不同的检索的使用方法：\n\n只需创建不同的索引源和索引，相应的对应好即可。\n\n实际项目中的 sphinx 完整配置：\n\n```ini\nsource keyword\n{\n  type      = mysql\n  sql_host  = localhost\n  sql_user  = root\n  sql_pass  = 123\n  sql_db    = goods\n  sql_query_pre   = SET NAMES utf8\n\n  sql_query  = \\\n    SELECT id,status,keyword \\\n    FROM t_keyword\n\n  # 设置查询条件\n  sql_attr_uint = status\n}\n\nindex keyword\n{\n  source  = keyword\n  path  = D:/UPUPW_ANK_W64/Database/data_sphinx/keyword\n  charset_type  = utf-8\n  charset_table = 0..9, A..Z->a..z, _, a..z, U+410..U+42F->U+430..U+44F, U+430..U+44F\n  ngram_len = 1\n  ngram_chars = U+3000..U+2FA1F\n}\n\nsource collection\n{\n  type        = mysql\n  sql_host    = localhost\n  sql_user    = root\n  sql_pass    = 123456\n  sql_db      = goods\n  sql_query   = \\\n    SELECT id, status, title, offerid, keyword, searchid, fromname \\\n    FROM t_collection\n}\n\nindex collection\n{\n  source    = collection\n  path      = D:/UPUPW_ANK_W64/Database/data_sphinx/collection\n  mlock     = 0\n  morphology      = none\n  min_word_len    = 1\n  charset_table   = 0..9, A..Z->a..z, _, a..z, U+410..U+42F->U+430..U+44F, U+430..U+44F\n  min_prefix_len  = 0\n  min_infix_len   = 1\n  ngram_len   = 1\n  ngram_chars   = U+3000..U+2FA1F\n  html_strip    = 0\n}\n\nsource goods\n{\n  type        = mysql\n  sql_host    = localhost\n  sql_user    = root\n  sql_pass    = 123455\n  sql_db      = goods\n  sql_query   = \\\n    SELECT id, status, name, seller_region, keywords, offerid, searchid, detailid, keyword, fromname \\\n    FROM t_goods\n}\n\nindex goods\n{\n  source    = goods\n  path      = D:/UPUPW_ANK_W64/Database/data_sphinx/goods\n  mlock     = 0\n  morphology      = none\n  min_word_len    = 1\n  charset_table   = 0..9, A..Z->a..z, _, a..z, U+410..U+42F->U+430..U+44F, U+430..U+44F\n  min_prefix_len  = 0\n  min_infix_len   = 1\n  ngram_len       = 1\n  ngram_chars     = U+3000..U+2FA1F\n  html_strip      = 0\n}\n\nindexer\n{\n  mem_limit   = 128M\n}\n\nsearchd\n{\n  listen    = 9312\n  #listen   = 9306:mysql41\n  log   = D:/UPUPW_ANK_W64/Logs/sphinx.log\n  query_log       = D:/UPUPW_ANK_W64/Modules/Sphinx/log/query.log\n  read_timeout    = 5\n  client_timeout  = 300\n  max_children    = 30\n  persistent_connections_limit  = 30\n  pid_file        = D:/UPUPW_ANK_W64/Modules/Sphinx/log/searchd.pid\n  seamless_rotate = 1\n  preopen_indexes = 1\n  unlink_old      = 1\n  max_packet_size = 8M\n  max_filters     = 256\n  max_filter_values = 4096\n  max_batch_queries = 32\n}\n```\n\n## 六、参考资料：\n\n> PHP 官方手册使用 Sphinx 介绍：\n\nhttp://www.php.net/manual/zh/book.sphinx.php\n\n> sphinx 安装：\n\nhttps://blog.csdn.net/huang2017/article/details/69665057\n\nhttps://blog.csdn.net/huang2017/article/details/69666154\n\n> 将 sphinx 服务添加到 windows 服务：\n\n`./searchd.exe --install -c sphinx.conf --servicename s`\n\nhttps://blog.csdn.net/design321/article/details/8895712\n\n> sphinx 使用：\n\nhttps://blog.csdn.net/u010837612/article/details/70827481\n\n> 中文支持（linux 系统）\n\nhttp://www.xuejiehome.com/blread-1283.html\n\n> 中文支持（windows 系统）--- 默认已能支持中文\n\nhttp://www.phpernote.com/php-template-framework/284.html\n\n> 其他\n\nhttps://my.oschina.net/guyson/blog/283576\n\n[下载]: http://sphinxsearch.com/downloads/release/\n[前往]: https://pecl.php.net/package/sphinx/1.3.2/windows\n","slug":"php-sphinx-windows","published":1,"updated":"2019-05-12T15:56:59.742Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c43l006p2wuulyo22cyd","content":"<p>由于业务需要，需要做类似淘宝商城商品检索的功能，对于数据量很大的情况，MySQL 查询的效率损耗很大，需要使用专门的索引引擎进行搜索查询，实现功能，对于和 PHP 和 Mysql 的结合的索引引擎中， xunsearch 和 sphinx 是较为著名的，但由于 xunsearch 服务器端不支持 windows，所以暂且先考虑 sphinx 的使用。sphinx 目前已支持简体中文、繁体中文和英文的检索，不需要额外安装插件支持。</p>\n<a id=\"more\"></a>\n<h2 id=\"一-安装windows\"><a class=\"markdownIt-Anchor\" href=\"#一-安装windows\"></a> 一、安装（Windows）</h2>\n<h3 id=\"1官方下载\"><a class=\"markdownIt-Anchor\" href=\"#1官方下载\"></a> <strong>1.官方下载</strong></h3>\n<p>Sphinx 下载地址： <a href=\"http://sphinxsearch.com/downloads/release/\" target=\"_blank\" rel=\"noopener\">下载</a></p>\n<h3 id=\"2解压并重命名\"><a class=\"markdownIt-Anchor\" href=\"#2解压并重命名\"></a> <strong>2.解压并重命名</strong></h3>\n<p>此处下载版本为<code>3.0.3</code>，将 sphinx 文件夹命名为<code>sphinx</code></p>\n<h3 id=\"3文件夹目录介绍\"><a class=\"markdownIt-Anchor\" href=\"#3文件夹目录介绍\"></a> <strong>3.文件夹目录介绍</strong></h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sphinx</span><br><span class=\"line\">--api(各语言支持的api)</span><br><span class=\"line\">--bin（二进制程序）</span><br><span class=\"line\">--doc（文档说明）</span><br><span class=\"line\">--etc（配置文件：conf/sql）</span><br><span class=\"line\">--misc</span><br><span class=\"line\">--src</span><br><span class=\"line\"><span class=\"comment\"># 手动创建以下两个文件夹</span></span><br><span class=\"line\">--data</span><br><span class=\"line\">--log</span><br></pre></td></tr></table></figure>\n<h3 id=\"4设置配置文件\"><a class=\"markdownIt-Anchor\" href=\"#4设置配置文件\"></a> <strong>4.设置配置文件</strong></h3>\n<p>(1)将<code>sphinx/etc/sphinx-min.conf.dist</code>文件复制到<code>sphinx/bin/</code>目录下，并重命名为<code>sphinx.conf</code></p>\n<p>注：<code>sphinx/etc/sphinx.conf.dist</code>为带注释的详细的</p>\n<p>(2)设置配置项</p>\n<p>主要是以下为配置函数：</p>\n<blockquote>\n<p>source src1{} — 设置索引源(数据库的基本配置和数据表)</p>\n</blockquote>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 连接的数据库类型</span></span><br><span class=\"line\"><span class=\"attr\">type</span> = mysql</span><br><span class=\"line\"><span class=\"comment\"># 连接的数据库主机</span></span><br><span class=\"line\"><span class=\"attr\">sql_host</span> = localhost</span><br><span class=\"line\"><span class=\"comment\"># 数据库连接的用户名，默认为test</span></span><br><span class=\"line\"><span class=\"attr\">sql_user</span> = root</span><br><span class=\"line\"><span class=\"comment\"># 数据库连接的密码，默认为空</span></span><br><span class=\"line\"><span class=\"attr\">sql_pass</span> =<span class=\"number\">123123</span></span><br><span class=\"line\"><span class=\"comment\"># 连接的数据库名称，默认为test</span></span><br><span class=\"line\"><span class=\"attr\">sql_db</span> = test</span><br><span class=\"line\"><span class=\"comment\"># 连接数据库的端口号，默认为3306</span></span><br><span class=\"line\"><span class=\"attr\">sql_port</span> = <span class=\"number\">3306</span></span><br><span class=\"line\"><span class=\"comment\"># 操作的数据表执行的查询语句</span></span><br><span class=\"line\"><span class=\"attr\">sql_query</span> = \\</span><br><span class=\"line\">    SELECT id, group_id, UNIX_TIMESTAMP(date_added) AS date_added, title, content \\</span><br><span class=\"line\">    FROM documents</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置查询过滤条件</span></span><br><span class=\"line\"><span class=\"attr\">sql_attr_uint</span> = group_id</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>index test1{} — 索引文件</p>\n</blockquote>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定索引源</span></span><br><span class=\"line\"><span class=\"attr\">source</span> = src1</span><br><span class=\"line\"><span class=\"comment\"># 索引数据存放目录，默认为/var/data/test1</span></span><br><span class=\"line\"><span class=\"attr\">path</span> = D:\\Service\\sphinx\\data\\test1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置中文匹配</span></span><br><span class=\"line\"><span class=\"attr\">min_word_len</span>    = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\"># 指定字符集（已废弃）</span></span><br><span class=\"line\"><span class=\"attr\">charset_type</span>    = utf-<span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"comment\"># 指定utf-8的编码表</span></span><br><span class=\"line\"><span class=\"attr\">charset_table</span>   = <span class=\"number\">0</span>..<span class=\"number\">9</span>, A..Z-&gt;a..z, _, a..z, U+<span class=\"number\">410</span>..U+<span class=\"number\">42</span>F-&gt;U+<span class=\"number\">430</span>..U+<span class=\"number\">44</span>F, U+<span class=\"number\">430</span>..U+<span class=\"number\">44</span>F</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">min_prefix_len</span> = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"attr\">min_infix_len</span> = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开启中文分词支持</span></span><br><span class=\"line\"><span class=\"attr\">ngram_len</span> = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\"># 需要分词的字符</span></span><br><span class=\"line\"><span class=\"attr\">ngram_chars</span> = U+<span class=\"number\">3000</span>..U+<span class=\"number\">2</span>FA1F</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>index test1stemmed : test1{}</p>\n</blockquote>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 主要需要修改的配置项，默认为/var/data/test1stemmed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">path</span> = D:\\Service\\sphinx\\data\\test1stemmed</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>index rt{}</p>\n</blockquote>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 主要需要修改的配置项，默认为/var/data/rt</span></span><br><span class=\"line\"><span class=\"attr\">path</span> = D:\\Service\\sphinx\\data\\rt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定对哪些字段进行匹配</span></span><br><span class=\"line\"><span class=\"attr\">rt_field</span> = name</span><br><span class=\"line\"><span class=\"attr\">rt_field</span> = ename</span><br><span class=\"line\"><span class=\"attr\">rt_field</span> = setmeal</span><br><span class=\"line\"><span class=\"attr\">rt_field</span> = category</span><br><span class=\"line\"><span class=\"attr\">rt_field</span> = country</span><br><span class=\"line\"><span class=\"attr\">rt_field</span> = traffic</span><br><span class=\"line\"><span class=\"attr\">rt_field</span> = body</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">rt_attr_uint</span> = <span class=\"literal\">off</span>erid</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>searchd{}</p>\n</blockquote>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 自定义日志文件位置</span></span><br><span class=\"line\"><span class=\"attr\">log</span> = D:\\Service\\sphinx\\log\\searchd.log</span><br><span class=\"line\"><span class=\"attr\">query_log</span> = D:\\Service\\sphinx\\log\\query.log</span><br><span class=\"line\"><span class=\"attr\">pid_file</span> = D:\\Service\\sphinx\\log\\searchd.pid</span><br></pre></td></tr></table></figure>\n<p>以下几项不需要修改默认值，即可直接使用</p>\n<blockquote>\n<p>source src1throttled : src1{}</p>\n</blockquote>\n<p>分布式索引的相关配置，没有则可以不修改</p>\n<blockquote>\n<p>index dist1{}<br>\nindexer{}<br>\ncommon{}</p>\n</blockquote>\n<p>【注】：主要的配置是<code>source</code> <code>index</code> <code>indexer</code> <code>searchd</code>, 其他几项可以不需要</p>\n<h3 id=\"5操作数据库导入样例数据\"><a class=\"markdownIt-Anchor\" href=\"#5操作数据库导入样例数据\"></a> <strong>5.操作数据库，导入样例数据</strong></h3>\n<p>(1)进入到 mysql 命令行，执行命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\phpStudy\\PHPTutorial\\MySQL\\bin&gt;mysql -uroot -p</span><br><span class=\"line\">Enter password: *************</span><br><span class=\"line\">Welcome to the MySQL monitor.  Commands end with ; or \\g.</span><br><span class=\"line\">Your MySQL connection id is 12</span><br><span class=\"line\">Server version: 5.5.53 MySQL Community Server (GPL)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; use <span class=\"built_in\">test</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 恢复样例数据到数据库</span></span><br><span class=\"line\">mysql&gt; <span class=\"built_in\">source</span> /D:\\Service\\sphinx\\etc/eaxmple.sql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新增两个数据表，documents和tags</span></span><br><span class=\"line\">mysql&gt; show tables;</span><br><span class=\"line\">documents</span><br><span class=\"line\">tags</span><br></pre></td></tr></table></figure>\n<h3 id=\"6生成索引文件\"><a class=\"markdownIt-Anchor\" href=\"#6生成索引文件\"></a> <strong>6.生成索引文件</strong></h3>\n<p>cmd 命令行进入到<code>sphinx/bin/</code>目录下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成索引文件,本地重新构建--rotate</span></span><br><span class=\"line\">&gt; indexer.exe --config sphinx.conf --all --rotate</span><br><span class=\"line\">Sphinx 3.0.3-dev (commit facc3fb)</span><br><span class=\"line\">Copyright (c) 2001-2018, Andrew Aksyonoff</span><br><span class=\"line\">Copyright (c) 2008-2016, Sphinx Technologies Inc (http://sphinxsearch.com)</span><br><span class=\"line\"></span><br><span class=\"line\">using config file <span class=\"string\">'sphinx.conf'</span>...</span><br><span class=\"line\">WARNING: key <span class=\"string\">'docinfo'</span> was permanently removed from Sphinx configuration. Refer to documentation <span class=\"keyword\">for</span> details.</span><br><span class=\"line\">WARNING: key <span class=\"string\">'dict'</span> was permanently removed from Sphinx configuration. Refer to documentation <span class=\"keyword\">for</span> details.</span><br><span class=\"line\">WARNING: key <span class=\"string\">'mva_updates_pool'</span> was permanently removed from Sphinx configuration. Refer to documentation <span class=\"keyword\">for</span> details.</span><br><span class=\"line\">indexing index <span class=\"string\">'test1'</span>...</span><br><span class=\"line\">collected 4 docs, 0.0 MB</span><br><span class=\"line\">sorted 0.0 Mhits, 100.0% <span class=\"keyword\">done</span></span><br><span class=\"line\">total 4 docs, 0.2 Kb</span><br><span class=\"line\">total 1.0 sec, 0.2 Kb/sec, 3 docs/sec</span><br><span class=\"line\">indexing index <span class=\"string\">'test1stemmed'</span>...</span><br><span class=\"line\">collected 4 docs, 0.0 MB</span><br><span class=\"line\">sorted 0.0 Mhits, 100.0% <span class=\"keyword\">done</span></span><br><span class=\"line\">total 4 docs, 0.2 Kb</span><br><span class=\"line\">total 1.0 sec, 0.2 Kb/sec, 3 docs/sec</span><br><span class=\"line\">skipping non-plain index <span class=\"string\">'dist1'</span>...</span><br><span class=\"line\">skipping non-plain index <span class=\"string\">'rt'</span>...</span><br></pre></td></tr></table></figure>\n<p>【注】新版 sphinx 的 bin 目录下已经没有 search.exe 程序，所以不能直接在命令行执行返回结果，只能使用 api 接口返回数据。</p>\n<h3 id=\"7开启搜索服务保持后台运行\"><a class=\"markdownIt-Anchor\" href=\"#7开启搜索服务保持后台运行\"></a> <strong>7.开启搜索服务，保持后台运行</strong></h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; searchd.exe --pidfile</span><br><span class=\"line\"></span><br><span class=\"line\">[Tue May 15 09:02:14.690 2018] [7776] using config file <span class=\"string\">'./sphinx.conf'</span>...</span><br><span class=\"line\">listening on all interfaces, port=9312</span><br><span class=\"line\">listening on all interfaces, port=9306</span><br><span class=\"line\">Sphinx 3.0.3-dev (commit facc3fb)</span><br><span class=\"line\">Copyright (c) 2001-2018, Andrew Aksyonoff</span><br><span class=\"line\">Copyright (c) 2008-2016, Sphinx Technologies Inc (http://sphinxsearch.com)</span><br></pre></td></tr></table></figure>\n<h2 id=\"二-php-开启-sphinx-扩展\"><a class=\"markdownIt-Anchor\" href=\"#二-php-开启-sphinx-扩展\"></a> 二、PHP 开启 sphinx 扩展</h2>\n<h3 id=\"1下载-php_sphinx-扩展-前往\"><a class=\"markdownIt-Anchor\" href=\"#1下载-php_sphinx-扩展-前往\"></a> <strong>1.下载 php_sphinx 扩展</strong>: <a href=\"https://pecl.php.net/package/sphinx/1.3.2/windows\" target=\"_blank\" rel=\"noopener\">前往</a></h3>\n<p>具体需要下载的版本需要查看 phpinfo 信息:</p>\n<pre><code>Architecture         ==》x86/x64\nPHP Extension Build  ==》NTS/NS\n</code></pre>\n<p>下载并解压后，将<code>php_sphinx.dll</code>文件放到 php/ext 目录下</p>\n<h3 id=\"2修改-phpini-配置文件\"><a class=\"markdownIt-Anchor\" href=\"#2修改-phpini-配置文件\"></a> <strong>2.修改 php.ini 配置文件</strong></h3>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在 Dynamic Extensions 列表中添加php_sphinx扩展</span></span><br><span class=\"line\"><span class=\"attr\">extension</span>=php_sphinx.dll</span><br></pre></td></tr></table></figure>\n<p>修改后重启 apache 服务</p>\n<h3 id=\"3在-phpinfophp-输出的信息中查看-sphinx-扩展是否安装成功\"><a class=\"markdownIt-Anchor\" href=\"#3在-phpinfophp-输出的信息中查看-sphinx-扩展是否安装成功\"></a> <strong>3.在 phpinfo.php 输出的信息中查看 sphinx 扩展是否安装成功</strong></h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">            sphinx</span><br><span class=\"line\">sphinx support\t enabled</span><br><span class=\"line\">Version\t         1.3.2</span><br><span class=\"line\">Revision\t $Revision$</span><br></pre></td></tr></table></figure>\n<h2 id=\"三-代码实现\"><a class=\"markdownIt-Anchor\" href=\"#三-代码实现\"></a> 三、代码实现</h2>\n<h3 id=\"1样例数据表testdocuments记录\"><a class=\"markdownIt-Anchor\" href=\"#1样例数据表testdocuments记录\"></a> 1.样例数据表<code>test.documents</code>记录：</h3>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>group_id</th>\n<th>group_id2</th>\n<th style=\"text-align:left\">date_added</th>\n<th style=\"text-align:left\">title</th>\n<th style=\"text-align:left\">content</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>5</td>\n<td style=\"text-align:left\">2018-05-14 09:12:25</td>\n<td style=\"text-align:left\">test one</td>\n<td style=\"text-align:left\">this is my test document number one. also checking search within phrases.</td>\n</tr>\n<tr>\n<td>2</td>\n<td>1</td>\n<td>6</td>\n<td style=\"text-align:left\">2018-05-14 09:12:25</td>\n<td style=\"text-align:left\">test two</td>\n<td style=\"text-align:left\">this is my test document number two</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2</td>\n<td>7</td>\n<td style=\"text-align:left\">2018-05-14 09:12:25</td>\n<td style=\"text-align:left\">another doc</td>\n<td style=\"text-align:left\">this is another group</td>\n</tr>\n<tr>\n<td>4</td>\n<td>2</td>\n<td>8</td>\n<td style=\"text-align:left\">2018-05-14 09:12:25</td>\n<td style=\"text-align:left\">doc number four</td>\n<td style=\"text-align:left\">this is to test groups</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"2php-代码实现\"><a class=\"markdownIt-Anchor\" href=\"#2php-代码实现\"></a> 2.PHP 代码实现</h3>\n<h4 id=\"一般实现\"><a class=\"markdownIt-Anchor\" href=\"#一般实现\"></a> <strong>一般实现</strong></h4>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">require</span>(<span class=\"string\">'sphinxapi.php'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">$sphinx = <span class=\"keyword\">new</span> SphinxClient();</span><br><span class=\"line\">$sphinx-&gt;SetServer(<span class=\"string\">'localhost'</span>,<span class=\"number\">9312</span>);</span><br><span class=\"line\">$sphinx-&gt;SetMatchMode(SPH_MATCH_ANY);</span><br><span class=\"line\">$sphinx-&gt;SetArrayResult ( <span class=\"keyword\">true</span> );</span><br><span class=\"line\">$res = $sphinx-&gt;Query($_GET[<span class=\"string\">'key'</span>],<span class=\"string\">'*'</span>);</span><br><span class=\"line\">var_dump($res);</span><br></pre></td></tr></table></figure>\n<h4 id=\"thinkphp5-使用介绍\"><a class=\"markdownIt-Anchor\" href=\"#thinkphp5-使用介绍\"></a> <strong>thinkphp5 使用介绍</strong></h4>\n<p>1.将<code>sphinxapi.php</code>文件放到<code>extend</code>目录下</p>\n<p>2.在控制器方法中使用（<code>app/api/index</code>）</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $sphinx = <span class=\"keyword\">new</span> \\SphinxClient();</span><br><span class=\"line\">    <span class=\"comment\">// sphinx的主机名和端口</span></span><br><span class=\"line\">    $sphinx-&gt;SetServer(<span class=\"string\">'localhost'</span>,<span class=\"number\">9312</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 匹配模式</span></span><br><span class=\"line\">    $sphinx-&gt;SetMatchMode(SPH_MATCH_ANY);</span><br><span class=\"line\">    <span class=\"comment\">// 设置返回结果集为php数组格式</span></span><br><span class=\"line\"></span><br><span class=\"line\">    $sphinx-&gt;SetArrayResult ( <span class=\"keyword\">true</span> );</span><br><span class=\"line\">    $res = $sphinx-&gt;Query(input(<span class=\"string\">'key'</span>),<span class=\"string\">'*'</span>);</span><br><span class=\"line\">    var_dump($res);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3.url 访问：<br>\n<code>http://localhost/mypro/api/index/test?key=test</code></p>\n<p>4.输出数据</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\web\\COD\\api\\application\\api\\controller\\Index.php:21:</span><br><span class=\"line\">array (size=10)</span><br><span class=\"line\">  'error' =&gt; string '' (length=0)</span><br><span class=\"line\">  'warning' =&gt; string '' (length=0)</span><br><span class=\"line\">  'status' =&gt; int 0</span><br><span class=\"line\">  'fields' =&gt;</span><br><span class=\"line\">    // 查询显示的字段名</span><br><span class=\"line\">    array (size=2)</span><br><span class=\"line\">      0 =&gt; string 'title' (length=5)</span><br><span class=\"line\">      1 =&gt; string 'content' (length=7)</span><br><span class=\"line\">  'attrs' =&gt;</span><br><span class=\"line\">    array (size=2)</span><br><span class=\"line\">      'group_id' =&gt; string '1' (length=1)</span><br><span class=\"line\">      'date_added' =&gt; string '2' (length=1)</span><br><span class=\"line\">  'matches' =&gt;</span><br><span class=\"line\">    // 匹配的结果，返回匹配记录的id和权重（权重越大，匹配条件越多）</span><br><span class=\"line\">    array (size=3)</span><br><span class=\"line\">      0 =&gt;</span><br><span class=\"line\">        array (size=3)</span><br><span class=\"line\">          'id' =&gt; string '1' (length=1)</span><br><span class=\"line\">          'weight' =&gt; int 2421</span><br><span class=\"line\">          'attrs' =&gt;</span><br><span class=\"line\">            array (size=2)</span><br><span class=\"line\">              ...</span><br><span class=\"line\">      1 =&gt;</span><br><span class=\"line\">        array (size=3)</span><br><span class=\"line\">          'id' =&gt; string '2' (length=1)</span><br><span class=\"line\">          'weight' =&gt; int 2421</span><br><span class=\"line\">          'attrs' =&gt;</span><br><span class=\"line\">            array (size=2)</span><br><span class=\"line\">              ...</span><br><span class=\"line\">      2 =&gt;</span><br><span class=\"line\">        array (size=3)</span><br><span class=\"line\">          'id' =&gt; string '4' (length=1)</span><br><span class=\"line\">          'weight' =&gt; int 1442</span><br><span class=\"line\">          'attrs' =&gt;</span><br><span class=\"line\">            array (size=2)</span><br><span class=\"line\">              ...</span><br><span class=\"line\">  'total' =&gt; int 3</span><br><span class=\"line\">  'total_found' =&gt; int 3</span><br><span class=\"line\">  'time' =&gt; float 0</span><br><span class=\"line\">  'words' =&gt;</span><br><span class=\"line\">    array (size=1)</span><br><span class=\"line\">      'test' =&gt;</span><br><span class=\"line\">        array (size=2)</span><br><span class=\"line\">          'docs' =&gt; int 6</span><br><span class=\"line\">          'hits' =&gt; int 10</span><br></pre></td></tr></table></figure>\n<h2 id=\"四-在-thinkphp5-项目中应用\"><a class=\"markdownIt-Anchor\" href=\"#四-在-thinkphp5-项目中应用\"></a> 四、在 ThinkPHP5 项目中应用</h2>\n<h3 id=\"1修改配置信息sphinxbinsphinxconf\"><a class=\"markdownIt-Anchor\" href=\"#1修改配置信息sphinxbinsphinxconf\"></a> <strong>1.修改配置信息</strong><code>sphinx/bin/sphinx.conf</code></h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source src1&#123;</span><br><span class=\"line\"><span class=\"comment\"># 省略其他配置</span></span><br><span class=\"line\"><span class=\"attr\">sql_user</span>  = root</span><br><span class=\"line\"><span class=\"attr\">sql_pass</span>  = <span class=\"number\">123123</span></span><br><span class=\"line\"><span class=\"attr\">sql_db</span>    = shopMall</span><br><span class=\"line\"><span class=\"attr\">sql_query</span> = \\</span><br><span class=\"line\">  SELECT id,offerid, name, ename, setmeal, category, country, traffic, os, body, inventory_title, shop \\</span><br><span class=\"line\">  FROM i_offer</span><br><span class=\"line\"><span class=\"attr\">sql_attr_uint</span> = <span class=\"literal\">off</span>erid</span><br><span class=\"line\"><span class=\"comment\"># 省略其他配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index rt</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  type  = rt</span><br><span class=\"line\">  path  = D:\\Service\\sphinx\\data\\rt</span><br><span class=\"line\"></span><br><span class=\"line\">  rt_field  = name</span><br><span class=\"line\">  rt_field  = ename</span><br><span class=\"line\">  rt_field  = setmeal</span><br><span class=\"line\">  rt_field  = category</span><br><span class=\"line\">  rt_field  = country</span><br><span class=\"line\">  rt_field  = traffic</span><br><span class=\"line\">  rt_field  = body</span><br><span class=\"line\"></span><br><span class=\"line\">  rt_attr_uint  = offerid</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2生成索引并开启-searchd-服务\"><a class=\"markdownIt-Anchor\" href=\"#2生成索引并开启-searchd-服务\"></a> <strong>2.生成索引，并开启 searchd 服务</strong></h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成项目索引</span></span><br><span class=\"line\">sphinx/bin/indexer.exe --config sphinx.conf --all</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开启服务 &amp;表示后台开启，不用保持窗口执行状态</span></span><br><span class=\"line\">sphinx/bin/searchd.exe &amp;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3程序实现\"><a class=\"markdownIt-Anchor\" href=\"#3程序实现\"></a> <strong>3.程序实现</strong></h3>\n<p>sphinx 查询返回的结果并不是我们需要的显示结果，所以还需要对结果进行处理，从而获取到我们需要的结果。</p>\n<p>默认 sphinx 返回的数据中包含 id 信息是和数据记录的信息是相关的，所以我们需要通过 id 到数据库中查询相关信息。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $s = <span class=\"keyword\">new</span> \\SphinxClient;</span><br><span class=\"line\">    $s-&gt;setServer(<span class=\"string\">\"localhost\"</span>, <span class=\"number\">9312</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 作为数组返回</span></span><br><span class=\"line\">    $s-&gt;SetArrayResult(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 匹配格式  任意匹配</span></span><br><span class=\"line\">    $s-&gt;setMatchMode(SPH_MATCH_ANY);</span><br><span class=\"line\">    $s-&gt;setMaxQueryTime(<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"comment\">// input()表示接收用户传过来的数据</span></span><br><span class=\"line\">    $result = $s-&gt;query(input(<span class=\"string\">'key'</span>),<span class=\"string\">'*'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> json($result);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4测试实现\"><a class=\"markdownIt-Anchor\" href=\"#4测试实现\"></a> <strong>4.测试实现</strong></h3>\n<p>访问 url：<br>\n<code>http://localhost/mypro/api/index/test?key=官方</code></p>\n<p>返回结果：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\web\\COD\\api\\application\\api\\controller\\Index.php:22:</span><br><span class=\"line\">array (size=10)</span><br><span class=\"line\">  'error' =&gt; string '' (length=0)</span><br><span class=\"line\">  'warning' =&gt; string '' (length=0)</span><br><span class=\"line\">  'status' =&gt; int 0</span><br><span class=\"line\">  'fields' =&gt;</span><br><span class=\"line\">    array (size=10)</span><br><span class=\"line\">      0 =&gt; string 'name' (length=4)</span><br><span class=\"line\">      1 =&gt; string 'ename' (length=5)</span><br><span class=\"line\">      2 =&gt; string 'setmeal' (length=7)</span><br><span class=\"line\">      3 =&gt; string 'category' (length=8)</span><br><span class=\"line\">      4 =&gt; string 'country' (length=7)</span><br><span class=\"line\">      5 =&gt; string 'traffic' (length=7)</span><br><span class=\"line\">      6 =&gt; string 'os' (length=2)</span><br><span class=\"line\">      7 =&gt; string 'body' (length=4)</span><br><span class=\"line\">      8 =&gt; string 'inventory_title' (length=15)</span><br><span class=\"line\">      9 =&gt; string 'shop' (length=4)</span><br><span class=\"line\">  'attrs' =&gt;</span><br><span class=\"line\">    array (size=1)</span><br><span class=\"line\">      'offerid' =&gt; string '1' (length=1)</span><br><span class=\"line\">  'matches' =&gt;</span><br><span class=\"line\">    array (size=6)</span><br><span class=\"line\">      0 =&gt;</span><br><span class=\"line\">        array (size=3)</span><br><span class=\"line\">          'id' =&gt; string '36' (length=2)</span><br><span class=\"line\">          'weight' =&gt; int 4667</span><br><span class=\"line\">          'attrs' =&gt;</span><br><span class=\"line\">            array (size=1)</span><br><span class=\"line\">              ...</span><br><span class=\"line\">      1 =&gt;</span><br><span class=\"line\">        array (size=3)</span><br><span class=\"line\">          'id' =&gt; string '19' (length=2)</span><br><span class=\"line\">          'weight' =&gt; int 2611</span><br><span class=\"line\">          'attrs' =&gt;</span><br><span class=\"line\">            array (size=1)</span><br><span class=\"line\">              ...</span><br><span class=\"line\">      // 此处省略部分数据</span><br><span class=\"line\">  'total' =&gt; int 6</span><br><span class=\"line\">  'total_found' =&gt; int 6</span><br><span class=\"line\">  'time' =&gt; float 0</span><br><span class=\"line\">  'words' =&gt;</span><br><span class=\"line\">    array (size=2)</span><br><span class=\"line\">      '官' =&gt;</span><br><span class=\"line\">        array (size=2)</span><br><span class=\"line\">          'docs' =&gt; int 14</span><br><span class=\"line\">          'hits' =&gt; int 16</span><br><span class=\"line\">      '方' =&gt;</span><br><span class=\"line\">        array (size=2)</span><br><span class=\"line\">          'docs' =&gt; int 70</span><br><span class=\"line\">          'hits' =&gt; int 94</span><br></pre></td></tr></table></figure>\n<p>对结果进行处理，支持过滤查询<code>SetFilter()</code>。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $filterkey = <span class=\"string\">'status'</span>;</span><br><span class=\"line\">    $filtervalue = <span class=\"string\">\"1\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    $sphinx = <span class=\"keyword\">new</span> \\SphinxClient;</span><br><span class=\"line\">    $sphinx-&gt;setServer(<span class=\"string\">\"localhost\"</span>, <span class=\"number\">9312</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 进行过滤查询</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">empty</span>($filterkey)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 只在status==1的记录中检索</span></span><br><span class=\"line\">        $filterRes = $sphinx-&gt;SetFilter($filterkey, [$filtervalue]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!$filterRes) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 作为数组返回</span></span><br><span class=\"line\">    $sphinx-&gt;SetArrayResult(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 匹配格式  任意匹配</span></span><br><span class=\"line\">    $sphinx-&gt;setMatchMode(SPH_MATCH_ANY);</span><br><span class=\"line\">    $sphinx-&gt;setMaxQueryTime(<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"comment\">// input()表示接收用户传过来的数据</span></span><br><span class=\"line\">    $result = $sphinx-&gt;query(input(<span class=\"string\">'key'</span>),<span class=\"string\">'*'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 避免没有匹配记录时报错</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">empty</span>($result[<span class=\"string\">'matches'</span>])) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $result = $result[<span class=\"string\">'matches'</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 返回数组中指定的id列, 返回结果为单列数组</span></span><br><span class=\"line\">    $result = array_column($result, <span class=\"string\">'id'</span>);</span><br><span class=\"line\">    $list = model(<span class=\"string\">'offer'</span>)</span><br><span class=\"line\">    -&gt;field(<span class=\"string\">'offerid, status, name, ename, setmeal, category, country, traffic, os, body, inventory_title, shop'</span>)</span><br><span class=\"line\">    -&gt;where(<span class=\"keyword\">array</span>(<span class=\"string\">'id'</span> =&gt; <span class=\"keyword\">array</span>(<span class=\"string\">'in'</span>, $result)))</span><br><span class=\"line\">    -&gt;select();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> json($list);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>返回结果</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    offerid: 2332302,</span><br><span class=\"line\">    status: 1,</span><br><span class=\"line\">    name: \"【官方站】減震隱形增高鞋墊（安全有效~秒增高5公分~）\",</span><br><span class=\"line\">    ename: \"zenggaoxiedian\",</span><br><span class=\"line\">    setmeal: \"日韓超夯，氣墊隱形增高墊，輕鬆增高5公分，透氣減震，抗菌防臭，藝人最愛！【可拆分，自由裁剪，均碼35-44可用】【超殺998三雙】\",</span><br><span class=\"line\">    category: \"[&#123;\"id\":6,\"name\":\"其他\"&#125;,&#123;\"id\":7,\"name\":\"商城\"&#125;,&#123;\"id\":8,\"name\":\"家庭用品\\n\"&#125;]\",</span><br><span class=\"line\">    country: \"[&#123;\"id\":11,\"name\":\"American Samoa\"&#125;,&#123;\"id\":1,\"name\":\"Andorra\"&#125;,&#123;\"id\":8,\"name\":\"Angola\"&#125;,&#123;\"id\":5,\"name\":\"Anguilla\"&#125;,&#123;\"id\":10,\"name\":\"Argentina\"&#125;,&#123;\"id\":7,\"name\":\"Armenia\"&#125;,&#123;\"id\":12,\"name\":\"Austria\"&#125;]\",</span><br><span class=\"line\">    traffic: \"[&#123;\"id\":2,\"name\":\"16+\"&#125;,&#123;\"id\":3,\"name\":\"3G\\/4G\"&#125;,&#123;\"id\":4,\"name\":\"Adult\"&#125;]\",</span><br><span class=\"line\">    os: \"[&#123;\"id\":1,\"name\":\"3DS System Software\"&#125;,&#123;\"id\":2,\"name\":\"Android\"&#125;,&#123;\"id\":13,\"name\":\"BeOS\"&#125;,&#123;\"id\":16,\"name\":\"CentOS\"&#125;]\",</span><br><span class=\"line\">    body: \"123123123\",</span><br><span class=\"line\">    inventory_title: \"隱形增高鞋墊B\",</span><br><span class=\"line\">    shop: \"[&#123;\"userid\":77912776,\"name\":\"myShop\"&#125;]\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    offerid: 3308032,</span><br><span class=\"line\">    status: 1,</span><br><span class=\"line\">    name: \"【官方站】電熱造型梳\",</span><br><span class=\"line\">    ename: \"zaoxingshu\",</span><br><span class=\"line\">    setmeal: \"長/短髮都適用！好梳好上手！亂翹髮尾一秒聽話！【人氣爆红款美髮救星】限時特價，加NT$300再得1件！！！\",</span><br><span class=\"line\">    category: \"[&#123;\"id\":2,\"name\":\"美容\"&#125;,&#123;\"id\":4,\"name\":\"日用品\"&#125;,&#123;\"id\":6,\"name\":\"其他\"&#125;,&#123;\"id\":8,\"name\":\"家庭用品\\n\"&#125;]\",</span><br><span class=\"line\">    country: \"[&#123;\"id\":6,\"name\":\"Albania\"&#125;,&#123;\"id\":4,\"name\":\"Antigua And Barbuda\"&#125;]\",</span><br><span class=\"line\">    traffic: \"[&#123;\"id\":3,\"name\":\"3G\\/4G\"&#125;,&#123;\"id\":5,\"name\":\"Adult Content\"&#125;,&#123;\"id\":6,\"name\":\"App Discovery Traffic\"&#125;]\",</span><br><span class=\"line\">    os: \"[&#123;\"id\":3,\"name\":\"Android with AOKP\"&#125;,&#123;\"id\":5,\"name\":\"Android with Cyanogen Mod\"&#125;,&#123;\"id\":6,\"name\":\"Android with LiquidSmooth\"&#125;,&#123;\"id\":7,\"name\":\"Android with MIUI\"&#125;]\",</span><br><span class=\"line\">    body: \"123123123\"</span><br><span class=\"line\">    inventory_title: \"NOVA多功能卷髮棒B\",</span><br><span class=\"line\">    shop: \"[&#123;\"userid\":77912776,\"name\":\"myShop\"&#125;]\"</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h2 id=\"五-扩展补充\"><a class=\"markdownIt-Anchor\" href=\"#五-扩展补充\"></a> 五、扩展补充</h2>\n<p>需要对多个不同表创建不同的检索的使用方法：</p>\n<p>只需创建不同的索引源和索引，相应的对应好即可。</p>\n<p>实际项目中的 sphinx 完整配置：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source keyword</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  type      = mysql</span><br><span class=\"line\">  sql_host  = localhost</span><br><span class=\"line\">  sql_user  = root</span><br><span class=\"line\">  sql_pass  = 123</span><br><span class=\"line\">  sql_db    = goods</span><br><span class=\"line\">  sql_query_pre   = SET NAMES utf8</span><br><span class=\"line\"></span><br><span class=\"line\">  sql_query  = \\</span><br><span class=\"line\">    SELECT id,status,keyword \\</span><br><span class=\"line\">    FROM t_keyword</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 设置查询条件</span></span><br><span class=\"line\">  sql_attr_uint = status</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">index keyword</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  source  = keyword</span><br><span class=\"line\">  path  = D:/UPUPW_ANK_W64/Database/data_sphinx/keyword</span><br><span class=\"line\">  charset_type  = utf-8</span><br><span class=\"line\">  charset_table = 0..9, A..Z-&gt;a..z, _, a..z, U+410..U+42F-&gt;U+430..U+44F, U+430..U+44F</span><br><span class=\"line\">  ngram_len = 1</span><br><span class=\"line\">  ngram_chars = U+3000..U+2FA1F</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">source collection</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  type        = mysql</span><br><span class=\"line\">  sql_host    = localhost</span><br><span class=\"line\">  sql_user    = root</span><br><span class=\"line\">  sql_pass    = 123456</span><br><span class=\"line\">  sql_db      = goods</span><br><span class=\"line\">  sql_query   = \\</span><br><span class=\"line\">    SELECT id, status, title, offerid, keyword, searchid, fromname \\</span><br><span class=\"line\">    FROM t_collection</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">index collection</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  source    = collection</span><br><span class=\"line\">  path      = D:/UPUPW_ANK_W64/Database/data_sphinx/collection</span><br><span class=\"line\">  mlock     = 0</span><br><span class=\"line\">  morphology      = none</span><br><span class=\"line\">  min_word_len    = 1</span><br><span class=\"line\">  charset_table   = 0..9, A..Z-&gt;a..z, _, a..z, U+410..U+42F-&gt;U+430..U+44F, U+430..U+44F</span><br><span class=\"line\">  min_prefix_len  = 0</span><br><span class=\"line\">  min_infix_len   = 1</span><br><span class=\"line\">  ngram_len   = 1</span><br><span class=\"line\">  ngram_chars   = U+3000..U+2FA1F</span><br><span class=\"line\">  html_strip    = 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">source goods</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  type        = mysql</span><br><span class=\"line\">  sql_host    = localhost</span><br><span class=\"line\">  sql_user    = root</span><br><span class=\"line\">  sql_pass    = 123455</span><br><span class=\"line\">  sql_db      = goods</span><br><span class=\"line\">  sql_query   = \\</span><br><span class=\"line\">    SELECT id, status, name, seller_region, keywords, offerid, searchid, detailid, keyword, fromname \\</span><br><span class=\"line\">    FROM t_goods</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">index goods</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  source    = goods</span><br><span class=\"line\">  path      = D:/UPUPW_ANK_W64/Database/data_sphinx/goods</span><br><span class=\"line\">  mlock     = 0</span><br><span class=\"line\">  morphology      = none</span><br><span class=\"line\">  min_word_len    = 1</span><br><span class=\"line\">  charset_table   = 0..9, A..Z-&gt;a..z, _, a..z, U+410..U+42F-&gt;U+430..U+44F, U+430..U+44F</span><br><span class=\"line\">  min_prefix_len  = 0</span><br><span class=\"line\">  min_infix_len   = 1</span><br><span class=\"line\">  ngram_len       = 1</span><br><span class=\"line\">  ngram_chars     = U+3000..U+2FA1F</span><br><span class=\"line\">  html_strip      = 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">indexer</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  mem_limit   = 128M</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">searchd</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  listen    = 9312</span><br><span class=\"line\">  <span class=\"comment\">#listen   = 9306:mysql41</span></span><br><span class=\"line\">  log   = D:/UPUPW_ANK_W64/Logs/sphinx.log</span><br><span class=\"line\">  query_log       = D:/UPUPW_ANK_W64/Modules/Sphinx/log/query.log</span><br><span class=\"line\">  read_timeout    = 5</span><br><span class=\"line\">  client_timeout  = 300</span><br><span class=\"line\">  max_children    = 30</span><br><span class=\"line\">  persistent_connections_limit  = 30</span><br><span class=\"line\">  pid_file        = D:/UPUPW_ANK_W64/Modules/Sphinx/log/searchd.pid</span><br><span class=\"line\">  seamless_rotate = 1</span><br><span class=\"line\">  preopen_indexes = 1</span><br><span class=\"line\">  unlink_old      = 1</span><br><span class=\"line\">  max_packet_size = 8M</span><br><span class=\"line\">  max_filters     = 256</span><br><span class=\"line\">  max_filter_values = 4096</span><br><span class=\"line\">  max_batch_queries = 32</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"六-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#六-参考资料\"></a> 六、参考资料：</h2>\n<blockquote>\n<p>PHP 官方手册使用 Sphinx 介绍：</p>\n</blockquote>\n<p><a href=\"http://www.php.net/manual/zh/book.sphinx.php\" target=\"_blank\" rel=\"noopener\">http://www.php.net/manual/zh/book.sphinx.php</a></p>\n<blockquote>\n<p>sphinx 安装：</p>\n</blockquote>\n<p><a href=\"https://blog.csdn.net/huang2017/article/details/69665057\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/huang2017/article/details/69665057</a></p>\n<p><a href=\"https://blog.csdn.net/huang2017/article/details/69666154\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/huang2017/article/details/69666154</a></p>\n<blockquote>\n<p>将 sphinx 服务添加到 windows 服务：</p>\n</blockquote>\n<p><code>./searchd.exe --install -c sphinx.conf --servicename s</code></p>\n<p><a href=\"https://blog.csdn.net/design321/article/details/8895712\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/design321/article/details/8895712</a></p>\n<blockquote>\n<p>sphinx 使用：</p>\n</blockquote>\n<p><a href=\"https://blog.csdn.net/u010837612/article/details/70827481\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u010837612/article/details/70827481</a></p>\n<blockquote>\n<p>中文支持（linux 系统）</p>\n</blockquote>\n<p><a href=\"http://www.xuejiehome.com/blread-1283.html\" target=\"_blank\" rel=\"noopener\">http://www.xuejiehome.com/blread-1283.html</a></p>\n<blockquote>\n<p>中文支持（windows 系统）— 默认已能支持中文</p>\n</blockquote>\n<p><a href=\"http://www.phpernote.com/php-template-framework/284.html\" target=\"_blank\" rel=\"noopener\">http://www.phpernote.com/php-template-framework/284.html</a></p>\n<blockquote>\n<p>其他</p>\n</blockquote>\n<p><a href=\"https://my.oschina.net/guyson/blog/283576\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/guyson/blog/283576</a></p>\n","site":{"data":{}},"excerpt":"<p>由于业务需要，需要做类似淘宝商城商品检索的功能，对于数据量很大的情况，MySQL 查询的效率损耗很大，需要使用专门的索引引擎进行搜索查询，实现功能，对于和 PHP 和 Mysql 的结合的索引引擎中， xunsearch 和 sphinx 是较为著名的，但由于 xunsearch 服务器端不支持 windows，所以暂且先考虑 sphinx 的使用。sphinx 目前已支持简体中文、繁体中文和英文的检索，不需要额外安装插件支持。</p>","more":"<h2 id=\"一-安装windows\"><a class=\"markdownIt-Anchor\" href=\"#一-安装windows\"></a> 一、安装（Windows）</h2>\n<h3 id=\"1官方下载\"><a class=\"markdownIt-Anchor\" href=\"#1官方下载\"></a> <strong>1.官方下载</strong></h3>\n<p>Sphinx 下载地址： <a href=\"http://sphinxsearch.com/downloads/release/\" target=\"_blank\" rel=\"noopener\">下载</a></p>\n<h3 id=\"2解压并重命名\"><a class=\"markdownIt-Anchor\" href=\"#2解压并重命名\"></a> <strong>2.解压并重命名</strong></h3>\n<p>此处下载版本为<code>3.0.3</code>，将 sphinx 文件夹命名为<code>sphinx</code></p>\n<h3 id=\"3文件夹目录介绍\"><a class=\"markdownIt-Anchor\" href=\"#3文件夹目录介绍\"></a> <strong>3.文件夹目录介绍</strong></h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sphinx</span><br><span class=\"line\">--api(各语言支持的api)</span><br><span class=\"line\">--bin（二进制程序）</span><br><span class=\"line\">--doc（文档说明）</span><br><span class=\"line\">--etc（配置文件：conf/sql）</span><br><span class=\"line\">--misc</span><br><span class=\"line\">--src</span><br><span class=\"line\"><span class=\"comment\"># 手动创建以下两个文件夹</span></span><br><span class=\"line\">--data</span><br><span class=\"line\">--log</span><br></pre></td></tr></table></figure>\n<h3 id=\"4设置配置文件\"><a class=\"markdownIt-Anchor\" href=\"#4设置配置文件\"></a> <strong>4.设置配置文件</strong></h3>\n<p>(1)将<code>sphinx/etc/sphinx-min.conf.dist</code>文件复制到<code>sphinx/bin/</code>目录下，并重命名为<code>sphinx.conf</code></p>\n<p>注：<code>sphinx/etc/sphinx.conf.dist</code>为带注释的详细的</p>\n<p>(2)设置配置项</p>\n<p>主要是以下为配置函数：</p>\n<blockquote>\n<p>source src1{} — 设置索引源(数据库的基本配置和数据表)</p>\n</blockquote>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 连接的数据库类型</span></span><br><span class=\"line\"><span class=\"attr\">type</span> = mysql</span><br><span class=\"line\"><span class=\"comment\"># 连接的数据库主机</span></span><br><span class=\"line\"><span class=\"attr\">sql_host</span> = localhost</span><br><span class=\"line\"><span class=\"comment\"># 数据库连接的用户名，默认为test</span></span><br><span class=\"line\"><span class=\"attr\">sql_user</span> = root</span><br><span class=\"line\"><span class=\"comment\"># 数据库连接的密码，默认为空</span></span><br><span class=\"line\"><span class=\"attr\">sql_pass</span> =<span class=\"number\">123123</span></span><br><span class=\"line\"><span class=\"comment\"># 连接的数据库名称，默认为test</span></span><br><span class=\"line\"><span class=\"attr\">sql_db</span> = test</span><br><span class=\"line\"><span class=\"comment\"># 连接数据库的端口号，默认为3306</span></span><br><span class=\"line\"><span class=\"attr\">sql_port</span> = <span class=\"number\">3306</span></span><br><span class=\"line\"><span class=\"comment\"># 操作的数据表执行的查询语句</span></span><br><span class=\"line\"><span class=\"attr\">sql_query</span> = \\</span><br><span class=\"line\">    SELECT id, group_id, UNIX_TIMESTAMP(date_added) AS date_added, title, content \\</span><br><span class=\"line\">    FROM documents</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置查询过滤条件</span></span><br><span class=\"line\"><span class=\"attr\">sql_attr_uint</span> = group_id</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>index test1{} — 索引文件</p>\n</blockquote>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定索引源</span></span><br><span class=\"line\"><span class=\"attr\">source</span> = src1</span><br><span class=\"line\"><span class=\"comment\"># 索引数据存放目录，默认为/var/data/test1</span></span><br><span class=\"line\"><span class=\"attr\">path</span> = D:\\Service\\sphinx\\data\\test1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置中文匹配</span></span><br><span class=\"line\"><span class=\"attr\">min_word_len</span>    = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\"># 指定字符集（已废弃）</span></span><br><span class=\"line\"><span class=\"attr\">charset_type</span>    = utf-<span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"comment\"># 指定utf-8的编码表</span></span><br><span class=\"line\"><span class=\"attr\">charset_table</span>   = <span class=\"number\">0</span>..<span class=\"number\">9</span>, A..Z-&gt;a..z, _, a..z, U+<span class=\"number\">410</span>..U+<span class=\"number\">42</span>F-&gt;U+<span class=\"number\">430</span>..U+<span class=\"number\">44</span>F, U+<span class=\"number\">430</span>..U+<span class=\"number\">44</span>F</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">min_prefix_len</span> = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"attr\">min_infix_len</span> = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开启中文分词支持</span></span><br><span class=\"line\"><span class=\"attr\">ngram_len</span> = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\"># 需要分词的字符</span></span><br><span class=\"line\"><span class=\"attr\">ngram_chars</span> = U+<span class=\"number\">3000</span>..U+<span class=\"number\">2</span>FA1F</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>index test1stemmed : test1{}</p>\n</blockquote>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 主要需要修改的配置项，默认为/var/data/test1stemmed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">path</span> = D:\\Service\\sphinx\\data\\test1stemmed</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>index rt{}</p>\n</blockquote>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 主要需要修改的配置项，默认为/var/data/rt</span></span><br><span class=\"line\"><span class=\"attr\">path</span> = D:\\Service\\sphinx\\data\\rt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定对哪些字段进行匹配</span></span><br><span class=\"line\"><span class=\"attr\">rt_field</span> = name</span><br><span class=\"line\"><span class=\"attr\">rt_field</span> = ename</span><br><span class=\"line\"><span class=\"attr\">rt_field</span> = setmeal</span><br><span class=\"line\"><span class=\"attr\">rt_field</span> = category</span><br><span class=\"line\"><span class=\"attr\">rt_field</span> = country</span><br><span class=\"line\"><span class=\"attr\">rt_field</span> = traffic</span><br><span class=\"line\"><span class=\"attr\">rt_field</span> = body</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">rt_attr_uint</span> = <span class=\"literal\">off</span>erid</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>searchd{}</p>\n</blockquote>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 自定义日志文件位置</span></span><br><span class=\"line\"><span class=\"attr\">log</span> = D:\\Service\\sphinx\\log\\searchd.log</span><br><span class=\"line\"><span class=\"attr\">query_log</span> = D:\\Service\\sphinx\\log\\query.log</span><br><span class=\"line\"><span class=\"attr\">pid_file</span> = D:\\Service\\sphinx\\log\\searchd.pid</span><br></pre></td></tr></table></figure>\n<p>以下几项不需要修改默认值，即可直接使用</p>\n<blockquote>\n<p>source src1throttled : src1{}</p>\n</blockquote>\n<p>分布式索引的相关配置，没有则可以不修改</p>\n<blockquote>\n<p>index dist1{}<br>\nindexer{}<br>\ncommon{}</p>\n</blockquote>\n<p>【注】：主要的配置是<code>source</code> <code>index</code> <code>indexer</code> <code>searchd</code>, 其他几项可以不需要</p>\n<h3 id=\"5操作数据库导入样例数据\"><a class=\"markdownIt-Anchor\" href=\"#5操作数据库导入样例数据\"></a> <strong>5.操作数据库，导入样例数据</strong></h3>\n<p>(1)进入到 mysql 命令行，执行命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\phpStudy\\PHPTutorial\\MySQL\\bin&gt;mysql -uroot -p</span><br><span class=\"line\">Enter password: *************</span><br><span class=\"line\">Welcome to the MySQL monitor.  Commands end with ; or \\g.</span><br><span class=\"line\">Your MySQL connection id is 12</span><br><span class=\"line\">Server version: 5.5.53 MySQL Community Server (GPL)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; use <span class=\"built_in\">test</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 恢复样例数据到数据库</span></span><br><span class=\"line\">mysql&gt; <span class=\"built_in\">source</span> /D:\\Service\\sphinx\\etc/eaxmple.sql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新增两个数据表，documents和tags</span></span><br><span class=\"line\">mysql&gt; show tables;</span><br><span class=\"line\">documents</span><br><span class=\"line\">tags</span><br></pre></td></tr></table></figure>\n<h3 id=\"6生成索引文件\"><a class=\"markdownIt-Anchor\" href=\"#6生成索引文件\"></a> <strong>6.生成索引文件</strong></h3>\n<p>cmd 命令行进入到<code>sphinx/bin/</code>目录下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成索引文件,本地重新构建--rotate</span></span><br><span class=\"line\">&gt; indexer.exe --config sphinx.conf --all --rotate</span><br><span class=\"line\">Sphinx 3.0.3-dev (commit facc3fb)</span><br><span class=\"line\">Copyright (c) 2001-2018, Andrew Aksyonoff</span><br><span class=\"line\">Copyright (c) 2008-2016, Sphinx Technologies Inc (http://sphinxsearch.com)</span><br><span class=\"line\"></span><br><span class=\"line\">using config file <span class=\"string\">'sphinx.conf'</span>...</span><br><span class=\"line\">WARNING: key <span class=\"string\">'docinfo'</span> was permanently removed from Sphinx configuration. Refer to documentation <span class=\"keyword\">for</span> details.</span><br><span class=\"line\">WARNING: key <span class=\"string\">'dict'</span> was permanently removed from Sphinx configuration. Refer to documentation <span class=\"keyword\">for</span> details.</span><br><span class=\"line\">WARNING: key <span class=\"string\">'mva_updates_pool'</span> was permanently removed from Sphinx configuration. Refer to documentation <span class=\"keyword\">for</span> details.</span><br><span class=\"line\">indexing index <span class=\"string\">'test1'</span>...</span><br><span class=\"line\">collected 4 docs, 0.0 MB</span><br><span class=\"line\">sorted 0.0 Mhits, 100.0% <span class=\"keyword\">done</span></span><br><span class=\"line\">total 4 docs, 0.2 Kb</span><br><span class=\"line\">total 1.0 sec, 0.2 Kb/sec, 3 docs/sec</span><br><span class=\"line\">indexing index <span class=\"string\">'test1stemmed'</span>...</span><br><span class=\"line\">collected 4 docs, 0.0 MB</span><br><span class=\"line\">sorted 0.0 Mhits, 100.0% <span class=\"keyword\">done</span></span><br><span class=\"line\">total 4 docs, 0.2 Kb</span><br><span class=\"line\">total 1.0 sec, 0.2 Kb/sec, 3 docs/sec</span><br><span class=\"line\">skipping non-plain index <span class=\"string\">'dist1'</span>...</span><br><span class=\"line\">skipping non-plain index <span class=\"string\">'rt'</span>...</span><br></pre></td></tr></table></figure>\n<p>【注】新版 sphinx 的 bin 目录下已经没有 search.exe 程序，所以不能直接在命令行执行返回结果，只能使用 api 接口返回数据。</p>\n<h3 id=\"7开启搜索服务保持后台运行\"><a class=\"markdownIt-Anchor\" href=\"#7开启搜索服务保持后台运行\"></a> <strong>7.开启搜索服务，保持后台运行</strong></h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; searchd.exe --pidfile</span><br><span class=\"line\"></span><br><span class=\"line\">[Tue May 15 09:02:14.690 2018] [7776] using config file <span class=\"string\">'./sphinx.conf'</span>...</span><br><span class=\"line\">listening on all interfaces, port=9312</span><br><span class=\"line\">listening on all interfaces, port=9306</span><br><span class=\"line\">Sphinx 3.0.3-dev (commit facc3fb)</span><br><span class=\"line\">Copyright (c) 2001-2018, Andrew Aksyonoff</span><br><span class=\"line\">Copyright (c) 2008-2016, Sphinx Technologies Inc (http://sphinxsearch.com)</span><br></pre></td></tr></table></figure>\n<h2 id=\"二-php-开启-sphinx-扩展\"><a class=\"markdownIt-Anchor\" href=\"#二-php-开启-sphinx-扩展\"></a> 二、PHP 开启 sphinx 扩展</h2>\n<h3 id=\"1下载-php_sphinx-扩展-前往\"><a class=\"markdownIt-Anchor\" href=\"#1下载-php_sphinx-扩展-前往\"></a> <strong>1.下载 php_sphinx 扩展</strong>: <a href=\"https://pecl.php.net/package/sphinx/1.3.2/windows\" target=\"_blank\" rel=\"noopener\">前往</a></h3>\n<p>具体需要下载的版本需要查看 phpinfo 信息:</p>\n<pre><code>Architecture         ==》x86/x64\nPHP Extension Build  ==》NTS/NS\n</code></pre>\n<p>下载并解压后，将<code>php_sphinx.dll</code>文件放到 php/ext 目录下</p>\n<h3 id=\"2修改-phpini-配置文件\"><a class=\"markdownIt-Anchor\" href=\"#2修改-phpini-配置文件\"></a> <strong>2.修改 php.ini 配置文件</strong></h3>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在 Dynamic Extensions 列表中添加php_sphinx扩展</span></span><br><span class=\"line\"><span class=\"attr\">extension</span>=php_sphinx.dll</span><br></pre></td></tr></table></figure>\n<p>修改后重启 apache 服务</p>\n<h3 id=\"3在-phpinfophp-输出的信息中查看-sphinx-扩展是否安装成功\"><a class=\"markdownIt-Anchor\" href=\"#3在-phpinfophp-输出的信息中查看-sphinx-扩展是否安装成功\"></a> <strong>3.在 phpinfo.php 输出的信息中查看 sphinx 扩展是否安装成功</strong></h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">            sphinx</span><br><span class=\"line\">sphinx support\t enabled</span><br><span class=\"line\">Version\t         1.3.2</span><br><span class=\"line\">Revision\t $Revision$</span><br></pre></td></tr></table></figure>\n<h2 id=\"三-代码实现\"><a class=\"markdownIt-Anchor\" href=\"#三-代码实现\"></a> 三、代码实现</h2>\n<h3 id=\"1样例数据表testdocuments记录\"><a class=\"markdownIt-Anchor\" href=\"#1样例数据表testdocuments记录\"></a> 1.样例数据表<code>test.documents</code>记录：</h3>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>group_id</th>\n<th>group_id2</th>\n<th style=\"text-align:left\">date_added</th>\n<th style=\"text-align:left\">title</th>\n<th style=\"text-align:left\">content</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>5</td>\n<td style=\"text-align:left\">2018-05-14 09:12:25</td>\n<td style=\"text-align:left\">test one</td>\n<td style=\"text-align:left\">this is my test document number one. also checking search within phrases.</td>\n</tr>\n<tr>\n<td>2</td>\n<td>1</td>\n<td>6</td>\n<td style=\"text-align:left\">2018-05-14 09:12:25</td>\n<td style=\"text-align:left\">test two</td>\n<td style=\"text-align:left\">this is my test document number two</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2</td>\n<td>7</td>\n<td style=\"text-align:left\">2018-05-14 09:12:25</td>\n<td style=\"text-align:left\">another doc</td>\n<td style=\"text-align:left\">this is another group</td>\n</tr>\n<tr>\n<td>4</td>\n<td>2</td>\n<td>8</td>\n<td style=\"text-align:left\">2018-05-14 09:12:25</td>\n<td style=\"text-align:left\">doc number four</td>\n<td style=\"text-align:left\">this is to test groups</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"2php-代码实现\"><a class=\"markdownIt-Anchor\" href=\"#2php-代码实现\"></a> 2.PHP 代码实现</h3>\n<h4 id=\"一般实现\"><a class=\"markdownIt-Anchor\" href=\"#一般实现\"></a> <strong>一般实现</strong></h4>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">require</span>(<span class=\"string\">'sphinxapi.php'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">$sphinx = <span class=\"keyword\">new</span> SphinxClient();</span><br><span class=\"line\">$sphinx-&gt;SetServer(<span class=\"string\">'localhost'</span>,<span class=\"number\">9312</span>);</span><br><span class=\"line\">$sphinx-&gt;SetMatchMode(SPH_MATCH_ANY);</span><br><span class=\"line\">$sphinx-&gt;SetArrayResult ( <span class=\"keyword\">true</span> );</span><br><span class=\"line\">$res = $sphinx-&gt;Query($_GET[<span class=\"string\">'key'</span>],<span class=\"string\">'*'</span>);</span><br><span class=\"line\">var_dump($res);</span><br></pre></td></tr></table></figure>\n<h4 id=\"thinkphp5-使用介绍\"><a class=\"markdownIt-Anchor\" href=\"#thinkphp5-使用介绍\"></a> <strong>thinkphp5 使用介绍</strong></h4>\n<p>1.将<code>sphinxapi.php</code>文件放到<code>extend</code>目录下</p>\n<p>2.在控制器方法中使用（<code>app/api/index</code>）</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $sphinx = <span class=\"keyword\">new</span> \\SphinxClient();</span><br><span class=\"line\">    <span class=\"comment\">// sphinx的主机名和端口</span></span><br><span class=\"line\">    $sphinx-&gt;SetServer(<span class=\"string\">'localhost'</span>,<span class=\"number\">9312</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 匹配模式</span></span><br><span class=\"line\">    $sphinx-&gt;SetMatchMode(SPH_MATCH_ANY);</span><br><span class=\"line\">    <span class=\"comment\">// 设置返回结果集为php数组格式</span></span><br><span class=\"line\"></span><br><span class=\"line\">    $sphinx-&gt;SetArrayResult ( <span class=\"keyword\">true</span> );</span><br><span class=\"line\">    $res = $sphinx-&gt;Query(input(<span class=\"string\">'key'</span>),<span class=\"string\">'*'</span>);</span><br><span class=\"line\">    var_dump($res);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3.url 访问：<br>\n<code>http://localhost/mypro/api/index/test?key=test</code></p>\n<p>4.输出数据</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\web\\COD\\api\\application\\api\\controller\\Index.php:21:</span><br><span class=\"line\">array (size=10)</span><br><span class=\"line\">  'error' =&gt; string '' (length=0)</span><br><span class=\"line\">  'warning' =&gt; string '' (length=0)</span><br><span class=\"line\">  'status' =&gt; int 0</span><br><span class=\"line\">  'fields' =&gt;</span><br><span class=\"line\">    // 查询显示的字段名</span><br><span class=\"line\">    array (size=2)</span><br><span class=\"line\">      0 =&gt; string 'title' (length=5)</span><br><span class=\"line\">      1 =&gt; string 'content' (length=7)</span><br><span class=\"line\">  'attrs' =&gt;</span><br><span class=\"line\">    array (size=2)</span><br><span class=\"line\">      'group_id' =&gt; string '1' (length=1)</span><br><span class=\"line\">      'date_added' =&gt; string '2' (length=1)</span><br><span class=\"line\">  'matches' =&gt;</span><br><span class=\"line\">    // 匹配的结果，返回匹配记录的id和权重（权重越大，匹配条件越多）</span><br><span class=\"line\">    array (size=3)</span><br><span class=\"line\">      0 =&gt;</span><br><span class=\"line\">        array (size=3)</span><br><span class=\"line\">          'id' =&gt; string '1' (length=1)</span><br><span class=\"line\">          'weight' =&gt; int 2421</span><br><span class=\"line\">          'attrs' =&gt;</span><br><span class=\"line\">            array (size=2)</span><br><span class=\"line\">              ...</span><br><span class=\"line\">      1 =&gt;</span><br><span class=\"line\">        array (size=3)</span><br><span class=\"line\">          'id' =&gt; string '2' (length=1)</span><br><span class=\"line\">          'weight' =&gt; int 2421</span><br><span class=\"line\">          'attrs' =&gt;</span><br><span class=\"line\">            array (size=2)</span><br><span class=\"line\">              ...</span><br><span class=\"line\">      2 =&gt;</span><br><span class=\"line\">        array (size=3)</span><br><span class=\"line\">          'id' =&gt; string '4' (length=1)</span><br><span class=\"line\">          'weight' =&gt; int 1442</span><br><span class=\"line\">          'attrs' =&gt;</span><br><span class=\"line\">            array (size=2)</span><br><span class=\"line\">              ...</span><br><span class=\"line\">  'total' =&gt; int 3</span><br><span class=\"line\">  'total_found' =&gt; int 3</span><br><span class=\"line\">  'time' =&gt; float 0</span><br><span class=\"line\">  'words' =&gt;</span><br><span class=\"line\">    array (size=1)</span><br><span class=\"line\">      'test' =&gt;</span><br><span class=\"line\">        array (size=2)</span><br><span class=\"line\">          'docs' =&gt; int 6</span><br><span class=\"line\">          'hits' =&gt; int 10</span><br></pre></td></tr></table></figure>\n<h2 id=\"四-在-thinkphp5-项目中应用\"><a class=\"markdownIt-Anchor\" href=\"#四-在-thinkphp5-项目中应用\"></a> 四、在 ThinkPHP5 项目中应用</h2>\n<h3 id=\"1修改配置信息sphinxbinsphinxconf\"><a class=\"markdownIt-Anchor\" href=\"#1修改配置信息sphinxbinsphinxconf\"></a> <strong>1.修改配置信息</strong><code>sphinx/bin/sphinx.conf</code></h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source src1&#123;</span><br><span class=\"line\"><span class=\"comment\"># 省略其他配置</span></span><br><span class=\"line\"><span class=\"attr\">sql_user</span>  = root</span><br><span class=\"line\"><span class=\"attr\">sql_pass</span>  = <span class=\"number\">123123</span></span><br><span class=\"line\"><span class=\"attr\">sql_db</span>    = shopMall</span><br><span class=\"line\"><span class=\"attr\">sql_query</span> = \\</span><br><span class=\"line\">  SELECT id,offerid, name, ename, setmeal, category, country, traffic, os, body, inventory_title, shop \\</span><br><span class=\"line\">  FROM i_offer</span><br><span class=\"line\"><span class=\"attr\">sql_attr_uint</span> = <span class=\"literal\">off</span>erid</span><br><span class=\"line\"><span class=\"comment\"># 省略其他配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index rt</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  type  = rt</span><br><span class=\"line\">  path  = D:\\Service\\sphinx\\data\\rt</span><br><span class=\"line\"></span><br><span class=\"line\">  rt_field  = name</span><br><span class=\"line\">  rt_field  = ename</span><br><span class=\"line\">  rt_field  = setmeal</span><br><span class=\"line\">  rt_field  = category</span><br><span class=\"line\">  rt_field  = country</span><br><span class=\"line\">  rt_field  = traffic</span><br><span class=\"line\">  rt_field  = body</span><br><span class=\"line\"></span><br><span class=\"line\">  rt_attr_uint  = offerid</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2生成索引并开启-searchd-服务\"><a class=\"markdownIt-Anchor\" href=\"#2生成索引并开启-searchd-服务\"></a> <strong>2.生成索引，并开启 searchd 服务</strong></h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成项目索引</span></span><br><span class=\"line\">sphinx/bin/indexer.exe --config sphinx.conf --all</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开启服务 &amp;表示后台开启，不用保持窗口执行状态</span></span><br><span class=\"line\">sphinx/bin/searchd.exe &amp;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3程序实现\"><a class=\"markdownIt-Anchor\" href=\"#3程序实现\"></a> <strong>3.程序实现</strong></h3>\n<p>sphinx 查询返回的结果并不是我们需要的显示结果，所以还需要对结果进行处理，从而获取到我们需要的结果。</p>\n<p>默认 sphinx 返回的数据中包含 id 信息是和数据记录的信息是相关的，所以我们需要通过 id 到数据库中查询相关信息。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $s = <span class=\"keyword\">new</span> \\SphinxClient;</span><br><span class=\"line\">    $s-&gt;setServer(<span class=\"string\">\"localhost\"</span>, <span class=\"number\">9312</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 作为数组返回</span></span><br><span class=\"line\">    $s-&gt;SetArrayResult(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 匹配格式  任意匹配</span></span><br><span class=\"line\">    $s-&gt;setMatchMode(SPH_MATCH_ANY);</span><br><span class=\"line\">    $s-&gt;setMaxQueryTime(<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"comment\">// input()表示接收用户传过来的数据</span></span><br><span class=\"line\">    $result = $s-&gt;query(input(<span class=\"string\">'key'</span>),<span class=\"string\">'*'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> json($result);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4测试实现\"><a class=\"markdownIt-Anchor\" href=\"#4测试实现\"></a> <strong>4.测试实现</strong></h3>\n<p>访问 url：<br>\n<code>http://localhost/mypro/api/index/test?key=官方</code></p>\n<p>返回结果：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\web\\COD\\api\\application\\api\\controller\\Index.php:22:</span><br><span class=\"line\">array (size=10)</span><br><span class=\"line\">  'error' =&gt; string '' (length=0)</span><br><span class=\"line\">  'warning' =&gt; string '' (length=0)</span><br><span class=\"line\">  'status' =&gt; int 0</span><br><span class=\"line\">  'fields' =&gt;</span><br><span class=\"line\">    array (size=10)</span><br><span class=\"line\">      0 =&gt; string 'name' (length=4)</span><br><span class=\"line\">      1 =&gt; string 'ename' (length=5)</span><br><span class=\"line\">      2 =&gt; string 'setmeal' (length=7)</span><br><span class=\"line\">      3 =&gt; string 'category' (length=8)</span><br><span class=\"line\">      4 =&gt; string 'country' (length=7)</span><br><span class=\"line\">      5 =&gt; string 'traffic' (length=7)</span><br><span class=\"line\">      6 =&gt; string 'os' (length=2)</span><br><span class=\"line\">      7 =&gt; string 'body' (length=4)</span><br><span class=\"line\">      8 =&gt; string 'inventory_title' (length=15)</span><br><span class=\"line\">      9 =&gt; string 'shop' (length=4)</span><br><span class=\"line\">  'attrs' =&gt;</span><br><span class=\"line\">    array (size=1)</span><br><span class=\"line\">      'offerid' =&gt; string '1' (length=1)</span><br><span class=\"line\">  'matches' =&gt;</span><br><span class=\"line\">    array (size=6)</span><br><span class=\"line\">      0 =&gt;</span><br><span class=\"line\">        array (size=3)</span><br><span class=\"line\">          'id' =&gt; string '36' (length=2)</span><br><span class=\"line\">          'weight' =&gt; int 4667</span><br><span class=\"line\">          'attrs' =&gt;</span><br><span class=\"line\">            array (size=1)</span><br><span class=\"line\">              ...</span><br><span class=\"line\">      1 =&gt;</span><br><span class=\"line\">        array (size=3)</span><br><span class=\"line\">          'id' =&gt; string '19' (length=2)</span><br><span class=\"line\">          'weight' =&gt; int 2611</span><br><span class=\"line\">          'attrs' =&gt;</span><br><span class=\"line\">            array (size=1)</span><br><span class=\"line\">              ...</span><br><span class=\"line\">      // 此处省略部分数据</span><br><span class=\"line\">  'total' =&gt; int 6</span><br><span class=\"line\">  'total_found' =&gt; int 6</span><br><span class=\"line\">  'time' =&gt; float 0</span><br><span class=\"line\">  'words' =&gt;</span><br><span class=\"line\">    array (size=2)</span><br><span class=\"line\">      '官' =&gt;</span><br><span class=\"line\">        array (size=2)</span><br><span class=\"line\">          'docs' =&gt; int 14</span><br><span class=\"line\">          'hits' =&gt; int 16</span><br><span class=\"line\">      '方' =&gt;</span><br><span class=\"line\">        array (size=2)</span><br><span class=\"line\">          'docs' =&gt; int 70</span><br><span class=\"line\">          'hits' =&gt; int 94</span><br></pre></td></tr></table></figure>\n<p>对结果进行处理，支持过滤查询<code>SetFilter()</code>。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $filterkey = <span class=\"string\">'status'</span>;</span><br><span class=\"line\">    $filtervalue = <span class=\"string\">\"1\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    $sphinx = <span class=\"keyword\">new</span> \\SphinxClient;</span><br><span class=\"line\">    $sphinx-&gt;setServer(<span class=\"string\">\"localhost\"</span>, <span class=\"number\">9312</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 进行过滤查询</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">empty</span>($filterkey)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 只在status==1的记录中检索</span></span><br><span class=\"line\">        $filterRes = $sphinx-&gt;SetFilter($filterkey, [$filtervalue]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!$filterRes) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 作为数组返回</span></span><br><span class=\"line\">    $sphinx-&gt;SetArrayResult(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 匹配格式  任意匹配</span></span><br><span class=\"line\">    $sphinx-&gt;setMatchMode(SPH_MATCH_ANY);</span><br><span class=\"line\">    $sphinx-&gt;setMaxQueryTime(<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"comment\">// input()表示接收用户传过来的数据</span></span><br><span class=\"line\">    $result = $sphinx-&gt;query(input(<span class=\"string\">'key'</span>),<span class=\"string\">'*'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 避免没有匹配记录时报错</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">empty</span>($result[<span class=\"string\">'matches'</span>])) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $result = $result[<span class=\"string\">'matches'</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 返回数组中指定的id列, 返回结果为单列数组</span></span><br><span class=\"line\">    $result = array_column($result, <span class=\"string\">'id'</span>);</span><br><span class=\"line\">    $list = model(<span class=\"string\">'offer'</span>)</span><br><span class=\"line\">    -&gt;field(<span class=\"string\">'offerid, status, name, ename, setmeal, category, country, traffic, os, body, inventory_title, shop'</span>)</span><br><span class=\"line\">    -&gt;where(<span class=\"keyword\">array</span>(<span class=\"string\">'id'</span> =&gt; <span class=\"keyword\">array</span>(<span class=\"string\">'in'</span>, $result)))</span><br><span class=\"line\">    -&gt;select();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> json($list);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>返回结果</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    offerid: 2332302,</span><br><span class=\"line\">    status: 1,</span><br><span class=\"line\">    name: \"【官方站】減震隱形增高鞋墊（安全有效~秒增高5公分~）\",</span><br><span class=\"line\">    ename: \"zenggaoxiedian\",</span><br><span class=\"line\">    setmeal: \"日韓超夯，氣墊隱形增高墊，輕鬆增高5公分，透氣減震，抗菌防臭，藝人最愛！【可拆分，自由裁剪，均碼35-44可用】【超殺998三雙】\",</span><br><span class=\"line\">    category: \"[&#123;\"id\":6,\"name\":\"其他\"&#125;,&#123;\"id\":7,\"name\":\"商城\"&#125;,&#123;\"id\":8,\"name\":\"家庭用品\\n\"&#125;]\",</span><br><span class=\"line\">    country: \"[&#123;\"id\":11,\"name\":\"American Samoa\"&#125;,&#123;\"id\":1,\"name\":\"Andorra\"&#125;,&#123;\"id\":8,\"name\":\"Angola\"&#125;,&#123;\"id\":5,\"name\":\"Anguilla\"&#125;,&#123;\"id\":10,\"name\":\"Argentina\"&#125;,&#123;\"id\":7,\"name\":\"Armenia\"&#125;,&#123;\"id\":12,\"name\":\"Austria\"&#125;]\",</span><br><span class=\"line\">    traffic: \"[&#123;\"id\":2,\"name\":\"16+\"&#125;,&#123;\"id\":3,\"name\":\"3G\\/4G\"&#125;,&#123;\"id\":4,\"name\":\"Adult\"&#125;]\",</span><br><span class=\"line\">    os: \"[&#123;\"id\":1,\"name\":\"3DS System Software\"&#125;,&#123;\"id\":2,\"name\":\"Android\"&#125;,&#123;\"id\":13,\"name\":\"BeOS\"&#125;,&#123;\"id\":16,\"name\":\"CentOS\"&#125;]\",</span><br><span class=\"line\">    body: \"123123123\",</span><br><span class=\"line\">    inventory_title: \"隱形增高鞋墊B\",</span><br><span class=\"line\">    shop: \"[&#123;\"userid\":77912776,\"name\":\"myShop\"&#125;]\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    offerid: 3308032,</span><br><span class=\"line\">    status: 1,</span><br><span class=\"line\">    name: \"【官方站】電熱造型梳\",</span><br><span class=\"line\">    ename: \"zaoxingshu\",</span><br><span class=\"line\">    setmeal: \"長/短髮都適用！好梳好上手！亂翹髮尾一秒聽話！【人氣爆红款美髮救星】限時特價，加NT$300再得1件！！！\",</span><br><span class=\"line\">    category: \"[&#123;\"id\":2,\"name\":\"美容\"&#125;,&#123;\"id\":4,\"name\":\"日用品\"&#125;,&#123;\"id\":6,\"name\":\"其他\"&#125;,&#123;\"id\":8,\"name\":\"家庭用品\\n\"&#125;]\",</span><br><span class=\"line\">    country: \"[&#123;\"id\":6,\"name\":\"Albania\"&#125;,&#123;\"id\":4,\"name\":\"Antigua And Barbuda\"&#125;]\",</span><br><span class=\"line\">    traffic: \"[&#123;\"id\":3,\"name\":\"3G\\/4G\"&#125;,&#123;\"id\":5,\"name\":\"Adult Content\"&#125;,&#123;\"id\":6,\"name\":\"App Discovery Traffic\"&#125;]\",</span><br><span class=\"line\">    os: \"[&#123;\"id\":3,\"name\":\"Android with AOKP\"&#125;,&#123;\"id\":5,\"name\":\"Android with Cyanogen Mod\"&#125;,&#123;\"id\":6,\"name\":\"Android with LiquidSmooth\"&#125;,&#123;\"id\":7,\"name\":\"Android with MIUI\"&#125;]\",</span><br><span class=\"line\">    body: \"123123123\"</span><br><span class=\"line\">    inventory_title: \"NOVA多功能卷髮棒B\",</span><br><span class=\"line\">    shop: \"[&#123;\"userid\":77912776,\"name\":\"myShop\"&#125;]\"</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h2 id=\"五-扩展补充\"><a class=\"markdownIt-Anchor\" href=\"#五-扩展补充\"></a> 五、扩展补充</h2>\n<p>需要对多个不同表创建不同的检索的使用方法：</p>\n<p>只需创建不同的索引源和索引，相应的对应好即可。</p>\n<p>实际项目中的 sphinx 完整配置：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source keyword</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  type      = mysql</span><br><span class=\"line\">  sql_host  = localhost</span><br><span class=\"line\">  sql_user  = root</span><br><span class=\"line\">  sql_pass  = 123</span><br><span class=\"line\">  sql_db    = goods</span><br><span class=\"line\">  sql_query_pre   = SET NAMES utf8</span><br><span class=\"line\"></span><br><span class=\"line\">  sql_query  = \\</span><br><span class=\"line\">    SELECT id,status,keyword \\</span><br><span class=\"line\">    FROM t_keyword</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 设置查询条件</span></span><br><span class=\"line\">  sql_attr_uint = status</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">index keyword</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  source  = keyword</span><br><span class=\"line\">  path  = D:/UPUPW_ANK_W64/Database/data_sphinx/keyword</span><br><span class=\"line\">  charset_type  = utf-8</span><br><span class=\"line\">  charset_table = 0..9, A..Z-&gt;a..z, _, a..z, U+410..U+42F-&gt;U+430..U+44F, U+430..U+44F</span><br><span class=\"line\">  ngram_len = 1</span><br><span class=\"line\">  ngram_chars = U+3000..U+2FA1F</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">source collection</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  type        = mysql</span><br><span class=\"line\">  sql_host    = localhost</span><br><span class=\"line\">  sql_user    = root</span><br><span class=\"line\">  sql_pass    = 123456</span><br><span class=\"line\">  sql_db      = goods</span><br><span class=\"line\">  sql_query   = \\</span><br><span class=\"line\">    SELECT id, status, title, offerid, keyword, searchid, fromname \\</span><br><span class=\"line\">    FROM t_collection</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">index collection</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  source    = collection</span><br><span class=\"line\">  path      = D:/UPUPW_ANK_W64/Database/data_sphinx/collection</span><br><span class=\"line\">  mlock     = 0</span><br><span class=\"line\">  morphology      = none</span><br><span class=\"line\">  min_word_len    = 1</span><br><span class=\"line\">  charset_table   = 0..9, A..Z-&gt;a..z, _, a..z, U+410..U+42F-&gt;U+430..U+44F, U+430..U+44F</span><br><span class=\"line\">  min_prefix_len  = 0</span><br><span class=\"line\">  min_infix_len   = 1</span><br><span class=\"line\">  ngram_len   = 1</span><br><span class=\"line\">  ngram_chars   = U+3000..U+2FA1F</span><br><span class=\"line\">  html_strip    = 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">source goods</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  type        = mysql</span><br><span class=\"line\">  sql_host    = localhost</span><br><span class=\"line\">  sql_user    = root</span><br><span class=\"line\">  sql_pass    = 123455</span><br><span class=\"line\">  sql_db      = goods</span><br><span class=\"line\">  sql_query   = \\</span><br><span class=\"line\">    SELECT id, status, name, seller_region, keywords, offerid, searchid, detailid, keyword, fromname \\</span><br><span class=\"line\">    FROM t_goods</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">index goods</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  source    = goods</span><br><span class=\"line\">  path      = D:/UPUPW_ANK_W64/Database/data_sphinx/goods</span><br><span class=\"line\">  mlock     = 0</span><br><span class=\"line\">  morphology      = none</span><br><span class=\"line\">  min_word_len    = 1</span><br><span class=\"line\">  charset_table   = 0..9, A..Z-&gt;a..z, _, a..z, U+410..U+42F-&gt;U+430..U+44F, U+430..U+44F</span><br><span class=\"line\">  min_prefix_len  = 0</span><br><span class=\"line\">  min_infix_len   = 1</span><br><span class=\"line\">  ngram_len       = 1</span><br><span class=\"line\">  ngram_chars     = U+3000..U+2FA1F</span><br><span class=\"line\">  html_strip      = 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">indexer</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  mem_limit   = 128M</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">searchd</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  listen    = 9312</span><br><span class=\"line\">  <span class=\"comment\">#listen   = 9306:mysql41</span></span><br><span class=\"line\">  log   = D:/UPUPW_ANK_W64/Logs/sphinx.log</span><br><span class=\"line\">  query_log       = D:/UPUPW_ANK_W64/Modules/Sphinx/log/query.log</span><br><span class=\"line\">  read_timeout    = 5</span><br><span class=\"line\">  client_timeout  = 300</span><br><span class=\"line\">  max_children    = 30</span><br><span class=\"line\">  persistent_connections_limit  = 30</span><br><span class=\"line\">  pid_file        = D:/UPUPW_ANK_W64/Modules/Sphinx/log/searchd.pid</span><br><span class=\"line\">  seamless_rotate = 1</span><br><span class=\"line\">  preopen_indexes = 1</span><br><span class=\"line\">  unlink_old      = 1</span><br><span class=\"line\">  max_packet_size = 8M</span><br><span class=\"line\">  max_filters     = 256</span><br><span class=\"line\">  max_filter_values = 4096</span><br><span class=\"line\">  max_batch_queries = 32</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"六-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#六-参考资料\"></a> 六、参考资料：</h2>\n<blockquote>\n<p>PHP 官方手册使用 Sphinx 介绍：</p>\n</blockquote>\n<p><a href=\"http://www.php.net/manual/zh/book.sphinx.php\" target=\"_blank\" rel=\"noopener\">http://www.php.net/manual/zh/book.sphinx.php</a></p>\n<blockquote>\n<p>sphinx 安装：</p>\n</blockquote>\n<p><a href=\"https://blog.csdn.net/huang2017/article/details/69665057\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/huang2017/article/details/69665057</a></p>\n<p><a href=\"https://blog.csdn.net/huang2017/article/details/69666154\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/huang2017/article/details/69666154</a></p>\n<blockquote>\n<p>将 sphinx 服务添加到 windows 服务：</p>\n</blockquote>\n<p><code>./searchd.exe --install -c sphinx.conf --servicename s</code></p>\n<p><a href=\"https://blog.csdn.net/design321/article/details/8895712\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/design321/article/details/8895712</a></p>\n<blockquote>\n<p>sphinx 使用：</p>\n</blockquote>\n<p><a href=\"https://blog.csdn.net/u010837612/article/details/70827481\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u010837612/article/details/70827481</a></p>\n<blockquote>\n<p>中文支持（linux 系统）</p>\n</blockquote>\n<p><a href=\"http://www.xuejiehome.com/blread-1283.html\" target=\"_blank\" rel=\"noopener\">http://www.xuejiehome.com/blread-1283.html</a></p>\n<blockquote>\n<p>中文支持（windows 系统）— 默认已能支持中文</p>\n</blockquote>\n<p><a href=\"http://www.phpernote.com/php-template-framework/284.html\" target=\"_blank\" rel=\"noopener\">http://www.phpernote.com/php-template-framework/284.html</a></p>\n<blockquote>\n<p>其他</p>\n</blockquote>\n<p><a href=\"https://my.oschina.net/guyson/blog/283576\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/guyson/blog/283576</a></p>"},{"title":"【实战】Tp5+小程序(三)--微信登录与令牌","date":"2018-07-11T08:26:58.000Z","_content":"\nThinkPHP5 从入门到深入学习，结合实战项目深入理解 ThinkPHP5 的特性和使用方法。深入学习 api 开发，学习微信登录和令牌的相关知识，并理解微信登录流程，完成与微信开放 api 之间的数据交互，完善项目的相应功能。\n理解第三方登录授权的 code 和 token 交互过程。\n\n<!--more-->\n\n### 9-1 初识 Token - 意义与作用\n\n说明：目前这种情况下，用户只要知道了系统的接口的形式，就可以直接访问，并获取数据，而大多数情况下，我们需要对用户身份进行验证，如：需要用户登录后才能访问的接口，以及需要管理员才能访问的接口等。\n\n1.获取令牌\n\n```info\n客户端=》(账号、密码)=》getToken 《==》 账号、密码、Token、Auth\n```\n\n描述：客户端携带账号和密码信息，调用`getToken`接口，经过处理验证后，返回账号、密码、Token、Auth 等信息。\n\n2.访问接口\n\n```info\n客户端=》(Token)=》下单接口 《==》 账号、密码、Token、Auth\n```\n\n验证：1.是否合法 2.是否有效 3.是否有操作权限\n\n3.上面两个过程的 getToken 接口和下单接口就是被保护的接口，需要验证通过才能让用户访问。\n\n### 9-2 微信登录流程\n\n1.微信身份登录体系\n\n![微信登录流程](![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchef1j72j30n10b9mza.jpg)\n\n2.Token 在接口验证时的使用流程\n\n![Token访问下单接口](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchef3nc9j30gx058aao.jpg)\n\n### 9-3 实现 Token 身份权限体系\n\n1.获取 token 的请求使用 post 方法[安全性方面考虑]\n\n2.将复杂的业务分层到`service`层[实现分层思想]\n\n使用模型处理数据库 CRUD 相关的操作，对于不操作数据库的复杂业务，将其封装到 Service 目录下，实现分层处理的思想，Service 层是在 Model 层之上的业务层。\n\n3.基础实现\n\n1）控制器的定义\n\n```php\n// api/controller/v1/Token [注意命名空间]\npublic function getToken($code = '') {}\n```\n\n2）路由定义\n\n```php\n// route.php\nRoute::post('api/:version/token/user', 'api/:version.Token/getToken');\n```\n\n3）验证器校验\n\n```php\n// api/controller/v1/Token\n(new TokenGet())->goCheck();\n```\n\n```php\n// api/validate/TokenGet\nprotected $rule = [\n    // 在验证器基类中定义isNotEmpty()方法\n    'code' => 'require|isNotEmpty'\n];\n\nprotected $message = [\n    'code' => 'code必填！'\n];\n```\n\n### 9-4/5/6/7 实现 Token 身份权限体系\n\n1.获取微信生成的 code 码，并将其作为参数，传递给微信接口来获得 openid 和 access_token 等相关信息[openid/session_key]\n\n```php\n// api/controller/v1/Token\n$userToken = new UserToken($code);\n$token = $userToken->get();\n```\n\n**2.封装 Service 层，实现 Token 令牌的获取**[重点]\n\n1） 配置微信小程序相关参数[app_id app_secret login_url]\n\n2.1.1 在配置文件中设置微信小程序的相关参数\n\n```php\n// config/extra/wx.php\nreturn [\n    'app_id' => 'XXXXXXXXX',\n    'app_secret' => 'XXXXXXXXX',\n    'login_url' => \"https://api.weixin.qq.com/sns/jscode2session?\" . \"appid=%s&secret=%s&js_code=%s&grant_type=authorization_code\"\n];\n```\n\n2.1.2 创建 Service 层的 UserToken 处理类，定义参数为私有属性\n\n```php\n// api/service/UserToken.php\nnamespace app\\api\\service;\n\nuse app\\lib\\exception\\WechatException;\nuse app\\lib\\exception\\TokenException;\n\nclass UserToken extends Token\n{\n    protected $code;\n    protected $appid;\n    protected $appSecret;\n    protected $loginUrl;\n}\n```\n\n2） 拼接参数，并使用 curl 模拟 http 请求微信服务器，并获取返回结果\n\n```php\n// api/service/UserToken.php\npublic function __construct($code)\n{\n    $this->code      = $code;\n    $this->appid     = config('wx.app_id');\n    $this->appSecret = config('wx.app_secret');\n    $this->loginUrl  = sprintf(\n        config('wx.login_url'),\n        $this->appid, $this->appSecret, $this->code\n    );\n}\n\npublic function get()\n{\n    $result = curl_get($this->loginUrl);\n}\n```\n\n在公共方法文件中定义 curl 模拟 http 请求的方法：\n\n```php\n// application/common.php\nfunction curl_get($url, &$httpCode = 0)\n{\n    //1、初始化curl\n    $curl = curl_init();\n\n    //2、告诉curl,请求的地址\n    curl_setopt($curl, CURLOPT_URL, $url);\n    //3、将请求的数据返回，而不是直接输出\n    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n\n    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);\n    curl_setopt($curl, CURLOPT_CONNECTTIMEOUT, 10);\n\n    $fileContents = curl_exec($curl); // 执行操作\n    curl_close($curl); // 关键CURL会话\n\n    return $fileContents; // 返回数据\n}\n```\n\n3） 请求微信接口失败[微信内部错误/程序编写出错]的异常处理\n\n```php\n// api/service/UserToken.php get()\n$wxResult = json_decode($result, true);\n\nif (empty($wxResult)) {\n    // 经验总结得：如果返回的结果为空[没有返回错误信息和错误代码]，则是微信服务器接口的问题，直接抛出异常一颗\n    throw new \\Exception('获取session_key及openID异常，微信内部错误');\n} else {\n    $loginFail = isset($wxResult['errcode']);\n    // 程序传递的参数出错时，微信服务器会返回错误码和错误提示信息\n    if ($loginFail) {\n        $this->processLoginErr($wxResult);\n    }\n}\n```\n\n调用微信 Token 请求接口调用出错时的处理：\n\n```php\n// api/service/UserToken.php\nprivate function processLoginErr($wxResult)\n{\n    throw new WechatException(\n        [\n            'msg'       => $wxResult['errmsg'],\n            'errorCode' => $wxResult['errcode'],\n        ]\n    );\n}\n```\n\n4） **成功获取微信接口返回数据后的操作[存储 openid、生成令牌、写入缓存、返回令牌]**\n\n```php\n// api/service/UserToken.php get()\nreturn $this->grantToken($wxResult);\n```\n\n2.4.1 存储 openid\n\n```php\n// api/service/UserToken.php\nprivate function grantToken($wxResult)\n{\n    $now = time();\n    // 1.拿到openid\n    $openid     = $wxResult['openid'];\n    // $sessionKey = $wxResult['session_key'];\n\n    // 2.查看数据库中该openid的记录是否已经存在[同一个用户的openid始终保持不变]\n    $user = model('user')->getByOpenId($openid);\n\n    // 3.如果存在，则不处理； 如果不存在，那么新增一条user记录\n    if ($user) {\n        $uid = $user->id;\n    } else {\n        $uid = $this->newUser($openid);\n    }\n}\n```\n\n根据 openid 查询是否已经存在该用户\n\n```php\n// api/model/User.php\npublic static function getByOpenId($openid)\n{\n    $user = self::where('openid', '=', $openid)->find();\n\n    return $user;\n}\n```\n\n创建用户\n\n```php\n// api/service/UserToken.php\nprivate function newUser($openid)\n{\n    $user = model('user')->create([\n       'openid' => $openid\n    ]);\n\n    return $user->id;\n}\n```\n\n2.4.2 准备缓存数据(缓存的值)\n\n[微信返回数据(openid|session_key) + uid(用户服务器中保存的用户记录 id) + scope(用户权限，值越大，权限越高) ]\n\n```php\n// api/service/UserToken.php  grantToken()\n// 4.生成令牌，准备缓存数据，写入缓存 [获取用户的相关信息]\n// 4.1 准备缓存数据\n$cachedValue = $this->prepareCachedValue($wxResult, $uid);\n```\n\n准备缓存数据值的方法[缓存的值]\n\n```php\n// api/service/UserToken.php\nprivate function prepareCachedValue($wxResult, $uid)\n{\n    $cachedValue = $wxResult;\n    $cachedValue['uid'] = $uid;\n    $cachedValue['scope'] = 16; // 数值越大，权限越多\n\n    return $cachedValue;\n}\n```\n\n2.4.3 写入缓存[令牌+微信返回数据+有效期]\n\n```php\n// api/service/UserToken.php  grantToken()\n// 4.2 写入缓存，并返回令牌\n$token = $this->saveToCache($cachedValue);\n```\n\n2.4.3.1 生成令牌(缓存的键) [随机字符串+时间戳+盐]\n\n```php\n// 令牌是用户程序生成的随机字符串，与微信服务器无关\n// api/service/UserToken.php  saveToCache()\n$key = self::generateToken();\n```\n\n在服务器层构建 Token 基类，处理用户登录 Token 和后续的其他 Token 信息[service 下 UserToken 继承该基类]\n\n```php\n// api/service/Token.php\npublic static function generateToken()\n{\n    // 用三组字符串，进行md5加密 [加强安全性]\n    // 1.32个字符组成一组随机字符串\n    $randChars = getRandChar(32);\n    // 2.时间戳\n    $timestamp = $_SERVER['REQUEST_TIME_FLOAT'];\n    // 3.盐\n    $salt = config('secure.token_salt');\n\n    return md5($randChars.$timestamp.$salt);\n}\n```\n\n公共方法中定义生成指定长度的随机字符串\n\n```php\n// application/common.php\nfunction getRandChar($length)\n{\n    $str    = null;\n    $strPol = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n    $max    = strlen($strPol) - 1;\n\n    for ($i = 0; $i < $length; $i++) {\n        $str .= $strPol[rand(0, $max)];\n    }\n\n    return $str;\n}\n```\n\n创建安全配置文件[盐：随机字符串]\n\n```php\n// extra/secure.php\nreturn [\n    'token_salt' => 'E7epHZhrTfgQ'\n];\n```\n\n2.4.3.2 配置文件中设置 cache 缓存的有效期\n\n````php\n创建安全配置文件[盐：随机字符串]\n\n```php\n// extra/setting.php\n'token_expire_in' => 7200\n````\n\n2.4.3.3 创建缓存文件\n\n```php\nprivate function saveToCache($cachedValue)\n{\n    $key = self::generateToken();\n    $value = json_encode($cachedValue);\n    // 设置缓存失效时间\n    $expire_in = config('setting.token_expire_in');\n\n    $request = cache($key, $value, $expire_in);\n    if (!$request) {\n        // 令牌缓存出错\n        throw new TokenException([\n            'msg' => '服务器缓存异常',\n            'errorCode' => 10005\n        ]);\n    }\n\n    return $key;\n}\n```\n\n2.4.4 返回令牌\n\n```php\n// api/service/UserToken.php  grantToken()\n// 4.3 写入缓存，并返回令牌\nreturn $token;\n```\n\n3.异常处理类\n\n3.1 微信内部错误[直接抛出异常]\n\n3.2 微信接口调用出错[微信相关异常处理类 WechatException]\n\n```php\nclass WechatException extends BaseException\n{\n    public $code = 404;\n    public $msg = '微信服务器接口调用失败';\n    public $errorCode = 999;\n}\n```\n\n3.3 缓存 Token 出错[Token 异常处理类 TokenException]\n\n```php\nclass TokenException extends BaseException\n{\n    public $code = 401;\n    public $msg = 'Token已过期或无效Token';\n    public $errorCode = 10001;\n}\n```\n\n### 9-8 获取请求参数 code 并调用 PHP 接口[借助微信开发工具]\n\n#### 1.微信开发者工具中配置：\n\n> 设置好 app_key 后，需要将 “详情” 中的 “不校验合法域名、web-view(业务域名)、TLS 版本以及 HTTPS 证书” 勾选上（在本地测试，没有远程访问的服务器或远程服务器访问的域名没有 https 证书）\n\n#### 2.小程序代码：\n\n(1) 在 config 中定义 restUrl\n\n```javascript\n// Protoss/utils/config.js [设置本地测试的域名基地址]\nConfig.restUrl = \"http://mypro.com/api/v1/\";\n```\n\n(2)在登录方法中获取 code\n\n```javascript\n// 在小程序登录调用wx.login()方法中输出code，然后使用接口请求工具将code作为post请求的参数，进行调用\n\n// Protoss/utils/token.js getTokenFromServer()\nwx.login({\n  success: function(res) {\n    console.log(\"code: \" + res.code);\n  }\n});\n```\n\n#### 3.请求 PHP 接口获取 Token\n\n```javascript\n// 引用使用es6的module引入和定义\n// 全局变量以g_开头\n// 私有函数以_开头\n\nimport { Config } from \"config.js\";\n\nclass Token {\n  constructor() {\n    this.tokenUrl = Config.restUrl + \"token/user\";\n  }\n\n  verify() {\n    var token = wx.getStorageSync(\"token\");\n    if (!token) {\n      this.getTokenFromServer();\n    }\n  }\n\n  getTokenFromServer(callBack) {\n    var that = this;\n    wx.login({\n      success: function(res) {\n        console.log(\"code: \" + res.code);\n        wx.request({\n          url: that.tokenUrl,\n          method: \"POST\",\n          data: {\n            code: res.code\n          },\n          success: function(res) {\n            console.log(\"token： \" + res.data.token);\n            wx.setStorageSync(\"token\", res.data.token);\n            callBack && callBack(res.data.token);\n          }\n        });\n      }\n    });\n  }\n}\n\nexport { Token };\n```\n\n**【补充说明】**：\n\n(1) 需要调试时，将 XDEBUG 参数拼接到`this.tokenUrl`即可\n\n(2) 如果没有输出 code, 需要关闭开发者工具后再重新启动，会自动调用该方法，并输出 code\n[调用过生成的 token 已经被存储到浏览器的 Storage 中，便不会再调用 Token 请求接口，从而不产生 code]\n\n### 9-9 商品详情接口\n\n(1) 定义控制器方法 `getOne($id)`\n\n(2) 定义路由 `api/:version/product/:id`\n\n(3) 模型类实现[隐藏部分字段、设置数据表关联、实现数据库查询]\n\n> Product => properties => ProductProperty => 商品属性值[品名、口味、产地、保质期]\n> Product => imgs => Image => 商品主图\n> ProductImage => imgs.imgUrl => Image => 商品详情图\n\n(4) 异常处理信息提示\n\n```php\n[\n    'msg'       => '当前产品无详情',\n    'errorCode' => 20001\n]\n```\n\n### 9-10-1 路由变量规则\n\n1.路由匹配规则在项目中的应用。\n\n```php\nRoute::get('api/:version/product/recent', 'api/:version.Product/getRecent');\nRoute::get('api/:version/product/:id', 'api/:version.Product/getOne');\n```\n\n2.存在的问题\n\n目前调用接口都不存在问题，但是当将`:id`行放到`recent`行之前后，在调用`recent`路由时，则会因为优先匹配`:id`对应的路由，\n此时则会因为参数校验不通过而报错。\n\n3.解决之道：\n\n对路由匹配规则进行限定，设置变量规则，对于`:id`行，限定只有当参数为数值时才匹配到当前行。即设置 `$id`的变量规则\n\n变量规则：为变量用正则的方式指定变量规则，弥补了动态变量无法限制具体的类型问题，并且支持全局规则设置。\n\n4.代码实现[设置变量规则]\n\n```php\nRoute::get('api/:version/product/:id', 'api/:version.Product/getOne', [], ['id'=>'\\d+']);\n```\n\n### 9-10-2 路由分组\n\n对路由配置文件中，具有相同路由前缀的路由归为同一路由组，例如：\n\n对于几个对应产品信息的路由，\n\n```php\nRoute::get('api/:version/product/recent', 'api/:version.Product/getRecent');\nRoute::get('api/:version/product/by_category', 'api/:version.Product/getAllInCategory');\nRoute::get('api/:version/product/:id', 'api/:version.Product/getOne');\n```\n\n可以分组到产品组路由下，\n\n```php\n// 闭包方式注册路由分组\nRoute::group('api/:version/product', function() {\n    Route::get('recent', 'api/:version.Product/getRecent');\n    Route::get('by_category', 'api/:version.Product/getAllInCategory');\n    Route::get(':id', 'api/:version.Product/getOne', [], ['id' => '\\d+']);\n});\n```\n\n或者：\n\n```php\n// 数组方式注册路由分组\nRoute::group('api/:version/product', [\n    'recent' => ['api/:version.Product/getRecent'],\n    'by_category' => ['api/:version.Product/getAllInCategory'],\n    ':id' => ['api/:version.Product/getOne', [], ['id' => '\\d+']]\n],['method' => 'get']);\n```\n\n路由分组的方式定义路由，执行的效率会比一般形式高一点。\n\n【注】路由分组的公共路由定义时，不能在末尾加`/`，否则会报控制器不存在的错误\n\n### 9-11 闭包函数构建查询器\n\n1.完成的商品详情的数据信息格式为：\n\n```info\n{\n\"id\": 11,\n\"name\": \"贵妃笑 100克\",\n\"price\": \"0.01\",\n\"stock\": 994,\n\"main_img_url\": \"http://mypro.com/static/images/product-dryfruit-a@6.png\",\n\"summary\": null,\n\"img_id\": 39,\n\"imgs\":[\n    {\n        \"id\": 4,\n        \"order\": 1,\n        \"img_url\":{\n            \"url\": \"http://mypro.com/static/images/detail-1@1-dryfruit.png\"\n        }\n    },\n    {\n        \"id\": 5,\n        \"order\": 2,\n        \"img_url\":{\n            \"url\": \"http://mypro.com/static/images/detail-2@1-dryfruit.png\"\n        }\n    },\n],\n\"properties\":[\n    {\n        \"id\": 1,\n        \"name\": \"品名\",\n        \"detail\": \"杨梅\"\n    },\n]\n}\n```\n\n2.问题：其中`imgs`的值为每个商品下的所有图片介绍，所以所有图片之间一定存在一定的顺序，其中`imgs`数组下的数据中存在`order`排序字段，如何对`imgs`的数据通过`order`进行排序？\n\n3.【答】：使用闭包函数构建查询器【相当于拼接 sql】。\n\n```php\n$product = self::with([\n        'imgs' => function($query) {\n            $query->with(['imgUrl'])->order('order asc');\n        }\n    ])\n    ->with(['properties'])\n    ->find($id);\n```\n\n4.思路分析：\n\n（1）要对 imgs 下的数据进行处理，需要获取到每组数据，然后对`order`字段进行排序。【通过闭包函数获取到每组数据】\n\n（2）除了要对每组数据进行按`order`排序，还需要处理`img_url`。【通过 with 链式操作处理`img_url`】\n\n5.关于闭包函数的理解：\n\n```php\n'imgs' => function($query) {\n    $query->with(['imgUrl'])->order('order asc');\n}\n```\n\n对于数组`imgs`，通过闭包函数，获取到每组数据，其中`$query`即作为参数接收每组数据的值，然后再对每组数据的`img_url`通过 with 进行数据关联。\n\n### 9-12 用户收货地址\n\n1.需求说明：\n\n用户收货地址接口信息需要进行身份验证，登录用户只能查看和操作自己的地址信息，未登录用户不能访问。\n\n为简化操作，当前将用户和用户地址的关联关系设定为一对一。\n\n2.思考点：\n\n（1）对登录状态的判断：\n\n当用户访问小程序时，调用`wx.login()`方法，并生成`code`,后台接口拿到 code 后生成 token，并用 token 以及配置的`app_id`和`app_secret`请求微信接口，并获取微信返回的`openid`等信息，存储到缓存中\n[以 token 为键，uid|wxResult|scope 组成的 json 数据为值]\n\n所以，创建或修改用户地址信息时，在处理地址信息和用户信息的关联时，使用的用户信息，应当是当前登录用户的信息，而不能是客户端传递的用户信息参数[可能传递有误，导致误操作到其他用户的地址信息]\n\n实现一定程度上的接口保护。\n\n（2）传入参数的检验\n\n验证器校验往往只能验证某个字段或某些字段的合法性，而客户端可能传入的参数比需要的参数多，或者传入了`uid`或者`user_id`，导致更新时覆盖了其他用户的数据信息，对系统的安全性造成影响，\n所以，在接收客户端传入参数时，需要进行多余字段的过滤。\n\n（3）对手机号的验证\n\n正则表达式的应用场景，正则模式`^1(3|4|5|6|7|8)[0-9]\\d{8}$^`\n\n（4）**通过模型关联，实现用户地址的新增和更新**【新】\n\n通过关联模型方法，创建数据\n\n```php\n// 新增\n$user->address()->save($dataArray);\n```\n\n通过关联模型属性，对当前属性对应的记录进行更新\n\n```php\n// 更新\n$user->address->save($dataArray);\n```\n\n（5）模型关联方法的选择：\n\n模型关联方法的区分：\n\n    有主键关联无主键 =》 belongsTo\n    无主键关联有主键 =》 hasOne|hasMany\n\n（6）HTTP 状态码\n\n200：操作成功，服务器已成功处理了请求。说明：[如果是对您的 robots.txt 文件显示此状态码，则表示 Googlebot 已成功检索到该文件](https://blog.csdn.net/u014028956/article/details/47125403)\n\n201：创建成功，表示服务器执行成功，并且创建了新的资源\n\n设置接口调用成功后的状态码标识：\n\n```php\nreturn json(new SuccessMessage(), 201);\n```\n\n### 9-12-1 通过令牌获取用户标识\n\n(1)定义控制器方法 `createOrUpdate()`\n\n(2)定义路由 `api/:version/address`\n\n(3)验证器验证用户输入数据 [`name`, `mobile`, `province`, `city`, `country`, `detail`]\n\n(4)异常处理信息提示\n\n当数据不合法时抛出异常，而当操作成功时，也需要返回相应的数据信息。当前项目将抛出的成功信息也放在异常处理类库下。\n\n### 9-12-2 面向对象的方式封装获取 uid 方法\n\n1.通过令牌 token 即可获取缓存中对应的用户信息，而缓存中的信息包括`uid` `scope` `wxResult`[`openid` `session_key`]\n\n而在 http 请求时，token 保存在 header 头信息中，获取头信息中`token`的方法：\n\n`$token = Request::instance()->header('token');`\n\n2.通过 json 键值对的键，获取 cache 数据\n\n`Cache::get($token)`\n\n3.增强项目的扩展性，可将通过 token 获取变量的方法进行封装。\n\n4.代码实现：\n\n```php\npublic static function getCurrentTokenVar($key)\n{\n    $token = Request::instance()->header('token');\n    $vars  = Cache::get($token);\n    if ( ! $vars) {\n        throw new TokenException();\n    } else {\n        if (!is_array($vars)) {\n            $vars = json_decode($vars, true);\n        }\n\n        if (isset($vars[$key])) {\n            return $vars[$key];\n        } else {\n            throw new Exception('尝试获取的Token变量不存在');\n        }\n    }\n}\n\npublic static function getCurrentUid()\n{\n    $uid = self::getCurrentTokenVar('uid');\n    return $uid;\n}\n```\n\n### 9-12-3 模型新增和更新\n\n通过用户模型，进行面向对象方式的新增和更新\n\n（1）user 模型定义 address()关联方法，获取到用户地址信息，当用户地址信息不存在时，也通过**关联模型方法**，保存地址信息\n\n```php\n// 新增\n$user->address()->save($dataArray);\n```\n\n（2）user 模型通过 address()关联方法关联 user_address 数据表中对应的用户地址信息，通过关联获取的数据仍然可以作为模型的属性值使用，\n再通过**关联模型属性**，对当前属性对应的记录进行更新 [包含主键 id]\n\n```php\n// 更新\n$user->address->save($dataArray);\n```\n\n### 9-12-4 参数过滤\n\n封装处理客户端传入的参数的方法，由于当前用户的信息是通过缓存获取的，为避免用户传入的参数造成错误修改，所以需要对客户端传入数据进行过滤，\n如果携带用户 id 参数，则抛出异常，不再继续处理。除此之外，对于传入的无效、多余数据，进行过滤，仅接收验证器需要验证的字段信息。\n\n```php\npublic function getDataByRule($params)\n{\n    if (isset($params['uid']) || isset($params['user_id'])) {\n        throw new ParameterException([\n            'msg' => '参数中包含非法的参数名user_id或者uid'\n        ]);\n    }\n    $newArray = [];\n    foreach ($this->rule as $key => $value) {\n        $newArray[$key] = $params[$key];\n    }\n\n    return $newArray;\n}\n```\n\n### 9-12-5 接口测试\n\n1.需要的参数\n\n- token: header 请求头 [通过微信小程序的开发者工具]\n\n- address 字段信息 [`name`, `mobile`, `province`, `city`, `country`, `detail`]\n\n2.返回的数据\n\n```json\n{\n  \"code\": 201,\n  \"msg\": \"ok\",\n  \"errorCode\": 0\n}\n```\n\n并且通过设置返回值为带状态码的 json 数据，`json(new SuccessMessage(), 201)`，可将 http 的状态码也设置为`201`\n","source":"_posts/php-practice-wx-tp5-3.md","raw":"---\ntitle: 【实战】tp5+小程序(三)--微信登录与令牌\ndate: 2018-07-11 16:26:58\ntags:\n  - thinkphp5\n  - 微信小程序\ncategory:\n  - 【PHP框架】\n---\n\nThinkPHP5 从入门到深入学习，结合实战项目深入理解 ThinkPHP5 的特性和使用方法。深入学习 api 开发，学习微信登录和令牌的相关知识，并理解微信登录流程，完成与微信开放 api 之间的数据交互，完善项目的相应功能。\n理解第三方登录授权的 code 和 token 交互过程。\n\n<!--more-->\n\n### 9-1 初识 Token - 意义与作用\n\n说明：目前这种情况下，用户只要知道了系统的接口的形式，就可以直接访问，并获取数据，而大多数情况下，我们需要对用户身份进行验证，如：需要用户登录后才能访问的接口，以及需要管理员才能访问的接口等。\n\n1.获取令牌\n\n```info\n客户端=》(账号、密码)=》getToken 《==》 账号、密码、Token、Auth\n```\n\n描述：客户端携带账号和密码信息，调用`getToken`接口，经过处理验证后，返回账号、密码、Token、Auth 等信息。\n\n2.访问接口\n\n```info\n客户端=》(Token)=》下单接口 《==》 账号、密码、Token、Auth\n```\n\n验证：1.是否合法 2.是否有效 3.是否有操作权限\n\n3.上面两个过程的 getToken 接口和下单接口就是被保护的接口，需要验证通过才能让用户访问。\n\n### 9-2 微信登录流程\n\n1.微信身份登录体系\n\n![微信登录流程](![](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchef1j72j30n10b9mza.jpg)\n\n2.Token 在接口验证时的使用流程\n\n![Token访问下单接口](https://ws1.sinaimg.cn/large/005EgYNMgy1fuchef3nc9j30gx058aao.jpg)\n\n### 9-3 实现 Token 身份权限体系\n\n1.获取 token 的请求使用 post 方法[安全性方面考虑]\n\n2.将复杂的业务分层到`service`层[实现分层思想]\n\n使用模型处理数据库 CRUD 相关的操作，对于不操作数据库的复杂业务，将其封装到 Service 目录下，实现分层处理的思想，Service 层是在 Model 层之上的业务层。\n\n3.基础实现\n\n1）控制器的定义\n\n```php\n// api/controller/v1/Token [注意命名空间]\npublic function getToken($code = '') {}\n```\n\n2）路由定义\n\n```php\n// route.php\nRoute::post('api/:version/token/user', 'api/:version.Token/getToken');\n```\n\n3）验证器校验\n\n```php\n// api/controller/v1/Token\n(new TokenGet())->goCheck();\n```\n\n```php\n// api/validate/TokenGet\nprotected $rule = [\n    // 在验证器基类中定义isNotEmpty()方法\n    'code' => 'require|isNotEmpty'\n];\n\nprotected $message = [\n    'code' => 'code必填！'\n];\n```\n\n### 9-4/5/6/7 实现 Token 身份权限体系\n\n1.获取微信生成的 code 码，并将其作为参数，传递给微信接口来获得 openid 和 access_token 等相关信息[openid/session_key]\n\n```php\n// api/controller/v1/Token\n$userToken = new UserToken($code);\n$token = $userToken->get();\n```\n\n**2.封装 Service 层，实现 Token 令牌的获取**[重点]\n\n1） 配置微信小程序相关参数[app_id app_secret login_url]\n\n2.1.1 在配置文件中设置微信小程序的相关参数\n\n```php\n// config/extra/wx.php\nreturn [\n    'app_id' => 'XXXXXXXXX',\n    'app_secret' => 'XXXXXXXXX',\n    'login_url' => \"https://api.weixin.qq.com/sns/jscode2session?\" . \"appid=%s&secret=%s&js_code=%s&grant_type=authorization_code\"\n];\n```\n\n2.1.2 创建 Service 层的 UserToken 处理类，定义参数为私有属性\n\n```php\n// api/service/UserToken.php\nnamespace app\\api\\service;\n\nuse app\\lib\\exception\\WechatException;\nuse app\\lib\\exception\\TokenException;\n\nclass UserToken extends Token\n{\n    protected $code;\n    protected $appid;\n    protected $appSecret;\n    protected $loginUrl;\n}\n```\n\n2） 拼接参数，并使用 curl 模拟 http 请求微信服务器，并获取返回结果\n\n```php\n// api/service/UserToken.php\npublic function __construct($code)\n{\n    $this->code      = $code;\n    $this->appid     = config('wx.app_id');\n    $this->appSecret = config('wx.app_secret');\n    $this->loginUrl  = sprintf(\n        config('wx.login_url'),\n        $this->appid, $this->appSecret, $this->code\n    );\n}\n\npublic function get()\n{\n    $result = curl_get($this->loginUrl);\n}\n```\n\n在公共方法文件中定义 curl 模拟 http 请求的方法：\n\n```php\n// application/common.php\nfunction curl_get($url, &$httpCode = 0)\n{\n    //1、初始化curl\n    $curl = curl_init();\n\n    //2、告诉curl,请求的地址\n    curl_setopt($curl, CURLOPT_URL, $url);\n    //3、将请求的数据返回，而不是直接输出\n    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n\n    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);\n    curl_setopt($curl, CURLOPT_CONNECTTIMEOUT, 10);\n\n    $fileContents = curl_exec($curl); // 执行操作\n    curl_close($curl); // 关键CURL会话\n\n    return $fileContents; // 返回数据\n}\n```\n\n3） 请求微信接口失败[微信内部错误/程序编写出错]的异常处理\n\n```php\n// api/service/UserToken.php get()\n$wxResult = json_decode($result, true);\n\nif (empty($wxResult)) {\n    // 经验总结得：如果返回的结果为空[没有返回错误信息和错误代码]，则是微信服务器接口的问题，直接抛出异常一颗\n    throw new \\Exception('获取session_key及openID异常，微信内部错误');\n} else {\n    $loginFail = isset($wxResult['errcode']);\n    // 程序传递的参数出错时，微信服务器会返回错误码和错误提示信息\n    if ($loginFail) {\n        $this->processLoginErr($wxResult);\n    }\n}\n```\n\n调用微信 Token 请求接口调用出错时的处理：\n\n```php\n// api/service/UserToken.php\nprivate function processLoginErr($wxResult)\n{\n    throw new WechatException(\n        [\n            'msg'       => $wxResult['errmsg'],\n            'errorCode' => $wxResult['errcode'],\n        ]\n    );\n}\n```\n\n4） **成功获取微信接口返回数据后的操作[存储 openid、生成令牌、写入缓存、返回令牌]**\n\n```php\n// api/service/UserToken.php get()\nreturn $this->grantToken($wxResult);\n```\n\n2.4.1 存储 openid\n\n```php\n// api/service/UserToken.php\nprivate function grantToken($wxResult)\n{\n    $now = time();\n    // 1.拿到openid\n    $openid     = $wxResult['openid'];\n    // $sessionKey = $wxResult['session_key'];\n\n    // 2.查看数据库中该openid的记录是否已经存在[同一个用户的openid始终保持不变]\n    $user = model('user')->getByOpenId($openid);\n\n    // 3.如果存在，则不处理； 如果不存在，那么新增一条user记录\n    if ($user) {\n        $uid = $user->id;\n    } else {\n        $uid = $this->newUser($openid);\n    }\n}\n```\n\n根据 openid 查询是否已经存在该用户\n\n```php\n// api/model/User.php\npublic static function getByOpenId($openid)\n{\n    $user = self::where('openid', '=', $openid)->find();\n\n    return $user;\n}\n```\n\n创建用户\n\n```php\n// api/service/UserToken.php\nprivate function newUser($openid)\n{\n    $user = model('user')->create([\n       'openid' => $openid\n    ]);\n\n    return $user->id;\n}\n```\n\n2.4.2 准备缓存数据(缓存的值)\n\n[微信返回数据(openid|session_key) + uid(用户服务器中保存的用户记录 id) + scope(用户权限，值越大，权限越高) ]\n\n```php\n// api/service/UserToken.php  grantToken()\n// 4.生成令牌，准备缓存数据，写入缓存 [获取用户的相关信息]\n// 4.1 准备缓存数据\n$cachedValue = $this->prepareCachedValue($wxResult, $uid);\n```\n\n准备缓存数据值的方法[缓存的值]\n\n```php\n// api/service/UserToken.php\nprivate function prepareCachedValue($wxResult, $uid)\n{\n    $cachedValue = $wxResult;\n    $cachedValue['uid'] = $uid;\n    $cachedValue['scope'] = 16; // 数值越大，权限越多\n\n    return $cachedValue;\n}\n```\n\n2.4.3 写入缓存[令牌+微信返回数据+有效期]\n\n```php\n// api/service/UserToken.php  grantToken()\n// 4.2 写入缓存，并返回令牌\n$token = $this->saveToCache($cachedValue);\n```\n\n2.4.3.1 生成令牌(缓存的键) [随机字符串+时间戳+盐]\n\n```php\n// 令牌是用户程序生成的随机字符串，与微信服务器无关\n// api/service/UserToken.php  saveToCache()\n$key = self::generateToken();\n```\n\n在服务器层构建 Token 基类，处理用户登录 Token 和后续的其他 Token 信息[service 下 UserToken 继承该基类]\n\n```php\n// api/service/Token.php\npublic static function generateToken()\n{\n    // 用三组字符串，进行md5加密 [加强安全性]\n    // 1.32个字符组成一组随机字符串\n    $randChars = getRandChar(32);\n    // 2.时间戳\n    $timestamp = $_SERVER['REQUEST_TIME_FLOAT'];\n    // 3.盐\n    $salt = config('secure.token_salt');\n\n    return md5($randChars.$timestamp.$salt);\n}\n```\n\n公共方法中定义生成指定长度的随机字符串\n\n```php\n// application/common.php\nfunction getRandChar($length)\n{\n    $str    = null;\n    $strPol = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n    $max    = strlen($strPol) - 1;\n\n    for ($i = 0; $i < $length; $i++) {\n        $str .= $strPol[rand(0, $max)];\n    }\n\n    return $str;\n}\n```\n\n创建安全配置文件[盐：随机字符串]\n\n```php\n// extra/secure.php\nreturn [\n    'token_salt' => 'E7epHZhrTfgQ'\n];\n```\n\n2.4.3.2 配置文件中设置 cache 缓存的有效期\n\n````php\n创建安全配置文件[盐：随机字符串]\n\n```php\n// extra/setting.php\n'token_expire_in' => 7200\n````\n\n2.4.3.3 创建缓存文件\n\n```php\nprivate function saveToCache($cachedValue)\n{\n    $key = self::generateToken();\n    $value = json_encode($cachedValue);\n    // 设置缓存失效时间\n    $expire_in = config('setting.token_expire_in');\n\n    $request = cache($key, $value, $expire_in);\n    if (!$request) {\n        // 令牌缓存出错\n        throw new TokenException([\n            'msg' => '服务器缓存异常',\n            'errorCode' => 10005\n        ]);\n    }\n\n    return $key;\n}\n```\n\n2.4.4 返回令牌\n\n```php\n// api/service/UserToken.php  grantToken()\n// 4.3 写入缓存，并返回令牌\nreturn $token;\n```\n\n3.异常处理类\n\n3.1 微信内部错误[直接抛出异常]\n\n3.2 微信接口调用出错[微信相关异常处理类 WechatException]\n\n```php\nclass WechatException extends BaseException\n{\n    public $code = 404;\n    public $msg = '微信服务器接口调用失败';\n    public $errorCode = 999;\n}\n```\n\n3.3 缓存 Token 出错[Token 异常处理类 TokenException]\n\n```php\nclass TokenException extends BaseException\n{\n    public $code = 401;\n    public $msg = 'Token已过期或无效Token';\n    public $errorCode = 10001;\n}\n```\n\n### 9-8 获取请求参数 code 并调用 PHP 接口[借助微信开发工具]\n\n#### 1.微信开发者工具中配置：\n\n> 设置好 app_key 后，需要将 “详情” 中的 “不校验合法域名、web-view(业务域名)、TLS 版本以及 HTTPS 证书” 勾选上（在本地测试，没有远程访问的服务器或远程服务器访问的域名没有 https 证书）\n\n#### 2.小程序代码：\n\n(1) 在 config 中定义 restUrl\n\n```javascript\n// Protoss/utils/config.js [设置本地测试的域名基地址]\nConfig.restUrl = \"http://mypro.com/api/v1/\";\n```\n\n(2)在登录方法中获取 code\n\n```javascript\n// 在小程序登录调用wx.login()方法中输出code，然后使用接口请求工具将code作为post请求的参数，进行调用\n\n// Protoss/utils/token.js getTokenFromServer()\nwx.login({\n  success: function(res) {\n    console.log(\"code: \" + res.code);\n  }\n});\n```\n\n#### 3.请求 PHP 接口获取 Token\n\n```javascript\n// 引用使用es6的module引入和定义\n// 全局变量以g_开头\n// 私有函数以_开头\n\nimport { Config } from \"config.js\";\n\nclass Token {\n  constructor() {\n    this.tokenUrl = Config.restUrl + \"token/user\";\n  }\n\n  verify() {\n    var token = wx.getStorageSync(\"token\");\n    if (!token) {\n      this.getTokenFromServer();\n    }\n  }\n\n  getTokenFromServer(callBack) {\n    var that = this;\n    wx.login({\n      success: function(res) {\n        console.log(\"code: \" + res.code);\n        wx.request({\n          url: that.tokenUrl,\n          method: \"POST\",\n          data: {\n            code: res.code\n          },\n          success: function(res) {\n            console.log(\"token： \" + res.data.token);\n            wx.setStorageSync(\"token\", res.data.token);\n            callBack && callBack(res.data.token);\n          }\n        });\n      }\n    });\n  }\n}\n\nexport { Token };\n```\n\n**【补充说明】**：\n\n(1) 需要调试时，将 XDEBUG 参数拼接到`this.tokenUrl`即可\n\n(2) 如果没有输出 code, 需要关闭开发者工具后再重新启动，会自动调用该方法，并输出 code\n[调用过生成的 token 已经被存储到浏览器的 Storage 中，便不会再调用 Token 请求接口，从而不产生 code]\n\n### 9-9 商品详情接口\n\n(1) 定义控制器方法 `getOne($id)`\n\n(2) 定义路由 `api/:version/product/:id`\n\n(3) 模型类实现[隐藏部分字段、设置数据表关联、实现数据库查询]\n\n> Product => properties => ProductProperty => 商品属性值[品名、口味、产地、保质期]\n> Product => imgs => Image => 商品主图\n> ProductImage => imgs.imgUrl => Image => 商品详情图\n\n(4) 异常处理信息提示\n\n```php\n[\n    'msg'       => '当前产品无详情',\n    'errorCode' => 20001\n]\n```\n\n### 9-10-1 路由变量规则\n\n1.路由匹配规则在项目中的应用。\n\n```php\nRoute::get('api/:version/product/recent', 'api/:version.Product/getRecent');\nRoute::get('api/:version/product/:id', 'api/:version.Product/getOne');\n```\n\n2.存在的问题\n\n目前调用接口都不存在问题，但是当将`:id`行放到`recent`行之前后，在调用`recent`路由时，则会因为优先匹配`:id`对应的路由，\n此时则会因为参数校验不通过而报错。\n\n3.解决之道：\n\n对路由匹配规则进行限定，设置变量规则，对于`:id`行，限定只有当参数为数值时才匹配到当前行。即设置 `$id`的变量规则\n\n变量规则：为变量用正则的方式指定变量规则，弥补了动态变量无法限制具体的类型问题，并且支持全局规则设置。\n\n4.代码实现[设置变量规则]\n\n```php\nRoute::get('api/:version/product/:id', 'api/:version.Product/getOne', [], ['id'=>'\\d+']);\n```\n\n### 9-10-2 路由分组\n\n对路由配置文件中，具有相同路由前缀的路由归为同一路由组，例如：\n\n对于几个对应产品信息的路由，\n\n```php\nRoute::get('api/:version/product/recent', 'api/:version.Product/getRecent');\nRoute::get('api/:version/product/by_category', 'api/:version.Product/getAllInCategory');\nRoute::get('api/:version/product/:id', 'api/:version.Product/getOne');\n```\n\n可以分组到产品组路由下，\n\n```php\n// 闭包方式注册路由分组\nRoute::group('api/:version/product', function() {\n    Route::get('recent', 'api/:version.Product/getRecent');\n    Route::get('by_category', 'api/:version.Product/getAllInCategory');\n    Route::get(':id', 'api/:version.Product/getOne', [], ['id' => '\\d+']);\n});\n```\n\n或者：\n\n```php\n// 数组方式注册路由分组\nRoute::group('api/:version/product', [\n    'recent' => ['api/:version.Product/getRecent'],\n    'by_category' => ['api/:version.Product/getAllInCategory'],\n    ':id' => ['api/:version.Product/getOne', [], ['id' => '\\d+']]\n],['method' => 'get']);\n```\n\n路由分组的方式定义路由，执行的效率会比一般形式高一点。\n\n【注】路由分组的公共路由定义时，不能在末尾加`/`，否则会报控制器不存在的错误\n\n### 9-11 闭包函数构建查询器\n\n1.完成的商品详情的数据信息格式为：\n\n```info\n{\n\"id\": 11,\n\"name\": \"贵妃笑 100克\",\n\"price\": \"0.01\",\n\"stock\": 994,\n\"main_img_url\": \"http://mypro.com/static/images/product-dryfruit-a@6.png\",\n\"summary\": null,\n\"img_id\": 39,\n\"imgs\":[\n    {\n        \"id\": 4,\n        \"order\": 1,\n        \"img_url\":{\n            \"url\": \"http://mypro.com/static/images/detail-1@1-dryfruit.png\"\n        }\n    },\n    {\n        \"id\": 5,\n        \"order\": 2,\n        \"img_url\":{\n            \"url\": \"http://mypro.com/static/images/detail-2@1-dryfruit.png\"\n        }\n    },\n],\n\"properties\":[\n    {\n        \"id\": 1,\n        \"name\": \"品名\",\n        \"detail\": \"杨梅\"\n    },\n]\n}\n```\n\n2.问题：其中`imgs`的值为每个商品下的所有图片介绍，所以所有图片之间一定存在一定的顺序，其中`imgs`数组下的数据中存在`order`排序字段，如何对`imgs`的数据通过`order`进行排序？\n\n3.【答】：使用闭包函数构建查询器【相当于拼接 sql】。\n\n```php\n$product = self::with([\n        'imgs' => function($query) {\n            $query->with(['imgUrl'])->order('order asc');\n        }\n    ])\n    ->with(['properties'])\n    ->find($id);\n```\n\n4.思路分析：\n\n（1）要对 imgs 下的数据进行处理，需要获取到每组数据，然后对`order`字段进行排序。【通过闭包函数获取到每组数据】\n\n（2）除了要对每组数据进行按`order`排序，还需要处理`img_url`。【通过 with 链式操作处理`img_url`】\n\n5.关于闭包函数的理解：\n\n```php\n'imgs' => function($query) {\n    $query->with(['imgUrl'])->order('order asc');\n}\n```\n\n对于数组`imgs`，通过闭包函数，获取到每组数据，其中`$query`即作为参数接收每组数据的值，然后再对每组数据的`img_url`通过 with 进行数据关联。\n\n### 9-12 用户收货地址\n\n1.需求说明：\n\n用户收货地址接口信息需要进行身份验证，登录用户只能查看和操作自己的地址信息，未登录用户不能访问。\n\n为简化操作，当前将用户和用户地址的关联关系设定为一对一。\n\n2.思考点：\n\n（1）对登录状态的判断：\n\n当用户访问小程序时，调用`wx.login()`方法，并生成`code`,后台接口拿到 code 后生成 token，并用 token 以及配置的`app_id`和`app_secret`请求微信接口，并获取微信返回的`openid`等信息，存储到缓存中\n[以 token 为键，uid|wxResult|scope 组成的 json 数据为值]\n\n所以，创建或修改用户地址信息时，在处理地址信息和用户信息的关联时，使用的用户信息，应当是当前登录用户的信息，而不能是客户端传递的用户信息参数[可能传递有误，导致误操作到其他用户的地址信息]\n\n实现一定程度上的接口保护。\n\n（2）传入参数的检验\n\n验证器校验往往只能验证某个字段或某些字段的合法性，而客户端可能传入的参数比需要的参数多，或者传入了`uid`或者`user_id`，导致更新时覆盖了其他用户的数据信息，对系统的安全性造成影响，\n所以，在接收客户端传入参数时，需要进行多余字段的过滤。\n\n（3）对手机号的验证\n\n正则表达式的应用场景，正则模式`^1(3|4|5|6|7|8)[0-9]\\d{8}$^`\n\n（4）**通过模型关联，实现用户地址的新增和更新**【新】\n\n通过关联模型方法，创建数据\n\n```php\n// 新增\n$user->address()->save($dataArray);\n```\n\n通过关联模型属性，对当前属性对应的记录进行更新\n\n```php\n// 更新\n$user->address->save($dataArray);\n```\n\n（5）模型关联方法的选择：\n\n模型关联方法的区分：\n\n    有主键关联无主键 =》 belongsTo\n    无主键关联有主键 =》 hasOne|hasMany\n\n（6）HTTP 状态码\n\n200：操作成功，服务器已成功处理了请求。说明：[如果是对您的 robots.txt 文件显示此状态码，则表示 Googlebot 已成功检索到该文件](https://blog.csdn.net/u014028956/article/details/47125403)\n\n201：创建成功，表示服务器执行成功，并且创建了新的资源\n\n设置接口调用成功后的状态码标识：\n\n```php\nreturn json(new SuccessMessage(), 201);\n```\n\n### 9-12-1 通过令牌获取用户标识\n\n(1)定义控制器方法 `createOrUpdate()`\n\n(2)定义路由 `api/:version/address`\n\n(3)验证器验证用户输入数据 [`name`, `mobile`, `province`, `city`, `country`, `detail`]\n\n(4)异常处理信息提示\n\n当数据不合法时抛出异常，而当操作成功时，也需要返回相应的数据信息。当前项目将抛出的成功信息也放在异常处理类库下。\n\n### 9-12-2 面向对象的方式封装获取 uid 方法\n\n1.通过令牌 token 即可获取缓存中对应的用户信息，而缓存中的信息包括`uid` `scope` `wxResult`[`openid` `session_key`]\n\n而在 http 请求时，token 保存在 header 头信息中，获取头信息中`token`的方法：\n\n`$token = Request::instance()->header('token');`\n\n2.通过 json 键值对的键，获取 cache 数据\n\n`Cache::get($token)`\n\n3.增强项目的扩展性，可将通过 token 获取变量的方法进行封装。\n\n4.代码实现：\n\n```php\npublic static function getCurrentTokenVar($key)\n{\n    $token = Request::instance()->header('token');\n    $vars  = Cache::get($token);\n    if ( ! $vars) {\n        throw new TokenException();\n    } else {\n        if (!is_array($vars)) {\n            $vars = json_decode($vars, true);\n        }\n\n        if (isset($vars[$key])) {\n            return $vars[$key];\n        } else {\n            throw new Exception('尝试获取的Token变量不存在');\n        }\n    }\n}\n\npublic static function getCurrentUid()\n{\n    $uid = self::getCurrentTokenVar('uid');\n    return $uid;\n}\n```\n\n### 9-12-3 模型新增和更新\n\n通过用户模型，进行面向对象方式的新增和更新\n\n（1）user 模型定义 address()关联方法，获取到用户地址信息，当用户地址信息不存在时，也通过**关联模型方法**，保存地址信息\n\n```php\n// 新增\n$user->address()->save($dataArray);\n```\n\n（2）user 模型通过 address()关联方法关联 user_address 数据表中对应的用户地址信息，通过关联获取的数据仍然可以作为模型的属性值使用，\n再通过**关联模型属性**，对当前属性对应的记录进行更新 [包含主键 id]\n\n```php\n// 更新\n$user->address->save($dataArray);\n```\n\n### 9-12-4 参数过滤\n\n封装处理客户端传入的参数的方法，由于当前用户的信息是通过缓存获取的，为避免用户传入的参数造成错误修改，所以需要对客户端传入数据进行过滤，\n如果携带用户 id 参数，则抛出异常，不再继续处理。除此之外，对于传入的无效、多余数据，进行过滤，仅接收验证器需要验证的字段信息。\n\n```php\npublic function getDataByRule($params)\n{\n    if (isset($params['uid']) || isset($params['user_id'])) {\n        throw new ParameterException([\n            'msg' => '参数中包含非法的参数名user_id或者uid'\n        ]);\n    }\n    $newArray = [];\n    foreach ($this->rule as $key => $value) {\n        $newArray[$key] = $params[$key];\n    }\n\n    return $newArray;\n}\n```\n\n### 9-12-5 接口测试\n\n1.需要的参数\n\n- token: header 请求头 [通过微信小程序的开发者工具]\n\n- address 字段信息 [`name`, `mobile`, `province`, `city`, `country`, `detail`]\n\n2.返回的数据\n\n```json\n{\n  \"code\": 201,\n  \"msg\": \"ok\",\n  \"errorCode\": 0\n}\n```\n\n并且通过设置返回值为带状态码的 json 数据，`json(new SuccessMessage(), 201)`，可将 http 的状态码也设置为`201`\n","slug":"php-practice-wx-tp5-3","published":1,"updated":"2019-05-12T15:49:20.251Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c43n006r2wuuzgtupzgd","content":"<p>ThinkPHP5 从入门到深入学习，结合实战项目深入理解 ThinkPHP5 的特性和使用方法。深入学习 api 开发，学习微信登录和令牌的相关知识，并理解微信登录流程，完成与微信开放 api 之间的数据交互，完善项目的相应功能。<br>\n理解第三方登录授权的 code 和 token 交互过程。</p>\n<a id=\"more\"></a>\n<h3 id=\"9-1-初识-token-意义与作用\"><a class=\"markdownIt-Anchor\" href=\"#9-1-初识-token-意义与作用\"></a> 9-1 初识 Token - 意义与作用</h3>\n<p>说明：目前这种情况下，用户只要知道了系统的接口的形式，就可以直接访问，并获取数据，而大多数情况下，我们需要对用户身份进行验证，如：需要用户登录后才能访问的接口，以及需要管理员才能访问的接口等。</p>\n<p>1.获取令牌</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户端=》(账号、密码)=》getToken 《==》 账号、密码、Token、Auth</span><br></pre></td></tr></table></figure>\n<p>描述：客户端携带账号和密码信息，调用<code>getToken</code>接口，经过处理验证后，返回账号、密码、Token、Auth 等信息。</p>\n<p>2.访问接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户端=》(Token)=》下单接口 《==》 账号、密码、Token、Auth</span><br></pre></td></tr></table></figure>\n<p>验证：1.是否合法 2.是否有效 3.是否有操作权限</p>\n<p>3.上面两个过程的 getToken 接口和下单接口就是被保护的接口，需要验证通过才能让用户访问。</p>\n<h3 id=\"9-2-微信登录流程\"><a class=\"markdownIt-Anchor\" href=\"#9-2-微信登录流程\"></a> 9-2 微信登录流程</h3>\n<p>1.微信身份登录体系</p>\n<p>![微信登录流程](<img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchef1j72j30n10b9mza.jpg\" alt=\"\"></p>\n<p>2.Token 在接口验证时的使用流程</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchef3nc9j30gx058aao.jpg\" alt=\"Token访问下单接口\"></p>\n<h3 id=\"9-3-实现-token-身份权限体系\"><a class=\"markdownIt-Anchor\" href=\"#9-3-实现-token-身份权限体系\"></a> 9-3 实现 Token 身份权限体系</h3>\n<p>1.获取 token 的请求使用 post 方法[安全性方面考虑]</p>\n<p>2.将复杂的业务分层到<code>service</code>层[实现分层思想]</p>\n<p>使用模型处理数据库 CRUD 相关的操作，对于不操作数据库的复杂业务，将其封装到 Service 目录下，实现分层处理的思想，Service 层是在 Model 层之上的业务层。</p>\n<p>3.基础实现</p>\n<p>1）控制器的定义</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/controller/v1/Token [注意命名空间]</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getToken</span><span class=\"params\">($code = <span class=\"string\">''</span>)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>2）路由定义</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// route.php</span></span><br><span class=\"line\">Route::post(<span class=\"string\">'api/:version/token/user'</span>, <span class=\"string\">'api/:version.Token/getToken'</span>);</span><br></pre></td></tr></table></figure>\n<p>3）验证器校验</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/controller/v1/Token</span></span><br><span class=\"line\">(<span class=\"keyword\">new</span> TokenGet())-&gt;goCheck();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/validate/TokenGet</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> $rule = [</span><br><span class=\"line\">    <span class=\"comment\">// 在验证器基类中定义isNotEmpty()方法</span></span><br><span class=\"line\">    <span class=\"string\">'code'</span> =&gt; <span class=\"string\">'require|isNotEmpty'</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span> $message = [</span><br><span class=\"line\">    <span class=\"string\">'code'</span> =&gt; <span class=\"string\">'code必填！'</span></span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-4567-实现-token-身份权限体系\"><a class=\"markdownIt-Anchor\" href=\"#9-4567-实现-token-身份权限体系\"></a> 9-4/5/6/7 实现 Token 身份权限体系</h3>\n<p>1.获取微信生成的 code 码，并将其作为参数，传递给微信接口来获得 openid 和 access_token 等相关信息[openid/session_key]</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/controller/v1/Token</span></span><br><span class=\"line\">$userToken = <span class=\"keyword\">new</span> UserToken($code);</span><br><span class=\"line\">$token = $userToken-&gt;get();</span><br></pre></td></tr></table></figure>\n<p><strong>2.封装 Service 层，实现 Token 令牌的获取</strong>[重点]</p>\n<p>1） 配置微信小程序相关参数[app_id app_secret login_url]</p>\n<p>2.1.1 在配置文件中设置微信小程序的相关参数</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// config/extra/wx.php</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> [</span><br><span class=\"line\">    <span class=\"string\">'app_id'</span> =&gt; <span class=\"string\">'XXXXXXXXX'</span>,</span><br><span class=\"line\">    <span class=\"string\">'app_secret'</span> =&gt; <span class=\"string\">'XXXXXXXXX'</span>,</span><br><span class=\"line\">    <span class=\"string\">'login_url'</span> =&gt; <span class=\"string\">\"https://api.weixin.qq.com/sns/jscode2session?\"</span> . <span class=\"string\">\"appid=%s&amp;secret=%s&amp;js_code=%s&amp;grant_type=authorization_code\"</span></span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>2.1.2 创建 Service 层的 UserToken 处理类，定义参数为私有属性</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/service/UserToken.php</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">app</span>\\<span class=\"title\">api</span>\\<span class=\"title\">service</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">app</span>\\<span class=\"title\">lib</span>\\<span class=\"title\">exception</span>\\<span class=\"title\">WechatException</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">app</span>\\<span class=\"title\">lib</span>\\<span class=\"title\">exception</span>\\<span class=\"title\">TokenException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserToken</span> <span class=\"keyword\">extends</span> <span class=\"title\">Token</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $code;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $appid;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $appSecret;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $loginUrl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2） 拼接参数，并使用 curl 模拟 http 请求微信服务器，并获取返回结果</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/service/UserToken.php</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($code)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;code      = $code;</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;appid     = config(<span class=\"string\">'wx.app_id'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;appSecret = config(<span class=\"string\">'wx.app_secret'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;loginUrl  = sprintf(</span><br><span class=\"line\">        config(<span class=\"string\">'wx.login_url'</span>),</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;appid, <span class=\"keyword\">$this</span>-&gt;appSecret, <span class=\"keyword\">$this</span>-&gt;code</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $result = curl_get(<span class=\"keyword\">$this</span>-&gt;loginUrl);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在公共方法文件中定义 curl 模拟 http 请求的方法：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// application/common.php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curl_get</span><span class=\"params\">($url, &amp;$httpCode = <span class=\"number\">0</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1、初始化curl</span></span><br><span class=\"line\">    $curl = curl_init();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2、告诉curl,请求的地址</span></span><br><span class=\"line\">    curl_setopt($curl, CURLOPT_URL, $url);</span><br><span class=\"line\">    <span class=\"comment\">//3、将请求的数据返回，而不是直接输出</span></span><br><span class=\"line\">    curl_setopt($curl, CURLOPT_RETURNTRANSFER, <span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, <span class=\"number\">0</span>);</span><br><span class=\"line\">    curl_setopt($curl, CURLOPT_CONNECTTIMEOUT, <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    $fileContents = curl_exec($curl); <span class=\"comment\">// 执行操作</span></span><br><span class=\"line\">    curl_close($curl); <span class=\"comment\">// 关键CURL会话</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $fileContents; <span class=\"comment\">// 返回数据</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3） 请求微信接口失败[微信内部错误/程序编写出错]的异常处理</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/service/UserToken.php get()</span></span><br><span class=\"line\">$wxResult = json_decode($result, <span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>($wxResult)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 经验总结得：如果返回的结果为空[没有返回错误信息和错误代码]，则是微信服务器接口的问题，直接抛出异常一颗</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> \\<span class=\"keyword\">Exception</span>(<span class=\"string\">'获取session_key及openID异常，微信内部错误'</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    $loginFail = <span class=\"keyword\">isset</span>($wxResult[<span class=\"string\">'errcode'</span>]);</span><br><span class=\"line\">    <span class=\"comment\">// 程序传递的参数出错时，微信服务器会返回错误码和错误提示信息</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($loginFail) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;processLoginErr($wxResult);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用微信 Token 请求接口调用出错时的处理：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/service/UserToken.php</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">processLoginErr</span><span class=\"params\">($wxResult)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> WechatException(</span><br><span class=\"line\">        [</span><br><span class=\"line\">            <span class=\"string\">'msg'</span>       =&gt; $wxResult[<span class=\"string\">'errmsg'</span>],</span><br><span class=\"line\">            <span class=\"string\">'errorCode'</span> =&gt; $wxResult[<span class=\"string\">'errcode'</span>],</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4） <strong>成功获取微信接口返回数据后的操作[存储 openid、生成令牌、写入缓存、返回令牌]</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/service/UserToken.php get()</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;grantToken($wxResult);</span><br></pre></td></tr></table></figure>\n<p>2.4.1 存储 openid</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/service/UserToken.php</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">grantToken</span><span class=\"params\">($wxResult)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $now = time();</span><br><span class=\"line\">    <span class=\"comment\">// 1.拿到openid</span></span><br><span class=\"line\">    $openid     = $wxResult[<span class=\"string\">'openid'</span>];</span><br><span class=\"line\">    <span class=\"comment\">// $sessionKey = $wxResult['session_key'];</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2.查看数据库中该openid的记录是否已经存在[同一个用户的openid始终保持不变]</span></span><br><span class=\"line\">    $user = model(<span class=\"string\">'user'</span>)-&gt;getByOpenId($openid);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 3.如果存在，则不处理； 如果不存在，那么新增一条user记录</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($user) &#123;</span><br><span class=\"line\">        $uid = $user-&gt;id;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        $uid = <span class=\"keyword\">$this</span>-&gt;newUser($openid);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据 openid 查询是否已经存在该用户</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/model/User.php</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getByOpenId</span><span class=\"params\">($openid)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $user = <span class=\"keyword\">self</span>::where(<span class=\"string\">'openid'</span>, <span class=\"string\">'='</span>, $openid)-&gt;find();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $user;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建用户</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/service/UserToken.php</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">newUser</span><span class=\"params\">($openid)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $user = model(<span class=\"string\">'user'</span>)-&gt;create([</span><br><span class=\"line\">       <span class=\"string\">'openid'</span> =&gt; $openid</span><br><span class=\"line\">    ]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $user-&gt;id;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.4.2 准备缓存数据(缓存的值)</p>\n<p>[微信返回数据(openid|session_key) + uid(用户服务器中保存的用户记录 id) + scope(用户权限，值越大，权限越高) ]</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/service/UserToken.php  grantToken()</span></span><br><span class=\"line\"><span class=\"comment\">// 4.生成令牌，准备缓存数据，写入缓存 [获取用户的相关信息]</span></span><br><span class=\"line\"><span class=\"comment\">// 4.1 准备缓存数据</span></span><br><span class=\"line\">$cachedValue = <span class=\"keyword\">$this</span>-&gt;prepareCachedValue($wxResult, $uid);</span><br></pre></td></tr></table></figure>\n<p>准备缓存数据值的方法[缓存的值]</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/service/UserToken.php</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">prepareCachedValue</span><span class=\"params\">($wxResult, $uid)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $cachedValue = $wxResult;</span><br><span class=\"line\">    $cachedValue[<span class=\"string\">'uid'</span>] = $uid;</span><br><span class=\"line\">    $cachedValue[<span class=\"string\">'scope'</span>] = <span class=\"number\">16</span>; <span class=\"comment\">// 数值越大，权限越多</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $cachedValue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.4.3 写入缓存[令牌+微信返回数据+有效期]</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/service/UserToken.php  grantToken()</span></span><br><span class=\"line\"><span class=\"comment\">// 4.2 写入缓存，并返回令牌</span></span><br><span class=\"line\">$token = <span class=\"keyword\">$this</span>-&gt;saveToCache($cachedValue);</span><br></pre></td></tr></table></figure>\n<p>2.4.3.1 生成令牌(缓存的键) [随机字符串+时间戳+盐]</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 令牌是用户程序生成的随机字符串，与微信服务器无关</span></span><br><span class=\"line\"><span class=\"comment\">// api/service/UserToken.php  saveToCache()</span></span><br><span class=\"line\">$key = <span class=\"keyword\">self</span>::generateToken();</span><br></pre></td></tr></table></figure>\n<p>在服务器层构建 Token 基类，处理用户登录 Token 和后续的其他 Token 信息[service 下 UserToken 继承该基类]</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/service/Token.php</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generateToken</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用三组字符串，进行md5加密 [加强安全性]</span></span><br><span class=\"line\">    <span class=\"comment\">// 1.32个字符组成一组随机字符串</span></span><br><span class=\"line\">    $randChars = getRandChar(<span class=\"number\">32</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.时间戳</span></span><br><span class=\"line\">    $timestamp = $_SERVER[<span class=\"string\">'REQUEST_TIME_FLOAT'</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 3.盐</span></span><br><span class=\"line\">    $salt = config(<span class=\"string\">'secure.token_salt'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> md5($randChars.$timestamp.$salt);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>公共方法中定义生成指定长度的随机字符串</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// application/common.php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRandChar</span><span class=\"params\">($length)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $str    = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    $strPol = <span class=\"string\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"</span>;</span><br><span class=\"line\">    $max    = strlen($strPol) - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; $length; $i++) &#123;</span><br><span class=\"line\">        $str .= $strPol[rand(<span class=\"number\">0</span>, $max)];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $str;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建安全配置文件[盐：随机字符串]</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// extra/secure.php</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> [</span><br><span class=\"line\">    <span class=\"string\">'token_salt'</span> =&gt; <span class=\"string\">'E7epHZhrTfgQ'</span></span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>2.4.3.2 配置文件中设置 cache 缓存的有效期</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建安全配置文件[盐：随机字符串]</span><br><span class=\"line\"></span><br><span class=\"line\">```php</span><br><span class=\"line\"><span class=\"comment\">// extra/setting.php</span></span><br><span class=\"line\"><span class=\"string\">'token_expire_in'</span> =&gt; <span class=\"number\">7200</span></span><br></pre></td></tr></table></figure>\n<p>2.4.3.3 创建缓存文件</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">saveToCache</span><span class=\"params\">($cachedValue)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $key = <span class=\"keyword\">self</span>::generateToken();</span><br><span class=\"line\">    $value = json_encode($cachedValue);</span><br><span class=\"line\">    <span class=\"comment\">// 设置缓存失效时间</span></span><br><span class=\"line\">    $expire_in = config(<span class=\"string\">'setting.token_expire_in'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    $request = cache($key, $value, $expire_in);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!$request) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 令牌缓存出错</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> TokenException([</span><br><span class=\"line\">            <span class=\"string\">'msg'</span> =&gt; <span class=\"string\">'服务器缓存异常'</span>,</span><br><span class=\"line\">            <span class=\"string\">'errorCode'</span> =&gt; <span class=\"number\">10005</span></span><br><span class=\"line\">        ]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $key;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.4.4 返回令牌</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/service/UserToken.php  grantToken()</span></span><br><span class=\"line\"><span class=\"comment\">// 4.3 写入缓存，并返回令牌</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> $token;</span><br></pre></td></tr></table></figure>\n<p>3.异常处理类</p>\n<p>3.1 微信内部错误[直接抛出异常]</p>\n<p>3.2 微信接口调用出错[微信相关异常处理类 WechatException]</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WechatException</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseException</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $code = <span class=\"number\">404</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $msg = <span class=\"string\">'微信服务器接口调用失败'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $errorCode = <span class=\"number\">999</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3.3 缓存 Token 出错[Token 异常处理类 TokenException]</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TokenException</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseException</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $code = <span class=\"number\">401</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $msg = <span class=\"string\">'Token已过期或无效Token'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $errorCode = <span class=\"number\">10001</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-8-获取请求参数-code-并调用-php-接口借助微信开发工具\"><a class=\"markdownIt-Anchor\" href=\"#9-8-获取请求参数-code-并调用-php-接口借助微信开发工具\"></a> 9-8 获取请求参数 code 并调用 PHP 接口[借助微信开发工具]</h3>\n<h4 id=\"1微信开发者工具中配置\"><a class=\"markdownIt-Anchor\" href=\"#1微信开发者工具中配置\"></a> 1.微信开发者工具中配置：</h4>\n<blockquote>\n<p>设置好 app_key 后，需要将 “详情” 中的 “不校验合法域名、web-view(业务域名)、TLS 版本以及 HTTPS 证书” 勾选上（在本地测试，没有远程访问的服务器或远程服务器访问的域名没有 https 证书）</p>\n</blockquote>\n<h4 id=\"2小程序代码\"><a class=\"markdownIt-Anchor\" href=\"#2小程序代码\"></a> 2.小程序代码：</h4>\n<p>(1) 在 config 中定义 restUrl</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Protoss/utils/config.js [设置本地测试的域名基地址]</span></span><br><span class=\"line\">Config.restUrl = <span class=\"string\">\"http://mypro.com/api/v1/\"</span>;</span><br></pre></td></tr></table></figure>\n<p>(2)在登录方法中获取 code</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在小程序登录调用wx.login()方法中输出code，然后使用接口请求工具将code作为post请求的参数，进行调用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Protoss/utils/token.js getTokenFromServer()</span></span><br><span class=\"line\">wx.login(&#123;</span><br><span class=\"line\">  success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"code: \"</span> + res.code);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"3请求-php-接口获取-token\"><a class=\"markdownIt-Anchor\" href=\"#3请求-php-接口获取-token\"></a> 3.请求 PHP 接口获取 Token</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引用使用es6的module引入和定义</span></span><br><span class=\"line\"><span class=\"comment\">// 全局变量以g_开头</span></span><br><span class=\"line\"><span class=\"comment\">// 私有函数以_开头</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Config &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"config.js\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Token</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.tokenUrl = Config.restUrl + <span class=\"string\">\"token/user\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  verify() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> token = wx.getStorageSync(<span class=\"string\">\"token\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!token) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.getTokenFromServer();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getTokenFromServer(callBack) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    wx.login(&#123;</span><br><span class=\"line\">      success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"code: \"</span> + res.code);</span><br><span class=\"line\">        wx.request(&#123;</span><br><span class=\"line\">          url: that.tokenUrl,</span><br><span class=\"line\">          method: <span class=\"string\">\"POST\"</span>,</span><br><span class=\"line\">          data: &#123;</span><br><span class=\"line\">            code: res.code</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"token： \"</span> + res.data.token);</span><br><span class=\"line\">            wx.setStorageSync(<span class=\"string\">\"token\"</span>, res.data.token);</span><br><span class=\"line\">            callBack &amp;&amp; callBack(res.data.token);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; Token &#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>【补充说明】</strong>：</p>\n<p>(1) 需要调试时，将 XDEBUG 参数拼接到<code>this.tokenUrl</code>即可</p>\n<p>(2) 如果没有输出 code, 需要关闭开发者工具后再重新启动，会自动调用该方法，并输出 code<br>\n[调用过生成的 token 已经被存储到浏览器的 Storage 中，便不会再调用 Token 请求接口，从而不产生 code]</p>\n<h3 id=\"9-9-商品详情接口\"><a class=\"markdownIt-Anchor\" href=\"#9-9-商品详情接口\"></a> 9-9 商品详情接口</h3>\n<p>(1) 定义控制器方法 <code>getOne($id)</code></p>\n<p>(2) 定义路由 <code>api/:version/product/:id</code></p>\n<p>(3) 模型类实现[隐藏部分字段、设置数据表关联、实现数据库查询]</p>\n<blockquote>\n<p>Product =&gt; properties =&gt; ProductProperty =&gt; 商品属性值[品名、口味、产地、保质期]<br>\nProduct =&gt; imgs =&gt; Image =&gt; 商品主图<br>\nProductImage =&gt; imgs.imgUrl =&gt; Image =&gt; 商品详情图</p>\n</blockquote>\n<p>(4) 异常处理信息提示</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    <span class=\"string\">'msg'</span>       =&gt; <span class=\"string\">'当前产品无详情'</span>,</span><br><span class=\"line\">    <span class=\"string\">'errorCode'</span> =&gt; <span class=\"number\">20001</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-10-1-路由变量规则\"><a class=\"markdownIt-Anchor\" href=\"#9-10-1-路由变量规则\"></a> 9-10-1 路由变量规则</h3>\n<p>1.路由匹配规则在项目中的应用。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::get(<span class=\"string\">'api/:version/product/recent'</span>, <span class=\"string\">'api/:version.Product/getRecent'</span>);</span><br><span class=\"line\">Route::get(<span class=\"string\">'api/:version/product/:id'</span>, <span class=\"string\">'api/:version.Product/getOne'</span>);</span><br></pre></td></tr></table></figure>\n<p>2.存在的问题</p>\n<p>目前调用接口都不存在问题，但是当将<code>:id</code>行放到<code>recent</code>行之前后，在调用<code>recent</code>路由时，则会因为优先匹配<code>:id</code>对应的路由，<br>\n此时则会因为参数校验不通过而报错。</p>\n<p>3.解决之道：</p>\n<p>对路由匹配规则进行限定，设置变量规则，对于<code>:id</code>行，限定只有当参数为数值时才匹配到当前行。即设置 <code>$id</code>的变量规则</p>\n<p>变量规则：为变量用正则的方式指定变量规则，弥补了动态变量无法限制具体的类型问题，并且支持全局规则设置。</p>\n<p>4.代码实现[设置变量规则]</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::get(<span class=\"string\">'api/:version/product/:id'</span>, <span class=\"string\">'api/:version.Product/getOne'</span>, [], [<span class=\"string\">'id'</span>=&gt;<span class=\"string\">'\\d+'</span>]);</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-10-2-路由分组\"><a class=\"markdownIt-Anchor\" href=\"#9-10-2-路由分组\"></a> 9-10-2 路由分组</h3>\n<p>对路由配置文件中，具有相同路由前缀的路由归为同一路由组，例如：</p>\n<p>对于几个对应产品信息的路由，</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::get(<span class=\"string\">'api/:version/product/recent'</span>, <span class=\"string\">'api/:version.Product/getRecent'</span>);</span><br><span class=\"line\">Route::get(<span class=\"string\">'api/:version/product/by_category'</span>, <span class=\"string\">'api/:version.Product/getAllInCategory'</span>);</span><br><span class=\"line\">Route::get(<span class=\"string\">'api/:version/product/:id'</span>, <span class=\"string\">'api/:version.Product/getOne'</span>);</span><br></pre></td></tr></table></figure>\n<p>可以分组到产品组路由下，</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 闭包方式注册路由分组</span></span><br><span class=\"line\">Route::group(<span class=\"string\">'api/:version/product'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Route::get(<span class=\"string\">'recent'</span>, <span class=\"string\">'api/:version.Product/getRecent'</span>);</span><br><span class=\"line\">    Route::get(<span class=\"string\">'by_category'</span>, <span class=\"string\">'api/:version.Product/getAllInCategory'</span>);</span><br><span class=\"line\">    Route::get(<span class=\"string\">':id'</span>, <span class=\"string\">'api/:version.Product/getOne'</span>, [], [<span class=\"string\">'id'</span> =&gt; <span class=\"string\">'\\d+'</span>]);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>或者：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组方式注册路由分组</span></span><br><span class=\"line\">Route::group(<span class=\"string\">'api/:version/product'</span>, [</span><br><span class=\"line\">    <span class=\"string\">'recent'</span> =&gt; [<span class=\"string\">'api/:version.Product/getRecent'</span>],</span><br><span class=\"line\">    <span class=\"string\">'by_category'</span> =&gt; [<span class=\"string\">'api/:version.Product/getAllInCategory'</span>],</span><br><span class=\"line\">    <span class=\"string\">':id'</span> =&gt; [<span class=\"string\">'api/:version.Product/getOne'</span>, [], [<span class=\"string\">'id'</span> =&gt; <span class=\"string\">'\\d+'</span>]]</span><br><span class=\"line\">],[<span class=\"string\">'method'</span> =&gt; <span class=\"string\">'get'</span>]);</span><br></pre></td></tr></table></figure>\n<p>路由分组的方式定义路由，执行的效率会比一般形式高一点。</p>\n<p>【注】路由分组的公共路由定义时，不能在末尾加<code>/</code>，否则会报控制器不存在的错误</p>\n<h3 id=\"9-11-闭包函数构建查询器\"><a class=\"markdownIt-Anchor\" href=\"#9-11-闭包函数构建查询器\"></a> 9-11 闭包函数构建查询器</h3>\n<p>1.完成的商品详情的数据信息格式为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">&quot;id&quot;: 11,</span><br><span class=\"line\">&quot;name&quot;: &quot;贵妃笑 100克&quot;,</span><br><span class=\"line\">&quot;price&quot;: &quot;0.01&quot;,</span><br><span class=\"line\">&quot;stock&quot;: 994,</span><br><span class=\"line\">&quot;main_img_url&quot;: &quot;http://mypro.com/static/images/product-dryfruit-a@6.png&quot;,</span><br><span class=\"line\">&quot;summary&quot;: null,</span><br><span class=\"line\">&quot;img_id&quot;: 39,</span><br><span class=\"line\">&quot;imgs&quot;:[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;id&quot;: 4,</span><br><span class=\"line\">        &quot;order&quot;: 1,</span><br><span class=\"line\">        &quot;img_url&quot;:&#123;</span><br><span class=\"line\">            &quot;url&quot;: &quot;http://mypro.com/static/images/detail-1@1-dryfruit.png&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;id&quot;: 5,</span><br><span class=\"line\">        &quot;order&quot;: 2,</span><br><span class=\"line\">        &quot;img_url&quot;:&#123;</span><br><span class=\"line\">            &quot;url&quot;: &quot;http://mypro.com/static/images/detail-2@1-dryfruit.png&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">],</span><br><span class=\"line\">&quot;properties&quot;:[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;id&quot;: 1,</span><br><span class=\"line\">        &quot;name&quot;: &quot;品名&quot;,</span><br><span class=\"line\">        &quot;detail&quot;: &quot;杨梅&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.问题：其中<code>imgs</code>的值为每个商品下的所有图片介绍，所以所有图片之间一定存在一定的顺序，其中<code>imgs</code>数组下的数据中存在<code>order</code>排序字段，如何对<code>imgs</code>的数据通过<code>order</code>进行排序？</p>\n<p>3.【答】：使用闭包函数构建查询器【相当于拼接 sql】。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$product = <span class=\"keyword\">self</span>::with([</span><br><span class=\"line\">        <span class=\"string\">'imgs'</span> =&gt; <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($query)</span> </span>&#123;</span><br><span class=\"line\">            $query-&gt;with([<span class=\"string\">'imgUrl'</span>])-&gt;order(<span class=\"string\">'order asc'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ])</span><br><span class=\"line\">    -&gt;with([<span class=\"string\">'properties'</span>])</span><br><span class=\"line\">    -&gt;find($id);</span><br></pre></td></tr></table></figure>\n<p>4.思路分析：</p>\n<p>（1）要对 imgs 下的数据进行处理，需要获取到每组数据，然后对<code>order</code>字段进行排序。【通过闭包函数获取到每组数据】</p>\n<p>（2）除了要对每组数据进行按<code>order</code>排序，还需要处理<code>img_url</code>。【通过 with 链式操作处理<code>img_url</code>】</p>\n<p>5.关于闭包函数的理解：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'imgs'</span> =&gt; <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($query)</span> </span>&#123;</span><br><span class=\"line\">    $query-&gt;with([<span class=\"string\">'imgUrl'</span>])-&gt;order(<span class=\"string\">'order asc'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于数组<code>imgs</code>，通过闭包函数，获取到每组数据，其中<code>$query</code>即作为参数接收每组数据的值，然后再对每组数据的<code>img_url</code>通过 with 进行数据关联。</p>\n<h3 id=\"9-12-用户收货地址\"><a class=\"markdownIt-Anchor\" href=\"#9-12-用户收货地址\"></a> 9-12 用户收货地址</h3>\n<p>1.需求说明：</p>\n<p>用户收货地址接口信息需要进行身份验证，登录用户只能查看和操作自己的地址信息，未登录用户不能访问。</p>\n<p>为简化操作，当前将用户和用户地址的关联关系设定为一对一。</p>\n<p>2.思考点：</p>\n<p>（1）对登录状态的判断：</p>\n<p>当用户访问小程序时，调用<code>wx.login()</code>方法，并生成<code>code</code>,后台接口拿到 code 后生成 token，并用 token 以及配置的<code>app_id</code>和<code>app_secret</code>请求微信接口，并获取微信返回的<code>openid</code>等信息，存储到缓存中<br>\n[以 token 为键，uid|wxResult|scope 组成的 json 数据为值]</p>\n<p>所以，创建或修改用户地址信息时，在处理地址信息和用户信息的关联时，使用的用户信息，应当是当前登录用户的信息，而不能是客户端传递的用户信息参数[可能传递有误，导致误操作到其他用户的地址信息]</p>\n<p>实现一定程度上的接口保护。</p>\n<p>（2）传入参数的检验</p>\n<p>验证器校验往往只能验证某个字段或某些字段的合法性，而客户端可能传入的参数比需要的参数多，或者传入了<code>uid</code>或者<code>user_id</code>，导致更新时覆盖了其他用户的数据信息，对系统的安全性造成影响，<br>\n所以，在接收客户端传入参数时，需要进行多余字段的过滤。</p>\n<p>（3）对手机号的验证</p>\n<p>正则表达式的应用场景，正则模式<code>^1(3|4|5|6|7|8)[0-9]\\d{8}$^</code></p>\n<p>（4）<strong>通过模型关联，实现用户地址的新增和更新</strong>【新】</p>\n<p>通过关联模型方法，创建数据</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新增</span></span><br><span class=\"line\">$user-&gt;address()-&gt;save($dataArray);</span><br></pre></td></tr></table></figure>\n<p>通过关联模型属性，对当前属性对应的记录进行更新</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 更新</span></span><br><span class=\"line\">$user-&gt;address-&gt;save($dataArray);</span><br></pre></td></tr></table></figure>\n<p>（5）模型关联方法的选择：</p>\n<p>模型关联方法的区分：</p>\n<pre><code>有主键关联无主键 =》 belongsTo\n无主键关联有主键 =》 hasOne|hasMany\n</code></pre>\n<p>（6）HTTP 状态码</p>\n<p>200：操作成功，服务器已成功处理了请求。说明：<a href=\"https://blog.csdn.net/u014028956/article/details/47125403\" target=\"_blank\" rel=\"noopener\">如果是对您的 robots.txt 文件显示此状态码，则表示 Googlebot 已成功检索到该文件</a></p>\n<p>201：创建成功，表示服务器执行成功，并且创建了新的资源</p>\n<p>设置接口调用成功后的状态码标识：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> json(<span class=\"keyword\">new</span> SuccessMessage(), <span class=\"number\">201</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-12-1-通过令牌获取用户标识\"><a class=\"markdownIt-Anchor\" href=\"#9-12-1-通过令牌获取用户标识\"></a> 9-12-1 通过令牌获取用户标识</h3>\n<p>(1)定义控制器方法 <code>createOrUpdate()</code></p>\n<p>(2)定义路由 <code>api/:version/address</code></p>\n<p>(3)验证器验证用户输入数据 [<code>name</code>, <code>mobile</code>, <code>province</code>, <code>city</code>, <code>country</code>, <code>detail</code>]</p>\n<p>(4)异常处理信息提示</p>\n<p>当数据不合法时抛出异常，而当操作成功时，也需要返回相应的数据信息。当前项目将抛出的成功信息也放在异常处理类库下。</p>\n<h3 id=\"9-12-2-面向对象的方式封装获取-uid-方法\"><a class=\"markdownIt-Anchor\" href=\"#9-12-2-面向对象的方式封装获取-uid-方法\"></a> 9-12-2 面向对象的方式封装获取 uid 方法</h3>\n<p>1.通过令牌 token 即可获取缓存中对应的用户信息，而缓存中的信息包括<code>uid</code> <code>scope</code> <code>wxResult</code>[<code>openid</code> <code>session_key</code>]</p>\n<p>而在 http 请求时，token 保存在 header 头信息中，获取头信息中<code>token</code>的方法：</p>\n<p><code>$token = Request::instance()-&gt;header('token');</code></p>\n<p>2.通过 json 键值对的键，获取 cache 数据</p>\n<p><code>Cache::get($token)</code></p>\n<p>3.增强项目的扩展性，可将通过 token 获取变量的方法进行封装。</p>\n<p>4.代码实现：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCurrentTokenVar</span><span class=\"params\">($key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $token = Request::instance()-&gt;header(<span class=\"string\">'token'</span>);</span><br><span class=\"line\">    $vars  = Cache::get($token);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( ! $vars) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> TokenException();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!is_array($vars)) &#123;</span><br><span class=\"line\">            $vars = json_decode($vars, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($vars[$key])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> $vars[$key];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"keyword\">Exception</span>(<span class=\"string\">'尝试获取的Token变量不存在'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCurrentUid</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $uid = <span class=\"keyword\">self</span>::getCurrentTokenVar(<span class=\"string\">'uid'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $uid;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-12-3-模型新增和更新\"><a class=\"markdownIt-Anchor\" href=\"#9-12-3-模型新增和更新\"></a> 9-12-3 模型新增和更新</h3>\n<p>通过用户模型，进行面向对象方式的新增和更新</p>\n<p>（1）user 模型定义 address()关联方法，获取到用户地址信息，当用户地址信息不存在时，也通过<strong>关联模型方法</strong>，保存地址信息</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新增</span></span><br><span class=\"line\">$user-&gt;address()-&gt;save($dataArray);</span><br></pre></td></tr></table></figure>\n<p>（2）user 模型通过 address()关联方法关联 user_address 数据表中对应的用户地址信息，通过关联获取的数据仍然可以作为模型的属性值使用，<br>\n再通过<strong>关联模型属性</strong>，对当前属性对应的记录进行更新 [包含主键 id]</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 更新</span></span><br><span class=\"line\">$user-&gt;address-&gt;save($dataArray);</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-12-4-参数过滤\"><a class=\"markdownIt-Anchor\" href=\"#9-12-4-参数过滤\"></a> 9-12-4 参数过滤</h3>\n<p>封装处理客户端传入的参数的方法，由于当前用户的信息是通过缓存获取的，为避免用户传入的参数造成错误修改，所以需要对客户端传入数据进行过滤，<br>\n如果携带用户 id 参数，则抛出异常，不再继续处理。除此之外，对于传入的无效、多余数据，进行过滤，仅接收验证器需要验证的字段信息。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDataByRule</span><span class=\"params\">($params)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($params[<span class=\"string\">'uid'</span>]) || <span class=\"keyword\">isset</span>($params[<span class=\"string\">'user_id'</span>])) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ParameterException([</span><br><span class=\"line\">            <span class=\"string\">'msg'</span> =&gt; <span class=\"string\">'参数中包含非法的参数名user_id或者uid'</span></span><br><span class=\"line\">        ]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $newArray = [];</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;rule <span class=\"keyword\">as</span> $key =&gt; $value) &#123;</span><br><span class=\"line\">        $newArray[$key] = $params[$key];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $newArray;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-12-5-接口测试\"><a class=\"markdownIt-Anchor\" href=\"#9-12-5-接口测试\"></a> 9-12-5 接口测试</h3>\n<p>1.需要的参数</p>\n<ul>\n<li>\n<p>token: header 请求头 [通过微信小程序的开发者工具]</p>\n</li>\n<li>\n<p>address 字段信息 [<code>name</code>, <code>mobile</code>, <code>province</code>, <code>city</code>, <code>country</code>, <code>detail</code>]</p>\n</li>\n</ul>\n<p>2.返回的数据</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"code\"</span>: <span class=\"number\">201</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"msg\"</span>: <span class=\"string\">\"ok\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"errorCode\"</span>: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>并且通过设置返回值为带状态码的 json 数据，<code>json(new SuccessMessage(), 201)</code>，可将 http 的状态码也设置为<code>201</code></p>\n","site":{"data":{}},"excerpt":"<p>ThinkPHP5 从入门到深入学习，结合实战项目深入理解 ThinkPHP5 的特性和使用方法。深入学习 api 开发，学习微信登录和令牌的相关知识，并理解微信登录流程，完成与微信开放 api 之间的数据交互，完善项目的相应功能。<br>\n理解第三方登录授权的 code 和 token 交互过程。</p>","more":"<h3 id=\"9-1-初识-token-意义与作用\"><a class=\"markdownIt-Anchor\" href=\"#9-1-初识-token-意义与作用\"></a> 9-1 初识 Token - 意义与作用</h3>\n<p>说明：目前这种情况下，用户只要知道了系统的接口的形式，就可以直接访问，并获取数据，而大多数情况下，我们需要对用户身份进行验证，如：需要用户登录后才能访问的接口，以及需要管理员才能访问的接口等。</p>\n<p>1.获取令牌</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户端=》(账号、密码)=》getToken 《==》 账号、密码、Token、Auth</span><br></pre></td></tr></table></figure>\n<p>描述：客户端携带账号和密码信息，调用<code>getToken</code>接口，经过处理验证后，返回账号、密码、Token、Auth 等信息。</p>\n<p>2.访问接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户端=》(Token)=》下单接口 《==》 账号、密码、Token、Auth</span><br></pre></td></tr></table></figure>\n<p>验证：1.是否合法 2.是否有效 3.是否有操作权限</p>\n<p>3.上面两个过程的 getToken 接口和下单接口就是被保护的接口，需要验证通过才能让用户访问。</p>\n<h3 id=\"9-2-微信登录流程\"><a class=\"markdownIt-Anchor\" href=\"#9-2-微信登录流程\"></a> 9-2 微信登录流程</h3>\n<p>1.微信身份登录体系</p>\n<p>![微信登录流程](<img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchef1j72j30n10b9mza.jpg\" alt=\"\"></p>\n<p>2.Token 在接口验证时的使用流程</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/005EgYNMgy1fuchef3nc9j30gx058aao.jpg\" alt=\"Token访问下单接口\"></p>\n<h3 id=\"9-3-实现-token-身份权限体系\"><a class=\"markdownIt-Anchor\" href=\"#9-3-实现-token-身份权限体系\"></a> 9-3 实现 Token 身份权限体系</h3>\n<p>1.获取 token 的请求使用 post 方法[安全性方面考虑]</p>\n<p>2.将复杂的业务分层到<code>service</code>层[实现分层思想]</p>\n<p>使用模型处理数据库 CRUD 相关的操作，对于不操作数据库的复杂业务，将其封装到 Service 目录下，实现分层处理的思想，Service 层是在 Model 层之上的业务层。</p>\n<p>3.基础实现</p>\n<p>1）控制器的定义</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/controller/v1/Token [注意命名空间]</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getToken</span><span class=\"params\">($code = <span class=\"string\">''</span>)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>2）路由定义</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// route.php</span></span><br><span class=\"line\">Route::post(<span class=\"string\">'api/:version/token/user'</span>, <span class=\"string\">'api/:version.Token/getToken'</span>);</span><br></pre></td></tr></table></figure>\n<p>3）验证器校验</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/controller/v1/Token</span></span><br><span class=\"line\">(<span class=\"keyword\">new</span> TokenGet())-&gt;goCheck();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/validate/TokenGet</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> $rule = [</span><br><span class=\"line\">    <span class=\"comment\">// 在验证器基类中定义isNotEmpty()方法</span></span><br><span class=\"line\">    <span class=\"string\">'code'</span> =&gt; <span class=\"string\">'require|isNotEmpty'</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span> $message = [</span><br><span class=\"line\">    <span class=\"string\">'code'</span> =&gt; <span class=\"string\">'code必填！'</span></span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-4567-实现-token-身份权限体系\"><a class=\"markdownIt-Anchor\" href=\"#9-4567-实现-token-身份权限体系\"></a> 9-4/5/6/7 实现 Token 身份权限体系</h3>\n<p>1.获取微信生成的 code 码，并将其作为参数，传递给微信接口来获得 openid 和 access_token 等相关信息[openid/session_key]</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/controller/v1/Token</span></span><br><span class=\"line\">$userToken = <span class=\"keyword\">new</span> UserToken($code);</span><br><span class=\"line\">$token = $userToken-&gt;get();</span><br></pre></td></tr></table></figure>\n<p><strong>2.封装 Service 层，实现 Token 令牌的获取</strong>[重点]</p>\n<p>1） 配置微信小程序相关参数[app_id app_secret login_url]</p>\n<p>2.1.1 在配置文件中设置微信小程序的相关参数</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// config/extra/wx.php</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> [</span><br><span class=\"line\">    <span class=\"string\">'app_id'</span> =&gt; <span class=\"string\">'XXXXXXXXX'</span>,</span><br><span class=\"line\">    <span class=\"string\">'app_secret'</span> =&gt; <span class=\"string\">'XXXXXXXXX'</span>,</span><br><span class=\"line\">    <span class=\"string\">'login_url'</span> =&gt; <span class=\"string\">\"https://api.weixin.qq.com/sns/jscode2session?\"</span> . <span class=\"string\">\"appid=%s&amp;secret=%s&amp;js_code=%s&amp;grant_type=authorization_code\"</span></span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>2.1.2 创建 Service 层的 UserToken 处理类，定义参数为私有属性</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/service/UserToken.php</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">app</span>\\<span class=\"title\">api</span>\\<span class=\"title\">service</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">app</span>\\<span class=\"title\">lib</span>\\<span class=\"title\">exception</span>\\<span class=\"title\">WechatException</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">app</span>\\<span class=\"title\">lib</span>\\<span class=\"title\">exception</span>\\<span class=\"title\">TokenException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserToken</span> <span class=\"keyword\">extends</span> <span class=\"title\">Token</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $code;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $appid;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $appSecret;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $loginUrl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2） 拼接参数，并使用 curl 模拟 http 请求微信服务器，并获取返回结果</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/service/UserToken.php</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($code)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;code      = $code;</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;appid     = config(<span class=\"string\">'wx.app_id'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;appSecret = config(<span class=\"string\">'wx.app_secret'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;loginUrl  = sprintf(</span><br><span class=\"line\">        config(<span class=\"string\">'wx.login_url'</span>),</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;appid, <span class=\"keyword\">$this</span>-&gt;appSecret, <span class=\"keyword\">$this</span>-&gt;code</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $result = curl_get(<span class=\"keyword\">$this</span>-&gt;loginUrl);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在公共方法文件中定义 curl 模拟 http 请求的方法：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// application/common.php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curl_get</span><span class=\"params\">($url, &amp;$httpCode = <span class=\"number\">0</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1、初始化curl</span></span><br><span class=\"line\">    $curl = curl_init();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2、告诉curl,请求的地址</span></span><br><span class=\"line\">    curl_setopt($curl, CURLOPT_URL, $url);</span><br><span class=\"line\">    <span class=\"comment\">//3、将请求的数据返回，而不是直接输出</span></span><br><span class=\"line\">    curl_setopt($curl, CURLOPT_RETURNTRANSFER, <span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, <span class=\"number\">0</span>);</span><br><span class=\"line\">    curl_setopt($curl, CURLOPT_CONNECTTIMEOUT, <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    $fileContents = curl_exec($curl); <span class=\"comment\">// 执行操作</span></span><br><span class=\"line\">    curl_close($curl); <span class=\"comment\">// 关键CURL会话</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $fileContents; <span class=\"comment\">// 返回数据</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3） 请求微信接口失败[微信内部错误/程序编写出错]的异常处理</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/service/UserToken.php get()</span></span><br><span class=\"line\">$wxResult = json_decode($result, <span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>($wxResult)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 经验总结得：如果返回的结果为空[没有返回错误信息和错误代码]，则是微信服务器接口的问题，直接抛出异常一颗</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> \\<span class=\"keyword\">Exception</span>(<span class=\"string\">'获取session_key及openID异常，微信内部错误'</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    $loginFail = <span class=\"keyword\">isset</span>($wxResult[<span class=\"string\">'errcode'</span>]);</span><br><span class=\"line\">    <span class=\"comment\">// 程序传递的参数出错时，微信服务器会返回错误码和错误提示信息</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($loginFail) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;processLoginErr($wxResult);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用微信 Token 请求接口调用出错时的处理：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/service/UserToken.php</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">processLoginErr</span><span class=\"params\">($wxResult)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> WechatException(</span><br><span class=\"line\">        [</span><br><span class=\"line\">            <span class=\"string\">'msg'</span>       =&gt; $wxResult[<span class=\"string\">'errmsg'</span>],</span><br><span class=\"line\">            <span class=\"string\">'errorCode'</span> =&gt; $wxResult[<span class=\"string\">'errcode'</span>],</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4） <strong>成功获取微信接口返回数据后的操作[存储 openid、生成令牌、写入缓存、返回令牌]</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/service/UserToken.php get()</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;grantToken($wxResult);</span><br></pre></td></tr></table></figure>\n<p>2.4.1 存储 openid</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/service/UserToken.php</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">grantToken</span><span class=\"params\">($wxResult)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $now = time();</span><br><span class=\"line\">    <span class=\"comment\">// 1.拿到openid</span></span><br><span class=\"line\">    $openid     = $wxResult[<span class=\"string\">'openid'</span>];</span><br><span class=\"line\">    <span class=\"comment\">// $sessionKey = $wxResult['session_key'];</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2.查看数据库中该openid的记录是否已经存在[同一个用户的openid始终保持不变]</span></span><br><span class=\"line\">    $user = model(<span class=\"string\">'user'</span>)-&gt;getByOpenId($openid);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 3.如果存在，则不处理； 如果不存在，那么新增一条user记录</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($user) &#123;</span><br><span class=\"line\">        $uid = $user-&gt;id;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        $uid = <span class=\"keyword\">$this</span>-&gt;newUser($openid);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据 openid 查询是否已经存在该用户</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/model/User.php</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getByOpenId</span><span class=\"params\">($openid)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $user = <span class=\"keyword\">self</span>::where(<span class=\"string\">'openid'</span>, <span class=\"string\">'='</span>, $openid)-&gt;find();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $user;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建用户</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/service/UserToken.php</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">newUser</span><span class=\"params\">($openid)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $user = model(<span class=\"string\">'user'</span>)-&gt;create([</span><br><span class=\"line\">       <span class=\"string\">'openid'</span> =&gt; $openid</span><br><span class=\"line\">    ]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $user-&gt;id;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.4.2 准备缓存数据(缓存的值)</p>\n<p>[微信返回数据(openid|session_key) + uid(用户服务器中保存的用户记录 id) + scope(用户权限，值越大，权限越高) ]</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/service/UserToken.php  grantToken()</span></span><br><span class=\"line\"><span class=\"comment\">// 4.生成令牌，准备缓存数据，写入缓存 [获取用户的相关信息]</span></span><br><span class=\"line\"><span class=\"comment\">// 4.1 准备缓存数据</span></span><br><span class=\"line\">$cachedValue = <span class=\"keyword\">$this</span>-&gt;prepareCachedValue($wxResult, $uid);</span><br></pre></td></tr></table></figure>\n<p>准备缓存数据值的方法[缓存的值]</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/service/UserToken.php</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">prepareCachedValue</span><span class=\"params\">($wxResult, $uid)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $cachedValue = $wxResult;</span><br><span class=\"line\">    $cachedValue[<span class=\"string\">'uid'</span>] = $uid;</span><br><span class=\"line\">    $cachedValue[<span class=\"string\">'scope'</span>] = <span class=\"number\">16</span>; <span class=\"comment\">// 数值越大，权限越多</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $cachedValue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.4.3 写入缓存[令牌+微信返回数据+有效期]</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/service/UserToken.php  grantToken()</span></span><br><span class=\"line\"><span class=\"comment\">// 4.2 写入缓存，并返回令牌</span></span><br><span class=\"line\">$token = <span class=\"keyword\">$this</span>-&gt;saveToCache($cachedValue);</span><br></pre></td></tr></table></figure>\n<p>2.4.3.1 生成令牌(缓存的键) [随机字符串+时间戳+盐]</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 令牌是用户程序生成的随机字符串，与微信服务器无关</span></span><br><span class=\"line\"><span class=\"comment\">// api/service/UserToken.php  saveToCache()</span></span><br><span class=\"line\">$key = <span class=\"keyword\">self</span>::generateToken();</span><br></pre></td></tr></table></figure>\n<p>在服务器层构建 Token 基类，处理用户登录 Token 和后续的其他 Token 信息[service 下 UserToken 继承该基类]</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/service/Token.php</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generateToken</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用三组字符串，进行md5加密 [加强安全性]</span></span><br><span class=\"line\">    <span class=\"comment\">// 1.32个字符组成一组随机字符串</span></span><br><span class=\"line\">    $randChars = getRandChar(<span class=\"number\">32</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 2.时间戳</span></span><br><span class=\"line\">    $timestamp = $_SERVER[<span class=\"string\">'REQUEST_TIME_FLOAT'</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 3.盐</span></span><br><span class=\"line\">    $salt = config(<span class=\"string\">'secure.token_salt'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> md5($randChars.$timestamp.$salt);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>公共方法中定义生成指定长度的随机字符串</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// application/common.php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRandChar</span><span class=\"params\">($length)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $str    = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    $strPol = <span class=\"string\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"</span>;</span><br><span class=\"line\">    $max    = strlen($strPol) - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; $length; $i++) &#123;</span><br><span class=\"line\">        $str .= $strPol[rand(<span class=\"number\">0</span>, $max)];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $str;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建安全配置文件[盐：随机字符串]</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// extra/secure.php</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> [</span><br><span class=\"line\">    <span class=\"string\">'token_salt'</span> =&gt; <span class=\"string\">'E7epHZhrTfgQ'</span></span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>2.4.3.2 配置文件中设置 cache 缓存的有效期</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建安全配置文件[盐：随机字符串]</span><br><span class=\"line\"></span><br><span class=\"line\">```php</span><br><span class=\"line\"><span class=\"comment\">// extra/setting.php</span></span><br><span class=\"line\"><span class=\"string\">'token_expire_in'</span> =&gt; <span class=\"number\">7200</span></span><br></pre></td></tr></table></figure>\n<p>2.4.3.3 创建缓存文件</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">saveToCache</span><span class=\"params\">($cachedValue)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $key = <span class=\"keyword\">self</span>::generateToken();</span><br><span class=\"line\">    $value = json_encode($cachedValue);</span><br><span class=\"line\">    <span class=\"comment\">// 设置缓存失效时间</span></span><br><span class=\"line\">    $expire_in = config(<span class=\"string\">'setting.token_expire_in'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    $request = cache($key, $value, $expire_in);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!$request) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 令牌缓存出错</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> TokenException([</span><br><span class=\"line\">            <span class=\"string\">'msg'</span> =&gt; <span class=\"string\">'服务器缓存异常'</span>,</span><br><span class=\"line\">            <span class=\"string\">'errorCode'</span> =&gt; <span class=\"number\">10005</span></span><br><span class=\"line\">        ]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $key;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.4.4 返回令牌</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api/service/UserToken.php  grantToken()</span></span><br><span class=\"line\"><span class=\"comment\">// 4.3 写入缓存，并返回令牌</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> $token;</span><br></pre></td></tr></table></figure>\n<p>3.异常处理类</p>\n<p>3.1 微信内部错误[直接抛出异常]</p>\n<p>3.2 微信接口调用出错[微信相关异常处理类 WechatException]</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WechatException</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseException</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $code = <span class=\"number\">404</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $msg = <span class=\"string\">'微信服务器接口调用失败'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $errorCode = <span class=\"number\">999</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3.3 缓存 Token 出错[Token 异常处理类 TokenException]</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TokenException</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseException</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $code = <span class=\"number\">401</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $msg = <span class=\"string\">'Token已过期或无效Token'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $errorCode = <span class=\"number\">10001</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-8-获取请求参数-code-并调用-php-接口借助微信开发工具\"><a class=\"markdownIt-Anchor\" href=\"#9-8-获取请求参数-code-并调用-php-接口借助微信开发工具\"></a> 9-8 获取请求参数 code 并调用 PHP 接口[借助微信开发工具]</h3>\n<h4 id=\"1微信开发者工具中配置\"><a class=\"markdownIt-Anchor\" href=\"#1微信开发者工具中配置\"></a> 1.微信开发者工具中配置：</h4>\n<blockquote>\n<p>设置好 app_key 后，需要将 “详情” 中的 “不校验合法域名、web-view(业务域名)、TLS 版本以及 HTTPS 证书” 勾选上（在本地测试，没有远程访问的服务器或远程服务器访问的域名没有 https 证书）</p>\n</blockquote>\n<h4 id=\"2小程序代码\"><a class=\"markdownIt-Anchor\" href=\"#2小程序代码\"></a> 2.小程序代码：</h4>\n<p>(1) 在 config 中定义 restUrl</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Protoss/utils/config.js [设置本地测试的域名基地址]</span></span><br><span class=\"line\">Config.restUrl = <span class=\"string\">\"http://mypro.com/api/v1/\"</span>;</span><br></pre></td></tr></table></figure>\n<p>(2)在登录方法中获取 code</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在小程序登录调用wx.login()方法中输出code，然后使用接口请求工具将code作为post请求的参数，进行调用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Protoss/utils/token.js getTokenFromServer()</span></span><br><span class=\"line\">wx.login(&#123;</span><br><span class=\"line\">  success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"code: \"</span> + res.code);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"3请求-php-接口获取-token\"><a class=\"markdownIt-Anchor\" href=\"#3请求-php-接口获取-token\"></a> 3.请求 PHP 接口获取 Token</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引用使用es6的module引入和定义</span></span><br><span class=\"line\"><span class=\"comment\">// 全局变量以g_开头</span></span><br><span class=\"line\"><span class=\"comment\">// 私有函数以_开头</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Config &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"config.js\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Token</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.tokenUrl = Config.restUrl + <span class=\"string\">\"token/user\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  verify() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> token = wx.getStorageSync(<span class=\"string\">\"token\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!token) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.getTokenFromServer();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getTokenFromServer(callBack) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    wx.login(&#123;</span><br><span class=\"line\">      success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"code: \"</span> + res.code);</span><br><span class=\"line\">        wx.request(&#123;</span><br><span class=\"line\">          url: that.tokenUrl,</span><br><span class=\"line\">          method: <span class=\"string\">\"POST\"</span>,</span><br><span class=\"line\">          data: &#123;</span><br><span class=\"line\">            code: res.code</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"token： \"</span> + res.data.token);</span><br><span class=\"line\">            wx.setStorageSync(<span class=\"string\">\"token\"</span>, res.data.token);</span><br><span class=\"line\">            callBack &amp;&amp; callBack(res.data.token);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; Token &#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>【补充说明】</strong>：</p>\n<p>(1) 需要调试时，将 XDEBUG 参数拼接到<code>this.tokenUrl</code>即可</p>\n<p>(2) 如果没有输出 code, 需要关闭开发者工具后再重新启动，会自动调用该方法，并输出 code<br>\n[调用过生成的 token 已经被存储到浏览器的 Storage 中，便不会再调用 Token 请求接口，从而不产生 code]</p>\n<h3 id=\"9-9-商品详情接口\"><a class=\"markdownIt-Anchor\" href=\"#9-9-商品详情接口\"></a> 9-9 商品详情接口</h3>\n<p>(1) 定义控制器方法 <code>getOne($id)</code></p>\n<p>(2) 定义路由 <code>api/:version/product/:id</code></p>\n<p>(3) 模型类实现[隐藏部分字段、设置数据表关联、实现数据库查询]</p>\n<blockquote>\n<p>Product =&gt; properties =&gt; ProductProperty =&gt; 商品属性值[品名、口味、产地、保质期]<br>\nProduct =&gt; imgs =&gt; Image =&gt; 商品主图<br>\nProductImage =&gt; imgs.imgUrl =&gt; Image =&gt; 商品详情图</p>\n</blockquote>\n<p>(4) 异常处理信息提示</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    <span class=\"string\">'msg'</span>       =&gt; <span class=\"string\">'当前产品无详情'</span>,</span><br><span class=\"line\">    <span class=\"string\">'errorCode'</span> =&gt; <span class=\"number\">20001</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-10-1-路由变量规则\"><a class=\"markdownIt-Anchor\" href=\"#9-10-1-路由变量规则\"></a> 9-10-1 路由变量规则</h3>\n<p>1.路由匹配规则在项目中的应用。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::get(<span class=\"string\">'api/:version/product/recent'</span>, <span class=\"string\">'api/:version.Product/getRecent'</span>);</span><br><span class=\"line\">Route::get(<span class=\"string\">'api/:version/product/:id'</span>, <span class=\"string\">'api/:version.Product/getOne'</span>);</span><br></pre></td></tr></table></figure>\n<p>2.存在的问题</p>\n<p>目前调用接口都不存在问题，但是当将<code>:id</code>行放到<code>recent</code>行之前后，在调用<code>recent</code>路由时，则会因为优先匹配<code>:id</code>对应的路由，<br>\n此时则会因为参数校验不通过而报错。</p>\n<p>3.解决之道：</p>\n<p>对路由匹配规则进行限定，设置变量规则，对于<code>:id</code>行，限定只有当参数为数值时才匹配到当前行。即设置 <code>$id</code>的变量规则</p>\n<p>变量规则：为变量用正则的方式指定变量规则，弥补了动态变量无法限制具体的类型问题，并且支持全局规则设置。</p>\n<p>4.代码实现[设置变量规则]</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::get(<span class=\"string\">'api/:version/product/:id'</span>, <span class=\"string\">'api/:version.Product/getOne'</span>, [], [<span class=\"string\">'id'</span>=&gt;<span class=\"string\">'\\d+'</span>]);</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-10-2-路由分组\"><a class=\"markdownIt-Anchor\" href=\"#9-10-2-路由分组\"></a> 9-10-2 路由分组</h3>\n<p>对路由配置文件中，具有相同路由前缀的路由归为同一路由组，例如：</p>\n<p>对于几个对应产品信息的路由，</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::get(<span class=\"string\">'api/:version/product/recent'</span>, <span class=\"string\">'api/:version.Product/getRecent'</span>);</span><br><span class=\"line\">Route::get(<span class=\"string\">'api/:version/product/by_category'</span>, <span class=\"string\">'api/:version.Product/getAllInCategory'</span>);</span><br><span class=\"line\">Route::get(<span class=\"string\">'api/:version/product/:id'</span>, <span class=\"string\">'api/:version.Product/getOne'</span>);</span><br></pre></td></tr></table></figure>\n<p>可以分组到产品组路由下，</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 闭包方式注册路由分组</span></span><br><span class=\"line\">Route::group(<span class=\"string\">'api/:version/product'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Route::get(<span class=\"string\">'recent'</span>, <span class=\"string\">'api/:version.Product/getRecent'</span>);</span><br><span class=\"line\">    Route::get(<span class=\"string\">'by_category'</span>, <span class=\"string\">'api/:version.Product/getAllInCategory'</span>);</span><br><span class=\"line\">    Route::get(<span class=\"string\">':id'</span>, <span class=\"string\">'api/:version.Product/getOne'</span>, [], [<span class=\"string\">'id'</span> =&gt; <span class=\"string\">'\\d+'</span>]);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>或者：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组方式注册路由分组</span></span><br><span class=\"line\">Route::group(<span class=\"string\">'api/:version/product'</span>, [</span><br><span class=\"line\">    <span class=\"string\">'recent'</span> =&gt; [<span class=\"string\">'api/:version.Product/getRecent'</span>],</span><br><span class=\"line\">    <span class=\"string\">'by_category'</span> =&gt; [<span class=\"string\">'api/:version.Product/getAllInCategory'</span>],</span><br><span class=\"line\">    <span class=\"string\">':id'</span> =&gt; [<span class=\"string\">'api/:version.Product/getOne'</span>, [], [<span class=\"string\">'id'</span> =&gt; <span class=\"string\">'\\d+'</span>]]</span><br><span class=\"line\">],[<span class=\"string\">'method'</span> =&gt; <span class=\"string\">'get'</span>]);</span><br></pre></td></tr></table></figure>\n<p>路由分组的方式定义路由，执行的效率会比一般形式高一点。</p>\n<p>【注】路由分组的公共路由定义时，不能在末尾加<code>/</code>，否则会报控制器不存在的错误</p>\n<h3 id=\"9-11-闭包函数构建查询器\"><a class=\"markdownIt-Anchor\" href=\"#9-11-闭包函数构建查询器\"></a> 9-11 闭包函数构建查询器</h3>\n<p>1.完成的商品详情的数据信息格式为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">&quot;id&quot;: 11,</span><br><span class=\"line\">&quot;name&quot;: &quot;贵妃笑 100克&quot;,</span><br><span class=\"line\">&quot;price&quot;: &quot;0.01&quot;,</span><br><span class=\"line\">&quot;stock&quot;: 994,</span><br><span class=\"line\">&quot;main_img_url&quot;: &quot;http://mypro.com/static/images/product-dryfruit-a@6.png&quot;,</span><br><span class=\"line\">&quot;summary&quot;: null,</span><br><span class=\"line\">&quot;img_id&quot;: 39,</span><br><span class=\"line\">&quot;imgs&quot;:[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;id&quot;: 4,</span><br><span class=\"line\">        &quot;order&quot;: 1,</span><br><span class=\"line\">        &quot;img_url&quot;:&#123;</span><br><span class=\"line\">            &quot;url&quot;: &quot;http://mypro.com/static/images/detail-1@1-dryfruit.png&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;id&quot;: 5,</span><br><span class=\"line\">        &quot;order&quot;: 2,</span><br><span class=\"line\">        &quot;img_url&quot;:&#123;</span><br><span class=\"line\">            &quot;url&quot;: &quot;http://mypro.com/static/images/detail-2@1-dryfruit.png&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">],</span><br><span class=\"line\">&quot;properties&quot;:[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;id&quot;: 1,</span><br><span class=\"line\">        &quot;name&quot;: &quot;品名&quot;,</span><br><span class=\"line\">        &quot;detail&quot;: &quot;杨梅&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.问题：其中<code>imgs</code>的值为每个商品下的所有图片介绍，所以所有图片之间一定存在一定的顺序，其中<code>imgs</code>数组下的数据中存在<code>order</code>排序字段，如何对<code>imgs</code>的数据通过<code>order</code>进行排序？</p>\n<p>3.【答】：使用闭包函数构建查询器【相当于拼接 sql】。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$product = <span class=\"keyword\">self</span>::with([</span><br><span class=\"line\">        <span class=\"string\">'imgs'</span> =&gt; <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($query)</span> </span>&#123;</span><br><span class=\"line\">            $query-&gt;with([<span class=\"string\">'imgUrl'</span>])-&gt;order(<span class=\"string\">'order asc'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ])</span><br><span class=\"line\">    -&gt;with([<span class=\"string\">'properties'</span>])</span><br><span class=\"line\">    -&gt;find($id);</span><br></pre></td></tr></table></figure>\n<p>4.思路分析：</p>\n<p>（1）要对 imgs 下的数据进行处理，需要获取到每组数据，然后对<code>order</code>字段进行排序。【通过闭包函数获取到每组数据】</p>\n<p>（2）除了要对每组数据进行按<code>order</code>排序，还需要处理<code>img_url</code>。【通过 with 链式操作处理<code>img_url</code>】</p>\n<p>5.关于闭包函数的理解：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'imgs'</span> =&gt; <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($query)</span> </span>&#123;</span><br><span class=\"line\">    $query-&gt;with([<span class=\"string\">'imgUrl'</span>])-&gt;order(<span class=\"string\">'order asc'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于数组<code>imgs</code>，通过闭包函数，获取到每组数据，其中<code>$query</code>即作为参数接收每组数据的值，然后再对每组数据的<code>img_url</code>通过 with 进行数据关联。</p>\n<h3 id=\"9-12-用户收货地址\"><a class=\"markdownIt-Anchor\" href=\"#9-12-用户收货地址\"></a> 9-12 用户收货地址</h3>\n<p>1.需求说明：</p>\n<p>用户收货地址接口信息需要进行身份验证，登录用户只能查看和操作自己的地址信息，未登录用户不能访问。</p>\n<p>为简化操作，当前将用户和用户地址的关联关系设定为一对一。</p>\n<p>2.思考点：</p>\n<p>（1）对登录状态的判断：</p>\n<p>当用户访问小程序时，调用<code>wx.login()</code>方法，并生成<code>code</code>,后台接口拿到 code 后生成 token，并用 token 以及配置的<code>app_id</code>和<code>app_secret</code>请求微信接口，并获取微信返回的<code>openid</code>等信息，存储到缓存中<br>\n[以 token 为键，uid|wxResult|scope 组成的 json 数据为值]</p>\n<p>所以，创建或修改用户地址信息时，在处理地址信息和用户信息的关联时，使用的用户信息，应当是当前登录用户的信息，而不能是客户端传递的用户信息参数[可能传递有误，导致误操作到其他用户的地址信息]</p>\n<p>实现一定程度上的接口保护。</p>\n<p>（2）传入参数的检验</p>\n<p>验证器校验往往只能验证某个字段或某些字段的合法性，而客户端可能传入的参数比需要的参数多，或者传入了<code>uid</code>或者<code>user_id</code>，导致更新时覆盖了其他用户的数据信息，对系统的安全性造成影响，<br>\n所以，在接收客户端传入参数时，需要进行多余字段的过滤。</p>\n<p>（3）对手机号的验证</p>\n<p>正则表达式的应用场景，正则模式<code>^1(3|4|5|6|7|8)[0-9]\\d{8}$^</code></p>\n<p>（4）<strong>通过模型关联，实现用户地址的新增和更新</strong>【新】</p>\n<p>通过关联模型方法，创建数据</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新增</span></span><br><span class=\"line\">$user-&gt;address()-&gt;save($dataArray);</span><br></pre></td></tr></table></figure>\n<p>通过关联模型属性，对当前属性对应的记录进行更新</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 更新</span></span><br><span class=\"line\">$user-&gt;address-&gt;save($dataArray);</span><br></pre></td></tr></table></figure>\n<p>（5）模型关联方法的选择：</p>\n<p>模型关联方法的区分：</p>\n<pre><code>有主键关联无主键 =》 belongsTo\n无主键关联有主键 =》 hasOne|hasMany\n</code></pre>\n<p>（6）HTTP 状态码</p>\n<p>200：操作成功，服务器已成功处理了请求。说明：<a href=\"https://blog.csdn.net/u014028956/article/details/47125403\" target=\"_blank\" rel=\"noopener\">如果是对您的 robots.txt 文件显示此状态码，则表示 Googlebot 已成功检索到该文件</a></p>\n<p>201：创建成功，表示服务器执行成功，并且创建了新的资源</p>\n<p>设置接口调用成功后的状态码标识：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> json(<span class=\"keyword\">new</span> SuccessMessage(), <span class=\"number\">201</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-12-1-通过令牌获取用户标识\"><a class=\"markdownIt-Anchor\" href=\"#9-12-1-通过令牌获取用户标识\"></a> 9-12-1 通过令牌获取用户标识</h3>\n<p>(1)定义控制器方法 <code>createOrUpdate()</code></p>\n<p>(2)定义路由 <code>api/:version/address</code></p>\n<p>(3)验证器验证用户输入数据 [<code>name</code>, <code>mobile</code>, <code>province</code>, <code>city</code>, <code>country</code>, <code>detail</code>]</p>\n<p>(4)异常处理信息提示</p>\n<p>当数据不合法时抛出异常，而当操作成功时，也需要返回相应的数据信息。当前项目将抛出的成功信息也放在异常处理类库下。</p>\n<h3 id=\"9-12-2-面向对象的方式封装获取-uid-方法\"><a class=\"markdownIt-Anchor\" href=\"#9-12-2-面向对象的方式封装获取-uid-方法\"></a> 9-12-2 面向对象的方式封装获取 uid 方法</h3>\n<p>1.通过令牌 token 即可获取缓存中对应的用户信息，而缓存中的信息包括<code>uid</code> <code>scope</code> <code>wxResult</code>[<code>openid</code> <code>session_key</code>]</p>\n<p>而在 http 请求时，token 保存在 header 头信息中，获取头信息中<code>token</code>的方法：</p>\n<p><code>$token = Request::instance()-&gt;header('token');</code></p>\n<p>2.通过 json 键值对的键，获取 cache 数据</p>\n<p><code>Cache::get($token)</code></p>\n<p>3.增强项目的扩展性，可将通过 token 获取变量的方法进行封装。</p>\n<p>4.代码实现：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCurrentTokenVar</span><span class=\"params\">($key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $token = Request::instance()-&gt;header(<span class=\"string\">'token'</span>);</span><br><span class=\"line\">    $vars  = Cache::get($token);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( ! $vars) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> TokenException();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!is_array($vars)) &#123;</span><br><span class=\"line\">            $vars = json_decode($vars, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($vars[$key])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> $vars[$key];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"keyword\">Exception</span>(<span class=\"string\">'尝试获取的Token变量不存在'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCurrentUid</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $uid = <span class=\"keyword\">self</span>::getCurrentTokenVar(<span class=\"string\">'uid'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $uid;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-12-3-模型新增和更新\"><a class=\"markdownIt-Anchor\" href=\"#9-12-3-模型新增和更新\"></a> 9-12-3 模型新增和更新</h3>\n<p>通过用户模型，进行面向对象方式的新增和更新</p>\n<p>（1）user 模型定义 address()关联方法，获取到用户地址信息，当用户地址信息不存在时，也通过<strong>关联模型方法</strong>，保存地址信息</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新增</span></span><br><span class=\"line\">$user-&gt;address()-&gt;save($dataArray);</span><br></pre></td></tr></table></figure>\n<p>（2）user 模型通过 address()关联方法关联 user_address 数据表中对应的用户地址信息，通过关联获取的数据仍然可以作为模型的属性值使用，<br>\n再通过<strong>关联模型属性</strong>，对当前属性对应的记录进行更新 [包含主键 id]</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 更新</span></span><br><span class=\"line\">$user-&gt;address-&gt;save($dataArray);</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-12-4-参数过滤\"><a class=\"markdownIt-Anchor\" href=\"#9-12-4-参数过滤\"></a> 9-12-4 参数过滤</h3>\n<p>封装处理客户端传入的参数的方法，由于当前用户的信息是通过缓存获取的，为避免用户传入的参数造成错误修改，所以需要对客户端传入数据进行过滤，<br>\n如果携带用户 id 参数，则抛出异常，不再继续处理。除此之外，对于传入的无效、多余数据，进行过滤，仅接收验证器需要验证的字段信息。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDataByRule</span><span class=\"params\">($params)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($params[<span class=\"string\">'uid'</span>]) || <span class=\"keyword\">isset</span>($params[<span class=\"string\">'user_id'</span>])) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ParameterException([</span><br><span class=\"line\">            <span class=\"string\">'msg'</span> =&gt; <span class=\"string\">'参数中包含非法的参数名user_id或者uid'</span></span><br><span class=\"line\">        ]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $newArray = [];</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;rule <span class=\"keyword\">as</span> $key =&gt; $value) &#123;</span><br><span class=\"line\">        $newArray[$key] = $params[$key];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $newArray;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-12-5-接口测试\"><a class=\"markdownIt-Anchor\" href=\"#9-12-5-接口测试\"></a> 9-12-5 接口测试</h3>\n<p>1.需要的参数</p>\n<ul>\n<li>\n<p>token: header 请求头 [通过微信小程序的开发者工具]</p>\n</li>\n<li>\n<p>address 字段信息 [<code>name</code>, <code>mobile</code>, <code>province</code>, <code>city</code>, <code>country</code>, <code>detail</code>]</p>\n</li>\n</ul>\n<p>2.返回的数据</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"code\"</span>: <span class=\"number\">201</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"msg\"</span>: <span class=\"string\">\"ok\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"errorCode\"</span>: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>并且通过设置返回值为带状态码的 json 数据，<code>json(new SuccessMessage(), 201)</code>，可将 http 的状态码也设置为<code>201</code></p>"},{"title":"【转】PHP发展路径","date":"2018-05-07T08:24:58.000Z","_content":"\n按照了解的很多 PHP/LNMP 程序员的发展轨迹，结合个人经验体会，抽象出很多程序员对未来的迷漫，特别对技术学习的盲目和慌乱，简单梳理了这个每个阶段 PHP 程序员的技术要求，来帮助很多 PHP 程序做对照设定学习成长目标。\n\n <!--more-->\n\n## 第一阶段：基础阶段（基础 PHP 程序员）\n\n**重点**：把 LNMP 搞熟练（核心是安装配置基本操作）\n\n**目标**：能够完成基本的 LNMP 系统安装，简单配置维护；能够做基本的简单系统的 PHP 开发；能够在 PHP 中型系统中支持某个 PHP 功能模块的开发。\n\n**时间**：完成本阶段的时间因人而异，有的成长快半年一年就过了，成长慢的两三年也有。\n\n### 1.Linux：\n\n基本命令、操作、启动、基本服务配置（包括 rpm 安装文件，各种服务配置等）；会写简单的 shell 脚本和 awk/sed 脚本命令等。\n\n### 2.Nginx：\n\n做到能够安装配置 nginx+php，知道基本的 nginx 核心配置选项，知道 server/fastcgi_pass/access_log 等基础配置，目标是能够让 nginx+php_fpm 顺利工作。\n\n### 3.MySQL：\n\n会自己搭建 mysql，知道基本的 mysql 配置选项；知道 innodb 和 myisam 的区别，知道针对 InnoDB 和 MyISAM 两个引擎的不同配置选项；知道基本的两个引擎的差异和选择上面的区别；能够纯手工编译搭建一个 MySQL 数据库并且配置好编码等正常稳定运行；核心主旨是能够搭建一个可运行的 MySQL 数据库。\n\n### 4.PHP：\n\n基本语法数组、字符串、数据库、XML、Socket、GD/ImageMgk 图片处理等等；熟悉各种跟 MySQL 操作链接的 api（mysql/mysqli/PDO)，知道各种编码问题的解决；知道常规熟练使用的 PHP 框架（ThinkPHP、Zendframework、Yii、Yaf 等）；了解基本 MVC 的运行机制和为什么这么做，稍微知道不同的 PHP 框架之间的区别；能够快速学习一个 MVC 框架。能够知道开发工程中的文件目录组织，有基本的良好的代码结构和风格，能够完成小系统的开发和中型系统中某个模块的开发工作。\n\n### 5.前端：\n\n如果条件时间允许，可以适当学习下 HTML/CSS/JS 等相关知识，知道什么 web 标准，div+css 的 web/wap 页面模式，知道 HTML5 和 HTML4 的区别；了解一些基本的前端只是和 JS 框架（jQuery 之类的）；了解一些基本的 JavaScript 编程知识；（本项不是必须项，如果有时间，稍微了解一下是可以的，不过不建议作为重点，除非个人有强烈兴趣）\n\n### 6.系统设计：\n\n能够完成小型系统的基本设计，包括简单的数据库设计，能够完成基本的：浏览器 -> Nginx+PHP -> 数据库 架构的设计开发工作；能够支撑每天几十万到数百万流量网站的开发维护工作；\n\n## 第二阶段：提高阶段 （中级 PHP 程序员）\n\n**重点**：提高针对 LNMP 的技能，能够更全面的对 LNMP 有熟练的应用。\n\n**目标**：能够随时随地搭建好 LNMP 环境，快速完成常规配置；能够追查解决大部分遇到的开发和线上环境的问题；能够独立承担中型系统的构架和开发工作；能够在大型系统中承担某个中型模块的开发工作；\n\n### 1. Linux:\n\n在第一阶段的基础上面，能够流畅的使用 Shell 脚本来完成很多自动化的工作；awk/sed/perl 也操作的不错，能够完成很多文本处理和数据统计等工作；基本能够安装大部分非特殊的 Linux 程序（包括各种库、包、第三方依赖等等，比如 MongoDB/Redis/Sphinx/Luncene/SVN 之类的）；了解基本的 Linux 服务，知道如何查看 Linux 的性能指标数据，知道基本的 Linux 下面的问题跟踪等。\n\n### 2. Nginx:\n\n在第一阶段的基础上面，了解复杂一些的 Nginx 配置；包括 多核配置、events、proxy*pass，sendfile/tcp*\\*配置，知道超时等相关配置和性能影响；知道 nginx 除了 web server，还能够承担代理服务器、反向静态服务器等配置；知道基本的 nginx 配置调优；知道如何配置权限、编译一个 nginx 扩展到 nginx；知道基本的 nginx 运行原理（master/worker 机制，epoll），知道为什么 nginx 性能比 apache 性能好等知识；\n\n### 3. MySQL/MongoDB：\n\n在第一阶段的基础上面，在 MySQL 开发方面，掌握很多小技巧，包括常规 SQL 优化（group by/order by/rand 优化等）；除了能够搭建 MySQL，还能够冷热备份 MySQL 数据，还知道影响 innodb/myisam 性能的配置选项（比如 key_buffer/query_cache/sort_buffer/innodb_buffer_pool_size/innodb_flush_log_at_trx_commit 等），也知道这些选项配置成为多少值合适；另外也了解一些特殊的配置选项，比如 知道如何搭建 mysql 主从同步的环境，知道各个 binlog_format 的区别；知道 MySQL 的性能追查，包括 slow_log/explain 等，还能够知道基本的索引建立处理等知识；原理方面了解基本的 MySQL 的架构（Server+存储引擎），知道基本的 InnoDB/MyISAM 索引存储结构和不同（聚簇索引，B 树）；知道基本的 InnoDB 事务处理机制；了解大部分 MySQL 异常情况的处理方案（或者知道哪儿找到处理方案）。条件允许的情况，建议了解一下 NoSQL 的代表 MongoDB 数据库，顺便对比跟 MySQL 的差别，同事能够在合适的应用场景安全谨慎的使用 MongoDB，知道基本的 PHP 与 MongoDB 的结合开发。\n\n### 4. Redis/Memcached：\n\n在大部分中型系统里面一定会涉及到缓存处理，所以一定要了解基本的缓存；知道 Memcached 和 Redis 的异同和应用场景，能够独立安装 Redis/Memcached，了解 Memcahed 的一些基本特性和限制，比如最大的 value 值，知道 PHP 跟他们的使用结合；Redis 了解基本工作原理和使用，了解常规的数据类型，知道什么场景应用什么类型，了解 Redis 的事务等等。原理部分，能够大概了解 Memcached 的内存结构（slab 机制），redis 就了解常用数据类型底层实现存储结构（SDS/链表/SkipList/HashTable）等等，顺便了解一下 Redis 的事务、RDB、AOF 等机制更好\n\n### 5. PHP：\n\n除了第一阶段的能力，安装配置方面能够随意安装 PHP 和各种第三方扩展的编译安装配置；了解 php-fpm 的大部分配置选项和含义（如 max_requests/max_children/request_terminate_timeout 之类的影响性能的配置），知道 mod_php/fastcgi 的区别；在 PHP 方面已经能够熟练各种基础技术，还包括各种深入些的 PHP，包括对 PHP 面向对象的深入理解/SPL/语法层面的特殊特性比如反射之类的；在框架方面已经阅读过最少一个以上常规 PHP MVC 框架的代码了，知道基本 PHP 框架内部实现机制和设计思想；在 PHP 开发中已经能够熟练使用常规的设计模式来应用开发（抽象工厂/单例/观察者/命令链/策略/适配器 等模式）；建议开发自己的 PHP MVC 框架来充分让开发自由化，让自己深入理解 MVC 模式，也让自己能够在业务项目开发里快速升级；熟悉 PHP 的各种代码优化方法，熟悉大部分 PHP 安全方面问题的解决处理；熟悉基本的 PHP 执行的机制原理（Zend 引擎/扩展基本工作机制）；\n\n### 6. C/C++：\n\n开始涉猎一定的 C/C++语言，能够写基本的 C/C++代码，对基本的 C/C++语法熟悉（指针、数组操作、字符串、常规标准 API）和数据结构（链表、树、哈希、队列）有一定的熟悉下；对 Linux 下面的 C 语言开发有基本的了解概念，会简单的 makefile 文件编写，能够使用简单的 GCC/GDB 的程序编译简单调试工作；对基本的网络编程有大概了解。（本项是为了向更高层次打下基础）\n\n### 7. 前端：\n\n在第一阶段的基础上面，熟悉基本的 HTTP 协议（协议代码 200/300/400/500，基本的 HTTP 交互头）；条件允许，可以在深入写出稍微优雅的 HTML+CSS+JavaScript，或者能够大致简单使用某些前端框架（jQuery/YUI/ExtJS/RequireJS/BootStrap 之类）；如果条件允许，可以深入学习 JavaScript 编程，比如闭包机制、DOM 处理；再深入些可以读读 jQuery 源码做深入学习。（本项不做重点学习，除非对前端有兴趣）\n\n### 8. 系统设计：\n\n能够设计大部分中型系统的网站架构、数据库、基本 PHP 框架选型；性能测试排查处理等；能够完成类似：浏览器 -> CDN(Squid) -> Nginx+PHP -> 缓存 -> 数据库 结构网站的基本设计开发维护；能够支撑每天数百万到千万流量基本网站的开发维护工作；\n\n## 第三阶段：高级阶段 （高级 PHP 程序员）\n\n**重点**：除了基本的 LNMP 程序，还能够在某个方向或领域有深入学习。（纵深维度发展）\n\n**目标**：除了能够完成基本的 PHP 业务开发，还能够解决大部分深入复杂的技术问题，并且可以独立设计完成中大型的系统设计和开发工作；自己能够独立 hold 深入某个技术方向，在这块比较专业。（比如在 MySQL、Nginx、PHP、Redis 等等任一方向深入研究）\n\n### 1. Linux：\n\n除了第二阶段的能力，在 Linux 下面除了常规的操作和性能监控跟踪，还能够使用很多高级复杂的命令完成工作（watch/tcpdump/starce/ldd/ar 等)；在 shell 脚本方面，已经能够编写比较复杂的 shell 脚本（超过 500 行）来协助完成很多包括备份、自动化处理、监控等工作的 shell；对 awk/sed/perl 等应用已经如火纯青，能够随意操作控制处理文本统计分析各种复杂格式的数据；对 Linux 内部机制有一些了解，对内核模块加载，启动错误处理等等有个基本的处理；同时对一些其他相关的东西也了解，比如 NFS、磁盘管理等等；\n\n### 2. Nginx:\n\n在第二阶段的基础上面，已经能够把 Nginx 操作的很熟练，能够对 Nginx 进行更深入的运维工作，比如监控、性能优化，复杂问题处理等等；看个人兴趣，更多方面可以考虑侧重在关于 Nginx 工作原理部分的深入学习，主要表现在阅读源码开始，比如具体的 master/worker 工作机制，Nginx 内部的事件处理，内存管理等等；同时可以学习 Nginx 扩展的开发，可以定制一些自己私有的扩展；同时可以对 Nginx+Lua 有一定程度的了解，看看是否可以结合应用出更好模式；这个阶段的要求是对 Nginx 原理的深入理解，可以考虑成为 Nginx 方向的深入专业者。\n\n### 3. MySQL/MongoDB：\n\n在第二阶段的基础上面，在 MySQL 应用方面，除了之前的基本 SQL 优化，还能够在完成一些复杂操作，比如大批量数据的导入导出，线上大批量数据的更改表结构或者增删索引字段等等高危操作；除了安装配置，已经能够处理更多复杂的 MySQL 的问题，比如各种问题的追查，主从同步延迟问题的解决、跨机房同步数据方案、MySQL 高可用架构等都有涉及了解；对 MySQL 应用层面，对 MySQL 的核心关键技术比较熟悉，比如事务机制（隔离级别、锁等）、对触发器、分区等技术有一定了解和应用；对 MySQL 性能方面，有包括磁盘优化（SAS 迁移到 SSD）、服务器优化（内存、服务器本身配置）、除了二阶段的其他核心性能优化选项（innodb_log_buffer_size/back_log/table_open_cache/thread_cache_size/innodb_lock_wait_timeout 等）、连接池软件选择应用，对 show \\*（show status/show profile）类的操作语句有深入了解，能够完成大部分的性能问题追查；MySQL 备份技术的深入熟悉，包括灾备还原、对 Binlog 的深入理解，冷热备份，多 IDC 备份等；在 MySQL 原理方面，有更多了解，比如对 MySQL 的工作机制开始阅读部分源码，比如对主从同步（复制）技术的源码学习，或者对某个存储引擎（MyISAM/Innodb/TokuDB）等等的源码学习理解，如果条件允许，可以参考 CSV 引擎开发自己简单的存储引擎来保存一些数据，增强对 MySQL 的理解；在这个过程，如果自己有兴趣，也可以考虑往 DBA 方向发展。MongoDB 层面，可以考虑比如说在写少读多的情况开始在线上应用 MongoDB，或者是做一些线上的数据分析处理的操作，具体场景可以按照工作来，不过核心是要更好的深入理解 RMDBS 和 NoSQL 的不同场景下面的应用，如果条件或者兴趣允许，可以开始深入学习一下 MongoDB 的工作机制。\n\n### 4. Redis/Memcached：\n\n在第二阶段的基础上面，能够更深入的应用和学习。因为 Memcached 不是特别复杂，建议可以把源码进行阅读，特别是内存管理部分，方便深入理解；Redis 部分，可以多做一些复杂的数据结构的应用（zset 来做排行榜排序操作/事务处理用来保证原子性在秒杀类场景应用之类的使用操作）；多涉及 aof 等同步机制的学习应用，设计一个高可用的 Redis 应用架构和集群；建议可以深入的学习一下 Redis 的源码，把在第二阶段积累的知识都可以应用上，特别可以阅读一下包括核心事件管理、内存管理、内部核心数据结构等充分学习了解一下。如果兴趣允许，可以成为一个 Redis 方面非常专业的使用者。\n\n### 5. PHP：\n\n作为基础核心技能，我们在第二阶段的基础上面，需要有更深入的学习和应用。从基本代码应用上面来说，能够解决在 PHP 开发中遇到 95%的问题，了解大部分 PHP 的技巧；对大部分的 PHP 框架能够迅速在一天内上手使用，并且了解各个主流 PHP 框架的优缺点，能够迅速方便项目开发中做技术选型；在配置方面，除了常规第二阶段会的知识，会了解一些比较偏门的配置选项（php auto_prepend_file/auto_append_file），包括扩展中的一些复杂高级配置和原理（比如 memcached 扩展配置中的 memcache.hash_strategy、apc 扩展配置中的 apc.mmap_file_mask/apc.slam_defense/apc.file_update_protection 之类的）；对 php 的工作机制比较了解，包括 php-fpm 工作机制（比如 php-fpm 在不同配置机器下面开启进程数量计算以及原理），对 zend 引擎有基本熟悉（vm/gc/stream 处理），阅读过基本的 PHP 内核源码（或者阅读过相关文章），对 PHP 内部机制的大部分核心数据结构（基础类型/Array/Object）实现有了解，对于核心基础结构（zval/hashtable/gc）有深入学习了解；能够进行基本的 PHP 扩展开发，了解一些扩展开发的中高级知识（minit/rinit 等），熟悉 php 跟 apache/nginx 不同的通信交互方式细节（mod_php/fastcgi）；除了开发 PHP 扩展，可以考虑学习开发 Zend 扩展，从更底层去了解 PHP。\n\n### 6. C/C++：\n\n在第二阶段基础上面，能够在 C/C++语言方面有更深入的学习了解，能够完成中小型 C/C++系统的开发工作；除了基本第二阶段的基础 C/C++语法和数据结构，也能够学习一些特殊数据结构（b-tree/rb-tree/skiplist/lsm-tree/trie-tree 等）方便在特殊工作中需求；在系统编程方面，熟悉多进程、多线程编程；多进程情况下面了解大部分多进程之间的通信方式，能够灵活选择通信方式（共享内存/信号量/管道等）；多线程编程能够良好的解决锁冲突问题，并且能够进行多线程程序的开发调试工作；同时对网络编程比较熟悉，了解多进程模型/多线程模型/异步网络 IO 模型的差别和选型，熟悉不同异步网络 IO 模型的原理和差异（select/poll/epoll/iocp 等），并且熟悉常见的异步框架（ACE/ICE/libev/libevent/libuv/Boost.ASIO 等）和使用，如果闲暇也可以看看一些国产自己开发的库（比如 muduo）；同时能够设计好的高并发程序架构（leader-follow/master-worker 等）；了解大部分 C/C++后端 Server 开发中的问题（内存管理、日志打印、高并发、前后端通信协议、服务监控），知道各个后端服务 RPC 通信问题（struct/http/thirft/protobuf 等）；能够更熟络的使用 GCC 和 GDB 来开发编译调试程序，在线上程序 core 掉后能够迅速追查跟踪解决问题；通用模块开发方面，可以积累或者开发一些通用的工具或库（比如异步网络框架、日志库、内存池、线程池等），不过开发后是否应用要谨慎，省的埋坑去追 bug；\n\n### 7. 前端：\n\n深入了解 HTTP 协议（包括各个细致协议特殊协议代码和背后原因，比如 302 静态文件缓存了，502 是 nginx 后面 php 挂了之类的）；除了之前的前端方面的各种框架应用整合能力，前端方面的学习如果有兴趣可以更深入，表现形式是，可以自己开发一些类似 jQuery 的前端框架，或者开发一个富文本编辑器之类的比较琐碎考验 JavaScript 功力；\n\n### 8. 其他领域语言学习：\n\n在基础的 PHP/C/C++语言方面有基本积累，建议在当前阶段可以尝试学习不同的编程语言，看个人兴趣爱好，脚本类语言可以学学 Python/Ruby 之类的，函数式编程语言可以试试 Lisp/Haskell/Scala/Erlang 之类的，静态语言可以试试 Java/Golang，数据统计分析可以了解了解 R 语言，如果想换个视角做后端业务，可以试试 Node.js 还有前面提到的跟 Nginx 结合的 Nginx_Lua 等。学习不同的语言主要是提升自己的视野和解决问题手段的差异，比如会了解除了进程/线程，还有轻量级协程；比如在跨机器通信场景下面，Erlang 的解决方案简单的惊人；比如在不想选择 C/C++的情况下，还有类似高效的 Erlang/Golang 可用等等；主要是提升视野。\n\n### 9. 其他专业方向学习：\n\n在本阶段里面，会除了基本的 LNMP 技能之外，会考虑一些其他领域知识的学习，这些都是可以的，看个人兴趣和长期的目标方向。目前情况能够选择的领域比较多，比如、云计算（分布式存储、分布式计算、虚拟机等），机器学习（数据挖掘、模式识别等，应用到统计、个性化推荐），自然语言处理（中文分词等），搜索引擎技术、图形图像、语音识别等等。除了这些高大上的，也有很多偏工程方面可以学习的地方，比如高性能系统、移动开发（Android/IOS）、计算机安全、嵌入式系统、硬件等方向。\n\n### 10. 系统设计：\n\n系统设计在第二阶段的基础之上，能够应用掌握的经验技能，设计出比较复杂的中大型系统，能够解决大部分线上的各种复杂系统的问题，完成类似 浏览器 -> CDN -> 负载均衡 ->接入层 -> Nginx+PHP -> 业务缓存 -> 数据库 -> 各路复杂后端 RPC 交互（存储后端、逻辑后端、反作弊后端、外部服务） -> 更多后端 酱紫的复杂业务；能够支撑每天数千万到数亿流量网站的正常开发维护工作。\n\n## 第四阶段：架构阶段 （架构师）\n\nps: 暂时不展开讨论，等下次专门撰文来描述补充本部分内容\n\n## 第五阶段：专家阶段（方向领域专家）\n\nps：高大上，这块不展开讨论 ^\\_^\n\n## 第六阶段：科学家阶段\n\nps：高大上，这块不展开讨论 ^\\_^\n","source":"_posts/php-route.md","raw":"---\ntitle: 【转】PHP发展路径\ndate: 2018-05-07 16:24:58\ntags:\n  - 路径\ncategory:\n  - 【PHP相关】\n---\n\n按照了解的很多 PHP/LNMP 程序员的发展轨迹，结合个人经验体会，抽象出很多程序员对未来的迷漫，特别对技术学习的盲目和慌乱，简单梳理了这个每个阶段 PHP 程序员的技术要求，来帮助很多 PHP 程序做对照设定学习成长目标。\n\n <!--more-->\n\n## 第一阶段：基础阶段（基础 PHP 程序员）\n\n**重点**：把 LNMP 搞熟练（核心是安装配置基本操作）\n\n**目标**：能够完成基本的 LNMP 系统安装，简单配置维护；能够做基本的简单系统的 PHP 开发；能够在 PHP 中型系统中支持某个 PHP 功能模块的开发。\n\n**时间**：完成本阶段的时间因人而异，有的成长快半年一年就过了，成长慢的两三年也有。\n\n### 1.Linux：\n\n基本命令、操作、启动、基本服务配置（包括 rpm 安装文件，各种服务配置等）；会写简单的 shell 脚本和 awk/sed 脚本命令等。\n\n### 2.Nginx：\n\n做到能够安装配置 nginx+php，知道基本的 nginx 核心配置选项，知道 server/fastcgi_pass/access_log 等基础配置，目标是能够让 nginx+php_fpm 顺利工作。\n\n### 3.MySQL：\n\n会自己搭建 mysql，知道基本的 mysql 配置选项；知道 innodb 和 myisam 的区别，知道针对 InnoDB 和 MyISAM 两个引擎的不同配置选项；知道基本的两个引擎的差异和选择上面的区别；能够纯手工编译搭建一个 MySQL 数据库并且配置好编码等正常稳定运行；核心主旨是能够搭建一个可运行的 MySQL 数据库。\n\n### 4.PHP：\n\n基本语法数组、字符串、数据库、XML、Socket、GD/ImageMgk 图片处理等等；熟悉各种跟 MySQL 操作链接的 api（mysql/mysqli/PDO)，知道各种编码问题的解决；知道常规熟练使用的 PHP 框架（ThinkPHP、Zendframework、Yii、Yaf 等）；了解基本 MVC 的运行机制和为什么这么做，稍微知道不同的 PHP 框架之间的区别；能够快速学习一个 MVC 框架。能够知道开发工程中的文件目录组织，有基本的良好的代码结构和风格，能够完成小系统的开发和中型系统中某个模块的开发工作。\n\n### 5.前端：\n\n如果条件时间允许，可以适当学习下 HTML/CSS/JS 等相关知识，知道什么 web 标准，div+css 的 web/wap 页面模式，知道 HTML5 和 HTML4 的区别；了解一些基本的前端只是和 JS 框架（jQuery 之类的）；了解一些基本的 JavaScript 编程知识；（本项不是必须项，如果有时间，稍微了解一下是可以的，不过不建议作为重点，除非个人有强烈兴趣）\n\n### 6.系统设计：\n\n能够完成小型系统的基本设计，包括简单的数据库设计，能够完成基本的：浏览器 -> Nginx+PHP -> 数据库 架构的设计开发工作；能够支撑每天几十万到数百万流量网站的开发维护工作；\n\n## 第二阶段：提高阶段 （中级 PHP 程序员）\n\n**重点**：提高针对 LNMP 的技能，能够更全面的对 LNMP 有熟练的应用。\n\n**目标**：能够随时随地搭建好 LNMP 环境，快速完成常规配置；能够追查解决大部分遇到的开发和线上环境的问题；能够独立承担中型系统的构架和开发工作；能够在大型系统中承担某个中型模块的开发工作；\n\n### 1. Linux:\n\n在第一阶段的基础上面，能够流畅的使用 Shell 脚本来完成很多自动化的工作；awk/sed/perl 也操作的不错，能够完成很多文本处理和数据统计等工作；基本能够安装大部分非特殊的 Linux 程序（包括各种库、包、第三方依赖等等，比如 MongoDB/Redis/Sphinx/Luncene/SVN 之类的）；了解基本的 Linux 服务，知道如何查看 Linux 的性能指标数据，知道基本的 Linux 下面的问题跟踪等。\n\n### 2. Nginx:\n\n在第一阶段的基础上面，了解复杂一些的 Nginx 配置；包括 多核配置、events、proxy*pass，sendfile/tcp*\\*配置，知道超时等相关配置和性能影响；知道 nginx 除了 web server，还能够承担代理服务器、反向静态服务器等配置；知道基本的 nginx 配置调优；知道如何配置权限、编译一个 nginx 扩展到 nginx；知道基本的 nginx 运行原理（master/worker 机制，epoll），知道为什么 nginx 性能比 apache 性能好等知识；\n\n### 3. MySQL/MongoDB：\n\n在第一阶段的基础上面，在 MySQL 开发方面，掌握很多小技巧，包括常规 SQL 优化（group by/order by/rand 优化等）；除了能够搭建 MySQL，还能够冷热备份 MySQL 数据，还知道影响 innodb/myisam 性能的配置选项（比如 key_buffer/query_cache/sort_buffer/innodb_buffer_pool_size/innodb_flush_log_at_trx_commit 等），也知道这些选项配置成为多少值合适；另外也了解一些特殊的配置选项，比如 知道如何搭建 mysql 主从同步的环境，知道各个 binlog_format 的区别；知道 MySQL 的性能追查，包括 slow_log/explain 等，还能够知道基本的索引建立处理等知识；原理方面了解基本的 MySQL 的架构（Server+存储引擎），知道基本的 InnoDB/MyISAM 索引存储结构和不同（聚簇索引，B 树）；知道基本的 InnoDB 事务处理机制；了解大部分 MySQL 异常情况的处理方案（或者知道哪儿找到处理方案）。条件允许的情况，建议了解一下 NoSQL 的代表 MongoDB 数据库，顺便对比跟 MySQL 的差别，同事能够在合适的应用场景安全谨慎的使用 MongoDB，知道基本的 PHP 与 MongoDB 的结合开发。\n\n### 4. Redis/Memcached：\n\n在大部分中型系统里面一定会涉及到缓存处理，所以一定要了解基本的缓存；知道 Memcached 和 Redis 的异同和应用场景，能够独立安装 Redis/Memcached，了解 Memcahed 的一些基本特性和限制，比如最大的 value 值，知道 PHP 跟他们的使用结合；Redis 了解基本工作原理和使用，了解常规的数据类型，知道什么场景应用什么类型，了解 Redis 的事务等等。原理部分，能够大概了解 Memcached 的内存结构（slab 机制），redis 就了解常用数据类型底层实现存储结构（SDS/链表/SkipList/HashTable）等等，顺便了解一下 Redis 的事务、RDB、AOF 等机制更好\n\n### 5. PHP：\n\n除了第一阶段的能力，安装配置方面能够随意安装 PHP 和各种第三方扩展的编译安装配置；了解 php-fpm 的大部分配置选项和含义（如 max_requests/max_children/request_terminate_timeout 之类的影响性能的配置），知道 mod_php/fastcgi 的区别；在 PHP 方面已经能够熟练各种基础技术，还包括各种深入些的 PHP，包括对 PHP 面向对象的深入理解/SPL/语法层面的特殊特性比如反射之类的；在框架方面已经阅读过最少一个以上常规 PHP MVC 框架的代码了，知道基本 PHP 框架内部实现机制和设计思想；在 PHP 开发中已经能够熟练使用常规的设计模式来应用开发（抽象工厂/单例/观察者/命令链/策略/适配器 等模式）；建议开发自己的 PHP MVC 框架来充分让开发自由化，让自己深入理解 MVC 模式，也让自己能够在业务项目开发里快速升级；熟悉 PHP 的各种代码优化方法，熟悉大部分 PHP 安全方面问题的解决处理；熟悉基本的 PHP 执行的机制原理（Zend 引擎/扩展基本工作机制）；\n\n### 6. C/C++：\n\n开始涉猎一定的 C/C++语言，能够写基本的 C/C++代码，对基本的 C/C++语法熟悉（指针、数组操作、字符串、常规标准 API）和数据结构（链表、树、哈希、队列）有一定的熟悉下；对 Linux 下面的 C 语言开发有基本的了解概念，会简单的 makefile 文件编写，能够使用简单的 GCC/GDB 的程序编译简单调试工作；对基本的网络编程有大概了解。（本项是为了向更高层次打下基础）\n\n### 7. 前端：\n\n在第一阶段的基础上面，熟悉基本的 HTTP 协议（协议代码 200/300/400/500，基本的 HTTP 交互头）；条件允许，可以在深入写出稍微优雅的 HTML+CSS+JavaScript，或者能够大致简单使用某些前端框架（jQuery/YUI/ExtJS/RequireJS/BootStrap 之类）；如果条件允许，可以深入学习 JavaScript 编程，比如闭包机制、DOM 处理；再深入些可以读读 jQuery 源码做深入学习。（本项不做重点学习，除非对前端有兴趣）\n\n### 8. 系统设计：\n\n能够设计大部分中型系统的网站架构、数据库、基本 PHP 框架选型；性能测试排查处理等；能够完成类似：浏览器 -> CDN(Squid) -> Nginx+PHP -> 缓存 -> 数据库 结构网站的基本设计开发维护；能够支撑每天数百万到千万流量基本网站的开发维护工作；\n\n## 第三阶段：高级阶段 （高级 PHP 程序员）\n\n**重点**：除了基本的 LNMP 程序，还能够在某个方向或领域有深入学习。（纵深维度发展）\n\n**目标**：除了能够完成基本的 PHP 业务开发，还能够解决大部分深入复杂的技术问题，并且可以独立设计完成中大型的系统设计和开发工作；自己能够独立 hold 深入某个技术方向，在这块比较专业。（比如在 MySQL、Nginx、PHP、Redis 等等任一方向深入研究）\n\n### 1. Linux：\n\n除了第二阶段的能力，在 Linux 下面除了常规的操作和性能监控跟踪，还能够使用很多高级复杂的命令完成工作（watch/tcpdump/starce/ldd/ar 等)；在 shell 脚本方面，已经能够编写比较复杂的 shell 脚本（超过 500 行）来协助完成很多包括备份、自动化处理、监控等工作的 shell；对 awk/sed/perl 等应用已经如火纯青，能够随意操作控制处理文本统计分析各种复杂格式的数据；对 Linux 内部机制有一些了解，对内核模块加载，启动错误处理等等有个基本的处理；同时对一些其他相关的东西也了解，比如 NFS、磁盘管理等等；\n\n### 2. Nginx:\n\n在第二阶段的基础上面，已经能够把 Nginx 操作的很熟练，能够对 Nginx 进行更深入的运维工作，比如监控、性能优化，复杂问题处理等等；看个人兴趣，更多方面可以考虑侧重在关于 Nginx 工作原理部分的深入学习，主要表现在阅读源码开始，比如具体的 master/worker 工作机制，Nginx 内部的事件处理，内存管理等等；同时可以学习 Nginx 扩展的开发，可以定制一些自己私有的扩展；同时可以对 Nginx+Lua 有一定程度的了解，看看是否可以结合应用出更好模式；这个阶段的要求是对 Nginx 原理的深入理解，可以考虑成为 Nginx 方向的深入专业者。\n\n### 3. MySQL/MongoDB：\n\n在第二阶段的基础上面，在 MySQL 应用方面，除了之前的基本 SQL 优化，还能够在完成一些复杂操作，比如大批量数据的导入导出，线上大批量数据的更改表结构或者增删索引字段等等高危操作；除了安装配置，已经能够处理更多复杂的 MySQL 的问题，比如各种问题的追查，主从同步延迟问题的解决、跨机房同步数据方案、MySQL 高可用架构等都有涉及了解；对 MySQL 应用层面，对 MySQL 的核心关键技术比较熟悉，比如事务机制（隔离级别、锁等）、对触发器、分区等技术有一定了解和应用；对 MySQL 性能方面，有包括磁盘优化（SAS 迁移到 SSD）、服务器优化（内存、服务器本身配置）、除了二阶段的其他核心性能优化选项（innodb_log_buffer_size/back_log/table_open_cache/thread_cache_size/innodb_lock_wait_timeout 等）、连接池软件选择应用，对 show \\*（show status/show profile）类的操作语句有深入了解，能够完成大部分的性能问题追查；MySQL 备份技术的深入熟悉，包括灾备还原、对 Binlog 的深入理解，冷热备份，多 IDC 备份等；在 MySQL 原理方面，有更多了解，比如对 MySQL 的工作机制开始阅读部分源码，比如对主从同步（复制）技术的源码学习，或者对某个存储引擎（MyISAM/Innodb/TokuDB）等等的源码学习理解，如果条件允许，可以参考 CSV 引擎开发自己简单的存储引擎来保存一些数据，增强对 MySQL 的理解；在这个过程，如果自己有兴趣，也可以考虑往 DBA 方向发展。MongoDB 层面，可以考虑比如说在写少读多的情况开始在线上应用 MongoDB，或者是做一些线上的数据分析处理的操作，具体场景可以按照工作来，不过核心是要更好的深入理解 RMDBS 和 NoSQL 的不同场景下面的应用，如果条件或者兴趣允许，可以开始深入学习一下 MongoDB 的工作机制。\n\n### 4. Redis/Memcached：\n\n在第二阶段的基础上面，能够更深入的应用和学习。因为 Memcached 不是特别复杂，建议可以把源码进行阅读，特别是内存管理部分，方便深入理解；Redis 部分，可以多做一些复杂的数据结构的应用（zset 来做排行榜排序操作/事务处理用来保证原子性在秒杀类场景应用之类的使用操作）；多涉及 aof 等同步机制的学习应用，设计一个高可用的 Redis 应用架构和集群；建议可以深入的学习一下 Redis 的源码，把在第二阶段积累的知识都可以应用上，特别可以阅读一下包括核心事件管理、内存管理、内部核心数据结构等充分学习了解一下。如果兴趣允许，可以成为一个 Redis 方面非常专业的使用者。\n\n### 5. PHP：\n\n作为基础核心技能，我们在第二阶段的基础上面，需要有更深入的学习和应用。从基本代码应用上面来说，能够解决在 PHP 开发中遇到 95%的问题，了解大部分 PHP 的技巧；对大部分的 PHP 框架能够迅速在一天内上手使用，并且了解各个主流 PHP 框架的优缺点，能够迅速方便项目开发中做技术选型；在配置方面，除了常规第二阶段会的知识，会了解一些比较偏门的配置选项（php auto_prepend_file/auto_append_file），包括扩展中的一些复杂高级配置和原理（比如 memcached 扩展配置中的 memcache.hash_strategy、apc 扩展配置中的 apc.mmap_file_mask/apc.slam_defense/apc.file_update_protection 之类的）；对 php 的工作机制比较了解，包括 php-fpm 工作机制（比如 php-fpm 在不同配置机器下面开启进程数量计算以及原理），对 zend 引擎有基本熟悉（vm/gc/stream 处理），阅读过基本的 PHP 内核源码（或者阅读过相关文章），对 PHP 内部机制的大部分核心数据结构（基础类型/Array/Object）实现有了解，对于核心基础结构（zval/hashtable/gc）有深入学习了解；能够进行基本的 PHP 扩展开发，了解一些扩展开发的中高级知识（minit/rinit 等），熟悉 php 跟 apache/nginx 不同的通信交互方式细节（mod_php/fastcgi）；除了开发 PHP 扩展，可以考虑学习开发 Zend 扩展，从更底层去了解 PHP。\n\n### 6. C/C++：\n\n在第二阶段基础上面，能够在 C/C++语言方面有更深入的学习了解，能够完成中小型 C/C++系统的开发工作；除了基本第二阶段的基础 C/C++语法和数据结构，也能够学习一些特殊数据结构（b-tree/rb-tree/skiplist/lsm-tree/trie-tree 等）方便在特殊工作中需求；在系统编程方面，熟悉多进程、多线程编程；多进程情况下面了解大部分多进程之间的通信方式，能够灵活选择通信方式（共享内存/信号量/管道等）；多线程编程能够良好的解决锁冲突问题，并且能够进行多线程程序的开发调试工作；同时对网络编程比较熟悉，了解多进程模型/多线程模型/异步网络 IO 模型的差别和选型，熟悉不同异步网络 IO 模型的原理和差异（select/poll/epoll/iocp 等），并且熟悉常见的异步框架（ACE/ICE/libev/libevent/libuv/Boost.ASIO 等）和使用，如果闲暇也可以看看一些国产自己开发的库（比如 muduo）；同时能够设计好的高并发程序架构（leader-follow/master-worker 等）；了解大部分 C/C++后端 Server 开发中的问题（内存管理、日志打印、高并发、前后端通信协议、服务监控），知道各个后端服务 RPC 通信问题（struct/http/thirft/protobuf 等）；能够更熟络的使用 GCC 和 GDB 来开发编译调试程序，在线上程序 core 掉后能够迅速追查跟踪解决问题；通用模块开发方面，可以积累或者开发一些通用的工具或库（比如异步网络框架、日志库、内存池、线程池等），不过开发后是否应用要谨慎，省的埋坑去追 bug；\n\n### 7. 前端：\n\n深入了解 HTTP 协议（包括各个细致协议特殊协议代码和背后原因，比如 302 静态文件缓存了，502 是 nginx 后面 php 挂了之类的）；除了之前的前端方面的各种框架应用整合能力，前端方面的学习如果有兴趣可以更深入，表现形式是，可以自己开发一些类似 jQuery 的前端框架，或者开发一个富文本编辑器之类的比较琐碎考验 JavaScript 功力；\n\n### 8. 其他领域语言学习：\n\n在基础的 PHP/C/C++语言方面有基本积累，建议在当前阶段可以尝试学习不同的编程语言，看个人兴趣爱好，脚本类语言可以学学 Python/Ruby 之类的，函数式编程语言可以试试 Lisp/Haskell/Scala/Erlang 之类的，静态语言可以试试 Java/Golang，数据统计分析可以了解了解 R 语言，如果想换个视角做后端业务，可以试试 Node.js 还有前面提到的跟 Nginx 结合的 Nginx_Lua 等。学习不同的语言主要是提升自己的视野和解决问题手段的差异，比如会了解除了进程/线程，还有轻量级协程；比如在跨机器通信场景下面，Erlang 的解决方案简单的惊人；比如在不想选择 C/C++的情况下，还有类似高效的 Erlang/Golang 可用等等；主要是提升视野。\n\n### 9. 其他专业方向学习：\n\n在本阶段里面，会除了基本的 LNMP 技能之外，会考虑一些其他领域知识的学习，这些都是可以的，看个人兴趣和长期的目标方向。目前情况能够选择的领域比较多，比如、云计算（分布式存储、分布式计算、虚拟机等），机器学习（数据挖掘、模式识别等，应用到统计、个性化推荐），自然语言处理（中文分词等），搜索引擎技术、图形图像、语音识别等等。除了这些高大上的，也有很多偏工程方面可以学习的地方，比如高性能系统、移动开发（Android/IOS）、计算机安全、嵌入式系统、硬件等方向。\n\n### 10. 系统设计：\n\n系统设计在第二阶段的基础之上，能够应用掌握的经验技能，设计出比较复杂的中大型系统，能够解决大部分线上的各种复杂系统的问题，完成类似 浏览器 -> CDN -> 负载均衡 ->接入层 -> Nginx+PHP -> 业务缓存 -> 数据库 -> 各路复杂后端 RPC 交互（存储后端、逻辑后端、反作弊后端、外部服务） -> 更多后端 酱紫的复杂业务；能够支撑每天数千万到数亿流量网站的正常开发维护工作。\n\n## 第四阶段：架构阶段 （架构师）\n\nps: 暂时不展开讨论，等下次专门撰文来描述补充本部分内容\n\n## 第五阶段：专家阶段（方向领域专家）\n\nps：高大上，这块不展开讨论 ^\\_^\n\n## 第六阶段：科学家阶段\n\nps：高大上，这块不展开讨论 ^\\_^\n","slug":"php-route","published":1,"updated":"2019-05-12T15:56:59.741Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvl5c43p006u2wuud26xtsii","content":"<p>按照了解的很多 PHP/LNMP 程序员的发展轨迹，结合个人经验体会，抽象出很多程序员对未来的迷漫，特别对技术学习的盲目和慌乱，简单梳理了这个每个阶段 PHP 程序员的技术要求，来帮助很多 PHP 程序做对照设定学习成长目标。</p>\n <a id=\"more\"></a>\n<h2 id=\"第一阶段基础阶段基础-php-程序员\"><a class=\"markdownIt-Anchor\" href=\"#第一阶段基础阶段基础-php-程序员\"></a> 第一阶段：基础阶段（基础 PHP 程序员）</h2>\n<p><strong>重点</strong>：把 LNMP 搞熟练（核心是安装配置基本操作）</p>\n<p><strong>目标</strong>：能够完成基本的 LNMP 系统安装，简单配置维护；能够做基本的简单系统的 PHP 开发；能够在 PHP 中型系统中支持某个 PHP 功能模块的开发。</p>\n<p><strong>时间</strong>：完成本阶段的时间因人而异，有的成长快半年一年就过了，成长慢的两三年也有。</p>\n<h3 id=\"1linux\"><a class=\"markdownIt-Anchor\" href=\"#1linux\"></a> 1.Linux：</h3>\n<p>基本命令、操作、启动、基本服务配置（包括 rpm 安装文件，各种服务配置等）；会写简单的 shell 脚本和 awk/sed 脚本命令等。</p>\n<h3 id=\"2nginx\"><a class=\"markdownIt-Anchor\" href=\"#2nginx\"></a> 2.Nginx：</h3>\n<p>做到能够安装配置 nginx+php，知道基本的 nginx 核心配置选项，知道 server/fastcgi_pass/access_log 等基础配置，目标是能够让 nginx+php_fpm 顺利工作。</p>\n<h3 id=\"3mysql\"><a class=\"markdownIt-Anchor\" href=\"#3mysql\"></a> 3.MySQL：</h3>\n<p>会自己搭建 mysql，知道基本的 mysql 配置选项；知道 innodb 和 myisam 的区别，知道针对 InnoDB 和 MyISAM 两个引擎的不同配置选项；知道基本的两个引擎的差异和选择上面的区别；能够纯手工编译搭建一个 MySQL 数据库并且配置好编码等正常稳定运行；核心主旨是能够搭建一个可运行的 MySQL 数据库。</p>\n<h3 id=\"4php\"><a class=\"markdownIt-Anchor\" href=\"#4php\"></a> 4.PHP：</h3>\n<p>基本语法数组、字符串、数据库、XML、Socket、GD/ImageMgk 图片处理等等；熟悉各种跟 MySQL 操作链接的 api（mysql/mysqli/PDO)，知道各种编码问题的解决；知道常规熟练使用的 PHP 框架（ThinkPHP、Zendframework、Yii、Yaf 等）；了解基本 MVC 的运行机制和为什么这么做，稍微知道不同的 PHP 框架之间的区别；能够快速学习一个 MVC 框架。能够知道开发工程中的文件目录组织，有基本的良好的代码结构和风格，能够完成小系统的开发和中型系统中某个模块的开发工作。</p>\n<h3 id=\"5前端\"><a class=\"markdownIt-Anchor\" href=\"#5前端\"></a> 5.前端：</h3>\n<p>如果条件时间允许，可以适当学习下 HTML/CSS/JS 等相关知识，知道什么 web 标准，div+css 的 web/wap 页面模式，知道 HTML5 和 HTML4 的区别；了解一些基本的前端只是和 JS 框架（jQuery 之类的）；了解一些基本的 JavaScript 编程知识；（本项不是必须项，如果有时间，稍微了解一下是可以的，不过不建议作为重点，除非个人有强烈兴趣）</p>\n<h3 id=\"6系统设计\"><a class=\"markdownIt-Anchor\" href=\"#6系统设计\"></a> 6.系统设计：</h3>\n<p>能够完成小型系统的基本设计，包括简单的数据库设计，能够完成基本的：浏览器 -&gt; Nginx+PHP -&gt; 数据库 架构的设计开发工作；能够支撑每天几十万到数百万流量网站的开发维护工作；</p>\n<h2 id=\"第二阶段提高阶段-中级-php-程序员\"><a class=\"markdownIt-Anchor\" href=\"#第二阶段提高阶段-中级-php-程序员\"></a> 第二阶段：提高阶段 （中级 PHP 程序员）</h2>\n<p><strong>重点</strong>：提高针对 LNMP 的技能，能够更全面的对 LNMP 有熟练的应用。</p>\n<p><strong>目标</strong>：能够随时随地搭建好 LNMP 环境，快速完成常规配置；能够追查解决大部分遇到的开发和线上环境的问题；能够独立承担中型系统的构架和开发工作；能够在大型系统中承担某个中型模块的开发工作；</p>\n<h3 id=\"1-linux\"><a class=\"markdownIt-Anchor\" href=\"#1-linux\"></a> 1. Linux:</h3>\n<p>在第一阶段的基础上面，能够流畅的使用 Shell 脚本来完成很多自动化的工作；awk/sed/perl 也操作的不错，能够完成很多文本处理和数据统计等工作；基本能够安装大部分非特殊的 Linux 程序（包括各种库、包、第三方依赖等等，比如 MongoDB/Redis/Sphinx/Luncene/SVN 之类的）；了解基本的 Linux 服务，知道如何查看 Linux 的性能指标数据，知道基本的 Linux 下面的问题跟踪等。</p>\n<h3 id=\"2-nginx\"><a class=\"markdownIt-Anchor\" href=\"#2-nginx\"></a> 2. Nginx:</h3>\n<p>在第一阶段的基础上面，了解复杂一些的 Nginx 配置；包括 多核配置、events、proxy<em>pass，sendfile/tcp</em>*配置，知道超时等相关配置和性能影响；知道 nginx 除了 web server，还能够承担代理服务器、反向静态服务器等配置；知道基本的 nginx 配置调优；知道如何配置权限、编译一个 nginx 扩展到 nginx；知道基本的 nginx 运行原理（master/worker 机制，epoll），知道为什么 nginx 性能比 apache 性能好等知识；</p>\n<h3 id=\"3-mysqlmongodb\"><a class=\"markdownIt-Anchor\" href=\"#3-mysqlmongodb\"></a> 3. MySQL/MongoDB：</h3>\n<p>在第一阶段的基础上面，在 MySQL 开发方面，掌握很多小技巧，包括常规 SQL 优化（group by/order by/rand 优化等）；除了能够搭建 MySQL，还能够冷热备份 MySQL 数据，还知道影响 innodb/myisam 性能的配置选项（比如 key_buffer/query_cache/sort_buffer/innodb_buffer_pool_size/innodb_flush_log_at_trx_commit 等），也知道这些选项配置成为多少值合适；另外也了解一些特殊的配置选项，比如 知道如何搭建 mysql 主从同步的环境，知道各个 binlog_format 的区别；知道 MySQL 的性能追查，包括 slow_log/explain 等，还能够知道基本的索引建立处理等知识；原理方面了解基本的 MySQL 的架构（Server+存储引擎），知道基本的 InnoDB/MyISAM 索引存储结构和不同（聚簇索引，B 树）；知道基本的 InnoDB 事务处理机制；了解大部分 MySQL 异常情况的处理方案（或者知道哪儿找到处理方案）。条件允许的情况，建议了解一下 NoSQL 的代表 MongoDB 数据库，顺便对比跟 MySQL 的差别，同事能够在合适的应用场景安全谨慎的使用 MongoDB，知道基本的 PHP 与 MongoDB 的结合开发。</p>\n<h3 id=\"4-redismemcached\"><a class=\"markdownIt-Anchor\" href=\"#4-redismemcached\"></a> 4. Redis/Memcached：</h3>\n<p>在大部分中型系统里面一定会涉及到缓存处理，所以一定要了解基本的缓存；知道 Memcached 和 Redis 的异同和应用场景，能够独立安装 Redis/Memcached，了解 Memcahed 的一些基本特性和限制，比如最大的 value 值，知道 PHP 跟他们的使用结合；Redis 了解基本工作原理和使用，了解常规的数据类型，知道什么场景应用什么类型，了解 Redis 的事务等等。原理部分，能够大概了解 Memcached 的内存结构（slab 机制），redis 就了解常用数据类型底层实现存储结构（SDS/链表/SkipList/HashTable）等等，顺便了解一下 Redis 的事务、RDB、AOF 等机制更好</p>\n<h3 id=\"5-php\"><a class=\"markdownIt-Anchor\" href=\"#5-php\"></a> 5. PHP：</h3>\n<p>除了第一阶段的能力，安装配置方面能够随意安装 PHP 和各种第三方扩展的编译安装配置；了解 php-fpm 的大部分配置选项和含义（如 max_requests/max_children/request_terminate_timeout 之类的影响性能的配置），知道 mod_php/fastcgi 的区别；在 PHP 方面已经能够熟练各种基础技术，还包括各种深入些的 PHP，包括对 PHP 面向对象的深入理解/SPL/语法层面的特殊特性比如反射之类的；在框架方面已经阅读过最少一个以上常规 PHP MVC 框架的代码了，知道基本 PHP 框架内部实现机制和设计思想；在 PHP 开发中已经能够熟练使用常规的设计模式来应用开发（抽象工厂/单例/观察者/命令链/策略/适配器 等模式）；建议开发自己的 PHP MVC 框架来充分让开发自由化，让自己深入理解 MVC 模式，也让自己能够在业务项目开发里快速升级；熟悉 PHP 的各种代码优化方法，熟悉大部分 PHP 安全方面问题的解决处理；熟悉基本的 PHP 执行的机制原理（Zend 引擎/扩展基本工作机制）；</p>\n<h3 id=\"6-cc\"><a class=\"markdownIt-Anchor\" href=\"#6-cc\"></a> 6. C/C++：</h3>\n<p>开始涉猎一定的 C/C<ins>语言，能够写基本的 C/C</ins>代码，对基本的 C/C++语法熟悉（指针、数组操作、字符串、常规标准 API）和数据结构（链表、树、哈希、队列）有一定的熟悉下；对 Linux 下面的 C 语言开发有基本的了解概念，会简单的 makefile 文件编写，能够使用简单的 GCC/GDB 的程序编译简单调试工作；对基本的网络编程有大概了解。（本项是为了向更高层次打下基础）</p>\n<h3 id=\"7-前端\"><a class=\"markdownIt-Anchor\" href=\"#7-前端\"></a> 7. 前端：</h3>\n<p>在第一阶段的基础上面，熟悉基本的 HTTP 协议（协议代码 200/300/400/500，基本的 HTTP 交互头）；条件允许，可以在深入写出稍微优雅的 HTML+CSS+JavaScript，或者能够大致简单使用某些前端框架（jQuery/YUI/ExtJS/RequireJS/BootStrap 之类）；如果条件允许，可以深入学习 JavaScript 编程，比如闭包机制、DOM 处理；再深入些可以读读 jQuery 源码做深入学习。（本项不做重点学习，除非对前端有兴趣）</p>\n<h3 id=\"8-系统设计\"><a class=\"markdownIt-Anchor\" href=\"#8-系统设计\"></a> 8. 系统设计：</h3>\n<p>能够设计大部分中型系统的网站架构、数据库、基本 PHP 框架选型；性能测试排查处理等；能够完成类似：浏览器 -&gt; CDN(Squid) -&gt; Nginx+PHP -&gt; 缓存 -&gt; 数据库 结构网站的基本设计开发维护；能够支撑每天数百万到千万流量基本网站的开发维护工作；</p>\n<h2 id=\"第三阶段高级阶段-高级-php-程序员\"><a class=\"markdownIt-Anchor\" href=\"#第三阶段高级阶段-高级-php-程序员\"></a> 第三阶段：高级阶段 （高级 PHP 程序员）</h2>\n<p><strong>重点</strong>：除了基本的 LNMP 程序，还能够在某个方向或领域有深入学习。（纵深维度发展）</p>\n<p><strong>目标</strong>：除了能够完成基本的 PHP 业务开发，还能够解决大部分深入复杂的技术问题，并且可以独立设计完成中大型的系统设计和开发工作；自己能够独立 hold 深入某个技术方向，在这块比较专业。（比如在 MySQL、Nginx、PHP、Redis 等等任一方向深入研究）</p>\n<h3 id=\"1-linux-2\"><a class=\"markdownIt-Anchor\" href=\"#1-linux-2\"></a> 1. Linux：</h3>\n<p>除了第二阶段的能力，在 Linux 下面除了常规的操作和性能监控跟踪，还能够使用很多高级复杂的命令完成工作（watch/tcpdump/starce/ldd/ar 等)；在 shell 脚本方面，已经能够编写比较复杂的 shell 脚本（超过 500 行）来协助完成很多包括备份、自动化处理、监控等工作的 shell；对 awk/sed/perl 等应用已经如火纯青，能够随意操作控制处理文本统计分析各种复杂格式的数据；对 Linux 内部机制有一些了解，对内核模块加载，启动错误处理等等有个基本的处理；同时对一些其他相关的东西也了解，比如 NFS、磁盘管理等等；</p>\n<h3 id=\"2-nginx-2\"><a class=\"markdownIt-Anchor\" href=\"#2-nginx-2\"></a> 2. Nginx:</h3>\n<p>在第二阶段的基础上面，已经能够把 Nginx 操作的很熟练，能够对 Nginx 进行更深入的运维工作，比如监控、性能优化，复杂问题处理等等；看个人兴趣，更多方面可以考虑侧重在关于 Nginx 工作原理部分的深入学习，主要表现在阅读源码开始，比如具体的 master/worker 工作机制，Nginx 内部的事件处理，内存管理等等；同时可以学习 Nginx 扩展的开发，可以定制一些自己私有的扩展；同时可以对 Nginx+Lua 有一定程度的了解，看看是否可以结合应用出更好模式；这个阶段的要求是对 Nginx 原理的深入理解，可以考虑成为 Nginx 方向的深入专业者。</p>\n<h3 id=\"3-mysqlmongodb-2\"><a class=\"markdownIt-Anchor\" href=\"#3-mysqlmongodb-2\"></a> 3. MySQL/MongoDB：</h3>\n<p>在第二阶段的基础上面，在 MySQL 应用方面，除了之前的基本 SQL 优化，还能够在完成一些复杂操作，比如大批量数据的导入导出，线上大批量数据的更改表结构或者增删索引字段等等高危操作；除了安装配置，已经能够处理更多复杂的 MySQL 的问题，比如各种问题的追查，主从同步延迟问题的解决、跨机房同步数据方案、MySQL 高可用架构等都有涉及了解；对 MySQL 应用层面，对 MySQL 的核心关键技术比较熟悉，比如事务机制（隔离级别、锁等）、对触发器、分区等技术有一定了解和应用；对 MySQL 性能方面，有包括磁盘优化（SAS 迁移到 SSD）、服务器优化（内存、服务器本身配置）、除了二阶段的其他核心性能优化选项（innodb_log_buffer_size/back_log/table_open_cache/thread_cache_size/innodb_lock_wait_timeout 等）、连接池软件选择应用，对 show *（show status/show profile）类的操作语句有深入了解，能够完成大部分的性能问题追查；MySQL 备份技术的深入熟悉，包括灾备还原、对 Binlog 的深入理解，冷热备份，多 IDC 备份等；在 MySQL 原理方面，有更多了解，比如对 MySQL 的工作机制开始阅读部分源码，比如对主从同步（复制）技术的源码学习，或者对某个存储引擎（MyISAM/Innodb/TokuDB）等等的源码学习理解，如果条件允许，可以参考 CSV 引擎开发自己简单的存储引擎来保存一些数据，增强对 MySQL 的理解；在这个过程，如果自己有兴趣，也可以考虑往 DBA 方向发展。MongoDB 层面，可以考虑比如说在写少读多的情况开始在线上应用 MongoDB，或者是做一些线上的数据分析处理的操作，具体场景可以按照工作来，不过核心是要更好的深入理解 RMDBS 和 NoSQL 的不同场景下面的应用，如果条件或者兴趣允许，可以开始深入学习一下 MongoDB 的工作机制。</p>\n<h3 id=\"4-redismemcached-2\"><a class=\"markdownIt-Anchor\" href=\"#4-redismemcached-2\"></a> 4. Redis/Memcached：</h3>\n<p>在第二阶段的基础上面，能够更深入的应用和学习。因为 Memcached 不是特别复杂，建议可以把源码进行阅读，特别是内存管理部分，方便深入理解；Redis 部分，可以多做一些复杂的数据结构的应用（zset 来做排行榜排序操作/事务处理用来保证原子性在秒杀类场景应用之类的使用操作）；多涉及 aof 等同步机制的学习应用，设计一个高可用的 Redis 应用架构和集群；建议可以深入的学习一下 Redis 的源码，把在第二阶段积累的知识都可以应用上，特别可以阅读一下包括核心事件管理、内存管理、内部核心数据结构等充分学习了解一下。如果兴趣允许，可以成为一个 Redis 方面非常专业的使用者。</p>\n<h3 id=\"5-php-2\"><a class=\"markdownIt-Anchor\" href=\"#5-php-2\"></a> 5. PHP：</h3>\n<p>作为基础核心技能，我们在第二阶段的基础上面，需要有更深入的学习和应用。从基本代码应用上面来说，能够解决在 PHP 开发中遇到 95%的问题，了解大部分 PHP 的技巧；对大部分的 PHP 框架能够迅速在一天内上手使用，并且了解各个主流 PHP 框架的优缺点，能够迅速方便项目开发中做技术选型；在配置方面，除了常规第二阶段会的知识，会了解一些比较偏门的配置选项（php auto_prepend_file/auto_append_file），包括扩展中的一些复杂高级配置和原理（比如 memcached 扩展配置中的 memcache.hash_strategy、apc 扩展配置中的 apc.mmap_file_mask/apc.slam_defense/apc.file_update_protection 之类的）；对 php 的工作机制比较了解，包括 php-fpm 工作机制（比如 php-fpm 在不同配置机器下面开启进程数量计算以及原理），对 zend 引擎有基本熟悉（vm/gc/stream 处理），阅读过基本的 PHP 内核源码（或者阅读过相关文章），对 PHP 内部机制的大部分核心数据结构（基础类型/Array/Object）实现有了解，对于核心基础结构（zval/hashtable/gc）有深入学习了解；能够进行基本的 PHP 扩展开发，了解一些扩展开发的中高级知识（minit/rinit 等），熟悉 php 跟 apache/nginx 不同的通信交互方式细节（mod_php/fastcgi）；除了开发 PHP 扩展，可以考虑学习开发 Zend 扩展，从更底层去了解 PHP。</p>\n<h3 id=\"6-cc-2\"><a class=\"markdownIt-Anchor\" href=\"#6-cc-2\"></a> 6. C/C++：</h3>\n<p>在第二阶段基础上面，能够在 C/C<ins>语言方面有更深入的学习了解，能够完成中小型 C/C</ins>系统的开发工作；除了基本第二阶段的基础 C/C<ins>语法和数据结构，也能够学习一些特殊数据结构（b-tree/rb-tree/skiplist/lsm-tree/trie-tree 等）方便在特殊工作中需求；在系统编程方面，熟悉多进程、多线程编程；多进程情况下面了解大部分多进程之间的通信方式，能够灵活选择通信方式（共享内存/信号量/管道等）；多线程编程能够良好的解决锁冲突问题，并且能够进行多线程程序的开发调试工作；同时对网络编程比较熟悉，了解多进程模型/多线程模型/异步网络 IO 模型的差别和选型，熟悉不同异步网络 IO 模型的原理和差异（select/poll/epoll/iocp 等），并且熟悉常见的异步框架（ACE/ICE/libev/libevent/libuv/Boost.ASIO 等）和使用，如果闲暇也可以看看一些国产自己开发的库（比如 muduo）；同时能够设计好的高并发程序架构（leader-follow/master-worker 等）；了解大部分 C/C</ins>后端 Server 开发中的问题（内存管理、日志打印、高并发、前后端通信协议、服务监控），知道各个后端服务 RPC 通信问题（struct/http/thirft/protobuf 等）；能够更熟络的使用 GCC 和 GDB 来开发编译调试程序，在线上程序 core 掉后能够迅速追查跟踪解决问题；通用模块开发方面，可以积累或者开发一些通用的工具或库（比如异步网络框架、日志库、内存池、线程池等），不过开发后是否应用要谨慎，省的埋坑去追 bug；</p>\n<h3 id=\"7-前端-2\"><a class=\"markdownIt-Anchor\" href=\"#7-前端-2\"></a> 7. 前端：</h3>\n<p>深入了解 HTTP 协议（包括各个细致协议特殊协议代码和背后原因，比如 302 静态文件缓存了，502 是 nginx 后面 php 挂了之类的）；除了之前的前端方面的各种框架应用整合能力，前端方面的学习如果有兴趣可以更深入，表现形式是，可以自己开发一些类似 jQuery 的前端框架，或者开发一个富文本编辑器之类的比较琐碎考验 JavaScript 功力；</p>\n<h3 id=\"8-其他领域语言学习\"><a class=\"markdownIt-Anchor\" href=\"#8-其他领域语言学习\"></a> 8. 其他领域语言学习：</h3>\n<p>在基础的 PHP/C/C<ins>语言方面有基本积累，建议在当前阶段可以尝试学习不同的编程语言，看个人兴趣爱好，脚本类语言可以学学 Python/Ruby 之类的，函数式编程语言可以试试 Lisp/Haskell/Scala/Erlang 之类的，静态语言可以试试 Java/Golang，数据统计分析可以了解了解 R 语言，如果想换个视角做后端业务，可以试试 Node.js 还有前面提到的跟 Nginx 结合的 Nginx_Lua 等。学习不同的语言主要是提升自己的视野和解决问题手段的差异，比如会了解除了进程/线程，还有轻量级协程；比如在跨机器通信场景下面，Erlang 的解决方案简单的惊人；比如在不想选择 C/C</ins>的情况下，还有类似高效的 Erlang/Golang 可用等等；主要是提升视野。</p>\n<h3 id=\"9-其他专业方向学习\"><a class=\"markdownIt-Anchor\" href=\"#9-其他专业方向学习\"></a> 9. 其他专业方向学习：</h3>\n<p>在本阶段里面，会除了基本的 LNMP 技能之外，会考虑一些其他领域知识的学习，这些都是可以的，看个人兴趣和长期的目标方向。目前情况能够选择的领域比较多，比如、云计算（分布式存储、分布式计算、虚拟机等），机器学习（数据挖掘、模式识别等，应用到统计、个性化推荐），自然语言处理（中文分词等），搜索引擎技术、图形图像、语音识别等等。除了这些高大上的，也有很多偏工程方面可以学习的地方，比如高性能系统、移动开发（Android/IOS）、计算机安全、嵌入式系统、硬件等方向。</p>\n<h3 id=\"10-系统设计\"><a class=\"markdownIt-Anchor\" href=\"#10-系统设计\"></a> 10. 系统设计：</h3>\n<p>系统设计在第二阶段的基础之上，能够应用掌握的经验技能，设计出比较复杂的中大型系统，能够解决大部分线上的各种复杂系统的问题，完成类似 浏览器 -&gt; CDN -&gt; 负载均衡 -&gt;接入层 -&gt; Nginx+PHP -&gt; 业务缓存 -&gt; 数据库 -&gt; 各路复杂后端 RPC 交互（存储后端、逻辑后端、反作弊后端、外部服务） -&gt; 更多后端 酱紫的复杂业务；能够支撑每天数千万到数亿流量网站的正常开发维护工作。</p>\n<h2 id=\"第四阶段架构阶段-架构师\"><a class=\"markdownIt-Anchor\" href=\"#第四阶段架构阶段-架构师\"></a> 第四阶段：架构阶段 （架构师）</h2>\n<p>ps: 暂时不展开讨论，等下次专门撰文来描述补充本部分内容</p>\n<h2 id=\"第五阶段专家阶段方向领域专家\"><a class=\"markdownIt-Anchor\" href=\"#第五阶段专家阶段方向领域专家\"></a> 第五阶段：专家阶段（方向领域专家）</h2>\n<p>ps：高大上，这块不展开讨论 <sup>_</sup></p>\n<h2 id=\"第六阶段科学家阶段\"><a class=\"markdownIt-Anchor\" href=\"#第六阶段科学家阶段\"></a> 第六阶段：科学家阶段</h2>\n<p>ps：高大上，这块不展开讨论 <sup>_</sup></p>\n","site":{"data":{}},"excerpt":"<p>按照了解的很多 PHP/LNMP 程序员的发展轨迹，结合个人经验体会，抽象出很多程序员对未来的迷漫，特别对技术学习的盲目和慌乱，简单梳理了这个每个阶段 PHP 程序员的技术要求，来帮助很多 PHP 程序做对照设定学习成长目标。</p>","more":"<h2 id=\"第一阶段基础阶段基础-php-程序员\"><a class=\"markdownIt-Anchor\" href=\"#第一阶段基础阶段基础-php-程序员\"></a> 第一阶段：基础阶段（基础 PHP 程序员）</h2>\n<p><strong>重点</strong>：把 LNMP 搞熟练（核心是安装配置基本操作）</p>\n<p><strong>目标</strong>：能够完成基本的 LNMP 系统安装，简单配置维护；能够做基本的简单系统的 PHP 开发；能够在 PHP 中型系统中支持某个 PHP 功能模块的开发。</p>\n<p><strong>时间</strong>：完成本阶段的时间因人而异，有的成长快半年一年就过了，成长慢的两三年也有。</p>\n<h3 id=\"1linux\"><a class=\"markdownIt-Anchor\" href=\"#1linux\"></a> 1.Linux：</h3>\n<p>基本命令、操作、启动、基本服务配置（包括 rpm 安装文件，各种服务配置等）；会写简单的 shell 脚本和 awk/sed 脚本命令等。</p>\n<h3 id=\"2nginx\"><a class=\"markdownIt-Anchor\" href=\"#2nginx\"></a> 2.Nginx：</h3>\n<p>做到能够安装配置 nginx+php，知道基本的 nginx 核心配置选项，知道 server/fastcgi_pass/access_log 等基础配置，目标是能够让 nginx+php_fpm 顺利工作。</p>\n<h3 id=\"3mysql\"><a class=\"markdownIt-Anchor\" href=\"#3mysql\"></a> 3.MySQL：</h3>\n<p>会自己搭建 mysql，知道基本的 mysql 配置选项；知道 innodb 和 myisam 的区别，知道针对 InnoDB 和 MyISAM 两个引擎的不同配置选项；知道基本的两个引擎的差异和选择上面的区别；能够纯手工编译搭建一个 MySQL 数据库并且配置好编码等正常稳定运行；核心主旨是能够搭建一个可运行的 MySQL 数据库。</p>\n<h3 id=\"4php\"><a class=\"markdownIt-Anchor\" href=\"#4php\"></a> 4.PHP：</h3>\n<p>基本语法数组、字符串、数据库、XML、Socket、GD/ImageMgk 图片处理等等；熟悉各种跟 MySQL 操作链接的 api（mysql/mysqli/PDO)，知道各种编码问题的解决；知道常规熟练使用的 PHP 框架（ThinkPHP、Zendframework、Yii、Yaf 等）；了解基本 MVC 的运行机制和为什么这么做，稍微知道不同的 PHP 框架之间的区别；能够快速学习一个 MVC 框架。能够知道开发工程中的文件目录组织，有基本的良好的代码结构和风格，能够完成小系统的开发和中型系统中某个模块的开发工作。</p>\n<h3 id=\"5前端\"><a class=\"markdownIt-Anchor\" href=\"#5前端\"></a> 5.前端：</h3>\n<p>如果条件时间允许，可以适当学习下 HTML/CSS/JS 等相关知识，知道什么 web 标准，div+css 的 web/wap 页面模式，知道 HTML5 和 HTML4 的区别；了解一些基本的前端只是和 JS 框架（jQuery 之类的）；了解一些基本的 JavaScript 编程知识；（本项不是必须项，如果有时间，稍微了解一下是可以的，不过不建议作为重点，除非个人有强烈兴趣）</p>\n<h3 id=\"6系统设计\"><a class=\"markdownIt-Anchor\" href=\"#6系统设计\"></a> 6.系统设计：</h3>\n<p>能够完成小型系统的基本设计，包括简单的数据库设计，能够完成基本的：浏览器 -&gt; Nginx+PHP -&gt; 数据库 架构的设计开发工作；能够支撑每天几十万到数百万流量网站的开发维护工作；</p>\n<h2 id=\"第二阶段提高阶段-中级-php-程序员\"><a class=\"markdownIt-Anchor\" href=\"#第二阶段提高阶段-中级-php-程序员\"></a> 第二阶段：提高阶段 （中级 PHP 程序员）</h2>\n<p><strong>重点</strong>：提高针对 LNMP 的技能，能够更全面的对 LNMP 有熟练的应用。</p>\n<p><strong>目标</strong>：能够随时随地搭建好 LNMP 环境，快速完成常规配置；能够追查解决大部分遇到的开发和线上环境的问题；能够独立承担中型系统的构架和开发工作；能够在大型系统中承担某个中型模块的开发工作；</p>\n<h3 id=\"1-linux\"><a class=\"markdownIt-Anchor\" href=\"#1-linux\"></a> 1. Linux:</h3>\n<p>在第一阶段的基础上面，能够流畅的使用 Shell 脚本来完成很多自动化的工作；awk/sed/perl 也操作的不错，能够完成很多文本处理和数据统计等工作；基本能够安装大部分非特殊的 Linux 程序（包括各种库、包、第三方依赖等等，比如 MongoDB/Redis/Sphinx/Luncene/SVN 之类的）；了解基本的 Linux 服务，知道如何查看 Linux 的性能指标数据，知道基本的 Linux 下面的问题跟踪等。</p>\n<h3 id=\"2-nginx\"><a class=\"markdownIt-Anchor\" href=\"#2-nginx\"></a> 2. Nginx:</h3>\n<p>在第一阶段的基础上面，了解复杂一些的 Nginx 配置；包括 多核配置、events、proxy<em>pass，sendfile/tcp</em>*配置，知道超时等相关配置和性能影响；知道 nginx 除了 web server，还能够承担代理服务器、反向静态服务器等配置；知道基本的 nginx 配置调优；知道如何配置权限、编译一个 nginx 扩展到 nginx；知道基本的 nginx 运行原理（master/worker 机制，epoll），知道为什么 nginx 性能比 apache 性能好等知识；</p>\n<h3 id=\"3-mysqlmongodb\"><a class=\"markdownIt-Anchor\" href=\"#3-mysqlmongodb\"></a> 3. MySQL/MongoDB：</h3>\n<p>在第一阶段的基础上面，在 MySQL 开发方面，掌握很多小技巧，包括常规 SQL 优化（group by/order by/rand 优化等）；除了能够搭建 MySQL，还能够冷热备份 MySQL 数据，还知道影响 innodb/myisam 性能的配置选项（比如 key_buffer/query_cache/sort_buffer/innodb_buffer_pool_size/innodb_flush_log_at_trx_commit 等），也知道这些选项配置成为多少值合适；另外也了解一些特殊的配置选项，比如 知道如何搭建 mysql 主从同步的环境，知道各个 binlog_format 的区别；知道 MySQL 的性能追查，包括 slow_log/explain 等，还能够知道基本的索引建立处理等知识；原理方面了解基本的 MySQL 的架构（Server+存储引擎），知道基本的 InnoDB/MyISAM 索引存储结构和不同（聚簇索引，B 树）；知道基本的 InnoDB 事务处理机制；了解大部分 MySQL 异常情况的处理方案（或者知道哪儿找到处理方案）。条件允许的情况，建议了解一下 NoSQL 的代表 MongoDB 数据库，顺便对比跟 MySQL 的差别，同事能够在合适的应用场景安全谨慎的使用 MongoDB，知道基本的 PHP 与 MongoDB 的结合开发。</p>\n<h3 id=\"4-redismemcached\"><a class=\"markdownIt-Anchor\" href=\"#4-redismemcached\"></a> 4. Redis/Memcached：</h3>\n<p>在大部分中型系统里面一定会涉及到缓存处理，所以一定要了解基本的缓存；知道 Memcached 和 Redis 的异同和应用场景，能够独立安装 Redis/Memcached，了解 Memcahed 的一些基本特性和限制，比如最大的 value 值，知道 PHP 跟他们的使用结合；Redis 了解基本工作原理和使用，了解常规的数据类型，知道什么场景应用什么类型，了解 Redis 的事务等等。原理部分，能够大概了解 Memcached 的内存结构（slab 机制），redis 就了解常用数据类型底层实现存储结构（SDS/链表/SkipList/HashTable）等等，顺便了解一下 Redis 的事务、RDB、AOF 等机制更好</p>\n<h3 id=\"5-php\"><a class=\"markdownIt-Anchor\" href=\"#5-php\"></a> 5. PHP：</h3>\n<p>除了第一阶段的能力，安装配置方面能够随意安装 PHP 和各种第三方扩展的编译安装配置；了解 php-fpm 的大部分配置选项和含义（如 max_requests/max_children/request_terminate_timeout 之类的影响性能的配置），知道 mod_php/fastcgi 的区别；在 PHP 方面已经能够熟练各种基础技术，还包括各种深入些的 PHP，包括对 PHP 面向对象的深入理解/SPL/语法层面的特殊特性比如反射之类的；在框架方面已经阅读过最少一个以上常规 PHP MVC 框架的代码了，知道基本 PHP 框架内部实现机制和设计思想；在 PHP 开发中已经能够熟练使用常规的设计模式来应用开发（抽象工厂/单例/观察者/命令链/策略/适配器 等模式）；建议开发自己的 PHP MVC 框架来充分让开发自由化，让自己深入理解 MVC 模式，也让自己能够在业务项目开发里快速升级；熟悉 PHP 的各种代码优化方法，熟悉大部分 PHP 安全方面问题的解决处理；熟悉基本的 PHP 执行的机制原理（Zend 引擎/扩展基本工作机制）；</p>\n<h3 id=\"6-cc\"><a class=\"markdownIt-Anchor\" href=\"#6-cc\"></a> 6. C/C++：</h3>\n<p>开始涉猎一定的 C/C<ins>语言，能够写基本的 C/C</ins>代码，对基本的 C/C++语法熟悉（指针、数组操作、字符串、常规标准 API）和数据结构（链表、树、哈希、队列）有一定的熟悉下；对 Linux 下面的 C 语言开发有基本的了解概念，会简单的 makefile 文件编写，能够使用简单的 GCC/GDB 的程序编译简单调试工作；对基本的网络编程有大概了解。（本项是为了向更高层次打下基础）</p>\n<h3 id=\"7-前端\"><a class=\"markdownIt-Anchor\" href=\"#7-前端\"></a> 7. 前端：</h3>\n<p>在第一阶段的基础上面，熟悉基本的 HTTP 协议（协议代码 200/300/400/500，基本的 HTTP 交互头）；条件允许，可以在深入写出稍微优雅的 HTML+CSS+JavaScript，或者能够大致简单使用某些前端框架（jQuery/YUI/ExtJS/RequireJS/BootStrap 之类）；如果条件允许，可以深入学习 JavaScript 编程，比如闭包机制、DOM 处理；再深入些可以读读 jQuery 源码做深入学习。（本项不做重点学习，除非对前端有兴趣）</p>\n<h3 id=\"8-系统设计\"><a class=\"markdownIt-Anchor\" href=\"#8-系统设计\"></a> 8. 系统设计：</h3>\n<p>能够设计大部分中型系统的网站架构、数据库、基本 PHP 框架选型；性能测试排查处理等；能够完成类似：浏览器 -&gt; CDN(Squid) -&gt; Nginx+PHP -&gt; 缓存 -&gt; 数据库 结构网站的基本设计开发维护；能够支撑每天数百万到千万流量基本网站的开发维护工作；</p>\n<h2 id=\"第三阶段高级阶段-高级-php-程序员\"><a class=\"markdownIt-Anchor\" href=\"#第三阶段高级阶段-高级-php-程序员\"></a> 第三阶段：高级阶段 （高级 PHP 程序员）</h2>\n<p><strong>重点</strong>：除了基本的 LNMP 程序，还能够在某个方向或领域有深入学习。（纵深维度发展）</p>\n<p><strong>目标</strong>：除了能够完成基本的 PHP 业务开发，还能够解决大部分深入复杂的技术问题，并且可以独立设计完成中大型的系统设计和开发工作；自己能够独立 hold 深入某个技术方向，在这块比较专业。（比如在 MySQL、Nginx、PHP、Redis 等等任一方向深入研究）</p>\n<h3 id=\"1-linux-2\"><a class=\"markdownIt-Anchor\" href=\"#1-linux-2\"></a> 1. Linux：</h3>\n<p>除了第二阶段的能力，在 Linux 下面除了常规的操作和性能监控跟踪，还能够使用很多高级复杂的命令完成工作（watch/tcpdump/starce/ldd/ar 等)；在 shell 脚本方面，已经能够编写比较复杂的 shell 脚本（超过 500 行）来协助完成很多包括备份、自动化处理、监控等工作的 shell；对 awk/sed/perl 等应用已经如火纯青，能够随意操作控制处理文本统计分析各种复杂格式的数据；对 Linux 内部机制有一些了解，对内核模块加载，启动错误处理等等有个基本的处理；同时对一些其他相关的东西也了解，比如 NFS、磁盘管理等等；</p>\n<h3 id=\"2-nginx-2\"><a class=\"markdownIt-Anchor\" href=\"#2-nginx-2\"></a> 2. Nginx:</h3>\n<p>在第二阶段的基础上面，已经能够把 Nginx 操作的很熟练，能够对 Nginx 进行更深入的运维工作，比如监控、性能优化，复杂问题处理等等；看个人兴趣，更多方面可以考虑侧重在关于 Nginx 工作原理部分的深入学习，主要表现在阅读源码开始，比如具体的 master/worker 工作机制，Nginx 内部的事件处理，内存管理等等；同时可以学习 Nginx 扩展的开发，可以定制一些自己私有的扩展；同时可以对 Nginx+Lua 有一定程度的了解，看看是否可以结合应用出更好模式；这个阶段的要求是对 Nginx 原理的深入理解，可以考虑成为 Nginx 方向的深入专业者。</p>\n<h3 id=\"3-mysqlmongodb-2\"><a class=\"markdownIt-Anchor\" href=\"#3-mysqlmongodb-2\"></a> 3. MySQL/MongoDB：</h3>\n<p>在第二阶段的基础上面，在 MySQL 应用方面，除了之前的基本 SQL 优化，还能够在完成一些复杂操作，比如大批量数据的导入导出，线上大批量数据的更改表结构或者增删索引字段等等高危操作；除了安装配置，已经能够处理更多复杂的 MySQL 的问题，比如各种问题的追查，主从同步延迟问题的解决、跨机房同步数据方案、MySQL 高可用架构等都有涉及了解；对 MySQL 应用层面，对 MySQL 的核心关键技术比较熟悉，比如事务机制（隔离级别、锁等）、对触发器、分区等技术有一定了解和应用；对 MySQL 性能方面，有包括磁盘优化（SAS 迁移到 SSD）、服务器优化（内存、服务器本身配置）、除了二阶段的其他核心性能优化选项（innodb_log_buffer_size/back_log/table_open_cache/thread_cache_size/innodb_lock_wait_timeout 等）、连接池软件选择应用，对 show *（show status/show profile）类的操作语句有深入了解，能够完成大部分的性能问题追查；MySQL 备份技术的深入熟悉，包括灾备还原、对 Binlog 的深入理解，冷热备份，多 IDC 备份等；在 MySQL 原理方面，有更多了解，比如对 MySQL 的工作机制开始阅读部分源码，比如对主从同步（复制）技术的源码学习，或者对某个存储引擎（MyISAM/Innodb/TokuDB）等等的源码学习理解，如果条件允许，可以参考 CSV 引擎开发自己简单的存储引擎来保存一些数据，增强对 MySQL 的理解；在这个过程，如果自己有兴趣，也可以考虑往 DBA 方向发展。MongoDB 层面，可以考虑比如说在写少读多的情况开始在线上应用 MongoDB，或者是做一些线上的数据分析处理的操作，具体场景可以按照工作来，不过核心是要更好的深入理解 RMDBS 和 NoSQL 的不同场景下面的应用，如果条件或者兴趣允许，可以开始深入学习一下 MongoDB 的工作机制。</p>\n<h3 id=\"4-redismemcached-2\"><a class=\"markdownIt-Anchor\" href=\"#4-redismemcached-2\"></a> 4. Redis/Memcached：</h3>\n<p>在第二阶段的基础上面，能够更深入的应用和学习。因为 Memcached 不是特别复杂，建议可以把源码进行阅读，特别是内存管理部分，方便深入理解；Redis 部分，可以多做一些复杂的数据结构的应用（zset 来做排行榜排序操作/事务处理用来保证原子性在秒杀类场景应用之类的使用操作）；多涉及 aof 等同步机制的学习应用，设计一个高可用的 Redis 应用架构和集群；建议可以深入的学习一下 Redis 的源码，把在第二阶段积累的知识都可以应用上，特别可以阅读一下包括核心事件管理、内存管理、内部核心数据结构等充分学习了解一下。如果兴趣允许，可以成为一个 Redis 方面非常专业的使用者。</p>\n<h3 id=\"5-php-2\"><a class=\"markdownIt-Anchor\" href=\"#5-php-2\"></a> 5. PHP：</h3>\n<p>作为基础核心技能，我们在第二阶段的基础上面，需要有更深入的学习和应用。从基本代码应用上面来说，能够解决在 PHP 开发中遇到 95%的问题，了解大部分 PHP 的技巧；对大部分的 PHP 框架能够迅速在一天内上手使用，并且了解各个主流 PHP 框架的优缺点，能够迅速方便项目开发中做技术选型；在配置方面，除了常规第二阶段会的知识，会了解一些比较偏门的配置选项（php auto_prepend_file/auto_append_file），包括扩展中的一些复杂高级配置和原理（比如 memcached 扩展配置中的 memcache.hash_strategy、apc 扩展配置中的 apc.mmap_file_mask/apc.slam_defense/apc.file_update_protection 之类的）；对 php 的工作机制比较了解，包括 php-fpm 工作机制（比如 php-fpm 在不同配置机器下面开启进程数量计算以及原理），对 zend 引擎有基本熟悉（vm/gc/stream 处理），阅读过基本的 PHP 内核源码（或者阅读过相关文章），对 PHP 内部机制的大部分核心数据结构（基础类型/Array/Object）实现有了解，对于核心基础结构（zval/hashtable/gc）有深入学习了解；能够进行基本的 PHP 扩展开发，了解一些扩展开发的中高级知识（minit/rinit 等），熟悉 php 跟 apache/nginx 不同的通信交互方式细节（mod_php/fastcgi）；除了开发 PHP 扩展，可以考虑学习开发 Zend 扩展，从更底层去了解 PHP。</p>\n<h3 id=\"6-cc-2\"><a class=\"markdownIt-Anchor\" href=\"#6-cc-2\"></a> 6. C/C++：</h3>\n<p>在第二阶段基础上面，能够在 C/C<ins>语言方面有更深入的学习了解，能够完成中小型 C/C</ins>系统的开发工作；除了基本第二阶段的基础 C/C<ins>语法和数据结构，也能够学习一些特殊数据结构（b-tree/rb-tree/skiplist/lsm-tree/trie-tree 等）方便在特殊工作中需求；在系统编程方面，熟悉多进程、多线程编程；多进程情况下面了解大部分多进程之间的通信方式，能够灵活选择通信方式（共享内存/信号量/管道等）；多线程编程能够良好的解决锁冲突问题，并且能够进行多线程程序的开发调试工作；同时对网络编程比较熟悉，了解多进程模型/多线程模型/异步网络 IO 模型的差别和选型，熟悉不同异步网络 IO 模型的原理和差异（select/poll/epoll/iocp 等），并且熟悉常见的异步框架（ACE/ICE/libev/libevent/libuv/Boost.ASIO 等）和使用，如果闲暇也可以看看一些国产自己开发的库（比如 muduo）；同时能够设计好的高并发程序架构（leader-follow/master-worker 等）；了解大部分 C/C</ins>后端 Server 开发中的问题（内存管理、日志打印、高并发、前后端通信协议、服务监控），知道各个后端服务 RPC 通信问题（struct/http/thirft/protobuf 等）；能够更熟络的使用 GCC 和 GDB 来开发编译调试程序，在线上程序 core 掉后能够迅速追查跟踪解决问题；通用模块开发方面，可以积累或者开发一些通用的工具或库（比如异步网络框架、日志库、内存池、线程池等），不过开发后是否应用要谨慎，省的埋坑去追 bug；</p>\n<h3 id=\"7-前端-2\"><a class=\"markdownIt-Anchor\" href=\"#7-前端-2\"></a> 7. 前端：</h3>\n<p>深入了解 HTTP 协议（包括各个细致协议特殊协议代码和背后原因，比如 302 静态文件缓存了，502 是 nginx 后面 php 挂了之类的）；除了之前的前端方面的各种框架应用整合能力，前端方面的学习如果有兴趣可以更深入，表现形式是，可以自己开发一些类似 jQuery 的前端框架，或者开发一个富文本编辑器之类的比较琐碎考验 JavaScript 功力；</p>\n<h3 id=\"8-其他领域语言学习\"><a class=\"markdownIt-Anchor\" href=\"#8-其他领域语言学习\"></a> 8. 其他领域语言学习：</h3>\n<p>在基础的 PHP/C/C<ins>语言方面有基本积累，建议在当前阶段可以尝试学习不同的编程语言，看个人兴趣爱好，脚本类语言可以学学 Python/Ruby 之类的，函数式编程语言可以试试 Lisp/Haskell/Scala/Erlang 之类的，静态语言可以试试 Java/Golang，数据统计分析可以了解了解 R 语言，如果想换个视角做后端业务，可以试试 Node.js 还有前面提到的跟 Nginx 结合的 Nginx_Lua 等。学习不同的语言主要是提升自己的视野和解决问题手段的差异，比如会了解除了进程/线程，还有轻量级协程；比如在跨机器通信场景下面，Erlang 的解决方案简单的惊人；比如在不想选择 C/C</ins>的情况下，还有类似高效的 Erlang/Golang 可用等等；主要是提升视野。</p>\n<h3 id=\"9-其他专业方向学习\"><a class=\"markdownIt-Anchor\" href=\"#9-其他专业方向学习\"></a> 9. 其他专业方向学习：</h3>\n<p>在本阶段里面，会除了基本的 LNMP 技能之外，会考虑一些其他领域知识的学习，这些都是可以的，看个人兴趣和长期的目标方向。目前情况能够选择的领域比较多，比如、云计算（分布式存储、分布式计算、虚拟机等），机器学习（数据挖掘、模式识别等，应用到统计、个性化推荐），自然语言处理（中文分词等），搜索引擎技术、图形图像、语音识别等等。除了这些高大上的，也有很多偏工程方面可以学习的地方，比如高性能系统、移动开发（Android/IOS）、计算机安全、嵌入式系统、硬件等方向。</p>\n<h3 id=\"10-系统设计\"><a class=\"markdownIt-Anchor\" href=\"#10-系统设计\"></a> 10. 系统设计：</h3>\n<p>系统设计在第二阶段的基础之上，能够应用掌握的经验技能，设计出比较复杂的中大型系统，能够解决大部分线上的各种复杂系统的问题，完成类似 浏览器 -&gt; CDN -&gt; 负载均衡 -&gt;接入层 -&gt; Nginx+PHP -&gt; 业务缓存 -&gt; 数据库 -&gt; 各路复杂后端 RPC 交互（存储后端、逻辑后端、反作弊后端、外部服务） -&gt; 更多后端 酱紫的复杂业务；能够支撑每天数千万到数亿流量网站的正常开发维护工作。</p>\n<h2 id=\"第四阶段架构阶段-架构师\"><a class=\"markdownIt-Anchor\" href=\"#第四阶段架构阶段-架构师\"></a> 第四阶段：架构阶段 （架构师）</h2>\n<p>ps: 暂时不展开讨论，等下次专门撰文来描述补充本部分内容</p>\n<h2 id=\"第五阶段专家阶段方向领域专家\"><a class=\"markdownIt-Anchor\" href=\"#第五阶段专家阶段方向领域专家\"></a> 第五阶段：专家阶段（方向领域专家）</h2>\n<p>ps：高大上，这块不展开讨论 <sup>_</sup></p>\n<h2 id=\"第六阶段科学家阶段\"><a class=\"markdownIt-Anchor\" href=\"#第六阶段科学家阶段\"></a> 第六阶段：科学家阶段</h2>\n<p>ps：高大上，这块不展开讨论 <sup>_</sup></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjvl5c3y900002wuuep2qkrhz","category_id":"cjvl5c3yo00042wuuwfsttl87","_id":"cjvl5c3z7000i2wuuxg96quqd"},{"post_id":"cjvl5c3yk00022wuuqxsxlj7k","category_id":"cjvl5c3yx000b2wuuekllq9yd","_id":"cjvl5c3zc000p2wuue7zrscl5"},{"post_id":"cjvl5c3yq00062wuu3ug3lsb0","category_id":"cjvl5c3z8000k2wuui2p9yni1","_id":"cjvl5c3zi000w2wuuviuhwq51"},{"post_id":"cjvl5c3yt00082wuuf61o1lgo","category_id":"cjvl5c3z8000k2wuui2p9yni1","_id":"cjvl5c3zm00112wuuc00vd6c0"},{"post_id":"cjvl5c3yv000a2wuuiougdbpo","category_id":"cjvl5c3zi000v2wuuftbfdg3b","_id":"cjvl5c3zq00172wuu61wkfjl0"},{"post_id":"cjvl5c3yz000f2wuuze34ur7r","category_id":"cjvl5c3zm00122wuu8l0ne12a","_id":"cjvl5c3zv001e2wuub6jfe3mf"},{"post_id":"cjvl5c3z5000h2wuu10dm9jv5","category_id":"cjvl5c3zr00192wuup595mesz","_id":"cjvl5c401001k2wuu5ohxs5cx"},{"post_id":"cjvl5c3z9000m2wuudwscxv0m","category_id":"cjvl5c3zm00122wuu8l0ne12a","_id":"cjvl5c405001q2wuuen84cfgw"},{"post_id":"cjvl5c3zb000o2wuuko6ui8ss","category_id":"cjvl5c3zm00122wuu8l0ne12a","_id":"cjvl5c409001w2wuus6ggiil2"},{"post_id":"cjvl5c3zf000s2wuul91uqj6m","category_id":"cjvl5c404001p2wuuu2ukl4ko","_id":"cjvl5c40e00252wuup5t2orre"},{"post_id":"cjvl5c3zg000u2wuuj7g1v7ly","category_id":"cjvl5c404001p2wuuu2ukl4ko","_id":"cjvl5c40i002c2wuuesrymcxh"},{"post_id":"cjvl5c3zj000y2wuudwwv2gpk","category_id":"cjvl5c404001p2wuuu2ukl4ko","_id":"cjvl5c40m002i2wuugx2mggo3"},{"post_id":"cjvl5c3zk00102wuuuulc9zrq","category_id":"cjvl5c40i002b2wuufyyon3a2","_id":"cjvl5c40q002o2wuuq2p4okr9"},{"post_id":"cjvl5c3zn00142wuuz8t40z67","category_id":"cjvl5c40n002j2wuublm5ilk8","_id":"cjvl5c40v002v2wuusyzflkng"},{"post_id":"cjvl5c40t002s2wuuvltdyg0r","category_id":"cjvl5c404001p2wuuu2ukl4ko","_id":"cjvl5c41000322wuuei4qs5kv"},{"post_id":"cjvl5c3zo00162wuumwgbbkof","category_id":"cjvl5c40s002q2wuuix1z8r5h","_id":"cjvl5c41200362wuuw5lfbui6"},{"post_id":"cjvl5c3zq00182wuuou1qkjlr","category_id":"cjvl5c40s002q2wuuix1z8r5h","_id":"cjvl5c41500392wuu1d5ifazp"},{"post_id":"cjvl5c41100352wuuytcmeaku","category_id":"cjvl5c404001p2wuuu2ukl4ko","_id":"cjvl5c418003d2wuup43bv141"},{"post_id":"cjvl5c3zt001c2wuut99ddcyd","category_id":"cjvl5c41000332wuu9wi3ke8m","_id":"cjvl5c419003f2wuuuf9beait"},{"post_id":"cjvl5c41400382wuuzf3tn7zh","category_id":"cjvl5c404001p2wuuu2ukl4ko","_id":"cjvl5c41a003i2wuuqe4u5g0i"},{"post_id":"cjvl5c416003b2wuu1uuvrh75","category_id":"cjvl5c404001p2wuuu2ukl4ko","_id":"cjvl5c41c003l2wuu86opz559"},{"post_id":"cjvl5c3zu001d2wuugsjyaftg","category_id":"cjvl5c41000332wuu9wi3ke8m","_id":"cjvl5c41d003n2wuuz3ca3nqj"},{"post_id":"cjvl5c3zx001h2wuultm0nk2a","category_id":"cjvl5c41000332wuu9wi3ke8m","_id":"cjvl5c41e003q2wuumapfo773"},{"post_id":"cjvl5c3zz001i2wuu608d1jyc","category_id":"cjvl5c41b003j2wuu9ydgbt6o","_id":"cjvl5c41h003v2wuuxicwy7ns"},{"post_id":"cjvl5c402001m2wuu7libzzzl","category_id":"cjvl5c41b003j2wuu9ydgbt6o","_id":"cjvl5c41j003z2wuu7g31upm2"},{"post_id":"cjvl5c403001o2wuu4antpzhe","category_id":"cjvl5c41b003j2wuu9ydgbt6o","_id":"cjvl5c41k00422wuufrywli53"},{"post_id":"cjvl5c406001t2wuu6ijxtvqv","category_id":"cjvl5c41i003y2wuujcpwybr7","_id":"cjvl5c41n00472wuuja308dgu"},{"post_id":"cjvl5c407001v2wuu3nfivx3g","category_id":"cjvl5c41i003y2wuujcpwybr7","_id":"cjvl5c41q00492wuu7xk57vnl"},{"post_id":"cjvl5c40a00202wuulxicfvjh","category_id":"cjvl5c41m00462wuuj72l87j8","_id":"cjvl5c41s004e2wuu23en71qf"},{"post_id":"cjvl5c40c00222wuub4hheghe","category_id":"cjvl5c41m00462wuuj72l87j8","_id":"cjvl5c41u004h2wuujw1zm35q"},{"post_id":"cjvl5c40e00262wuurwgvqy1r","category_id":"cjvl5c41s004d2wuuyfo0kv15","_id":"cjvl5c41w004m2wuu96opseqe"},{"post_id":"cjvl5c40h00292wuukwn8mov3","category_id":"cjvl5c41u004i2wuupljjqgv8","_id":"cjvl5c41y004r2wuusg4t1nfq"},{"post_id":"cjvl5c40j002d2wuu93qtmu6d","category_id":"cjvl5c41u004i2wuupljjqgv8","_id":"cjvl5c41z004v2wuuqrtb2uyj"},{"post_id":"cjvl5c40l002g2wuuu9q5cciw","category_id":"cjvl5c41u004i2wuupljjqgv8","_id":"cjvl5c420004w2wuui1onz3sk"},{"post_id":"cjvl5c40n002k2wuu0qfe311b","category_id":"cjvl5c41z004u2wuus8t870xa","_id":"cjvl5c42500532wuur84zoret"},{"post_id":"cjvl5c40p002n2wuuofawl999","category_id":"cjvl5c41z004u2wuus8t870xa","_id":"cjvl5c42700562wuuluv0aa7y"},{"post_id":"cjvl5c40r002p2wuuofowsfuc","category_id":"cjvl5c41u004i2wuupljjqgv8","_id":"cjvl5c42800592wuubb531q95"},{"post_id":"cjvl5c40u002u2wuuuhh1hdu7","category_id":"cjvl5c42600552wuudkjwc4qy","_id":"cjvl5c429005c2wuucjkm9jru"},{"post_id":"cjvl5c40x002z2wuu7vi9ti15","category_id":"cjvl5c428005a2wuuyxv1mm1z","_id":"cjvl5c42b005h2wuusxh0sm0m"},{"post_id":"cjvl5c40z00312wuum7lccy1c","category_id":"cjvl5c429005d2wuu3o3un86m","_id":"cjvl5c42c005k2wuu6xcz27sp"},{"post_id":"cjvl5c42t005y2wuu56yxzx1s","category_id":"cjvl5c3zm00122wuu8l0ne12a","_id":"cjvl5c43300672wuut4gfzffu"},{"post_id":"cjvl5c42v00602wuutcwp6yv9","category_id":"cjvl5c40i002b2wuufyyon3a2","_id":"cjvl5c43500692wuu4k2b0w4p"},{"post_id":"cjvl5c42z00632wuu44xg4dbe","category_id":"cjvl5c41000332wuu9wi3ke8m","_id":"cjvl5c437006c2wuuiwfhz1pc"},{"post_id":"cjvl5c43200662wuuf4dq3qgf","category_id":"cjvl5c41u004i2wuupljjqgv8","_id":"cjvl5c438006e2wuuvcj8pjyd"},{"post_id":"cjvl5c43400682wuuw92liac9","category_id":"cjvl5c429005d2wuu3o3un86m","_id":"cjvl5c43a006h2wuu2ylplahl"},{"post_id":"cjvl5c436006b2wuuqekdfoje","category_id":"cjvl5c429005d2wuu3o3un86m","_id":"cjvl5c43a006j2wuuzwzipm4k"},{"post_id":"cjvl5c43j006o2wuutbooegbl","category_id":"cjvl5c41z004u2wuus8t870xa","_id":"cjvl5c43q006v2wuu5yhx9njk"},{"post_id":"cjvl5c43l006p2wuulyo22cyd","category_id":"cjvl5c41u004i2wuupljjqgv8","_id":"cjvl5c43s006x2wuu0j7uqz0j"},{"post_id":"cjvl5c43n006r2wuuzgtupzgd","category_id":"cjvl5c41z004u2wuus8t870xa","_id":"cjvl5c43t00702wuuazxvdv9j"},{"post_id":"cjvl5c43p006u2wuud26xtsii","category_id":"cjvl5c41u004i2wuupljjqgv8","_id":"cjvl5c43t00722wuu0x40qw93"}],"PostTag":[{"post_id":"cjvl5c3y900002wuuep2qkrhz","tag_id":"cjvl5c3yp00052wuuz995xh3b","_id":"cjvl5c3yz000e2wuuiyhagrda"},{"post_id":"cjvl5c3yk00022wuuqxsxlj7k","tag_id":"cjvl5c3yx000c2wuur2c9kyjr","_id":"cjvl5c3za000n2wuuyydnqv0b"},{"post_id":"cjvl5c3yq00062wuu3ug3lsb0","tag_id":"cjvl5c3z9000l2wuud9hjxti5","_id":"cjvl5c3zg000t2wuuq51y9dnh"},{"post_id":"cjvl5c3yt00082wuuf61o1lgo","tag_id":"cjvl5c3z9000l2wuud9hjxti5","_id":"cjvl5c3zk000z2wuu1xugbpgg"},{"post_id":"cjvl5c3yv000a2wuuiougdbpo","tag_id":"cjvl5c3zi000x2wuu4eln8qvx","_id":"cjvl5c3zo00152wuuzzi1klms"},{"post_id":"cjvl5c3yz000f2wuuze34ur7r","tag_id":"cjvl5c3zm00132wuu3c52aqb0","_id":"cjvl5c3zs001b2wuuxc5eamso"},{"post_id":"cjvl5c3z5000h2wuu10dm9jv5","tag_id":"cjvl5c3zs001a2wuugdclh6qm","_id":"cjvl5c403001n2wuuiy00zfgc"},{"post_id":"cjvl5c3z5000h2wuu10dm9jv5","tag_id":"cjvl5c3zw001g2wuu77e0wxsk","_id":"cjvl5c405001r2wuud026kzyk"},{"post_id":"cjvl5c3zz001i2wuu608d1jyc","tag_id":"cjvl5c3z9000l2wuud9hjxti5","_id":"cjvl5c407001u2wuu1u9tza63"},{"post_id":"cjvl5c402001m2wuu7libzzzl","tag_id":"cjvl5c3z9000l2wuud9hjxti5","_id":"cjvl5c409001x2wuu6w76k49e"},{"post_id":"cjvl5c3z9000m2wuudwscxv0m","tag_id":"cjvl5c3zm00132wuu3c52aqb0","_id":"cjvl5c40b00212wuug43j4817"},{"post_id":"cjvl5c403001o2wuu4antpzhe","tag_id":"cjvl5c3z9000l2wuud9hjxti5","_id":"cjvl5c40d00232wuu408kqhqz"},{"post_id":"cjvl5c406001t2wuu6ijxtvqv","tag_id":"cjvl5c3zi000x2wuu4eln8qvx","_id":"cjvl5c40g00282wuu7ngcebbh"},{"post_id":"cjvl5c3zb000o2wuuko6ui8ss","tag_id":"cjvl5c405001s2wuuabrbyiar","_id":"cjvl5c40i002a2wuuffqvypnc"},{"post_id":"cjvl5c407001v2wuu3nfivx3g","tag_id":"cjvl5c3zi000x2wuu4eln8qvx","_id":"cjvl5c40k002f2wuuxu1gxk2t"},{"post_id":"cjvl5c3zf000s2wuul91uqj6m","tag_id":"cjvl5c40a001z2wuuydr802bt","_id":"cjvl5c40m002h2wuulvjxk8zq"},{"post_id":"cjvl5c3zg000u2wuuj7g1v7ly","tag_id":"cjvl5c40a001z2wuuydr802bt","_id":"cjvl5c40p002m2wuu9p9dbtty"},{"post_id":"cjvl5c3zj000y2wuudwwv2gpk","tag_id":"cjvl5c40a001z2wuuydr802bt","_id":"cjvl5c40u002t2wuudovs5jfz"},{"post_id":"cjvl5c3zj000y2wuudwwv2gpk","tag_id":"cjvl5c40o002l2wuuuca5wgtz","_id":"cjvl5c40w002w2wuu2fl8igfd"},{"post_id":"cjvl5c3zk00102wuuuulc9zrq","tag_id":"cjvl5c40s002r2wuuhcu057ez","_id":"cjvl5c40y00302wuu7js4mmv3"},{"post_id":"cjvl5c3zn00142wuuz8t40z67","tag_id":"cjvl5c40x002y2wuu0xnwqugt","_id":"cjvl5c41300372wuuxrrr8ul4"},{"post_id":"cjvl5c3zo00162wuumwgbbkof","tag_id":"cjvl5c41100342wuuymrc9r5t","_id":"cjvl5c41a003h2wuu27lczeb1"},{"post_id":"cjvl5c3zo00162wuumwgbbkof","tag_id":"cjvl5c40o002l2wuuuca5wgtz","_id":"cjvl5c41b003k2wuu0b37pkqu"},{"post_id":"cjvl5c3zq00182wuuou1qkjlr","tag_id":"cjvl5c3yx000c2wuur2c9kyjr","_id":"cjvl5c41d003o2wuuy2schzqx"},{"post_id":"cjvl5c3zq00182wuuou1qkjlr","tag_id":"cjvl5c419003g2wuu2ed62i3q","_id":"cjvl5c41f003r2wuu9sm32qxw"},{"post_id":"cjvl5c3zt001c2wuut99ddcyd","tag_id":"cjvl5c41c003m2wuubkezxafr","_id":"cjvl5c41g003t2wuuqn2zsibe"},{"post_id":"cjvl5c3zu001d2wuugsjyaftg","tag_id":"cjvl5c41f003s2wuuw3c91xz5","_id":"cjvl5c41i003x2wuud5dh70vt"},{"post_id":"cjvl5c3zx001h2wuultm0nk2a","tag_id":"cjvl5c405001s2wuuabrbyiar","_id":"cjvl5c41k00412wuu9c1lsdt6"},{"post_id":"cjvl5c40a00202wuulxicfvjh","tag_id":"cjvl5c41j00402wuuwrp3na3s","_id":"cjvl5c41m00452wuud8xommjb"},{"post_id":"cjvl5c40c00222wuub4hheghe","tag_id":"cjvl5c41l00442wuu3cbi6hev","_id":"cjvl5c41q004a2wuuyixclls9"},{"post_id":"cjvl5c40e00262wuurwgvqy1r","tag_id":"cjvl5c41o00482wuu25dz5x5k","_id":"cjvl5c41t004f2wuua7eh1cnm"},{"post_id":"cjvl5c40h00292wuukwn8mov3","tag_id":"cjvl5c41s004c2wuutkig0dsk","_id":"cjvl5c41u004j2wuucvwkamz8"},{"post_id":"cjvl5c40h00292wuukwn8mov3","tag_id":"cjvl5c405001s2wuuabrbyiar","_id":"cjvl5c41v004k2wuu5w3am5z5"},{"post_id":"cjvl5c40j002d2wuu93qtmu6d","tag_id":"cjvl5c41t004g2wuun5ziqtte","_id":"cjvl5c41w004o2wuutwx70k5a"},{"post_id":"cjvl5c40l002g2wuuu9q5cciw","tag_id":"cjvl5c41v004l2wuu8x2uki5v","_id":"cjvl5c41y004s2wuumht6kb0d"},{"post_id":"cjvl5c40n002k2wuu0qfe311b","tag_id":"cjvl5c41x004p2wuuyc7782jr","_id":"cjvl5c423004z2wuuqk7w5ek4"},{"post_id":"cjvl5c40n002k2wuu0qfe311b","tag_id":"cjvl5c41z004t2wuuhip8z36d","_id":"cjvl5c42400502wuul58b8aw4"},{"post_id":"cjvl5c40p002n2wuuofawl999","tag_id":"cjvl5c41x004p2wuuyc7782jr","_id":"cjvl5c42600542wuu0efmzhb6"},{"post_id":"cjvl5c40r002p2wuuofowsfuc","tag_id":"cjvl5c42500512wuusyq5pk9d","_id":"cjvl5c42800582wuumcnf88h5"},{"post_id":"cjvl5c40t002s2wuuvltdyg0r","tag_id":"cjvl5c42700572wuugwfc62uo","_id":"cjvl5c42a005f2wuupkw3sm89"},{"post_id":"cjvl5c40t002s2wuuvltdyg0r","tag_id":"cjvl5c429005b2wuua9mc8h1q","_id":"cjvl5c42b005g2wuuntvl6vdp"},{"post_id":"cjvl5c40u002u2wuuuhh1hdu7","tag_id":"cjvl5c42a005e2wuu3i7e07p0","_id":"cjvl5c42b005j2wuutyspmh5t"},{"post_id":"cjvl5c40x002z2wuu7vi9ti15","tag_id":"cjvl5c42b005i2wuu83sas0u5","_id":"cjvl5c42d005m2wuuizffl6i7"},{"post_id":"cjvl5c40z00312wuum7lccy1c","tag_id":"cjvl5c42c005l2wuu6jj0zgy3","_id":"cjvl5c42d005o2wuuw8d2dlf9"},{"post_id":"cjvl5c41100352wuuytcmeaku","tag_id":"cjvl5c42d005n2wuuw7y3sb5h","_id":"cjvl5c42f005r2wuufvljh2ly"},{"post_id":"cjvl5c41100352wuuytcmeaku","tag_id":"cjvl5c42e005p2wuu8sigosbv","_id":"cjvl5c42f005s2wuu6gh32y1a"},{"post_id":"cjvl5c41400382wuuzf3tn7zh","tag_id":"cjvl5c42d005n2wuuw7y3sb5h","_id":"cjvl5c42g005v2wuuc46qduvr"},{"post_id":"cjvl5c41400382wuuzf3tn7zh","tag_id":"cjvl5c429005b2wuua9mc8h1q","_id":"cjvl5c42h005w2wuujgb8tdn1"},{"post_id":"cjvl5c416003b2wuu1uuvrh75","tag_id":"cjvl5c42g005u2wuue20bvh29","_id":"cjvl5c42h005x2wuuo5471uhm"},{"post_id":"cjvl5c42v00602wuutcwp6yv9","tag_id":"cjvl5c3yp00052wuuz995xh3b","_id":"cjvl5c43100652wuuz2z07t78"},{"post_id":"cjvl5c43400682wuuw92liac9","tag_id":"cjvl5c42c005l2wuu6jj0zgy3","_id":"cjvl5c438006d2wuusukb69ly"},{"post_id":"cjvl5c436006b2wuuqekdfoje","tag_id":"cjvl5c42c005l2wuu6jj0zgy3","_id":"cjvl5c439006g2wuu4l0cz90q"},{"post_id":"cjvl5c42t005y2wuu56yxzx1s","tag_id":"cjvl5c42y00622wuu9gp9puo2","_id":"cjvl5c43a006i2wuua8s2ffh5"},{"post_id":"cjvl5c42t005y2wuu56yxzx1s","tag_id":"cjvl5c435006a2wuuozvpkjt1","_id":"cjvl5c43b006l2wuurqa7hlgy"},{"post_id":"cjvl5c42z00632wuu44xg4dbe","tag_id":"cjvl5c439006f2wuuue5alh1j","_id":"cjvl5c43b006m2wuucj9nxv07"},{"post_id":"cjvl5c43200662wuuf4dq3qgf","tag_id":"cjvl5c43b006k2wuu27c0mm8f","_id":"cjvl5c43d006n2wuu3yguh38k"},{"post_id":"cjvl5c43j006o2wuutbooegbl","tag_id":"cjvl5c41x004p2wuuyc7782jr","_id":"cjvl5c43n006q2wuusa7w0po5"},{"post_id":"cjvl5c43j006o2wuutbooegbl","tag_id":"cjvl5c41z004t2wuuhip8z36d","_id":"cjvl5c43p006t2wuua7bilcs6"},{"post_id":"cjvl5c43n006r2wuuzgtupzgd","tag_id":"cjvl5c41x004p2wuuyc7782jr","_id":"cjvl5c43r006w2wuuq0dp71qj"},{"post_id":"cjvl5c43n006r2wuuzgtupzgd","tag_id":"cjvl5c41z004t2wuuhip8z36d","_id":"cjvl5c43s006y2wuuu4relyei"},{"post_id":"cjvl5c43l006p2wuulyo22cyd","tag_id":"cjvl5c43p006s2wuu5ebq6ti8","_id":"cjvl5c43t00712wuu7rtnp6hw"},{"post_id":"cjvl5c43l006p2wuulyo22cyd","tag_id":"cjvl5c41x004p2wuuyc7782jr","_id":"cjvl5c43u00732wuut19agx7o"},{"post_id":"cjvl5c43p006u2wuud26xtsii","tag_id":"cjvl5c43s006z2wuut3vmno1p","_id":"cjvl5c43u00742wuuuhnw0w4j"}],"Tag":[{"name":"http","_id":"cjvl5c3yp00052wuuz995xh3b"},{"name":"web","_id":"cjvl5c3yx000c2wuur2c9kyjr"},{"name":"movie","_id":"cjvl5c3z9000l2wuud9hjxti5"},{"name":"mysql","_id":"cjvl5c3zi000x2wuu4eln8qvx"},{"name":"docker","_id":"cjvl5c3zm00132wuu3c52aqb0"},{"name":"算法","_id":"cjvl5c3zs001a2wuugdclh6qm"},{"name":"全排列","_id":"cjvl5c3zw001g2wuu77e0wxsk"},{"name":"镜像","_id":"cjvl5c405001s2wuuabrbyiar"},{"name":"git","_id":"cjvl5c40a001z2wuuydr802bt"},{"name":"github","_id":"cjvl5c40o002l2wuuuca5wgtz"},{"name":"oauth","_id":"cjvl5c40s002r2wuuhcu057ez"},{"name":"面经","_id":"cjvl5c40x002y2wuu0xnwqugt"},{"name":"hexo","_id":"cjvl5c41100342wuuymrc9r5t"},{"name":"React","_id":"cjvl5c419003g2wuu2ed62i3q"},{"name":"上线","_id":"cjvl5c41c003m2wuubkezxafr"},{"name":"ssh","_id":"cjvl5c41f003s2wuuw3c91xz5"},{"name":"适配器模式","_id":"cjvl5c41j00402wuuwrp3na3s"},{"name":"观察者模式","_id":"cjvl5c41l00442wuu3cbi6hev"},{"name":"book","_id":"cjvl5c41o00482wuu25dz5x5k"},{"name":"composer","_id":"cjvl5c41s004c2wuutkig0dsk"},{"name":"curl","_id":"cjvl5c41t004g2wuun5ziqtte"},{"name":"email","_id":"cjvl5c41v004l2wuu8x2uki5v"},{"name":"thinkphp5","_id":"cjvl5c41x004p2wuuyc7782jr"},{"name":"微信小程序","_id":"cjvl5c41z004t2wuuhip8z36d"},{"name":"无限级分类","_id":"cjvl5c42500512wuusyq5pk9d"},{"name":"phpstrom","_id":"cjvl5c42700572wuugwfc62uo"},{"name":"xdebug","_id":"cjvl5c429005b2wuua9mc8h1q"},{"name":"python","_id":"cjvl5c42a005e2wuu3i7e07p0"},{"name":"redis","_id":"cjvl5c42b005i2wuu83sas0u5"},{"name":"工作总结","_id":"cjvl5c42c005l2wuu6jj0zgy3"},{"name":"vscoode","_id":"cjvl5c42d005n2wuuw7y3sb5h"},{"name":"plugin","_id":"cjvl5c42e005p2wuu8sigosbv"},{"name":"tool","_id":"cjvl5c42g005u2wuue20bvh29"},{"name":"Docker","_id":"cjvl5c42y00622wuu9gp9puo2"},{"name":"DevOps","_id":"cjvl5c435006a2wuuozvpkjt1"},{"name":"crontab","_id":"cjvl5c439006f2wuuue5alh1j"},{"name":"optimize","_id":"cjvl5c43b006k2wuu27c0mm8f"},{"name":"sphinx","_id":"cjvl5c43p006s2wuu5ebq6ti8"},{"name":"路径","_id":"cjvl5c43s006z2wuut3vmno1p"}]}}